################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.javax.measure.spi
import javawrappers.java.lang
import javawrappers.java.time
import javawrappers.java.util
import javawrappers.tec.uom.se
import javawrappers.tec.uom.se.spi

from jpype.types import *
from typing import Union

from typing import overload

class DimensionalModel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def current() -> javawrappers.tec.uom.se.spi.DimensionalModel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDimensionalTransform(self, arg0: javawrappers.javax.measure.Dimension, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def getFundamentalDimension(self, arg0: javawrappers.javax.measure.Dimension, ) -> javawrappers.javax.measure.Dimension: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Range:
	def getResolution(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hasMinimum(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinimum(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasMaximum(self, ) -> Union[int, JBoolean]: ...
	def getMaximum(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class Measurement:
	def getInstant(self, ) -> javawrappers.java.time.Instant: ...
	def getQuantity(self, ) -> javawrappers.javax.measure.Quantity: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.tec.uom.se.ComparableQuantity, ) -> javawrappers.tec.uom.se.spi.Measurement: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.tec.uom.se.ComparableQuantity, arg1: javawrappers.java.time.Instant, ) -> javawrappers.tec.uom.se.spi.Measurement: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.java.time.Instant, ) -> javawrappers.tec.uom.se.spi.Measurement: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.spi.Measurement: ...


class DefaultServiceProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getQuantityFactory(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.spi.QuantityFactory: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def available() -> javawrappers.java.util.List: ...
	def getUnitFormatService(self, ) -> javawrappers.javax.measure.spi.UnitFormatService: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.spi.ServiceProvider, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSystemOfUnitsService(self, ) -> javawrappers.javax.measure.spi.SystemOfUnitsService: ...
	@staticmethod
	def current() -> javawrappers.javax.measure.spi.ServiceProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setCurrent(arg0: javawrappers.javax.measure.spi.ServiceProvider, ) -> javawrappers.javax.measure.spi.ServiceProvider: ...


