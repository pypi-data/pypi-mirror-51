################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.util
import javawrappers.java.util.concurrent
import javawrappers.java.util.stream
import javawrappers.java.nio.channels
import javawrappers.java.nio.file
import javawrappers.java.nio.charset
import javawrappers.java.nio.file.spi
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class FileSystemNotFoundException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileVisitResult:
	CONTINUE: FileVisitResult = ...
	TERMINATE: FileVisitResult = ...
	SKIP_SUBTREE: FileVisitResult = ...
	SKIP_SIBLINGS: FileVisitResult = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.FileVisitResult, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class NotDirectoryException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileSystemLoopException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AtomicMoveNotSupportedException:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AccessMode:
	READ: AccessMode = ...
	WRITE: AccessMode = ...
	EXECUTE: AccessMode = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.AccessMode: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.AccessMode, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class WatchEvent:
	class Modifier:
		def name(self, ) -> javawrappers.java.lang.String: ...


	class Kind:
		def name(self, ) -> javawrappers.java.lang.String: ...
		def type(self, ) -> javawrappers.java.lang.Class: ...


	def kind(self, ) -> javawrappers.java.nio.file.WatchEvent.Kind: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	def count(self, ) -> Union[int, JInt]: ...
	def context(self, ) -> javawrappers.java.lang.Object: ...
	def type(self, ) -> javawrappers.java.lang.Class: ...


class WatchService:
	def take(self, ) -> javawrappers.java.nio.file.WatchKey: ...
	@overload
	def poll(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> javawrappers.java.nio.file.WatchKey: ...
	@overload
	def poll(self, ) -> javawrappers.java.nio.file.WatchKey: ...
	def close(self, ) -> None: ...


class FileSystemAlreadyExistsException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class StandardCopyOption:
	REPLACE_EXISTING: StandardCopyOption = ...
	COPY_ATTRIBUTES: StandardCopyOption = ...
	ATOMIC_MOVE: StandardCopyOption = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.StandardCopyOption: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.StandardCopyOption, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ReadOnlyFileSystemException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileSystems:
	class DefaultFileSystemHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BuiltinFileSystemHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def newFileSystem(arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.nio.file.FileSystem: ...
	@overload
	@staticmethod
	def newFileSystem(arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.nio.file.FileSystem: ...
	@overload
	@staticmethod
	def newFileSystem(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.nio.file.FileSystem: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.java.nio.file.FileSystem: ...
	@staticmethod
	def getFileSystem(arg0: javawrappers.java.net.URI, ) -> javawrappers.java.nio.file.FileSystem: ...
	def notify(self, ) -> None: ...


class SimpleFileVisitor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def postVisitDirectory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.IOException, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def visitFile(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.file.attribute.BasicFileAttributes, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def visitFileFailed(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.IOException, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def preVisitDirectory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.file.attribute.BasicFileAttributes, ) -> javawrappers.java.nio.file.FileVisitResult: ...


class CopyOption:


class Path:
	def getName(self, arg0: Union[int, JInt], ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def resolve(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def resolve(self, arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def resolveSibling(self, arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def resolveSibling(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.Path: ...
	def subpath(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def normalize(self, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.net.URI, ) -> javawrappers.java.nio.file.Path: ...
	def relativize(self, arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.Path: ...
	def getRoot(self, ) -> javawrappers.java.nio.file.Path: ...
	def getFileName(self, ) -> javawrappers.java.nio.file.Path: ...
	def getParent(self, ) -> javawrappers.java.nio.file.Path: ...
	def getNameCount(self, ) -> Union[int, JInt]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def toUri(self, ) -> javawrappers.java.net.URI: ...
	def toAbsolutePath(self, ) -> javawrappers.java.nio.file.Path: ...
	def getFileSystem(self, ) -> javawrappers.java.nio.file.FileSystem: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toFile(self, ) -> javawrappers.java.io.File: ...
	def toRealPath(self, *arg0: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def endsWith(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def endsWith(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	def isAbsolute(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.file.WatchService, *arg1: javawrappers.java.nio.file.WatchEvent.Kind, ) -> javawrappers.java.nio.file.WatchKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.file.WatchService, arg1: JArray(javawrappers.java.nio.file.WatchEvent.Kind, 1), *arg2: javawrappers.java.nio.file.WatchEvent.Modifier, ) -> javawrappers.java.nio.file.WatchKey: ...
	@overload
	def startsWith(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@overload
	def startsWith(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class NoSuchFileException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class WatchKey:
	def cancel(self, ) -> None: ...
	def watchable(self, ) -> javawrappers.java.nio.file.Watchable: ...
	def pollEvents(self, ) -> javawrappers.java.util.List: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> Union[int, JBoolean]: ...


class ClosedWatchServiceException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class StandardWatchEventKinds:
	class StdWatchEventKind:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def type(self, ) -> javawrappers.java.lang.Class: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...


class DirectoryIteratorException:
	def __init__(self, arg0: javawrappers.java.io.IOException, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def getCause(self, ) -> javawrappers.java.io.IOException: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class StandardOpenOption:
	READ: StandardOpenOption = ...
	WRITE: StandardOpenOption = ...
	APPEND: StandardOpenOption = ...
	TRUNCATE_EXISTING: StandardOpenOption = ...
	CREATE: StandardOpenOption = ...
	CREATE_NEW: StandardOpenOption = ...
	DELETE_ON_CLOSE: StandardOpenOption = ...
	SPARSE: StandardOpenOption = ...
	SYNC: StandardOpenOption = ...
	DSYNC: StandardOpenOption = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.StandardOpenOption: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.StandardOpenOption, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ClosedDirectoryStreamException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileSystemException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class OpenOption:


class ProviderNotFoundException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AccessDeniedException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Watchable:
	@overload
	def register(self, arg0: javawrappers.java.nio.file.WatchService, arg1: JArray(javawrappers.java.nio.file.WatchEvent.Kind, 1), *arg2: javawrappers.java.nio.file.WatchEvent.Modifier, ) -> javawrappers.java.nio.file.WatchKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.file.WatchService, *arg1: javawrappers.java.nio.file.WatchEvent.Kind, ) -> javawrappers.java.nio.file.WatchKey: ...


class DirectoryStream:
	class Filter:
		def accept(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def accept(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class FileVisitor:
	def postVisitDirectory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.IOException, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def visitFile(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.file.attribute.BasicFileAttributes, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def visitFileFailed(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.IOException, ) -> javawrappers.java.nio.file.FileVisitResult: ...
	def preVisitDirectory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.file.attribute.BasicFileAttributes, ) -> javawrappers.java.nio.file.FileVisitResult: ...


class Files:
	class FileTypeDetectors:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AcceptAllFilter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@overload
		def accept(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
		@overload
		def accept(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


	@staticmethod
	def isSameFile(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getPosixFilePermissions(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getFileAttributeView(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.FileAttributeView: ...
	@staticmethod
	def getOwner(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	@staticmethod
	def createFile(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def setOwner(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.attribute.UserPrincipal, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def createLink(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def newInputStream(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.io.InputStream: ...
	@staticmethod
	def isSymbolicLink(arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def find(arg0: javawrappers.java.nio.file.Path, arg1: Union[int, JInt], arg2: javawrappers.java.util.function.BiPredicate, *arg3: javawrappers.java.nio.file.FileVisitOption, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def newOutputStream(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	@staticmethod
	def readAttributes(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
	@overload
	@staticmethod
	def readAttributes(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def createDirectory(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def isExecutable(arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def write(arg0: javawrappers.java.nio.file.Path, arg1: JArray(JByte, 1), *arg2: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def write(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.Iterable, *arg2: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def write(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.Iterable, arg2: javawrappers.java.nio.charset.Charset, *arg3: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def createDirectories(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def newBufferedReader(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.io.BufferedReader: ...
	@overload
	@staticmethod
	def newBufferedReader(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.io.BufferedReader: ...
	@staticmethod
	def probeContentType(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def createTempFile(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def createTempFile(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def list(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def accept(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@overload
	def accept(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def size(arg0: javawrappers.java.nio.file.Path, ) -> Union[long, JLong]: ...
	@staticmethod
	def isReadable(arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isDirectory(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newByteChannel(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	@overload
	@staticmethod
	def newByteChannel(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	@staticmethod
	def getFileStore(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.FileStore: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def createSymbolicLink(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def readAllLines(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def readAllLines(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def isWritable(arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def delete(arg0: javawrappers.java.nio.file.Path, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def setAttribute(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, *arg3: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def getAttribute(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def setPosixFilePermissions(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.nio.file.Path: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def newBufferedWriter(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, *arg2: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.io.BufferedWriter: ...
	@overload
	@staticmethod
	def newBufferedWriter(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.io.BufferedWriter: ...
	@staticmethod
	def readAllBytes(arg0: javawrappers.java.nio.file.Path, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.CopyOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.CopyOption, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def lines(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	@staticmethod
	def lines(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def move(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.CopyOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def createTempDirectory(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def createTempDirectory(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def deleteIfExists(arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def readString(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def readString(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def notExists(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isRegularFile(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newDirectoryStream(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.DirectoryStream.Filter, ) -> javawrappers.java.nio.file.DirectoryStream: ...
	@overload
	@staticmethod
	def newDirectoryStream(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.DirectoryStream: ...
	@overload
	@staticmethod
	def newDirectoryStream(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.DirectoryStream: ...
	@staticmethod
	def setLastModifiedTime(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def getLastModifiedTime(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	@staticmethod
	def readSymbolicLink(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def isHidden(arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def walkFileTree(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, arg2: Union[int, JInt], arg3: javawrappers.java.nio.file.FileVisitor, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def walkFileTree(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.FileVisitor, ) -> javawrappers.java.nio.file.Path: ...
	@staticmethod
	def exists(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.LinkOption, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeString(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.CharSequence, arg2: javawrappers.java.nio.charset.Charset, *arg3: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def writeString(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.CharSequence, *arg2: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def walk(arg0: javawrappers.java.nio.file.Path, arg1: Union[int, JInt], *arg2: javawrappers.java.nio.file.FileVisitOption, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	@staticmethod
	def walk(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.FileVisitOption, ) -> javawrappers.java.util.stream.Stream: ...


class InvalidPathException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getInput(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileVisitOption:
	FOLLOW_LINKS: FileVisitOption = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.FileVisitOption: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.FileVisitOption, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PathMatcher:
	def matches(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...


class ClosedFileSystemException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileStore:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getUsableSpace(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def type(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getTotalSpace(self, ) -> Union[long, JLong]: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getBlockSize(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def supportsFileAttributeView(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def supportsFileAttributeView(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnallocatedSpace(self, ) -> Union[long, JLong]: ...
	def getFileStoreAttributeView(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.nio.file.attribute.FileStoreAttributeView: ...


class DirectoryNotEmptyException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LinkPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ProviderMismatchException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SecureDirectoryStream:
	def deleteFile(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newByteChannel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def move(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.file.SecureDirectoryStream, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def getFileAttributeView(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.nio.file.attribute.FileAttributeView: ...
	@overload
	def getFileAttributeView(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.FileAttributeView: ...
	def newDirectoryStream(self, arg0: javawrappers.java.lang.Object, *arg1: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.SecureDirectoryStream: ...
	def close(self, ) -> None: ...
	def deleteDirectory(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


class NotLinkException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileSystem:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def supportedFileAttributeViews(self, ) -> javawrappers.java.util.Set: ...
	def getFileStores(self, ) -> javawrappers.java.lang.Iterable: ...
	def notifyAll(self, ) -> None: ...
	def newWatchService(self, ) -> javawrappers.java.nio.file.WatchService: ...
	def notify(self, ) -> None: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def provider(self, ) -> javawrappers.java.nio.file.spi.FileSystemProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPath(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.Path: ...
	def getRootDirectories(self, ) -> javawrappers.java.lang.Iterable: ...
	def getSeparator(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPathMatcher(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.PathMatcher: ...
	def close(self, ) -> None: ...
	def getUserPrincipalLookupService(self, ) -> javawrappers.java.nio.file.attribute.UserPrincipalLookupService: ...


class FileAlreadyExistsException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Paths:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.net.URI, ) -> javawrappers.java.nio.file.Path: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LinkOption:
	NOFOLLOW_LINKS: LinkOption = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.LinkOption: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.LinkOption, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


