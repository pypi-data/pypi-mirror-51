################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.util.concurrent
import javawrappers.java.nio.channels.spi
import javawrappers.java.nio.channels
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class AbstractSelectableChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlocking(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	def validOps(self, ) -> Union[int, JInt]: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


class AbstractSelector:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def selectNow(self, ) -> Union[int, JInt]: ...
	@overload
	def selectNow(self, arg0: javawrappers.java.util.function.Consumer, ) -> Union[int, JInt]: ...
	@overload
	def select(self, arg0: javawrappers.java.util.function.Consumer, ) -> Union[int, JInt]: ...
	@overload
	def select(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def select(self, arg0: javawrappers.java.util.function.Consumer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def select(self, ) -> Union[int, JInt]: ...
	def keys(self, ) -> javawrappers.java.util.Set: ...
	def wakeup(self, ) -> javawrappers.java.nio.channels.Selector: ...
	def notifyAll(self, ) -> None: ...
	def selectedKeys(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@staticmethod
	def open() -> javawrappers.java.nio.channels.Selector: ...


class AbstractInterruptibleChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class AsynchronousChannelProvider:
	class ProviderHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def provider() -> javawrappers.java.nio.channels.spi.AsynchronousChannelProvider: ...
	@overload
	def openAsynchronousChannelGroup(self, arg0: javawrappers.java.util.concurrent.ExecutorService, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	@overload
	def openAsynchronousChannelGroup(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.concurrent.ThreadFactory, ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def openAsynchronousServerSocketChannel(self, arg0: javawrappers.java.nio.channels.AsynchronousChannelGroup, ) -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...
	def notify(self, ) -> None: ...
	def openAsynchronousSocketChannel(self, arg0: javawrappers.java.nio.channels.AsynchronousChannelGroup, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...


class AbstractSelectionKey:
	def cancel(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def interestOpsOr(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAcceptable(self, ) -> Union[int, JBoolean]: ...
	def isConnectable(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def channel(self, ) -> javawrappers.java.nio.channels.SelectableChannel: ...
	def isWritable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def attachment(self, ) -> javawrappers.java.lang.Object: ...
	def readyOps(self, ) -> Union[int, JInt]: ...
	def interestOpsAnd(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def interestOps(self, ) -> Union[int, JInt]: ...
	@overload
	def interestOps(self, arg0: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def selector(self, ) -> javawrappers.java.nio.channels.Selector: ...
	def attach(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadable(self, ) -> Union[int, JBoolean]: ...


class SelectorProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def openSocketChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def openDatagramChannel(self, arg0: javawrappers.java.net.ProtocolFamily, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def openDatagramChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def notify(self, ) -> None: ...
	def openPipe(self, ) -> javawrappers.java.nio.channels.Pipe: ...
	@staticmethod
	def provider() -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def inheritedChannel(self, ) -> javawrappers.java.nio.channels.Channel: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def openServerSocketChannel(self, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def openSelector(self, ) -> javawrappers.java.nio.channels.spi.AbstractSelector: ...


