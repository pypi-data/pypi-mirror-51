################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.concurrent
import javawrappers.java.nio.channels.spi
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.java.util.function
import javawrappers.java.nio.file
import javawrappers.java.nio.charset
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class NoConnectionPendingException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AsynchronousServerSocketChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	@overload
	def accept(self, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def accept(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.AsynchronousChannelProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.channels.AsynchronousChannelGroup, ) -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...
	@overload
	@staticmethod
	def open() -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...


class IllegalSelectorException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NetworkChannel:
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...


class WritePendingException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CancelledKeyException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MembershipKey:
	def drop(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def sourceAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def notifyAll(self, ) -> None: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def channel(self, ) -> javawrappers.java.nio.channels.MulticastChannel: ...
	def notify(self, ) -> None: ...
	def unblock(self, arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.nio.channels.MembershipKey: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def networkInterface(self, ) -> javawrappers.java.net.NetworkInterface: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def block(self, arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.nio.channels.MembershipKey: ...
	def group(self, ) -> javawrappers.java.net.InetAddress: ...


class ReadableByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...


class Selector:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def selectNow(self, ) -> Union[int, JInt]: ...
	@overload
	def selectNow(self, arg0: javawrappers.java.util.function.Consumer, ) -> Union[int, JInt]: ...
	@overload
	def select(self, arg0: javawrappers.java.util.function.Consumer, ) -> Union[int, JInt]: ...
	@overload
	def select(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def select(self, arg0: javawrappers.java.util.function.Consumer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def select(self, ) -> Union[int, JInt]: ...
	def keys(self, ) -> javawrappers.java.util.Set: ...
	def wakeup(self, ) -> javawrappers.java.nio.channels.Selector: ...
	def notifyAll(self, ) -> None: ...
	def selectedKeys(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@staticmethod
	def open() -> javawrappers.java.nio.channels.Selector: ...


class FileLock:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def release(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def channel(self, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def notify(self, ) -> None: ...
	def acquiredBy(self, ) -> javawrappers.java.nio.channels.Channel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def overlaps(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def position(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	def isShared(self, ) -> Union[int, JBoolean]: ...


class ClosedByInterruptException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AlreadyBoundException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CompletionHandler:
	def failed(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def completed(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...


class AsynchronousChannelGroup:
	@staticmethod
	def withThreadPool(arg0: javawrappers.java.util.concurrent.ExecutorService, ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isTerminated(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def withCachedThreadPool(arg0: javawrappers.java.util.concurrent.ExecutorService, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def withFixedThreadPool(arg0: Union[int, JInt], arg1: javawrappers.java.util.concurrent.ThreadFactory, ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.AsynchronousChannelProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def awaitTermination(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shutdownNow(self, ) -> None: ...
	def shutdown(self, ) -> None: ...
	def isShutdown(self, ) -> Union[int, JBoolean]: ...


class Channels:
	class WritableByteChannelImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isOpen(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class ReadableByteChannelImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isOpen(self, ) -> Union[int, JBoolean]: ...
		def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def newWriter(arg0: javawrappers.java.nio.channels.WritableByteChannel, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.io.Writer: ...
	@overload
	@staticmethod
	def newWriter(arg0: javawrappers.java.nio.channels.WritableByteChannel, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.Writer: ...
	@overload
	@staticmethod
	def newWriter(arg0: javawrappers.java.nio.channels.WritableByteChannel, arg1: javawrappers.java.nio.charset.CharsetEncoder, arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def newReader(arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
	@overload
	@staticmethod
	def newReader(arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.java.nio.charset.CharsetDecoder, arg2: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
	@overload
	@staticmethod
	def newReader(arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.io.Reader: ...
	def notify(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newInputStream(arg0: javawrappers.java.nio.channels.ReadableByteChannel, ) -> javawrappers.java.io.InputStream: ...
	@overload
	@staticmethod
	def newInputStream(arg0: javawrappers.java.nio.channels.AsynchronousByteChannel, ) -> javawrappers.java.io.InputStream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newOutputStream(arg0: javawrappers.java.nio.channels.AsynchronousByteChannel, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	@staticmethod
	def newOutputStream(arg0: javawrappers.java.nio.channels.WritableByteChannel, ) -> javawrappers.java.io.OutputStream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	@overload
	@staticmethod
	def newChannel(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.nio.channels.ReadableByteChannel: ...
	@overload
	@staticmethod
	def newChannel(arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.java.nio.channels.WritableByteChannel: ...


class AlreadyConnectedException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NotYetConnectedException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ClosedSelectorException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SocketChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConnectionPending(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def finishConnect(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> Union[int, JBoolean]: ...
	def validOps(self, ) -> Union[int, JInt]: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	def isBlocking(self, ) -> Union[int, JBoolean]: ...
	def getRemoteAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def shutdownOutput(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def shutdownInput(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	def socket(self, ) -> javawrappers.java.net.Socket: ...
	@overload
	@staticmethod
	def open() -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


class NonReadableChannelException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AsynchronousByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...


class UnresolvedAddressException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AcceptPendingException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ReadPendingException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class InterruptibleChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class AsynchronousSocketChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], arg2: javawrappers.java.util.concurrent.TimeUnit, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[long, JLong], arg4: javawrappers.java.util.concurrent.TimeUnit, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRemoteAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def shutdownOutput(self, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...
	def shutdownInput(self, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.AsynchronousChannelProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[long, JLong], arg4: javawrappers.java.util.concurrent.TimeUnit, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], arg2: javawrappers.java.util.concurrent.TimeUnit, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.channels.AsynchronousChannelGroup, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...
	@overload
	@staticmethod
	def open() -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...


class MulticastChannel:
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def join(self, arg0: javawrappers.java.net.InetAddress, arg1: javawrappers.java.net.NetworkInterface, ) -> javawrappers.java.nio.channels.MembershipKey: ...
	@overload
	def join(self, arg0: javawrappers.java.net.InetAddress, arg1: javawrappers.java.net.NetworkInterface, arg2: javawrappers.java.net.InetAddress, ) -> javawrappers.java.nio.channels.MembershipKey: ...
	def close(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...


class ShutdownChannelGroupException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AsynchronousCloseException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class OverlappingFileLockException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ConnectionPendingException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AsynchronousFileChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def tryLock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def lock(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def lock(self, ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.util.concurrent.Future: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def force(self, arg0: Union[int, JBoolean], ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.util.concurrent.ExecutorService, *arg3: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...


class Pipe:
	class SinkChannel:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isBlocking(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def isOpen(self, ) -> Union[int, JBoolean]: ...
		def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isRegistered(self, ) -> Union[int, JBoolean]: ...
		def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
		@overload
		def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
		@overload
		def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
		def close(self, ) -> None: ...
		def validOps(self, ) -> Union[int, JInt]: ...
		@overload
		def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
		@overload
		def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
		def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


	class SourceChannel:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
		@overload
		def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
		def isBlocking(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def isOpen(self, ) -> Union[int, JBoolean]: ...
		def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isRegistered(self, ) -> Union[int, JBoolean]: ...
		def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
		def close(self, ) -> None: ...
		def validOps(self, ) -> Union[int, JInt]: ...
		@overload
		def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
		@overload
		def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
		def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	def isBlocking(self, ) -> Union[int, JBoolean]: ...
	def sink(self, ) -> javawrappers.java.nio.channels.Pipe.SinkChannel: ...
	def notifyAll(self, ) -> None: ...
	def source(self, ) -> javawrappers.java.nio.channels.Pipe.SourceChannel: ...
	def notify(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	@overload
	def validOps(self, ) -> Union[int, JInt]: ...
	@overload
	def validOps(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def open() -> javawrappers.java.nio.channels.Pipe: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


class UnsupportedAddressTypeException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileLockInterruptionException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class IllegalBlockingModeException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ScatteringByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...


class Channel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class ServerSocketChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlocking(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def accept(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	def socket(self, ) -> javawrappers.java.net.ServerSocket: ...
	def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	@staticmethod
	def open() -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def validOps(self, ) -> Union[int, JInt]: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


class ClosedChannelException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...


class AsynchronousChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class DatagramChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def join(self, arg0: javawrappers.java.net.InetAddress, arg1: javawrappers.java.net.NetworkInterface, ) -> javawrappers.java.nio.channels.MembershipKey: ...
	@overload
	def join(self, arg0: javawrappers.java.net.InetAddress, arg1: javawrappers.java.net.NetworkInterface, arg2: javawrappers.java.net.InetAddress, ) -> javawrappers.java.nio.channels.MembershipKey: ...
	def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def validOps(self, ) -> Union[int, JInt]: ...
	def receive(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.net.SocketAddress: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.NetworkChannel: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	def isBlocking(self, ) -> Union[int, JBoolean]: ...
	def getRemoteAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	def socket(self, ) -> javawrappers.java.net.DatagramSocket: ...
	def send(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.net.SocketAddress, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def open() -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.net.ProtocolFamily, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


class InterruptedByTimeoutException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GatheringByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...


class NotYetBoundException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NonWritableChannelException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SelectionKey:
	def cancel(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def interestOpsOr(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAcceptable(self, ) -> Union[int, JBoolean]: ...
	def isConnectable(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def channel(self, ) -> javawrappers.java.nio.channels.SelectableChannel: ...
	def isWritable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def attachment(self, ) -> javawrappers.java.lang.Object: ...
	def readyOps(self, ) -> Union[int, JInt]: ...
	def interestOpsAnd(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def interestOps(self, ) -> Union[int, JInt]: ...
	@overload
	def interestOps(self, arg0: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def selector(self, ) -> javawrappers.java.nio.channels.Selector: ...
	def attach(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadable(self, ) -> Union[int, JBoolean]: ...


class SelectableChannel:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlocking(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def provider(self, ) -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyFor(self, arg0: javawrappers.java.nio.channels.Selector, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	def blockingLock(self, ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	def validOps(self, ) -> Union[int, JInt]: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def register(self, arg0: javawrappers.java.nio.channels.Selector, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	def configureBlocking(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.SelectableChannel: ...


class FileChannel:
	class MapMode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	def transferFrom(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def transferTo(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: javawrappers.java.nio.channels.WritableByteChannel, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def tryLock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def lock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def force(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def position(self, ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	def map(self, arg0: javawrappers.java.nio.channels.FileChannel.MapMode, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.java.nio.MappedByteBuffer: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.channels.FileChannel: ...


class SeekableByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	@overload
	def position(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...


class WritableByteChannel:
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...


class IllegalChannelGroupException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


