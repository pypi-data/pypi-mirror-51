################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.lang.ref
import javawrappers.java.util.concurrent

from jpype.types import *
from typing import Union

from typing import overload

class Reference:
	class ReferenceHandler:
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def run(self, ) -> None: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def interrupt(self, ) -> None: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def yield_() -> None: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	def start(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


class WeakReference:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.ReferenceQueue, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


class PhantomReference:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.ReferenceQueue, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


class Cleaner:
	class Cleanable:
		def clean(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create() -> javawrappers.java.lang.ref.Cleaner: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.concurrent.ThreadFactory, ) -> javawrappers.java.lang.ref.Cleaner: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def clean(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def register(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.ref.Cleaner.Cleanable: ...


class SoftReference:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.ReferenceQueue, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


class ReferenceQueue:
	def __init__(self, ): ...
	class Lock:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Null:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def poll(self, ) -> javawrappers.java.lang.ref.Reference: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.ref.Reference: ...
		@overload
		def remove(self, ) -> javawrappers.java.lang.ref.Reference: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def poll(self, ) -> javawrappers.java.lang.ref.Reference: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.ref.Reference: ...
	@overload
	def remove(self, ) -> javawrappers.java.lang.ref.Reference: ...


