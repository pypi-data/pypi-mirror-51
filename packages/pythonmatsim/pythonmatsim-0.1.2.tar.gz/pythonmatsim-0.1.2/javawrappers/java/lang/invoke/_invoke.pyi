################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.lang.invoke
import javawrappers.java.nio

from jpype.types import *
from typing import Union

from typing import overload

class VolatileCallSite:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.invoke.MethodType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTarget(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTarget(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def dynamicInvoker(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notify(self, ) -> None: ...


class ConstantCallSite:
	def __init__(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTarget(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTarget(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def dynamicInvoker(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notify(self, ) -> None: ...


class CallSite:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTarget(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTarget(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dynamicInvoker(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def type(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def notify(self, ) -> None: ...


class LambdaMetafactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def metafactory(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, arg3: javawrappers.java.lang.invoke.MethodType, arg4: javawrappers.java.lang.invoke.MethodHandle, arg5: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.CallSite: ...
	@staticmethod
	def altMetafactory(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.CallSite: ...
	def notify(self, ) -> None: ...


class ConstantBootstraps:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def primitiveClass(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getStaticFinal(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getStaticFinal(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def invoke(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.invoke.MethodHandle, *arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def arrayVarHandle(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	@staticmethod
	def fieldVarHandle(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Class, arg4: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	@staticmethod
	def enumConstant(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def staticFieldVarHandle(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Class, arg4: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullConstant(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class SerializedLambda:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], arg5: javawrappers.java.lang.String, arg6: javawrappers.java.lang.String, arg7: javawrappers.java.lang.String, arg8: javawrappers.java.lang.String, arg9: JArray(javawrappers.java.lang.Object, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getImplClass(self, ) -> javawrappers.java.lang.String: ...
	def getImplMethodName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getImplMethodKind(self, ) -> Union[int, JInt]: ...
	def getFunctionalInterfaceClass(self, ) -> javawrappers.java.lang.String: ...
	def getFunctionalInterfaceMethodName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getCapturedArgCount(self, ) -> Union[int, JInt]: ...
	def getCapturedArg(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getInstantiatedMethodType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getImplMethodSignature(self, ) -> javawrappers.java.lang.String: ...
	def getFunctionalInterfaceMethodSignature(self, ) -> javawrappers.java.lang.String: ...
	def getCapturingClass(self, ) -> javawrappers.java.lang.String: ...


class WrongMethodTypeException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MethodHandles:
	class Lookup:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def findStaticVarHandle(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def findStaticGetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def lookupClass(self, ) -> javawrappers.java.lang.Class: ...
		def notify(self, ) -> None: ...
		def unreflectSetter(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def findVirtual(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def findConstructor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def dropLookupMode(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
		def findStaticSetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def bind(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def findGetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def hasPrivateAccess(self, ) -> Union[int, JBoolean]: ...
		def accessClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
		def unreflectGetter(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def findSpecial(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def in_(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
		def defineClass(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.Class: ...
		def unreflectConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def findClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
		def unreflectVarHandle(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.invoke.VarHandle: ...
		def findStatic(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def lookupModes(self, ) -> Union[int, JInt]: ...
		def unreflectSpecial(self, arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def unreflect(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def findVarHandle(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
		def findSetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def revealDirect(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandleInfo: ...


	def findStaticVarHandle(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def constant(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findStaticGetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def filterArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def arrayElementVarHandle(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	def findVirtual(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def empty(arg0: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def zero(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def countedLoop(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def countedLoop(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, arg2: javawrappers.java.lang.invoke.MethodHandle, arg3: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findStaticSetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def bind(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def byteBufferViewVarHandle(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.nio.ByteOrder, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	@overload
	@staticmethod
	def dropArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def dropArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def loop(*arg0: JArray(javawrappers.java.lang.invoke.MethodHandle, 1), ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def permuteArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodType, *arg2: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def explicitCastArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def accessClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def collectArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def dropArgumentsToMatch(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, arg3: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def filterReturnValue(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
	@staticmethod
	def catchException(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def invoker(arg0: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findStatic(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def lookupModes(self, ) -> Union[int, JInt]: ...
	def unreflectSpecial(self, arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def unreflect(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findVarHandle(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	def revealDirect(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandleInfo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def whileLoop(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def tryFinally(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notifyAll(self, ) -> None: ...
	def lookupClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def varHandleInvoker(arg0: javawrappers.java.lang.invoke.VarHandle.AccessMode, arg1: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def unreflectSetter(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notify(self, ) -> None: ...
	def findConstructor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def foldArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def foldArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def spreadInvoker(arg0: javawrappers.java.lang.invoke.MethodType, arg1: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def dropLookupMode(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
	@staticmethod
	def arrayElementSetter(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def arrayElementGetter(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findGetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def identity(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def exactInvoker(arg0: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def hasPrivateAccess(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def reflectAs(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.reflect.Member: ...
	def unreflectGetter(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def publicLookup() -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
	def findSpecial(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def privateLookupIn(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodHandles.Lookup, ) -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
	@staticmethod
	def lookup() -> javawrappers.java.lang.invoke.MethodHandles.Lookup: ...
	def defineClass(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def insertArguments(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def unreflectConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def unreflectVarHandle(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	@staticmethod
	def throwException(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def arrayLength(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def findSetter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def arrayConstructor(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def iteratedLoop(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def guardWithTest(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def byteArrayViewVarHandle(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.nio.ByteOrder, ) -> javawrappers.java.lang.invoke.VarHandle: ...
	@staticmethod
	def doWhileLoop(arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, arg2: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def varHandleExactInvoker(arg0: javawrappers.java.lang.invoke.VarHandle.AccessMode, arg1: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...


class MethodHandleProxies:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def wrapperInstanceType(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isWrapperInstance(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrapperInstanceTarget(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def asInterfaceInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class LambdaConversionException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SwitchPoint:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def invalidateAll(arg0: JArray(javawrappers.java.lang.invoke.SwitchPoint, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def guardWithTest(self, arg0: javawrappers.java.lang.invoke.MethodHandle, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def hasBeenInvalidated(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class MutableCallSite:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.invoke.MethodType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTarget(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def syncAll(arg0: JArray(javawrappers.java.lang.invoke.MutableCallSite, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTarget(self, arg0: javawrappers.java.lang.invoke.MethodHandle, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def dynamicInvoker(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notify(self, ) -> None: ...


class MethodHandle:
	class PolymorphicSignature:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def asCollector(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	def asCollector(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	def asSpreader(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	def asSpreader(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def withVarargs(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def invokeExact(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def invoke(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def type(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def notify(self, ) -> None: ...
	def bindTo(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def asVarargsCollector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def asType(self, arg0: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	def invokeWithArguments(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def invokeWithArguments(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isVarargsCollector(self, ) -> Union[int, JBoolean]: ...
	def asFixedArity(self, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class VarHandle:
	class TypesAndInvokers:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AccessDescriptor:
		def __init__(self, arg0: javawrappers.java.lang.invoke.MethodType, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AccessMode:
		GET: VarHandle.AccessMode = ...
		SET: VarHandle.AccessMode = ...
		GET_VOLATILE: VarHandle.AccessMode = ...
		SET_VOLATILE: VarHandle.AccessMode = ...
		GET_ACQUIRE: VarHandle.AccessMode = ...
		SET_RELEASE: VarHandle.AccessMode = ...
		GET_OPAQUE: VarHandle.AccessMode = ...
		SET_OPAQUE: VarHandle.AccessMode = ...
		COMPARE_AND_SET: VarHandle.AccessMode = ...
		COMPARE_AND_EXCHANGE: VarHandle.AccessMode = ...
		COMPARE_AND_EXCHANGE_ACQUIRE: VarHandle.AccessMode = ...
		COMPARE_AND_EXCHANGE_RELEASE: VarHandle.AccessMode = ...
		WEAK_COMPARE_AND_SET_PLAIN: VarHandle.AccessMode = ...
		WEAK_COMPARE_AND_SET: VarHandle.AccessMode = ...
		WEAK_COMPARE_AND_SET_ACQUIRE: VarHandle.AccessMode = ...
		WEAK_COMPARE_AND_SET_RELEASE: VarHandle.AccessMode = ...
		GET_AND_SET: VarHandle.AccessMode = ...
		GET_AND_SET_ACQUIRE: VarHandle.AccessMode = ...
		GET_AND_SET_RELEASE: VarHandle.AccessMode = ...
		GET_AND_ADD: VarHandle.AccessMode = ...
		GET_AND_ADD_ACQUIRE: VarHandle.AccessMode = ...
		GET_AND_ADD_RELEASE: VarHandle.AccessMode = ...
		GET_AND_BITWISE_OR: VarHandle.AccessMode = ...
		GET_AND_BITWISE_OR_RELEASE: VarHandle.AccessMode = ...
		GET_AND_BITWISE_OR_ACQUIRE: VarHandle.AccessMode = ...
		GET_AND_BITWISE_AND: VarHandle.AccessMode = ...
		GET_AND_BITWISE_AND_RELEASE: VarHandle.AccessMode = ...
		GET_AND_BITWISE_AND_ACQUIRE: VarHandle.AccessMode = ...
		GET_AND_BITWISE_XOR: VarHandle.AccessMode = ...
		GET_AND_BITWISE_XOR_RELEASE: VarHandle.AccessMode = ...
		GET_AND_BITWISE_XOR_ACQUIRE: VarHandle.AccessMode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.VarHandle.AccessMode: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.invoke.VarHandle.AccessMode, 1): ...
		def methodName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def valueFromMethodName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.VarHandle.AccessMode: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class AccessType:
		GET: VarHandle.AccessType = ...
		SET: VarHandle.AccessType = ...
		COMPARE_AND_SET: VarHandle.AccessType = ...
		COMPARE_AND_EXCHANGE: VarHandle.AccessType = ...
		GET_AND_UPDATE: VarHandle.AccessType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.VarHandle.AccessType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.invoke.VarHandle.AccessType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def toMethodHandle(self, arg0: javawrappers.java.lang.invoke.VarHandle.AccessMode, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def getAndBitwiseXor(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def storeStoreFence() -> None: ...
	def compareAndExchange(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndSetRelease(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndBitwiseAnd(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def varType(self, ) -> javawrappers.java.lang.Class: ...
	def getAndBitwiseOrAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setVolatile(self, *arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def releaseFence() -> None: ...
	def getAndAdd(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetRelease(self, *arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def loadLoadFence() -> None: ...
	def getAndAddAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isAccessModeSupported(self, arg0: javawrappers.java.lang.invoke.VarHandle.AccessMode, ) -> Union[int, JBoolean]: ...
	def setOpaque(self, *arg0: javawrappers.java.lang.Object, ) -> None: ...
	def compareAndExchangeRelease(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compareAndSet(self, *arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getAndBitwiseXorRelease(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def coordinateTypes(self, ) -> javawrappers.java.util.List: ...
	def weakCompareAndSetPlain(self, *arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getVolatile(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def fullFence() -> None: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.invoke.VarHandle.AccessType, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.invoke.VarHandle.AccessMode, 1): ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def accessModeType(self, arg0: javawrappers.java.lang.invoke.VarHandle.AccessMode, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def getAndBitwiseOr(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def acquireFence() -> None: ...
	def notify(self, ) -> None: ...
	def getAndBitwiseOrRelease(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndSetAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getOpaque(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAndBitwiseXorAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAndBitwiseAndRelease(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def get(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndSet(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def set(self, *arg0: javawrappers.java.lang.Object, ) -> None: ...
	def weakCompareAndSet(self, *arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.VarHandle.AccessType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.VarHandle.AccessMode: ...
	def getAndAddRelease(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def methodName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def valueFromMethodName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.VarHandle.AccessMode: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRelease(self, *arg0: javawrappers.java.lang.Object, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def getAndBitwiseAndAcquire(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MethodType:
	class ConcurrentWeakInternSet:
		def __init__(self, ): ...
		class WeakEntry:
			@overload
			def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.ReferenceQueue, ): ...
			@overload
			def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def enqueue(self, ) -> Union[int, JBoolean]: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def clear(self, ) -> None: ...
			def isEnqueued(self, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@staticmethod
			def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
			def notify(self, ) -> None: ...


		def add(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


	class OffsetHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def toMethodDescriptorString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def dropParameterTypes(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodType: ...
	def changeReturnType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def fromMethodDescriptorString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def lastParameterType(self, ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	def unwrap(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def changeParameterType(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def hasWrappers(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def methodType(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	@staticmethod
	def methodType(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	@staticmethod
	def methodType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	@staticmethod
	def methodType(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	@staticmethod
	def methodType(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	@staticmethod
	def methodType(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def parameterArray(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def appendParameterTypes(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	def appendParameterTypes(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def parameterType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	def erase(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def parameterCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	@overload
	def insertParameterTypes(self, arg0: Union[int, JInt], *arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	def insertParameterTypes(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def generic(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def hasPrimitives(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parameterList(self, ) -> javawrappers.java.util.List: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def genericMethodType(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.invoke.MethodType: ...
	@overload
	@staticmethod
	def genericMethodType(arg0: Union[int, JInt], ) -> javawrappers.java.lang.invoke.MethodType: ...
	def wrap(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def returnType(self, ) -> javawrappers.java.lang.Class: ...


class StringConcatException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MethodHandleInfo:
	@staticmethod
	def referenceKindToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getReferenceKind(self, ) -> Union[int, JInt]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def getMethodType(self, ) -> javawrappers.java.lang.invoke.MethodType: ...
	@staticmethod
	def toString(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.String: ...
	def reflectAs(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.invoke.MethodHandles.Lookup, ) -> javawrappers.java.lang.reflect.Member: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...


class StringConcatFactory:
	class Stringifiers:
		class StringifierAny:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...
			def remove(self, arg0: javawrappers.java.lang.Class, ) -> None: ...


		class StringifierMost:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...
			def remove(self, arg0: javawrappers.java.lang.Class, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def remove(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
		def notify(self, ) -> None: ...


	class MethodHandleInlineCopyStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class MethodHandleStringBuilderStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BytecodeStringBuilderStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Mode:
		DEFAULT: StringConcatFactory.Mode = ...
		SIZED: StringConcatFactory.Mode = ...
		SIZED_EXACT: StringConcatFactory.Mode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.StringConcatFactory.Mode: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.invoke.StringConcatFactory.Mode, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class RecipeElement:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getArgPos(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTag(self, ) -> Union[string, JString]: ...
		def notify(self, ) -> None: ...


	class Recipe:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getElements(self, ) -> javawrappers.java.util.List: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Key:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.invoke.MethodType, arg2: javawrappers.java.lang.invoke.StringConcatFactory.Recipe, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Strategy:
		BC_SB: StringConcatFactory.Strategy = ...
		BC_SB_SIZED: StringConcatFactory.Strategy = ...
		BC_SB_SIZED_EXACT: StringConcatFactory.Strategy = ...
		MH_SB_SIZED: StringConcatFactory.Strategy = ...
		MH_SB_SIZED_EXACT: StringConcatFactory.Strategy = ...
		MH_INLINE_SIZED_EXACT: StringConcatFactory.Strategy = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.StringConcatFactory.Strategy: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.invoke.StringConcatFactory.Strategy, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.StringConcatFactory.Mode: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.invoke.StringConcatFactory.Strategy: ...
	def getArgPos(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.invoke.StringConcatFactory.Mode, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.invoke.StringConcatFactory.Strategy, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def makeConcat(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.invoke.CallSite: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getTag(self, ) -> Union[string, JString]: ...
	def remove(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def makeConcatWithConstants(arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.invoke.MethodType, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.CallSite: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getElements(self, ) -> javawrappers.java.util.List: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


