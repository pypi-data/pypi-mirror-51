################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.lang.annotation

from jpype.types import *
from typing import Union

from typing import overload

class ReflectPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class GenericSignatureFormatError:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GenericArrayType:
	def getGenericComponentType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...


class Constructor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getParameterCount(self, ) -> Union[int, JInt]: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def getAnnotatedParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getGenericExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def notify(self, ) -> None: ...
	def getAnnotatedReceiverType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toGenericString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
	def isAccessible(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def newInstance(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotatedExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getGenericParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getParameters(self, ) -> JArray(javawrappers.java.lang.reflect.Parameter, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getParameterAnnotations(self, ) -> JArray(JArray(javawrappers.java.lang.annotation.Annotation, 1), 1): ...


class Modifier:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isStatic(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fieldModifiers() -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isVolatile(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def methodModifiers() -> Union[int, JInt]: ...
	@staticmethod
	def isSynchronized(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isPrivate(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def constructorModifiers() -> Union[int, JInt]: ...
	@staticmethod
	def parameterModifiers() -> Union[int, JInt]: ...
	@staticmethod
	def isAbstract(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isNative(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isStrict(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def interfaceModifiers() -> Union[int, JInt]: ...
	@staticmethod
	def isProtected(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def classModifiers() -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isPublic(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isFinal(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isTransient(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isInterface(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class AccessibleObject:
	def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAccessible(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AnnotatedTypeVariable:
	def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class GenericDeclaration:
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class Field:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setByte(self, arg0: javawrappers.java.lang.Object, arg1: JByte, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getByte(self, arg0: javawrappers.java.lang.Object, ) -> JByte: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def getDouble(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...
	def setShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JShort], ) -> None: ...
	def getFloat(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def setDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> None: ...
	def setChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[string, JString], ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toGenericString(self, ) -> javawrappers.java.lang.String: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getBoolean(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGenericType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def getAnnotatedType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
	def setFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JFloat], ) -> None: ...
	def isAccessible(self, ) -> Union[int, JBoolean]: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getShort(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JShort]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def setInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	def getLong(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def getInt(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getChar(self, arg0: javawrappers.java.lang.Object, ) -> Union[string, JString]: ...
	def setLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getType(self, ) -> javawrappers.java.lang.Class: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ) -> None: ...
	def isEnumConstant(self, ) -> Union[int, JBoolean]: ...


class Array:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setByte(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: JByte, ) -> None: ...
	@staticmethod
	def getByte(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> JByte: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getDouble(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def setShort(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> None: ...
	@staticmethod
	def getFloat(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def setDouble(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def setChar(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[string, JString], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def get(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getBoolean(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setFloat(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@staticmethod
	def set(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getShort(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.Class, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.Class, *arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def setInt(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getLong(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def getInt(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getChar(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[string, JString]: ...
	@staticmethod
	def setLong(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLength(arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setBoolean(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...


class Executable:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getParameterCount(self, ) -> Union[int, JInt]: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def getAnnotatedParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getGenericExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def notify(self, ) -> None: ...
	def getAnnotatedReceiverType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toGenericString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
	def isAccessible(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotatedExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getGenericParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getParameters(self, ) -> JArray(javawrappers.java.lang.reflect.Parameter, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getParameterAnnotations(self, ) -> JArray(JArray(javawrappers.java.lang.annotation.Annotation, 1), 1): ...


class AnnotatedParameterizedType:
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotatedActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class AnnotatedArrayType:
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotatedGenericComponentType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class Member:
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...


class Method:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getParameterCount(self, ) -> Union[int, JInt]: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getGenericReturnType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def notifyAll(self, ) -> None: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def getAnnotatedParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def invoke(self, arg0: javawrappers.java.lang.Object, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isBridge(self, ) -> Union[int, JBoolean]: ...
	def getGenericExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def notify(self, ) -> None: ...
	def getAnnotatedReceiverType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toGenericString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
	def isAccessible(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotatedExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def getGenericParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getReturnType(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getParameters(self, ) -> JArray(javawrappers.java.lang.reflect.Parameter, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getParameterAnnotations(self, ) -> JArray(JArray(javawrappers.java.lang.annotation.Annotation, 1), 1): ...


class AnnotatedWildcardType:
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotatedUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getAnnotatedLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class InvocationTargetException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getTargetException(self, ) -> javawrappers.java.lang.Throwable: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AnnotatedType:
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class InvocationHandler:
	def invoke(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...


class ParameterizedType:
	def getRawType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def getOwnerType(self, ) -> javawrappers.java.lang.reflect.Type: ...


class InaccessibleObjectException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MalformedParametersException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Proxy:
	class ProxyBuilder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isProxyClass(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getProxyClass(arg0: javawrappers.java.lang.ClassLoader, *arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def newProxyInstance(arg0: javawrappers.java.lang.ClassLoader, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: javawrappers.java.lang.reflect.InvocationHandler, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInvocationHandler(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.reflect.InvocationHandler: ...
	def notify(self, ) -> None: ...


class UndeclaredThrowableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getUndeclaredThrowable(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AnnotatedElement:
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class Type:
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...


class WildcardType:
	def getLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def getUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...


class TypeVariable:
	def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getGenericDeclaration(self, ) -> javawrappers.java.lang.reflect.GenericDeclaration: ...


class Parameter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringExecutable(self, ) -> javawrappers.java.lang.reflect.Executable: ...
	def isNamePresent(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getParameterizedType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isImplicit(self, ) -> Union[int, JBoolean]: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getType(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def getAnnotatedType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...


class MalformedParameterizedTypeException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


