################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util.concurrent.atomic
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class DoubleAdder:
	def __init__(self, ): ...
	class SerializationProxy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def sumThenReset(self, ) -> Union[float, JDouble]: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def sum(self, ) -> Union[float, JDouble]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def byteValue(self, ) -> JByte: ...


class AtomicIntegerFieldUpdater:
	class AtomicIntegerFieldUpdaterImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
		def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
		def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicIntegerFieldUpdater: ...
		def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
		def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
		def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
		def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
		def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
	@overload
	def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicIntegerFieldUpdater: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
	@overload
	def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...


class AtomicLongArray:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[long, JLong], 1), ): ...
	def setPlain(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAndIncrement(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def incrementAndGet(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def weakCompareAndSetPlain(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def updateAndGet(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
	def decrementAndGet(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def lazySet(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def getAndAdd(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndSet(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def weakCompareAndSetAcquire(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getAndAccumulate(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	def weakCompareAndSetVolatile(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def accumulateAndGet(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	def set(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def setOpaque(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def getPlain(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def compareAndExchangeRelease(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def compareAndSet(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: Union[int, JInt], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def addAndGet(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setRelease(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
	def getAndDecrement(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...


class AtomicLong:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	def setPlain(self, arg0: Union[long, JLong], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAndIncrement(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def incrementAndGet(self, ) -> Union[long, JLong]: ...
	def weakCompareAndSetPlain(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, ) -> Union[long, JLong]: ...
	def updateAndGet(self, arg0: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
	def decrementAndGet(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, ) -> Union[long, JLong]: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> Union[long, JLong]: ...
	def lazySet(self, arg0: Union[long, JLong], ) -> None: ...
	def getAndAdd(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	def getAndSet(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def weakCompareAndSetAcquire(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getAndAccumulate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	def weakCompareAndSetVolatile(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def accumulateAndGet(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	def set(self, arg0: Union[long, JLong], ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def setOpaque(self, arg0: Union[long, JLong], ) -> None: ...
	def getPlain(self, ) -> Union[long, JLong]: ...
	def compareAndExchangeRelease(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def compareAndSet(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def addAndGet(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setRelease(self, arg0: Union[long, JLong], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
	def getAndDecrement(self, ) -> Union[long, JLong]: ...
	def byteValue(self, ) -> JByte: ...


class DoubleAccumulator:
	def __init__(self, arg0: javawrappers.java.util.function.DoubleBinaryOperator, arg1: Union[float, JDouble], ): ...
	class SerializationProxy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> Union[float, JDouble]: ...
	def reset(self, ) -> None: ...
	def accumulate(self, arg0: Union[float, JDouble], ) -> None: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getThenReset(self, ) -> Union[float, JDouble]: ...
	def byteValue(self, ) -> JByte: ...


class AtomicStampedReference:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ): ...
	class Pair:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getStamp(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def attemptStamp(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getReference(self, ) -> javawrappers.java.lang.Object: ...


class AtomicReferenceArray:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), ): ...
	def setPlain(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def weakCompareAndSetPlain(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def updateAndGet(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def lazySet(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getAndSet(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetAcquire(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAndAccumulate(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetVolatile(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accumulateAndGet(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def setOpaque(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getPlain(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def compareAndExchangeRelease(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compareAndSet(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setRelease(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...


class LongAccumulator:
	def __init__(self, arg0: javawrappers.java.util.function.LongBinaryOperator, arg1: Union[long, JLong], ): ...
	class SerializationProxy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> Union[long, JLong]: ...
	def reset(self, ) -> None: ...
	def accumulate(self, arg0: Union[long, JLong], ) -> None: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getThenReset(self, ) -> Union[long, JLong]: ...
	def byteValue(self, ) -> JByte: ...


class AtomicBoolean:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def setPlain(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def weakCompareAndSetPlain(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> Union[int, JBoolean]: ...
	def lazySet(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getAndSet(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetAcquire(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetVolatile(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def set(self, arg0: Union[int, JBoolean], ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def setOpaque(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getPlain(self, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeRelease(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def compareAndSet(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def setRelease(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LongAdder:
	def __init__(self, ): ...
	class SerializationProxy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: Union[long, JLong], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def sumThenReset(self, ) -> Union[long, JLong]: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def increment(self, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def sum(self, ) -> Union[long, JLong]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def decrement(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def byteValue(self, ) -> JByte: ...


class AtomicMarkableReference:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ): ...
	class Pair:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ) -> None: ...
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def attemptMark(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def isMarked(self, ) -> Union[int, JBoolean]: ...
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getReference(self, ) -> javawrappers.java.lang.Object: ...


class AtomicReference:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, ): ...
	def setPlain(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def weakCompareAndSetPlain(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, ) -> javawrappers.java.lang.Object: ...
	def updateAndGet(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def lazySet(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getAndSet(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetAcquire(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetVolatile(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setOpaque(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getPlain(self, ) -> javawrappers.java.lang.Object: ...
	def compareAndExchangeRelease(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setRelease(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...


class AtomicIntegerArray:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[int, JInt], 1), ): ...
	def setPlain(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAndIncrement(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def incrementAndGet(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def weakCompareAndSetPlain(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def updateAndGet(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
	def decrementAndGet(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def lazySet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getAndAdd(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndSet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def weakCompareAndSetAcquire(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAndAccumulate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def weakCompareAndSetVolatile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def accumulateAndGet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def setOpaque(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getPlain(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def compareAndExchangeRelease(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def compareAndSet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def addAndGet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setRelease(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
	def getAndDecrement(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class AtomicLongFieldUpdater:
	class LockedUpdater:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
		def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
		def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicLongFieldUpdater: ...
		def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
		def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
		def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...


	class CASUpdater:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
		def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
		def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicLongFieldUpdater: ...
		def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
		def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
		def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def getAndIncrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def incrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def decrementAndGet(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicLongFieldUpdater: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getAndAdd(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def addAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def getAndDecrement(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...


class AtomicInteger:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def setPlain(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAndIncrement(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def incrementAndGet(self, ) -> Union[int, JInt]: ...
	def weakCompareAndSetPlain(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def compareAndExchange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getAcquire(self, ) -> Union[int, JInt]: ...
	def updateAndGet(self, arg0: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
	def decrementAndGet(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getOpaque(self, ) -> Union[int, JInt]: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> Union[int, JInt]: ...
	def lazySet(self, arg0: Union[int, JInt], ) -> None: ...
	def getAndAdd(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	def getAndSet(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def weakCompareAndSetAcquire(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAndAccumulate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def weakCompareAndSetVolatile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def accumulateAndGet(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def set(self, arg0: Union[int, JInt], ) -> None: ...
	def weakCompareAndSetRelease(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def setOpaque(self, arg0: Union[int, JInt], ) -> None: ...
	def getPlain(self, ) -> Union[int, JInt]: ...
	def compareAndExchangeRelease(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def compareAndSet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeAcquire(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def addAndGet(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setRelease(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: javawrappers.java.util.function.IntUnaryOperator, ) -> Union[int, JInt]: ...
	def getAndDecrement(self, ) -> Union[int, JInt]: ...
	def byteValue(self, ) -> JByte: ...


class AtomicReferenceFieldUpdater:
	class AtomicReferenceFieldUpdaterImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicReferenceFieldUpdater: ...
		def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...
		def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
		def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def weakCompareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def updateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def newUpdater(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.util.concurrent.atomic.AtomicReferenceFieldUpdater: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def compareAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def lazySet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndUpdate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getAndSet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndAccumulate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	def accumulateAndGet(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...


