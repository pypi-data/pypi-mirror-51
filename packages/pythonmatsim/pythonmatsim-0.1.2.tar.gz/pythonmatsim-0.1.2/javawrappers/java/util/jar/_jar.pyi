################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.time
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.java.util.jar
import javawrappers.java.util.function
import javawrappers.java.util.zip
import javawrappers.java.security.cert
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class JarOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.util.jar.Manifest, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def putNextEntry(self, arg0: javawrappers.java.util.zip.ZipEntry, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: Union[int, JInt], ) -> None: ...
	def setMethod(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def closeEntry(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setComment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def finish(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class JarFile:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Runtime.Version, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class JarFileEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getLastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def getCodeSigners(self, ) -> JArray(javawrappers.java.security.CodeSigner, 1): ...
		def getTime(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def getCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
		def setCreationTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
		def getMethod(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def setCrc(self, arg0: Union[long, JLong], ) -> None: ...
		def setSize(self, arg0: Union[long, JLong], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getCrc(self, ) -> Union[long, JLong]: ...
		def getComment(self, ) -> javawrappers.java.lang.String: ...
		def setTime(self, arg0: Union[long, JLong], ) -> None: ...
		def getAttributes(self, ) -> javawrappers.java.util.jar.Attributes: ...
		def getTimeLocal(self, ) -> javawrappers.java.time.LocalDateTime: ...
		def setLastModifiedTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
		def getLastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def getRealName(self, ) -> javawrappers.java.lang.String: ...
		def getCompressedSize(self, ) -> Union[long, JLong]: ...
		def setMethod(self, arg0: Union[int, JInt], ) -> None: ...
		def getSize(self, ) -> Union[long, JLong]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def setComment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getCreationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setCompressedSize(self, arg0: Union[long, JLong], ) -> None: ...
		def setLastAccessTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
		def setExtra(self, arg0: JArray(JByte, 1), ) -> None: ...
		def isDirectory(self, ) -> Union[int, JBoolean]: ...
		def setTimeLocal(self, arg0: javawrappers.java.time.LocalDateTime, ) -> None: ...
		def getExtra(self, ) -> JArray(JByte, 1): ...


	def getLastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def versionedStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def runtimeVersion() -> javawrappers.java.lang.Runtime.Version: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isMultiRelease(self, ) -> Union[int, JBoolean]: ...
	def getManifest(self, ) -> javawrappers.java.util.jar.Manifest: ...
	def setCreationTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def getMethod(self, ) -> Union[int, JInt]: ...
	def setCrc(self, arg0: Union[long, JLong], ) -> None: ...
	def getCrc(self, ) -> Union[long, JLong]: ...
	def setTime(self, arg0: Union[long, JLong], ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.jar.Attributes: ...
	def getRealName(self, ) -> javawrappers.java.lang.String: ...
	def getInputStream(self, arg0: javawrappers.java.util.zip.ZipEntry, ) -> javawrappers.java.io.InputStream: ...
	def getCompressedSize(self, ) -> Union[long, JLong]: ...
	def entries(self, ) -> javawrappers.java.util.Enumeration: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getCreationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def setCompressedSize(self, arg0: Union[long, JLong], ) -> None: ...
	def setExtra(self, arg0: JArray(JByte, 1), ) -> None: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	def setTimeLocal(self, arg0: javawrappers.java.time.LocalDateTime, ) -> None: ...
	def getExtra(self, ) -> JArray(JByte, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCodeSigners(self, ) -> JArray(javawrappers.java.security.CodeSigner, 1): ...
	def getTime(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def getCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def notify(self, ) -> None: ...
	def setSize(self, arg0: Union[long, JLong], ) -> None: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJarEntry(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.jar.JarEntry: ...
	@overload
	def getComment(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getComment(self, ) -> javawrappers.java.lang.String: ...
	def getEntry(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def close(self, ) -> None: ...
	def getVersion(self, ) -> javawrappers.java.lang.Runtime.Version: ...
	@staticmethod
	def baseVersion() -> javawrappers.java.lang.Runtime.Version: ...
	def getTimeLocal(self, ) -> javawrappers.java.time.LocalDateTime: ...
	def setLastModifiedTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def getLastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def setMethod(self, arg0: Union[int, JInt], ) -> None: ...
	def getSize(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setComment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLastAccessTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Attributes:
	@overload
	def __init__(self, arg0: javawrappers.java.util.jar.Attributes, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	class Name:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.util.jar.Attributes.Name, ) -> javawrappers.java.lang.String: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class JarException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class JarEntry:
	@overload
	def __init__(self, arg0: javawrappers.java.util.jar.JarEntry, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.zip.ZipEntry, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getCodeSigners(self, ) -> JArray(javawrappers.java.security.CodeSigner, 1): ...
	def getTime(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def getCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def setCreationTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def getMethod(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setCrc(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCrc(self, ) -> Union[long, JLong]: ...
	def getComment(self, ) -> javawrappers.java.lang.String: ...
	def setTime(self, arg0: Union[long, JLong], ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.jar.Attributes: ...
	def getTimeLocal(self, ) -> javawrappers.java.time.LocalDateTime: ...
	def setLastModifiedTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def getLastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def getRealName(self, ) -> javawrappers.java.lang.String: ...
	def getCompressedSize(self, ) -> Union[long, JLong]: ...
	def setMethod(self, arg0: Union[int, JInt], ) -> None: ...
	def getSize(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setComment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCreationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCompressedSize(self, arg0: Union[long, JLong], ) -> None: ...
	def setLastAccessTime(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def setExtra(self, arg0: JArray(JByte, 1), ) -> None: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	def setTimeLocal(self, arg0: javawrappers.java.time.LocalDateTime, ) -> None: ...
	def getExtra(self, ) -> JArray(JByte, 1): ...


class Manifest:
	@overload
	def __init__(self, arg0: javawrappers.java.util.jar.Manifest, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, ): ...
	class FastInputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def readLine(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def readLine(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def peek(self, ) -> JByte: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def close(self, ) -> None: ...
	def write(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getAttributes(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.jar.Attributes: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def getMainAttributes(self, ) -> javawrappers.java.util.jar.Attributes: ...
	@overload
	def readLine(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def readLine(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def peek(self, ) -> JByte: ...
	def getEntries(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class JarInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JBoolean], ): ...
	def getNextEntry(self, ) -> javawrappers.java.util.zip.ZipEntry: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def getManifest(self, ) -> javawrappers.java.util.jar.Manifest: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def getNextJarEntry(self, ) -> javawrappers.java.util.jar.JarEntry: ...
	def notify(self, ) -> None: ...
	def closeEntry(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class Pack200:
	class Unpacker:
		@overload
		def unpack(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.util.jar.JarOutputStream, ) -> None: ...
		@overload
		def unpack(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.util.jar.JarOutputStream, ) -> None: ...
		def properties(self, ) -> javawrappers.java.util.SortedMap: ...


	class Packer:
		@overload
		def pack(self, arg0: javawrappers.java.util.jar.JarFile, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
		@overload
		def pack(self, arg0: javawrappers.java.util.jar.JarInputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
		def properties(self, ) -> javawrappers.java.util.SortedMap: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def unpack(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.util.jar.JarOutputStream, ) -> None: ...
	@overload
	def unpack(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.util.jar.JarOutputStream, ) -> None: ...
	@staticmethod
	def newPacker() -> javawrappers.java.util.jar.Pack200.Packer: ...
	@staticmethod
	def newUnpacker() -> javawrappers.java.util.jar.Pack200.Unpacker: ...
	@overload
	def pack(self, arg0: javawrappers.java.util.jar.JarFile, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def pack(self, arg0: javawrappers.java.util.jar.JarInputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def properties(self, ) -> javawrappers.java.util.SortedMap: ...
	@overload
	def properties(self, ) -> javawrappers.java.util.SortedMap: ...
	def notify(self, ) -> None: ...


