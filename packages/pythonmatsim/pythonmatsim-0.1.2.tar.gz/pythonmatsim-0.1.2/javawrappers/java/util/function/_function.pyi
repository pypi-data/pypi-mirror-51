################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class LongFunction:
	def apply(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...


class ObjIntConsumer:
	def accept(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...


class Function:
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	@staticmethod
	def identity() -> javawrappers.java.util.function.Function: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...


class DoubleBinaryOperator:
	def applyAsDouble(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class IntUnaryOperator:
	def applyAsInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def compose(self, arg0: javawrappers.java.util.function.IntUnaryOperator, ) -> javawrappers.java.util.function.IntUnaryOperator: ...
	@staticmethod
	def identity() -> javawrappers.java.util.function.IntUnaryOperator: ...
	def andThen(self, arg0: javawrappers.java.util.function.IntUnaryOperator, ) -> javawrappers.java.util.function.IntUnaryOperator: ...


class BooleanSupplier:
	def getAsBoolean(self, ) -> Union[int, JBoolean]: ...


class IntSupplier:
	def getAsInt(self, ) -> Union[int, JInt]: ...


class IntToDoubleFunction:
	def applyAsDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...


class LongToIntFunction:
	def applyAsInt(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...


class IntBinaryOperator:
	def applyAsInt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...


class UnaryOperator:
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	@staticmethod
	def identity() -> javawrappers.java.util.function.UnaryOperator: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...


class IntFunction:
	def apply(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...


class DoublePredicate:
	def or_(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> javawrappers.java.util.function.DoublePredicate: ...
	def test(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def and(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> javawrappers.java.util.function.DoublePredicate: ...
	def negate(self, ) -> javawrappers.java.util.function.DoublePredicate: ...


class DoubleUnaryOperator:
	def applyAsDouble(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def compose(self, arg0: javawrappers.java.util.function.DoubleUnaryOperator, ) -> javawrappers.java.util.function.DoubleUnaryOperator: ...
	@staticmethod
	def identity() -> javawrappers.java.util.function.DoubleUnaryOperator: ...
	def andThen(self, arg0: javawrappers.java.util.function.DoubleUnaryOperator, ) -> javawrappers.java.util.function.DoubleUnaryOperator: ...


class ObjDoubleConsumer:
	def accept(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> None: ...


class DoubleSupplier:
	def getAsDouble(self, ) -> Union[float, JDouble]: ...


class Supplier:
	def get(self, ) -> javawrappers.java.lang.Object: ...


class ToLongFunction:
	def applyAsLong(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...


class BiConsumer:
	def andThen(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> javawrappers.java.util.function.BiConsumer: ...
	def accept(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...


class LongToDoubleFunction:
	def applyAsDouble(self, arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...


class LongPredicate:
	def or_(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> javawrappers.java.util.function.LongPredicate: ...
	def test(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def and(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> javawrappers.java.util.function.LongPredicate: ...
	def negate(self, ) -> javawrappers.java.util.function.LongPredicate: ...


class IntPredicate:
	def or_(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> javawrappers.java.util.function.IntPredicate: ...
	def test(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def and(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> javawrappers.java.util.function.IntPredicate: ...
	def negate(self, ) -> javawrappers.java.util.function.IntPredicate: ...


class ToDoubleFunction:
	def applyAsDouble(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...


class LongConsumer:
	def andThen(self, arg0: javawrappers.java.util.function.LongConsumer, ) -> javawrappers.java.util.function.LongConsumer: ...
	def accept(self, arg0: Union[long, JLong], ) -> None: ...


class LongUnaryOperator:
	def applyAsLong(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def compose(self, arg0: javawrappers.java.util.function.LongUnaryOperator, ) -> javawrappers.java.util.function.LongUnaryOperator: ...
	@staticmethod
	def identity() -> javawrappers.java.util.function.LongUnaryOperator: ...
	def andThen(self, arg0: javawrappers.java.util.function.LongUnaryOperator, ) -> javawrappers.java.util.function.LongUnaryOperator: ...


class Predicate:
	@staticmethod
	def not_(arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	@staticmethod
	def isEqual(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.function.Predicate: ...


class ToIntBiFunction:
	def applyAsInt(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class ObjLongConsumer:
	def accept(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...


class ToDoubleBiFunction:
	def applyAsDouble(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...


class DoubleConsumer:
	def andThen(self, arg0: javawrappers.java.util.function.DoubleConsumer, ) -> javawrappers.java.util.function.DoubleConsumer: ...
	def accept(self, arg0: Union[float, JDouble], ) -> None: ...


class ToIntFunction:
	def applyAsInt(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class LongBinaryOperator:
	def applyAsLong(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...


class IntConsumer:
	def andThen(self, arg0: javawrappers.java.util.function.IntConsumer, ) -> javawrappers.java.util.function.IntConsumer: ...
	def accept(self, arg0: Union[int, JInt], ) -> None: ...


class DoubleToLongFunction:
	def applyAsLong(self, arg0: Union[float, JDouble], ) -> Union[long, JLong]: ...


class LongSupplier:
	def getAsLong(self, ) -> Union[long, JLong]: ...


class IntToLongFunction:
	def applyAsLong(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...


class ToLongBiFunction:
	def applyAsLong(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...


class Consumer:
	def andThen(self, arg0: javawrappers.java.util.function.Consumer, ) -> javawrappers.java.util.function.Consumer: ...
	def accept(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


class BiPredicate:
	def or_(self, arg0: javawrappers.java.util.function.BiPredicate, ) -> javawrappers.java.util.function.BiPredicate: ...
	def test(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def and(self, arg0: javawrappers.java.util.function.BiPredicate, ) -> javawrappers.java.util.function.BiPredicate: ...
	def negate(self, ) -> javawrappers.java.util.function.BiPredicate: ...


class DoubleFunction:
	def apply(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.Object: ...


class BinaryOperator:
	def apply(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def maxBy(arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.function.BinaryOperator: ...
	@staticmethod
	def minBy(arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.function.BinaryOperator: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.BiFunction: ...


class DoubleToIntFunction:
	def applyAsInt(self, arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...


class BiFunction:
	def apply(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.BiFunction: ...


