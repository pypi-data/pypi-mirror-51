################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.crypto
import javawrappers.java.security
import javawrappers.java.util
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.jdk.internal.misc
import javawrappers.java.security.cert
import javawrappers.java.security.spec
import javawrappers.java.nio.charset
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.javax.security.auth.callback
import javawrappers.javax.security.auth
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class CodeSigner:
	def __init__(self, arg0: javawrappers.java.security.cert.CertPath, arg1: javawrappers.java.security.Timestamp, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSignerCertPath(self, ) -> javawrappers.java.security.cert.CertPath: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> javawrappers.java.security.Timestamp: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Permissions:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.security.Permission, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def elementsAsStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setReadOnly(self, ) -> None: ...


class AlgorithmParametersSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SignatureException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class KeyPairGenerator:
	class Delegate:
		def genKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
		def getProvider(self, ) -> javawrappers.java.security.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.KeyPairGenerator: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyPairGenerator: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyPairGenerator: ...
		@overload
		def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		@overload
		def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		@overload
		def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
		@overload
		def initialize(self, arg0: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...
		def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...


	def genKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...
	@overload
	def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.KeyPairGenerator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyPairGenerator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyPairGenerator: ...
	@overload
	def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initialize(self, arg0: Union[int, JInt], ) -> None: ...


class SecureRandom:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, ): ...
	class StrongPatternHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def nextFloat(self, ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def nextBytes(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	@overload
	def nextBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def longs(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def longs(self, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def longs(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def longs(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def ints(self, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def ints(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def ints(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def ints(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.IntStream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def nextBoolean(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSeed(arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstanceStrong() -> javawrappers.java.security.SecureRandom: ...
	@overload
	def reseed(self, ) -> None: ...
	@overload
	def reseed(self, arg0: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	@overload
	def nextInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def nextInt(self, ) -> Union[int, JInt]: ...
	def generateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def nextLong(self, ) -> Union[long, JLong]: ...
	def nextDouble(self, ) -> Union[float, JDouble]: ...
	def nextGaussian(self, ) -> Union[float, JDouble]: ...
	@overload
	def doubles(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def doubles(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def doubles(self, arg0: Union[long, JLong], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def doubles(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.DoubleStream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.security.SecureRandomParameters: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.SecureRandom: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.SecureRandom: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.SecureRandomParameters, arg2: javawrappers.java.security.Provider, ) -> javawrappers.java.security.SecureRandom: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.SecureRandomParameters, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.security.SecureRandom: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.SecureRandomParameters, ) -> javawrappers.java.security.SecureRandom: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.SecureRandom: ...
	@overload
	def setSeed(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def setSeed(self, arg0: JArray(JByte, 1), ) -> None: ...


class Guard:
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


class UnrecoverableKeyException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GuardedObject:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.security.Guard, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DigestException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PrivateKey:
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def destroy(self, ) -> None: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...


class Identity:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.IdentityScope, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def setPublicKey(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	def notify(self, ) -> None: ...
	def addCertificate(self, arg0: javawrappers.java.security.Certificate, ) -> None: ...
	def certificates(self, ) -> JArray(javawrappers.java.security.Certificate, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setInfo(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...
	def getScope(self, ) -> javawrappers.java.security.IdentityScope: ...
	def removeCertificate(self, arg0: javawrappers.java.security.Certificate, ) -> None: ...


class KeyStore:
	class SimpleLoadStoreParameter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getProtectionParameter(self, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Builder:
		class FileBuilder:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getProtectionParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def getKeyStore(self, ) -> javawrappers.java.security.KeyStore: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@overload
			@staticmethod
			def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
			@overload
			@staticmethod
			def newInstance(arg0: javawrappers.java.io.File, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
			@overload
			@staticmethod
			def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, arg2: javawrappers.java.io.File, arg3: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
			@overload
			@staticmethod
			def newInstance(arg0: javawrappers.java.security.KeyStore, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def getProtectionParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
		@overload
		def getProtectionParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getKeyStore(self, ) -> javawrappers.java.security.KeyStore: ...
		@overload
		def getKeyStore(self, ) -> javawrappers.java.security.KeyStore: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
		@overload
		@staticmethod
		def newInstance(arg0: javawrappers.java.io.File, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
		@overload
		@staticmethod
		def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, arg2: javawrappers.java.io.File, arg3: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
		@overload
		@staticmethod
		def newInstance(arg0: javawrappers.java.security.KeyStore, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
		def notify(self, ) -> None: ...


	class TrustedCertificateEntry:
		@overload
		def __init__(self, arg0: javawrappers.java.security.cert.Certificate, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.security.cert.Certificate, arg1: javawrappers.java.util.Set, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttributes(self, ) -> javawrappers.java.util.Set: ...
		def getTrustedCertificate(self, ) -> javawrappers.java.security.cert.Certificate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SecretKeyEntry:
		@overload
		def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, ): ...
		@overload
		def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: javawrappers.java.util.Set, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getSecretKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttributes(self, ) -> javawrappers.java.util.Set: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class PrivateKeyEntry:
		@overload
		def __init__(self, arg0: javawrappers.java.security.PrivateKey, arg1: JArray(javawrappers.java.security.cert.Certificate, 1), ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.security.PrivateKey, arg1: JArray(javawrappers.java.security.cert.Certificate, 1), arg2: javawrappers.java.util.Set, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttributes(self, ) -> javawrappers.java.util.Set: ...
		def getCertificate(self, ) -> javawrappers.java.security.cert.Certificate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getCertificateChain(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getPrivateKey(self, ) -> javawrappers.java.security.PrivateKey: ...
		def notify(self, ) -> None: ...


	class Entry:
		class Attribute:
			def getValue(self, ) -> javawrappers.java.lang.String: ...
			def getName(self, ) -> javawrappers.java.lang.String: ...


		def getValue(self, ) -> javawrappers.java.lang.String: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def getAttributes(self, ) -> javawrappers.java.util.Set: ...


	class CallbackHandlerProtection:
		def __init__(self, arg0: javawrappers.javax.security.auth.callback.CallbackHandler, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getCallbackHandler(self, ) -> javawrappers.javax.security.auth.callback.CallbackHandler: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class PasswordProtection:
		@overload
		def __init__(self, arg0: JArray(Union[string, JString], 1), ): ...
		@overload
		def __init__(self, arg0: JArray(Union[string, JString], 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getProtectionParameters(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
		def getPassword(self, ) -> JArray(Union[string, JString], 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isDestroyed(self, ) -> Union[int, JBoolean]: ...
		def destroy(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getProtectionAlgorithm(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ProtectionParameter:


	class LoadStoreParameter:
		def getProtectionParameter(self, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...


	def getSecretKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def aliases(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	@overload
	def getCertificateChain(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def notifyAll(self, ) -> None: ...
	def containsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	def getProtectionParameters(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	@overload
	def getCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
	@overload
	def getCertificate(self, ) -> javawrappers.java.security.cert.Certificate: ...
	@overload
	def setKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	@overload
	def setKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def entryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def getEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
	def setEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
	def setCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	def getKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
	def getTrustedCertificate(self, ) -> javawrappers.java.security.cert.Certificate: ...
	@overload
	def getAttributes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getAttributes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getAttributes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getAttributes(self, ) -> javawrappers.java.util.Set: ...
	def getCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def destroy(self, ) -> None: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.io.File, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, arg2: javawrappers.java.io.File, arg3: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.security.KeyStore, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Builder: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	@staticmethod
	def getDefaultType() -> javawrappers.java.lang.String: ...
	def isCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProtectionParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
	@overload
	def getProtectionParameter(self, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
	@overload
	def getProtectionParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
	@overload
	def getProtectionParameter(self, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
	def getPassword(self, ) -> JArray(Union[string, JString], 1): ...
	def size(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def deleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getKeyStore(self, ) -> javawrappers.java.security.KeyStore: ...
	@overload
	def getKeyStore(self, ) -> javawrappers.java.security.KeyStore: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getCallbackHandler(self, ) -> javawrappers.javax.security.auth.callback.CallbackHandler: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.io.File, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.KeyStore: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyStore: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.io.File, arg1: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> javawrappers.java.security.KeyStore: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.KeyStore: ...
	def getPrivateKey(self, ) -> javawrappers.java.security.PrivateKey: ...
	def getProtectionAlgorithm(self, ) -> javawrappers.java.lang.String: ...


class DrbgParameters:
	class Reseed:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAdditionalInput(self, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		def getPredictionResistance(self, ) -> Union[int, JBoolean]: ...


	class NextBytes:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getStrength(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAdditionalInput(self, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		def getPredictionResistance(self, ) -> Union[int, JBoolean]: ...


	class Instantiation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getCapability(self, ) -> javawrappers.java.security.DrbgParameters.Capability: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getStrength(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getPersonalizationString(self, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class Capability:
		PR_AND_RESEED: DrbgParameters.Capability = ...
		RESEED_ONLY: DrbgParameters.Capability = ...
		NONE: DrbgParameters.Capability = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.DrbgParameters.Capability: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.security.DrbgParameters.Capability, 1): ...
		def supportsReseeding(self, ) -> Union[int, JBoolean]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def supportsPredictionResistance(self, ) -> Union[int, JBoolean]: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCapability(self, ) -> javawrappers.java.security.DrbgParameters.Capability: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.DrbgParameters.Capability: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.DrbgParameters.Capability, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getStrength(self, ) -> Union[int, JInt]: ...
	@overload
	def getStrength(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def reseed(arg0: Union[int, JBoolean], arg1: JArray(JByte, 1), ) -> javawrappers.java.security.DrbgParameters.Reseed: ...
	def supportsReseeding(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def getAdditionalInput(self, ) -> JArray(JByte, 1): ...
	@overload
	def getAdditionalInput(self, ) -> JArray(JByte, 1): ...
	def getPersonalizationString(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nextBytes(arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: JArray(JByte, 1), ) -> javawrappers.java.security.DrbgParameters.NextBytes: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def supportsPredictionResistance(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getPredictionResistance(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPredictionResistance(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def instantiation(arg0: Union[int, JInt], arg1: javawrappers.java.security.DrbgParameters.Capability, arg2: JArray(JByte, 1), ) -> javawrappers.java.security.DrbgParameters.Instantiation: ...


class KeyStoreSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
	def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
	def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
	def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineSize(self, ) -> Union[int, JInt]: ...
	def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
	def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class MessageDigest:
	class Delegate:
		def __init__(self, arg0: javawrappers.java.security.MessageDigestSpi, arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def isEqual(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		@overload
		def update(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def update(self, arg0: JByte, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def digest(self, ) -> JArray(JByte, 1): ...
		@overload
		def digest(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@overload
		def digest(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def reset(self, ) -> None: ...
		def getProvider(self, ) -> javawrappers.java.security.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.MessageDigest: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.MessageDigest: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.MessageDigest: ...
		def getDigestLength(self, ) -> Union[int, JInt]: ...
		def engineUpdate(self, arg0: javawrappers.javax.crypto.SecretKey, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isEqual(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def update(self, arg0: JByte, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def digest(self, ) -> JArray(JByte, 1): ...
	@overload
	def digest(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def digest(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def reset(self, ) -> None: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.MessageDigest: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.MessageDigest: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.MessageDigest: ...
	def getDigestLength(self, ) -> Union[int, JInt]: ...
	def engineUpdate(self, arg0: javawrappers.javax.crypto.SecretKey, ) -> None: ...


class DigestInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.security.MessageDigest, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMessageDigest(self, ) -> javawrappers.java.security.MessageDigest: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def setMessageDigest(self, arg0: javawrappers.java.security.MessageDigest, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def on(self, arg0: Union[int, JBoolean], ) -> None: ...


class PolicySpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Provider:
	class Service:
		def __init__(self, arg0: javawrappers.java.security.Provider, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.util.List, arg5: javawrappers.java.util.Map, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
		def newInstance(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getType(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getProvider(self, ) -> javawrappers.java.security.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getClassName(self, ) -> javawrappers.java.lang.String: ...
		def supportsParameter(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


	class EngineDescription:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class UString:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ServiceKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConfigured(self, ) -> Union[int, JBoolean]: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def newInstance(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getServices(self, ) -> javawrappers.java.util.Set: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getVersion(self, ) -> Union[float, JDouble]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def getVersionStr(self, ) -> javawrappers.java.lang.String: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def configure(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getService(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider.Service: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def supportsParameter(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class NoSuchProviderException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Timestamp:
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.security.cert.CertPath, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSignerCertPath(self, ) -> javawrappers.java.security.cert.CertPath: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> javawrappers.java.util.Date: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AccessControlContext:
	@overload
	def __init__(self, arg0: javawrappers.java.security.AccessControlContext, arg1: javawrappers.java.security.DomainCombiner, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.security.ProtectionDomain, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def checkPermission(self, arg0: javawrappers.java.security.Permission, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDomainCombiner(self, ) -> javawrappers.java.security.DomainCombiner: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InvalidAlgorithmParameterException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SecureRandomParameters:


class GeneralSecurityException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PublicKey:
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...


class AuthProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConfigured(self, ) -> Union[int, JBoolean]: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def logout(self, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def login(self, arg0: javawrappers.javax.security.auth.Subject, arg1: javawrappers.javax.security.auth.callback.CallbackHandler, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setCallbackHandler(self, arg0: javawrappers.javax.security.auth.callback.CallbackHandler, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getServices(self, ) -> javawrappers.java.util.Set: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getVersion(self, ) -> Union[float, JDouble]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def getVersionStr(self, ) -> javawrappers.java.lang.String: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def configure(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getService(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider.Service: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class InvalidKeyException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SecureRandomSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ProviderException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Policy:
	def __init__(self, ): ...
	class UnsupportedEmptyCollection:
		def __init__(self, ): ...
		def add(self, arg0: javawrappers.java.security.Permission, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def elementsAsStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def isReadOnly(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def elements(self, ) -> javawrappers.java.util.Enumeration: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def setReadOnly(self, ) -> None: ...


	class Parameters:


	class PolicyDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def getPermissions(self, arg0: javawrappers.java.security.CodeSource, ) -> javawrappers.java.security.PermissionCollection: ...
		@overload
		def getPermissions(self, arg0: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.security.PermissionCollection: ...
		def refresh(self, ) -> None: ...
		@staticmethod
		def getPolicy() -> javawrappers.java.security.Policy: ...
		@staticmethod
		def setPolicy(arg0: javawrappers.java.security.Policy, ) -> None: ...
		def notify(self, ) -> None: ...
		def getType(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getParameters(self, ) -> javawrappers.java.security.Policy.Parameters: ...
		def getProvider(self, ) -> javawrappers.java.security.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, arg2: javawrappers.java.security.Provider, ) -> javawrappers.java.security.Policy: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.security.Policy: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, ) -> javawrappers.java.security.Policy: ...
		def implies(self, arg0: javawrappers.java.security.ProtectionDomain, arg1: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...


	class PolicyInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: javawrappers.java.security.Permission, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getPermissions(self, arg0: javawrappers.java.security.CodeSource, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def getPermissions(self, arg0: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def getPermissions(self, arg0: javawrappers.java.security.CodeSource, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def getPermissions(self, arg0: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def refresh(self, ) -> None: ...
	@overload
	def refresh(self, ) -> None: ...
	@staticmethod
	def getPolicy() -> javawrappers.java.security.Policy: ...
	@staticmethod
	def setPolicy(arg0: javawrappers.java.security.Policy, ) -> None: ...
	def notify(self, ) -> None: ...
	def elementsAsStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getParameters(self, ) -> javawrappers.java.security.Policy.Parameters: ...
	@overload
	def getParameters(self, ) -> javawrappers.java.security.Policy.Parameters: ...
	@overload
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	@overload
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, arg2: javawrappers.java.security.Provider, ) -> javawrappers.java.security.Policy: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.security.Policy: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, ) -> javawrappers.java.security.Policy: ...
	@overload
	def implies(self, arg0: javawrappers.java.security.ProtectionDomain, arg1: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	@overload
	def implies(self, arg0: javawrappers.java.security.ProtectionDomain, arg1: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	@overload
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def setReadOnly(self, ) -> None: ...


class PKCS12Attribute:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CryptoPrimitive:
	MESSAGE_DIGEST: CryptoPrimitive = ...
	SECURE_RANDOM: CryptoPrimitive = ...
	BLOCK_CIPHER: CryptoPrimitive = ...
	STREAM_CIPHER: CryptoPrimitive = ...
	MAC: CryptoPrimitive = ...
	KEY_WRAP: CryptoPrimitive = ...
	PUBLIC_KEY_ENCRYPTION: CryptoPrimitive = ...
	SIGNATURE: CryptoPrimitive = ...
	KEY_ENCAPSULATION: CryptoPrimitive = ...
	KEY_AGREEMENT: CryptoPrimitive = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.CryptoPrimitive: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.CryptoPrimitive, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class KeyException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PrivilegedActionException:
	def __init__(self, arg0: javawrappers.java.lang.Exception, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getException(self, ) -> javawrappers.java.lang.Exception: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class InvalidParameterException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class KeyFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def translateKey(self, arg0: javawrappers.java.security.Key, ) -> javawrappers.java.security.Key: ...
	def notifyAll(self, ) -> None: ...
	def generatePrivate(self, arg0: javawrappers.java.security.spec.KeySpec, ) -> javawrappers.java.security.PrivateKey: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getKeySpec(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.security.spec.KeySpec: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.KeyFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyFactory: ...
	def generatePublic(self, arg0: javawrappers.java.security.spec.KeySpec, ) -> javawrappers.java.security.PublicKey: ...


class Signature:
	class CipherAdapter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Delegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def sign(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def sign(self, ) -> JArray(JByte, 1): ...
		@overload
		def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		@overload
		def update(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def update(self, arg0: JByte, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def initSign(self, arg0: javawrappers.java.security.PrivateKey, ) -> None: ...
		@overload
		def initSign(self, arg0: javawrappers.java.security.PrivateKey, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		@overload
		def initVerify(self, arg0: javawrappers.java.security.cert.Certificate, ) -> None: ...
		@overload
		def initVerify(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getParameters(self, ) -> javawrappers.java.security.AlgorithmParameters: ...
		@overload
		def setParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def setParameter(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def verify(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		@overload
		def verify(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		def getProvider(self, ) -> javawrappers.java.security.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Signature: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Signature: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.Signature: ...
		def getParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sign(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def sign(self, ) -> JArray(JByte, 1): ...
	@overload
	def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def update(self, arg0: JByte, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def initSign(self, arg0: javawrappers.java.security.PrivateKey, ) -> None: ...
	@overload
	def initSign(self, arg0: javawrappers.java.security.PrivateKey, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initVerify(self, arg0: javawrappers.java.security.cert.Certificate, ) -> None: ...
	@overload
	def initVerify(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.security.AlgorithmParameters: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def verify(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def verify(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Signature: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Signature: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.Signature: ...
	def getParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


class AllPermission:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class DomainCombiner:
	def combine(self, arg0: JArray(javawrappers.java.security.ProtectionDomain, 1), arg1: JArray(javawrappers.java.security.ProtectionDomain, 1), ) -> JArray(javawrappers.java.security.ProtectionDomain, 1): ...


class UnresolvedPermission:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getUnresolvedType(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def getUnresolvedName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUnresolvedCerts(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getUnresolvedActions(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...


class AlgorithmParameterGeneratorSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class IdentityScope:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.IdentityScope, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def addIdentity(self, arg0: javawrappers.java.security.Identity, ) -> None: ...
	@staticmethod
	def getSystemScope() -> javawrappers.java.security.IdentityScope: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def setPublicKey(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	def notify(self, ) -> None: ...
	def addCertificate(self, arg0: javawrappers.java.security.Certificate, ) -> None: ...
	def identities(self, ) -> javawrappers.java.util.Enumeration: ...
	def certificates(self, ) -> JArray(javawrappers.java.security.Certificate, 1): ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentity(self, arg0: javawrappers.java.security.Principal, ) -> javawrappers.java.security.Identity: ...
	@overload
	def getIdentity(self, arg0: javawrappers.java.security.PublicKey, ) -> javawrappers.java.security.Identity: ...
	@overload
	def getIdentity(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Identity: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def setInfo(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...
	def removeIdentity(self, arg0: javawrappers.java.security.Identity, ) -> None: ...
	def getScope(self, ) -> javawrappers.java.security.IdentityScope: ...
	def removeCertificate(self, arg0: javawrappers.java.security.Certificate, ) -> None: ...


class KeyFactorySpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MessageDigestSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Permission:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class Security:
	class ProviderProperty:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def addProvider(arg0: javawrappers.java.security.Provider, ) -> Union[int, JInt]: ...
	@staticmethod
	def getProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getProviders(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.Provider, 1): ...
	@overload
	@staticmethod
	def getProviders(arg0: javawrappers.java.util.Map, ) -> JArray(javawrappers.java.security.Provider, 1): ...
	@overload
	@staticmethod
	def getProviders() -> JArray(javawrappers.java.security.Provider, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def insertProviderAt(arg0: javawrappers.java.security.Provider, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getAlgorithmProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def removeProvider(arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def getProvider(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAlgorithms(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...


class NoSuchAlgorithmException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class URIParameter:
	def __init__(self, arg0: javawrappers.java.net.URI, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getURI(self, ) -> javawrappers.java.net.URI: ...


class KeyRep:
	def __init__(self, arg0: javawrappers.java.security.KeyRep.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(JByte, 1), ): ...
	class Type:
		SECRET: KeyRep.Type = ...
		PUBLIC: KeyRep.Type = ...
		PRIVATE: KeyRep.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyRep.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.security.KeyRep.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.KeyRep.Type: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.KeyRep.Type, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Principal:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...


class UnrecoverableEntryException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class KeyStoreException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Signer:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.IdentityScope, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def setPublicKey(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	def notify(self, ) -> None: ...
	def addCertificate(self, arg0: javawrappers.java.security.Certificate, ) -> None: ...
	def certificates(self, ) -> JArray(javawrappers.java.security.Certificate, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setKeyPair(self, arg0: javawrappers.java.security.KeyPair, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def setInfo(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...
	def getPrivateKey(self, ) -> javawrappers.java.security.PrivateKey: ...
	def getScope(self, ) -> javawrappers.java.security.IdentityScope: ...
	def removeCertificate(self, arg0: javawrappers.java.security.Certificate, ) -> None: ...


class PrivilegedExceptionAction:
	def run(self, ) -> javawrappers.java.lang.Object: ...


class Certificate:
	def encode(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def toString(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def getGuarantor(self, ) -> javawrappers.java.security.Principal: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...


class PermissionCollection:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.security.Permission, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def elementsAsStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setReadOnly(self, ) -> None: ...


class KeyManagementException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CodeSource:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: JArray(javawrappers.java.security.cert.Certificate, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: JArray(javawrappers.java.security.CodeSigner, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.java.net.URL: ...
	def getCodeSigners(self, ) -> JArray(javawrappers.java.security.CodeSigner, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.CodeSource, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class DomainLoadStoreParameter:
	def __init__(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getProtectionParameter(self, ) -> javawrappers.java.security.KeyStore.ProtectionParameter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getConfiguration(self, ) -> javawrappers.java.net.URI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getProtectionParams(self, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...


class AlgorithmConstraints:
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.Key, arg3: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...


class ProtectionDomain:
	@overload
	def __init__(self, arg0: javawrappers.java.security.CodeSource, arg1: javawrappers.java.security.PermissionCollection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.CodeSource, arg1: javawrappers.java.security.PermissionCollection, arg2: javawrappers.java.lang.ClassLoader, arg3: JArray(javawrappers.java.security.Principal, 1), ): ...
	class Key:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DebugHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class JavaSecurityAccessImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def doIntersectionPrivilege(self, arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
		@overload
		def doIntersectionPrivilege(self, arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, arg2: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getProtectionDomainCache(self, ) -> javawrappers.jdk.internal.misc.JavaSecurityAccess.ProtectionDomainCache: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getProtectDomains(self, arg0: javawrappers.java.security.AccessControlContext, ) -> JArray(javawrappers.java.security.ProtectionDomain, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getPermissions(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def getProtectionDomainCache(self, ) -> javawrappers.jdk.internal.misc.JavaSecurityAccess.ProtectionDomainCache: ...
	def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def getPrincipals(self, ) -> JArray(javawrappers.java.security.Principal, 1): ...
	def getCodeSource(self, ) -> javawrappers.java.security.CodeSource: ...
	def getProtectDomains(self, arg0: javawrappers.java.security.AccessControlContext, ) -> JArray(javawrappers.java.security.ProtectionDomain, 1): ...
	def notify(self, ) -> None: ...
	@overload
	def doIntersectionPrivilege(self, arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
	@overload
	def doIntersectionPrivilege(self, arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, arg2: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def staticPermissionsOnly(self, ) -> Union[int, JBoolean]: ...


class AlgorithmParameterGenerator:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.AlgorithmParameterGenerator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.AlgorithmParameterGenerator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.AlgorithmParameterGenerator: ...
	def notify(self, ) -> None: ...
	def generateParameters(self, ) -> javawrappers.java.security.AlgorithmParameters: ...


class Key:
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...


class SecureClassLoader:
	class CodeSourceKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DebugHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class KeyPair:
	def __init__(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.security.PrivateKey, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrivate(self, ) -> javawrappers.java.security.PrivateKey: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPublic(self, ) -> javawrappers.java.security.PublicKey: ...
	def notify(self, ) -> None: ...


class AlgorithmParameters:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def init(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	@overload
	def getEncoded(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.AlgorithmParameters: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.AlgorithmParameters: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.AlgorithmParameters: ...
	def notify(self, ) -> None: ...
	def getParameterSpec(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class BasicPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class AccessController:
	class AccHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def checkPermission(arg0: javawrappers.java.security.Permission, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def doPrivilegedWithCombiner(arg0: javawrappers.java.security.PrivilegedAction, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivilegedWithCombiner(arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, *arg2: javawrappers.java.security.Permission, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivilegedWithCombiner(arg0: javawrappers.java.security.PrivilegedExceptionAction, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivilegedWithCombiner(arg0: javawrappers.java.security.PrivilegedExceptionAction, arg1: javawrappers.java.security.AccessControlContext, *arg2: javawrappers.java.security.Permission, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getContext() -> javawrappers.java.security.AccessControlContext: ...
	@overload
	@staticmethod
	def doPrivileged(arg0: javawrappers.java.security.PrivilegedAction, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivileged(arg0: javawrappers.java.security.PrivilegedExceptionAction, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivileged(arg0: javawrappers.java.security.PrivilegedExceptionAction, arg1: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivileged(arg0: javawrappers.java.security.PrivilegedExceptionAction, arg1: javawrappers.java.security.AccessControlContext, *arg2: javawrappers.java.security.Permission, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivileged(arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def doPrivileged(arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, *arg2: javawrappers.java.security.Permission, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class AccessControlException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Permission, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SignatureSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DigestOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.security.MessageDigest, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMessageDigest(self, ) -> javawrappers.java.security.MessageDigest: ...
	def notifyAll(self, ) -> None: ...
	def setMessageDigest(self, arg0: javawrappers.java.security.MessageDigest, ) -> None: ...
	def notify(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def on(self, arg0: Union[int, JBoolean], ) -> None: ...


class PrivilegedAction:
	def run(self, ) -> javawrappers.java.lang.Object: ...


class SecurityPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class SignedObject:
	def __init__(self, arg0: javawrappers.java.io.Serializable, arg1: javawrappers.java.security.PrivateKey, arg2: javawrappers.java.security.Signature, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.security.Signature, ) -> Union[int, JBoolean]: ...
	def getSignature(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class KeyPairGeneratorSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	def notify(self, ) -> None: ...
	def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...


