################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.math
import javawrappers.java.security.spec

from jpype.types import *
from typing import Union

from typing import overload

class RSAPublicKeySpec:
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getPublicExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class DSAParameterSpec:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getG(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getP(self, ) -> javawrappers.java.math.BigInteger: ...
	def getQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...


class RSAOtherPrimeInfo:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrime(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCrtCoefficient(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...
	def getExponent(self, ) -> javawrappers.java.math.BigInteger: ...


class PKCS8EncodedKeySpec:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RSAKeyGenParameterSpec:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigInteger, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getKeysize(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getPublicExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def getKeyParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class ECPrivateKeySpec:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.security.spec.ECParameterSpec, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getS(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...
	def getParams(self, ) -> javawrappers.java.security.spec.ECParameterSpec: ...


class XECPublicKeySpec:
	def __init__(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	def getU(self, ) -> javawrappers.java.math.BigInteger: ...


class EllipticCurve:
	@overload
	def __init__(self, arg0: javawrappers.java.security.spec.ECField, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.spec.ECField, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSeed(self, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getField(self, ) -> javawrappers.java.security.spec.ECField: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getA(self, ) -> javawrappers.java.math.BigInteger: ...
	def getB(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...


class RSAPrivateCrtKeySpec:
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, arg4: javawrappers.java.math.BigInteger, arg5: javawrappers.java.math.BigInteger, arg6: javawrappers.java.math.BigInteger, arg7: javawrappers.java.math.BigInteger, arg8: javawrappers.java.security.spec.AlgorithmParameterSpec, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, arg4: javawrappers.java.math.BigInteger, arg5: javawrappers.java.math.BigInteger, arg6: javawrappers.java.math.BigInteger, arg7: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrivateExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def getPrimeQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def notifyAll(self, ) -> None: ...
	def getPrimeP(self, ) -> javawrappers.java.math.BigInteger: ...
	def getCrtCoefficient(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...
	def getPublicExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPrimeExponentQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def getPrimeExponentP(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class KeySpec:


class RSAPrivateKeySpec:
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrivateExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class InvalidKeySpecException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ECParameterSpec:
	def __init__(self, arg0: javawrappers.java.security.spec.EllipticCurve, arg1: javawrappers.java.security.spec.ECPoint, arg2: javawrappers.java.math.BigInteger, arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getGenerator(self, ) -> javawrappers.java.security.spec.ECPoint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCofactor(self, ) -> Union[int, JInt]: ...
	def getOrder(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getCurve(self, ) -> javawrappers.java.security.spec.EllipticCurve: ...


class X509EncodedKeySpec:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InvalidParameterSpecException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class RSAMultiPrimePrivateCrtKeySpec:
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, arg4: javawrappers.java.math.BigInteger, arg5: javawrappers.java.math.BigInteger, arg6: javawrappers.java.math.BigInteger, arg7: javawrappers.java.math.BigInteger, arg8: JArray(javawrappers.java.security.spec.RSAOtherPrimeInfo, 1), arg9: javawrappers.java.security.spec.AlgorithmParameterSpec, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, arg4: javawrappers.java.math.BigInteger, arg5: javawrappers.java.math.BigInteger, arg6: javawrappers.java.math.BigInteger, arg7: javawrappers.java.math.BigInteger, arg8: JArray(javawrappers.java.security.spec.RSAOtherPrimeInfo, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrivateExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def getPrimeQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def notifyAll(self, ) -> None: ...
	def getPrimeP(self, ) -> javawrappers.java.math.BigInteger: ...
	def getCrtCoefficient(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...
	def getPublicExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPrimeExponentQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def getOtherPrimeInfo(self, ) -> JArray(javawrappers.java.security.spec.RSAOtherPrimeInfo, 1): ...
	def getPrimeExponentP(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class DSAPublicKeySpec:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getG(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getY(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getP(self, ) -> javawrappers.java.math.BigInteger: ...
	def getQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...


class ECPublicKeySpec:
	def __init__(self, arg0: javawrappers.java.security.spec.ECPoint, arg1: javawrappers.java.security.spec.ECParameterSpec, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getW(self, ) -> javawrappers.java.security.spec.ECPoint: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getParams(self, ) -> javawrappers.java.security.spec.ECParameterSpec: ...


class AlgorithmParameterSpec:


class XECPrivateKeySpec:
	def __init__(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getScalar(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class DSAGenParameterSpec:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeedLength(self, ) -> Union[int, JInt]: ...
	def getPrimePLength(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSubprimeQLength(self, ) -> Union[int, JInt]: ...


class DSAPrivateKeySpec:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getG(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getX(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getP(self, ) -> javawrappers.java.math.BigInteger: ...
	def getQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...


class ECField:
	def getFieldSize(self, ) -> Union[int, JInt]: ...


class ECFieldFp:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFieldSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getP(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...


class ECGenParameterSpec:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ECPoint:
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAffineY(self, ) -> javawrappers.java.math.BigInteger: ...
	def getAffineX(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class NamedParameterSpec:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PSSParameterSpec:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getMGFParameters(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMGFAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getSaltLength(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDigestAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTrailerField(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class EncodedKeySpec:
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MGF1ParameterSpec:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDigestAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ECFieldF2m:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigInteger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMidTermsOfReductionPolynomial(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFieldSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getM(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getReductionPolynomial(self, ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...


