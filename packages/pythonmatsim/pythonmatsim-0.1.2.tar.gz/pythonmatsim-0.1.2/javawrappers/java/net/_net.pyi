################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.java.util.jar
import javawrappers.java.util.function
import javawrappers.java.nio.channels
import javawrappers.java.security.cert
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class PasswordAuthentication:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPassword(self, ) -> JArray(Union[string, JString], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getUserName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class URL:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.URLStreamHandler, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.net.URLStreamHandler, ): ...
	class DefaultFactory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def createURLStreamHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URLStreamHandler: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setURLStreamHandlerFactory(arg0: javawrappers.java.net.URLStreamHandlerFactory, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getRef(self, ) -> javawrappers.java.lang.String: ...
	def sameFile(self, arg0: javawrappers.java.net.URL, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def getHost(self, ) -> javawrappers.java.lang.String: ...
	def getQuery(self, ) -> javawrappers.java.lang.String: ...
	def createURLStreamHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URLStreamHandler: ...
	def getDefaultPort(self, ) -> Union[int, JInt]: ...
	@overload
	def openConnection(self, ) -> javawrappers.java.net.URLConnection: ...
	@overload
	def openConnection(self, arg0: javawrappers.java.net.Proxy, ) -> javawrappers.java.net.URLConnection: ...
	def toURI(self, ) -> javawrappers.java.net.URI: ...
	def getProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getAuthority(self, ) -> javawrappers.java.lang.String: ...
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	def toExternalForm(self, ) -> javawrappers.java.lang.String: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserInfo(self, ) -> javawrappers.java.lang.String: ...


class URI:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	class Parser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def toASCIIString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def resolve(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.net.URI: ...
	@overload
	def resolve(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URI: ...
	def isOpaque(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.net.URI, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getRawAuthority(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def normalize(self, ) -> javawrappers.java.net.URI: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URI: ...
	def relativize(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.net.URI: ...
	def getHost(self, ) -> javawrappers.java.lang.String: ...
	def getQuery(self, ) -> javawrappers.java.lang.String: ...
	def toURL(self, ) -> javawrappers.java.net.URL: ...
	def getScheme(self, ) -> javawrappers.java.lang.String: ...
	def getRawFragment(self, ) -> javawrappers.java.lang.String: ...
	def getAuthority(self, ) -> javawrappers.java.lang.String: ...
	def getRawQuery(self, ) -> javawrappers.java.lang.String: ...
	def getRawUserInfo(self, ) -> javawrappers.java.lang.String: ...
	def getRawSchemeSpecificPart(self, ) -> javawrappers.java.lang.String: ...
	def parseServerAuthority(self, ) -> javawrappers.java.net.URI: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isAbsolute(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRawPath(self, ) -> javawrappers.java.lang.String: ...
	def getFragment(self, ) -> javawrappers.java.lang.String: ...
	def getUserInfo(self, ) -> javawrappers.java.lang.String: ...
	def getSchemeSpecificPart(self, ) -> javawrappers.java.lang.String: ...


class CookieStore:
	def add(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.HttpCookie, ) -> None: ...
	def removeAll(self, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.util.List: ...
	def getCookies(self, ) -> javawrappers.java.util.List: ...
	def getURIs(self, ) -> javawrappers.java.util.List: ...
	def remove(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.HttpCookie, ) -> Union[int, JBoolean]: ...


class SocketException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Authenticator:
	def __init__(self, ): ...
	class RequestorType:
		PROXY: Authenticator.RequestorType = ...
		SERVER: Authenticator.RequestorType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.Authenticator.RequestorType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.net.Authenticator.RequestorType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.Authenticator.RequestorType: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.net.Authenticator.RequestorType, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getDefault() -> javawrappers.java.net.Authenticator: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def requestPasswordAuthentication(arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> javawrappers.java.net.PasswordAuthentication: ...
	@overload
	@staticmethod
	def requestPasswordAuthentication(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.InetAddress, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.net.URL, arg7: javawrappers.java.net.Authenticator.RequestorType, ) -> javawrappers.java.net.PasswordAuthentication: ...
	@overload
	@staticmethod
	def requestPasswordAuthentication(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.InetAddress, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, ) -> javawrappers.java.net.PasswordAuthentication: ...
	@overload
	@staticmethod
	def requestPasswordAuthentication(arg0: javawrappers.java.net.Authenticator, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.lang.String, arg7: javawrappers.java.net.URL, arg8: javawrappers.java.net.Authenticator.RequestorType, ) -> javawrappers.java.net.PasswordAuthentication: ...
	@staticmethod
	def setDefault(arg0: javawrappers.java.net.Authenticator, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def requestPasswordAuthenticationInstance(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.InetAddress, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.net.URL, arg7: javawrappers.java.net.Authenticator.RequestorType, ) -> javawrappers.java.net.PasswordAuthentication: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class CookieManager:
	@overload
	def __init__(self, arg0: javawrappers.java.net.CookieStore, arg1: javawrappers.java.net.CookiePolicy, ): ...
	@overload
	def __init__(self, ): ...
	class CookiePathComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.net.HttpCookie, arg1: javawrappers.java.net.HttpCookie, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compare(self, arg0: javawrappers.java.net.HttpCookie, arg1: javawrappers.java.net.HttpCookie, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getDefault() -> javawrappers.java.net.CookieHandler: ...
	@staticmethod
	def setDefault(arg0: javawrappers.java.net.CookieHandler, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def setCookiePolicy(self, arg0: javawrappers.java.net.CookiePolicy, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def getCookieStore(self, ) -> javawrappers.java.net.CookieStore: ...


class NoRouteToHostException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ContentHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getContent(self, arg0: javawrappers.java.net.URLConnection, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: javawrappers.java.net.URLConnection, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class URLEncoder:
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DatagramSocket:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.SocketAddress, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.net.InetAddress, ): ...
	@staticmethod
	def setDatagramSocketImplFactory(arg0: javawrappers.java.net.DatagramSocketImplFactory, ) -> None: ...
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ) -> None: ...
	def setTrafficClass(self, arg0: Union[int, JInt], ) -> None: ...
	def receive(self, arg0: javawrappers.java.net.DatagramPacket, ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.DatagramSocket: ...
	def getBroadcast(self, ) -> Union[int, JBoolean]: ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getTrafficClass(self, ) -> Union[int, JInt]: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSendBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getSendBufferSize(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBroadcast(self, arg0: Union[int, JBoolean], ) -> None: ...
	def send(self, arg0: javawrappers.java.net.DatagramPacket, ) -> None: ...
	def getRemoteSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...


class FileNameMap:
	def getContentTypeFor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class Socket:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.Proxy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isInputShutdown(self, ) -> Union[int, JBoolean]: ...
	def setTcpNoDelay(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def getKeepAlive(self, ) -> Union[int, JBoolean]: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def getSoLinger(self, ) -> Union[int, JInt]: ...
	def getTcpNoDelay(self, ) -> Union[int, JBoolean]: ...
	def setSoLinger(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], ) -> None: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def getTrafficClass(self, ) -> Union[int, JInt]: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	@staticmethod
	def setSocketImplFactory(arg0: javawrappers.java.net.SocketImplFactory, ) -> None: ...
	def shutdownInput(self, ) -> None: ...
	def setPerformancePreferences(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def sendUrgentData(self, arg0: Union[int, JInt], ) -> None: ...
	def getRemoteSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getOOBInline(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isOutputShutdown(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> None: ...
	def setTrafficClass(self, arg0: Union[int, JInt], ) -> None: ...
	def setOOBInline(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.Socket: ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	def setKeepAlive(self, arg0: Union[int, JBoolean], ) -> None: ...
	def shutdownOutput(self, ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSendBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getSendBufferSize(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...


class StandardProtocolFamily:
	INET: StandardProtocolFamily = ...
	INET6: StandardProtocolFamily = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.StandardProtocolFamily: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.net.StandardProtocolFamily, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class IDN:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def toASCII(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toASCII(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def toUnicode(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnicode(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DatagramSocketImplFactory:
	def createDatagramSocketImpl(self, ) -> javawrappers.java.net.DatagramSocketImpl: ...


class Inet6Address:
	class Inet6AddressHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getScopedInterface(self, ) -> javawrappers.java.net.NetworkInterface: ...
	def isMCOrgLocal(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def isMCLinkLocal(self, ) -> Union[int, JBoolean]: ...
	def isLoopbackAddress(self, ) -> Union[int, JBoolean]: ...
	def isSiteLocalAddress(self, ) -> Union[int, JBoolean]: ...
	def isMulticastAddress(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getByName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def getLoopbackAddress() -> javawrappers.java.net.InetAddress: ...
	def getAddress(self, ) -> JArray(JByte, 1): ...
	def getHostAddress(self, ) -> javawrappers.java.lang.String: ...
	def isMCNodeLocal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isReachable(self, arg0: javawrappers.java.net.NetworkInterface, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isReachable(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getScopeId(self, ) -> Union[int, JInt]: ...
	def isMCSiteLocal(self, ) -> Union[int, JBoolean]: ...
	def getHostName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAllByName(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	def isMCGlobal(self, ) -> Union[int, JBoolean]: ...
	def getCanonicalHostName(self, ) -> javawrappers.java.lang.String: ...
	def isLinkLocalAddress(self, ) -> Union[int, JBoolean]: ...
	def isAnyLocalAddress(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLocalHost() -> javawrappers.java.net.InetAddress: ...
	def isIPv4CompatibleAddress(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getByAddress(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: Union[int, JInt], ) -> javawrappers.java.net.Inet6Address: ...
	@overload
	@staticmethod
	def getByAddress(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: javawrappers.java.net.NetworkInterface, ) -> javawrappers.java.net.Inet6Address: ...
	@overload
	@staticmethod
	def getByAddress(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	@overload
	@staticmethod
	def getByAddress(arg0: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class BindException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class URLDecoder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SecureCacheResponse:
	def __init__(self, ): ...
	def getCipherSuite(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getHeaders(self, ) -> javawrappers.java.util.Map: ...
	def getBody(self, ) -> javawrappers.java.io.InputStream: ...
	def getLocalPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getServerCertificateChain(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLocalCertificateChain(self, ) -> javawrappers.java.util.List: ...
	def getPeerPrincipal(self, ) -> javawrappers.java.security.Principal: ...


class CacheResponse:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getHeaders(self, ) -> javawrappers.java.util.Map: ...
	def getBody(self, ) -> javawrappers.java.io.InputStream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ServerSocket:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, ): ...
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.ServerSocket: ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def accept(self, ) -> javawrappers.java.net.Socket: ...
	def setPerformancePreferences(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setSocketFactory(arg0: javawrappers.java.net.SocketImplFactory, ) -> None: ...


class SocketTimeoutException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class UnknownHostException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ProtocolFamily:
	def name(self, ) -> javawrappers.java.lang.String: ...


class UnknownServiceException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MulticastSocket:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.SocketAddress, ): ...
	@overload
	def __init__(self, ): ...
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def getTrafficClass(self, ) -> Union[int, JInt]: ...
	def setTTL(self, arg0: JByte, ) -> None: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setBroadcast(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTimeToLive(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def send(self, arg0: javawrappers.java.net.DatagramPacket, arg1: JByte, ) -> None: ...
	@overload
	def send(self, arg0: javawrappers.java.net.DatagramPacket, ) -> None: ...
	def getTTL(self, ) -> JByte: ...
	def getRemoteSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	@staticmethod
	def setDatagramSocketImplFactory(arg0: javawrappers.java.net.DatagramSocketImplFactory, ) -> None: ...
	def setInterface(self, arg0: javawrappers.java.net.InetAddress, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def joinGroup(self, arg0: javawrappers.java.net.InetAddress, ) -> None: ...
	@overload
	def joinGroup(self, arg0: javawrappers.java.net.SocketAddress, arg1: javawrappers.java.net.NetworkInterface, ) -> None: ...
	def getTimeToLive(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setLoopbackMode(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNetworkInterface(self, ) -> javawrappers.java.net.NetworkInterface: ...
	def close(self, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ) -> None: ...
	def setTrafficClass(self, arg0: Union[int, JInt], ) -> None: ...
	def setNetworkInterface(self, arg0: javawrappers.java.net.NetworkInterface, ) -> None: ...
	def receive(self, arg0: javawrappers.java.net.DatagramPacket, ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.DatagramSocket: ...
	def getInterface(self, ) -> javawrappers.java.net.InetAddress: ...
	def getBroadcast(self, ) -> Union[int, JBoolean]: ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	@overload
	def leaveGroup(self, arg0: javawrappers.java.net.SocketAddress, arg1: javawrappers.java.net.NetworkInterface, ) -> None: ...
	@overload
	def leaveGroup(self, arg0: javawrappers.java.net.InetAddress, ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSendBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getSendBufferSize(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLoopbackMode(self, ) -> Union[int, JBoolean]: ...


class URLClassLoader:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.lang.ClassLoader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.net.URL, 1), arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.net.URLStreamHandlerFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.net.URL, 1), arg2: javawrappers.java.lang.ClassLoader, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.net.URL, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.lang.ClassLoader, arg2: javawrappers.java.net.URLStreamHandlerFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	def getURLs(self, ) -> JArray(javawrappers.java.net.URL, 1): ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.net.URLClassLoader: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.net.URL, 1), ) -> javawrappers.java.net.URLClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HttpURLConnection:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	def getInstanceFollowRedirects(self, ) -> Union[int, JBoolean]: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getHeaderFieldLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def setFollowRedirects(arg0: Union[int, JBoolean], ) -> None: ...
	def setRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoInput(self, ) -> Union[int, JBoolean]: ...
	def getIfModifiedSince(self, ) -> Union[long, JLong]: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	@staticmethod
	def getDefaultAllowUserInteraction() -> Union[int, JBoolean]: ...
	@overload
	def getDefaultUseCaches(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getDefaultUseCaches(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getAllowUserInteraction(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAllowUserInteraction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestProperties(self, ) -> javawrappers.java.util.Map: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def getHeaderField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaderField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getHeaderFields(self, ) -> javawrappers.java.util.Map: ...
	def getContentLengthLong(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def setDefaultAllowUserInteraction(arg0: Union[int, JBoolean], ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setFixedLengthStreamingMode(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def setFixedLengthStreamingMode(self, arg0: Union[int, JInt], ) -> None: ...
	def usingProxy(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def setDefaultUseCaches(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDefaultUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDoOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def guessContentTypeFromName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, ) -> Union[long, JLong]: ...
	def setRequestMethod(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setIfModifiedSince(self, arg0: Union[long, JLong], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def setInstanceFollowRedirects(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getResponseMessage(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeaderFieldInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRequestProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guessContentTypeFromStream(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.String: ...
	def getErrorStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAuthenticator(self, arg0: javawrappers.java.net.Authenticator, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultRequestProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getHeaderFieldDate(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDate(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getFileNameMap() -> javawrappers.java.net.FileNameMap: ...
	def connect(self, ) -> None: ...
	def getHeaderFieldKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setContentHandlerFactory(arg0: javawrappers.java.net.ContentHandlerFactory, ) -> None: ...
	def getContentEncoding(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getFollowRedirects() -> Union[int, JBoolean]: ...
	def getUseCaches(self, ) -> Union[int, JBoolean]: ...
	def setDoInput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestMethod(self, ) -> javawrappers.java.lang.String: ...
	def addRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getExpiration(self, ) -> Union[long, JLong]: ...
	def setChunkedStreamingMode(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getDefaultRequestProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResponseCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setFileNameMap(arg0: javawrappers.java.net.FileNameMap, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getDoOutput(self, ) -> Union[int, JBoolean]: ...


class URLStreamHandlerFactory:
	def createURLStreamHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URLStreamHandler: ...


class CookiePolicy:
	def shouldAccept(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.HttpCookie, ) -> Union[int, JBoolean]: ...


class Proxy:
	def __init__(self, arg0: javawrappers.java.net.Proxy.Type, arg1: javawrappers.java.net.SocketAddress, ): ...
	class Type:
		DIRECT: Proxy.Type = ...
		HTTP: Proxy.Type = ...
		SOCKS: Proxy.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.Proxy.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.net.Proxy.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def address(self, ) -> javawrappers.java.net.SocketAddress: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.Proxy.Type: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.net.Proxy.Type, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def type(self, ) -> javawrappers.java.net.Proxy.Type: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class URLConnection:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getHeaderFieldLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoInput(self, ) -> Union[int, JBoolean]: ...
	def getIfModifiedSince(self, ) -> Union[long, JLong]: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	@staticmethod
	def getDefaultAllowUserInteraction() -> Union[int, JBoolean]: ...
	@overload
	def getDefaultUseCaches(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getDefaultUseCaches(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getAllowUserInteraction(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAllowUserInteraction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestProperties(self, ) -> javawrappers.java.util.Map: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def getHeaderField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaderField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getHeaderFields(self, ) -> javawrappers.java.util.Map: ...
	def getContentLengthLong(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def setDefaultAllowUserInteraction(arg0: Union[int, JBoolean], ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def setDefaultUseCaches(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDefaultUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDoOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def guessContentTypeFromName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, ) -> Union[long, JLong]: ...
	def setIfModifiedSince(self, arg0: Union[long, JLong], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getHeaderFieldInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRequestProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guessContentTypeFromStream(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultRequestProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getHeaderFieldDate(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDate(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getFileNameMap() -> javawrappers.java.net.FileNameMap: ...
	def connect(self, ) -> None: ...
	def getHeaderFieldKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setContentHandlerFactory(arg0: javawrappers.java.net.ContentHandlerFactory, ) -> None: ...
	def getContentEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getUseCaches(self, ) -> Union[int, JBoolean]: ...
	def setDoInput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getExpiration(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getDefaultRequestProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setFileNameMap(arg0: javawrappers.java.net.FileNameMap, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getDoOutput(self, ) -> Union[int, JBoolean]: ...


class DatagramPacket:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: javawrappers.java.net.SocketAddress, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.net.SocketAddress, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.net.InetAddress, arg4: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAddress(self, arg0: javawrappers.java.net.InetAddress, ) -> None: ...
	@overload
	def setData(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setData(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def setSocketAddress(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def setLength(self, arg0: Union[int, JInt], ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def getSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getData(self, ) -> JArray(JByte, 1): ...


class URLStreamHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class URLPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	class Authority:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class SocketOptions:
	def setOption(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getOption(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...


class PortUnreachableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class URISyntaxException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getInput(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class InetAddress:
	class CachedLocalHost:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class HostsFileNameService:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getHostByAddr(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lookupAllHostAddr(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
		def notify(self, ) -> None: ...


	class PlatformNameService:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getHostByAddr(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lookupAllHostAddr(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
		def notify(self, ) -> None: ...


	class NameService:
		def getHostByAddr(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		def lookupAllHostAddr(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...


	class NameServiceAddresses:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CachedAddresses:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.net.InetAddress.CachedAddresses, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class Addresses:
		def get(self, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...


	class InetAddressHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getHostByAddr(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def getHostByAddr(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def getHostByAddr(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isMCOrgLocal(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.net.InetAddress.CachedAddresses, ) -> Union[int, JInt]: ...
	@overload
	def lookupAllHostAddr(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	@overload
	def lookupAllHostAddr(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	@overload
	def lookupAllHostAddr(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	def notify(self, ) -> None: ...
	def isMCLinkLocal(self, ) -> Union[int, JBoolean]: ...
	def isLoopbackAddress(self, ) -> Union[int, JBoolean]: ...
	def isSiteLocalAddress(self, ) -> Union[int, JBoolean]: ...
	def isMulticastAddress(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	@overload
	def get(self, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	@overload
	def get(self, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	@staticmethod
	def getByName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def getLoopbackAddress() -> javawrappers.java.net.InetAddress: ...
	def getAddress(self, ) -> JArray(JByte, 1): ...
	def getHostAddress(self, ) -> javawrappers.java.lang.String: ...
	def isMCNodeLocal(self, ) -> Union[int, JBoolean]: ...
	def isMCSiteLocal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isReachable(self, arg0: javawrappers.java.net.NetworkInterface, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isReachable(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getHostName(self, ) -> javawrappers.java.lang.String: ...
	def isMCGlobal(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getAllByName(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	def getCanonicalHostName(self, ) -> javawrappers.java.lang.String: ...
	def isLinkLocalAddress(self, ) -> Union[int, JBoolean]: ...
	def isAnyLocalAddress(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLocalHost() -> javawrappers.java.net.InetAddress: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getByAddress(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	@overload
	@staticmethod
	def getByAddress(arg0: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CookieHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.java.net.CookieHandler: ...
	@staticmethod
	def setDefault(arg0: javawrappers.java.net.CookieHandler, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ) -> None: ...


class SocketPermission:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	class EphemeralRange:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class InterfaceAddress:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBroadcast(self, ) -> javawrappers.java.net.InetAddress: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNetworkPrefixLength(self, ) -> Union[int, JShort]: ...
	def getAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ContentHandlerFactory:
	def createContentHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.ContentHandler: ...


class ProxySelector:
	def __init__(self, ): ...
	class StaticProxySelector:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def select(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.util.List: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def of(arg0: javawrappers.java.net.InetSocketAddress, ) -> javawrappers.java.net.ProxySelector: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getDefault() -> javawrappers.java.net.ProxySelector: ...
		@staticmethod
		def setDefault(arg0: javawrappers.java.net.ProxySelector, ) -> None: ...
		def notify(self, ) -> None: ...
		def connectFailed(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.SocketAddress, arg2: javawrappers.java.io.IOException, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def select(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.util.List: ...
	@overload
	def select(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: javawrappers.java.net.InetSocketAddress, ) -> javawrappers.java.net.ProxySelector: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.java.net.ProxySelector: ...
	@staticmethod
	def setDefault(arg0: javawrappers.java.net.ProxySelector, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def connectFailed(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.SocketAddress, arg2: javawrappers.java.io.IOException, ) -> None: ...
	@overload
	def connectFailed(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.SocketAddress, arg2: javawrappers.java.io.IOException, ) -> None: ...


class InetSocketAddress:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	class InetSocketAddressHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createUnresolved(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.net.InetSocketAddress: ...
	def getHostName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def isUnresolved(self, ) -> Union[int, JBoolean]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getHostString(self, ) -> javawrappers.java.lang.String: ...
	def getAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ProtocolException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NetworkInterface:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterfaceAddresses(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def supportsMulticast(self, ) -> Union[int, JBoolean]: ...
	def getSubInterfaces(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def inetAddresses(self, ) -> javawrappers.java.util.stream.Stream: ...
	def notify(self, ) -> None: ...
	def isPointToPoint(self, ) -> Union[int, JBoolean]: ...
	def isUp(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getByName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.NetworkInterface: ...
	def isLoopback(self, ) -> Union[int, JBoolean]: ...
	def subInterfaces(self, ) -> javawrappers.java.util.stream.Stream: ...
	def getParent(self, ) -> javawrappers.java.net.NetworkInterface: ...
	@staticmethod
	def getByIndex(arg0: Union[int, JInt], ) -> javawrappers.java.net.NetworkInterface: ...
	@staticmethod
	def getByInetAddress(arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.NetworkInterface: ...
	def getMTU(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def networkInterfaces() -> javawrappers.java.util.stream.Stream: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getHardwareAddress(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isVirtual(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getNetworkInterfaces() -> javawrappers.java.util.Enumeration: ...
	def getInetAddresses(self, ) -> javawrappers.java.util.Enumeration: ...


class ResponseCache:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Map, ) -> javawrappers.java.net.CacheResponse: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.java.net.ResponseCache: ...
	@staticmethod
	def setDefault(arg0: javawrappers.java.net.ResponseCache, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.URLConnection, ) -> javawrappers.java.net.CacheRequest: ...


class ConnectException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NetPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class MalformedURLException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class HttpCookie:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	class CookieAttributeAssignor:
		def assign(self, arg0: javawrappers.java.net.HttpCookie, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setDiscard(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getDiscard(self, ) -> Union[int, JBoolean]: ...
	def setDomain(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getMaxAge(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def isHttpOnly(self, ) -> Union[int, JBoolean]: ...
	def getPortlist(self, ) -> javawrappers.java.lang.String: ...
	def getComment(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def domainMatches(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getCommentURL(self, ) -> javawrappers.java.lang.String: ...
	def getVersion(self, ) -> Union[int, JInt]: ...
	def setVersion(self, arg0: Union[int, JInt], ) -> None: ...
	def setMaxAge(self, arg0: Union[long, JLong], ) -> None: ...
	def setPortlist(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setPath(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def setCommentURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getDomain(self, ) -> javawrappers.java.lang.String: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	def hasExpired(self, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setHttpOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setComment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSecure(self, arg0: Union[int, JBoolean], ) -> None: ...
	def assign(self, arg0: javawrappers.java.net.HttpCookie, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getSecure(self, ) -> Union[int, JBoolean]: ...


class JarURLConnection:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getHeaderFieldLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getManifest(self, ) -> javawrappers.java.util.jar.Manifest: ...
	def setUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getJarFile(self, ) -> javawrappers.java.util.jar.JarFile: ...
	def setRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoInput(self, ) -> Union[int, JBoolean]: ...
	def getIfModifiedSince(self, ) -> Union[long, JLong]: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	def getAttributes(self, ) -> javawrappers.java.util.jar.Attributes: ...
	@staticmethod
	def getDefaultAllowUserInteraction() -> Union[int, JBoolean]: ...
	@overload
	def getDefaultUseCaches(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getDefaultUseCaches(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getAllowUserInteraction(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getMainAttributes(self, ) -> javawrappers.java.util.jar.Attributes: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAllowUserInteraction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestProperties(self, ) -> javawrappers.java.util.Map: ...
	def getEntryName(self, ) -> javawrappers.java.lang.String: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	def getJarFileURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def getHeaderField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaderField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getHeaderFields(self, ) -> javawrappers.java.util.Map: ...
	def getContentLengthLong(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def setDefaultAllowUserInteraction(arg0: Union[int, JBoolean], ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def setDefaultUseCaches(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDefaultUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDoOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def guessContentTypeFromName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, ) -> Union[long, JLong]: ...
	def setIfModifiedSince(self, arg0: Union[long, JLong], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def getCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def notify(self, ) -> None: ...
	def getHeaderFieldInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRequestProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guessContentTypeFromStream(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJarEntry(self, ) -> javawrappers.java.util.jar.JarEntry: ...
	@staticmethod
	def setDefaultRequestProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getHeaderFieldDate(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDate(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getFileNameMap() -> javawrappers.java.net.FileNameMap: ...
	def connect(self, ) -> None: ...
	def getHeaderFieldKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setContentHandlerFactory(arg0: javawrappers.java.net.ContentHandlerFactory, ) -> None: ...
	def getContentEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getUseCaches(self, ) -> Union[int, JBoolean]: ...
	def setDoInput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getExpiration(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getDefaultRequestProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setFileNameMap(arg0: javawrappers.java.net.FileNameMap, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getDoOutput(self, ) -> Union[int, JBoolean]: ...


class HttpRetryException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def responseCode(self, ) -> Union[int, JInt]: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CacheRequest:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def abort(self, ) -> None: ...
	def getBody(self, ) -> javawrappers.java.io.OutputStream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SocketAddress:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SocketImpl:
	def __init__(self, ): ...
	def setOption(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOption(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SocketOption:
	def name(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.java.lang.Class: ...


class SocketImplFactory:
	def createSocketImpl(self, ) -> javawrappers.java.net.SocketImpl: ...


class DatagramSocketImpl:
	def __init__(self, ): ...
	def setOption(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOption(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StandardSocketOptions:
	class StdSocketOption:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def type(self, ) -> javawrappers.java.lang.Class: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...


class Inet4Address:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isMCOrgLocal(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def isMCLinkLocal(self, ) -> Union[int, JBoolean]: ...
	def isLoopbackAddress(self, ) -> Union[int, JBoolean]: ...
	def isSiteLocalAddress(self, ) -> Union[int, JBoolean]: ...
	def isMulticastAddress(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getByName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def getLoopbackAddress() -> javawrappers.java.net.InetAddress: ...
	def getAddress(self, ) -> JArray(JByte, 1): ...
	def getHostAddress(self, ) -> javawrappers.java.lang.String: ...
	def isMCNodeLocal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isReachable(self, arg0: javawrappers.java.net.NetworkInterface, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isReachable(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isMCSiteLocal(self, ) -> Union[int, JBoolean]: ...
	def getHostName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAllByName(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.net.InetAddress, 1): ...
	def isMCGlobal(self, ) -> Union[int, JBoolean]: ...
	def getCanonicalHostName(self, ) -> javawrappers.java.lang.String: ...
	def isLinkLocalAddress(self, ) -> Union[int, JBoolean]: ...
	def isAnyLocalAddress(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLocalHost() -> javawrappers.java.net.InetAddress: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getByAddress(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	@overload
	@staticmethod
	def getByAddress(arg0: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


