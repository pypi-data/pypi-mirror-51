################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.time
import javawrappers.java.time.format
import javawrappers.java.util
import javawrappers.java.time.chrono
import javawrappers.java.time.temporal

from jpype.types import *
from typing import Union

from typing import overload

class MinguoDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEpochDay(self, ) -> Union[long, JLong]: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.MinguoEra: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.MinguoChronology: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...


class JapaneseDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEpochDay(self, ) -> Union[long, JLong]: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.JapaneseEra: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.chrono.JapaneseEra, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.JapaneseChronology: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...


class AbstractChronology:
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def notifyAll(self, ) -> None: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def notify(self, ) -> None: ...
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ChronoPeriod:
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def negated(self, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def normalized(self, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def multipliedBy(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def subtractFrom(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def getUnits(self, ) -> javawrappers.java.util.List: ...
	def isZero(self, ) -> Union[int, JBoolean]: ...
	def addTo(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	@staticmethod
	def between(arg0: javawrappers.java.time.chrono.ChronoLocalDate, arg1: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...


class Chronology:
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@staticmethod
	def ofLocale(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.time.chrono.Chronology: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def getAvailableChronologies() -> javawrappers.java.util.Set: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.chrono.Chronology: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.Chronology: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HijrahChronology:
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	def notifyAll(self, ) -> None: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahEra: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class IsoEra:
	BCE: IsoEra = ...
	CE: IsoEra = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.chrono.IsoEra: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.chrono.IsoEra, 1): ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.IsoEra: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class MinguoChronology:
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def notifyAll(self, ) -> None: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.MinguoDate: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoEra: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class IsoChronology:
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.LocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	@overload
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def notifyAll(self, ) -> None: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.IsoEra: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.ZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MinguoEra:
	BEFORE_ROC: MinguoEra = ...
	ROC: MinguoEra = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.chrono.MinguoEra: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.chrono.MinguoEra, 1): ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.MinguoEra: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ThaiBuddhistChronology:
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def notifyAll(self, ) -> None: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistEra: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HijrahDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEpochDay(self, ) -> Union[long, JLong]: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.HijrahEra: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.chrono.HijrahDate: ...
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.HijrahChronology: ...
	def withVariant(self, arg0: javawrappers.java.time.chrono.HijrahChronology, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.HijrahDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...


class ChronoLocalDateTime:
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JBoolean]: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def toLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def atZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def toInstant(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.Instant: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	def toLocalDate(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def toEpochSecond(self, arg0: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def timeLineOrder() -> javawrappers.java.util.Comparator: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JBoolean]: ...


class ChronoLocalDate:
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	def toEpochDay(self, ) -> Union[long, JLong]: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JInt]: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEra(self, ) -> javawrappers.java.time.chrono.Era: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def timeLineOrder() -> javawrappers.java.util.Comparator: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...


class JapaneseEra:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.chrono.JapaneseEra: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.chrono.JapaneseEra, 1): ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseEra: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HijrahEra:
	AH: HijrahEra = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.chrono.HijrahEra: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.chrono.HijrahEra, 1): ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.HijrahEra: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ThaiBuddhistEra:
	BEFORE_BE: ThaiBuddhistEra = ...
	BE: ThaiBuddhistEra = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.chrono.ThaiBuddhistEra: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.chrono.ThaiBuddhistEra, 1): ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistEra: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class JapaneseChronology:
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def date(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def date(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def localDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def period(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def dateYearDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def dateYearDay(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def resolveDate(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	def notifyAll(self, ) -> None: ...
	def isLeapYear(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def range(self, arg0: javawrappers.java.time.temporal.ChronoField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateEpochDay(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def dateNow(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def dateNow(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.JapaneseDate: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def eraOf(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.JapaneseEra: ...
	def eras(self, ) -> javawrappers.java.util.List: ...
	def prolepticYear(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def zonedDateTime(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def epochSecond(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	@overload
	def epochSecond(self, arg0: javawrappers.java.time.chrono.Era, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ThaiBuddhistDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEpochDay(self, ) -> Union[long, JLong]: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.ThaiBuddhistEra: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.ThaiBuddhistChronology: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ThaiBuddhistDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...


class ChronoZonedDateTime:
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getOffset(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JBoolean]: ...
	def toLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def withLaterOffsetAtOverlap(self, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def withZoneSameLocal(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def withEarlierOffsetAtOverlap(self, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def withZoneSameInstant(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	def toInstant(self, ) -> javawrappers.java.time.Instant: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def toLocalDate(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def toEpochSecond(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toLocalDateTime(self, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def timeLineOrder() -> javawrappers.java.util.Comparator: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JBoolean]: ...


class Era:
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...


