################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.time
import javawrappers.java.io
import javawrappers.java.time.zone

from jpype.types import *
from typing import Union

from typing import overload

class ZoneRulesException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ZoneRules:
	def getTransitions(self, ) -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDaylightSavings(self, arg0: javawrappers.java.time.Instant, ) -> javawrappers.java.time.Duration: ...
	def previousTransition(self, arg0: javawrappers.java.time.Instant, ) -> javawrappers.java.time.zone.ZoneOffsetTransition: ...
	def getTransitionRules(self, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getOffset(self, arg0: javawrappers.java.time.LocalDateTime, ) -> javawrappers.java.time.ZoneOffset: ...
	@overload
	def getOffset(self, arg0: javawrappers.java.time.Instant, ) -> javawrappers.java.time.ZoneOffset: ...
	def notify(self, ) -> None: ...
	def isFixedOffset(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.ZoneOffset, arg1: javawrappers.java.time.ZoneOffset, arg2: javawrappers.java.util.List, arg3: javawrappers.java.util.List, arg4: javawrappers.java.util.List, ) -> javawrappers.java.time.zone.ZoneRules: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.zone.ZoneRules: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTransition(self, arg0: javawrappers.java.time.LocalDateTime, ) -> javawrappers.java.time.zone.ZoneOffsetTransition: ...
	def getValidOffsets(self, arg0: javawrappers.java.time.LocalDateTime, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def nextTransition(self, arg0: javawrappers.java.time.Instant, ) -> javawrappers.java.time.zone.ZoneOffsetTransition: ...
	def getStandardOffset(self, arg0: javawrappers.java.time.Instant, ) -> javawrappers.java.time.ZoneOffset: ...
	def isDaylightSavings(self, arg0: javawrappers.java.time.Instant, ) -> Union[int, JBoolean]: ...
	def isValidOffset(self, arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, ) -> Union[int, JBoolean]: ...


class ZoneOffsetTransition:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDateTimeAfter(self, ) -> javawrappers.java.time.LocalDateTime: ...
	def notifyAll(self, ) -> None: ...
	def getDateTimeBefore(self, ) -> javawrappers.java.time.LocalDateTime: ...
	def getOffsetBefore(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def getOffsetAfter(self, ) -> javawrappers.java.time.ZoneOffset: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.zone.ZoneOffsetTransition, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getInstant(self, ) -> javawrappers.java.time.Instant: ...
	def isGap(self, ) -> Union[int, JBoolean]: ...
	def getDuration(self, ) -> javawrappers.java.time.Duration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def toEpochSecond(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, arg2: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.zone.ZoneOffsetTransition: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isOverlap(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValidOffset(self, arg0: javawrappers.java.time.ZoneOffset, ) -> Union[int, JBoolean]: ...


class ZoneRulesProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getAvailableZoneIds() -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getVersions(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.NavigableMap: ...
	@staticmethod
	def refresh() -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def registerProvider(arg0: javawrappers.java.time.zone.ZoneRulesProvider, ) -> None: ...
	@staticmethod
	def getRules(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.time.zone.ZoneRules: ...
	def notify(self, ) -> None: ...


class ZoneOffsetTransitionRule:
	class TimeDefinition:
		UTC: ZoneOffsetTransitionRule.TimeDefinition = ...
		WALL: ZoneOffsetTransitionRule.TimeDefinition = ...
		STANDARD: ZoneOffsetTransitionRule.TimeDefinition = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def createDateTime(self, arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, arg2: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.LocalDateTime: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition, 1): ...
	def notifyAll(self, ) -> None: ...
	def getOffsetBefore(self, ) -> javawrappers.java.time.ZoneOffset: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def isMidnightEndOfDay(self, ) -> Union[int, JBoolean]: ...
	def getDayOfWeek(self, ) -> javawrappers.java.time.DayOfWeek: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: javawrappers.java.time.Month, arg1: Union[int, JInt], arg2: javawrappers.java.time.DayOfWeek, arg3: javawrappers.java.time.LocalTime, arg4: Union[int, JBoolean], arg5: javawrappers.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition, arg6: javawrappers.java.time.ZoneOffset, arg7: javawrappers.java.time.ZoneOffset, arg8: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.zone.ZoneOffsetTransitionRule: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition: ...
	def getOffsetAfter(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def createDateTime(self, arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, arg2: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.LocalDateTime: ...
	def getLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStandardOffset(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def createTransition(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.zone.ZoneOffsetTransition: ...
	def getTimeDefinition(self, ) -> javawrappers.java.time.zone.ZoneOffsetTransitionRule.TimeDefinition: ...
	def getDayOfMonthIndicator(self, ) -> Union[int, JInt]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


