################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.time.format
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.time
import javawrappers.java.io
import javawrappers.java.time.chrono
import javawrappers.java.time.temporal

from jpype.types import *
from typing import Union

from typing import overload

class DateTimeFormatter:
	class ClassicFormat:
		def __init__(self, arg0: javawrappers.java.time.format.DateTimeFormatter, arg1: javawrappers.java.time.temporal.TemporalQuery, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@overload
		def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
		@overload
		def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


	def withLocale(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def parseBest(self, arg0: javawrappers.java.lang.CharSequence, *arg1: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.time.temporal.TemporalAccessor: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	@overload
	@staticmethod
	def ofLocalizedDateTime(arg0: javawrappers.java.time.format.FormatStyle, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	@overload
	@staticmethod
	def ofLocalizedDateTime(arg0: javawrappers.java.time.format.FormatStyle, arg1: javawrappers.java.time.format.FormatStyle, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def notifyAll(self, ) -> None: ...
	def getResolverFields(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def ofPattern(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	@overload
	@staticmethod
	def ofPattern(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def ofLocalizedDate(arg0: javawrappers.java.time.format.FormatStyle, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def formatTo(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, arg1: javawrappers.java.lang.Appendable, ) -> None: ...
	@staticmethod
	def parsedLeapSecond() -> javawrappers.java.time.temporal.TemporalQuery: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def withDecimalStyle(self, arg0: javawrappers.java.time.format.DecimalStyle, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def withChronology(self, arg0: javawrappers.java.time.chrono.Chronology, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def localizedBy(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	@staticmethod
	def parsedExcessDays() -> javawrappers.java.time.temporal.TemporalQuery: ...
	def withResolverStyle(self, arg0: javawrappers.java.time.format.ResolverStyle, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def getResolverStyle(self, ) -> javawrappers.java.time.format.ResolverStyle: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.lang.String: ...
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.time.temporal.TemporalAccessor: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.temporal.TemporalAccessor: ...
	def getDecimalStyle(self, ) -> javawrappers.java.time.format.DecimalStyle: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toFormat(self, ) -> javawrappers.java.text.Format: ...
	@overload
	def toFormat(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.text.Format: ...
	@staticmethod
	def ofLocalizedTime(arg0: javawrappers.java.time.format.FormatStyle, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def withResolverFields(self, *arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	@overload
	def withResolverFields(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def parseUnresolved(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.time.temporal.TemporalAccessor: ...


class SignStyle:
	NORMAL: SignStyle = ...
	ALWAYS: SignStyle = ...
	NEVER: SignStyle = ...
	NOT_NEGATIVE: SignStyle = ...
	EXCEEDS_PAD: SignStyle = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.SignStyle: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.format.SignStyle, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ResolverStyle:
	STRICT: ResolverStyle = ...
	SMART: ResolverStyle = ...
	LENIENT: ResolverStyle = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.ResolverStyle: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.format.ResolverStyle, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DateTimeParseException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getErrorIndex(self, ) -> Union[int, JInt]: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParsedString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FormatStyle:
	FULL: FormatStyle = ...
	LONG: FormatStyle = ...
	MEDIUM: FormatStyle = ...
	SHORT: FormatStyle = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.FormatStyle: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.format.FormatStyle, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DecimalStyle:
	def getPositiveSign(self, ) -> Union[string, JString]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDecimalSeparator(self, ) -> Union[string, JString]: ...
	def notifyAll(self, ) -> None: ...
	def getNegativeSign(self, ) -> Union[string, JString]: ...
	def notify(self, ) -> None: ...
	def getZeroDigit(self, ) -> Union[string, JString]: ...
	@staticmethod
	def ofDefaultLocale() -> javawrappers.java.time.format.DecimalStyle: ...
	def withPositiveSign(self, arg0: Union[string, JString], ) -> javawrappers.java.time.format.DecimalStyle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.time.format.DecimalStyle: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def withDecimalSeparator(self, arg0: Union[string, JString], ) -> javawrappers.java.time.format.DecimalStyle: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def withNegativeSign(self, arg0: Union[string, JString], ) -> javawrappers.java.time.format.DecimalStyle: ...
	@staticmethod
	def getAvailableLocales() -> javawrappers.java.util.Set: ...
	def withZeroDigit(self, arg0: Union[string, JString], ) -> javawrappers.java.time.format.DecimalStyle: ...


class DateTimeFormatterBuilder:
	def __init__(self, ): ...
	class WeekBasedFieldPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class LocalizedPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class ChronoPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class PrefixTree:
		class LENIENT:
			def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def copyTree(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
			@overload
			@staticmethod
			def newTree(arg0: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
			@overload
			@staticmethod
			def newTree(arg0: javawrappers.java.util.Set, arg1: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
			@overload
			def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class CI:
			def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def copyTree(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
			@overload
			@staticmethod
			def newTree(arg0: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
			@overload
			@staticmethod
			def newTree(arg0: javawrappers.java.util.Set, arg1: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
			@overload
			def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def copyTree(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
		@overload
		@staticmethod
		def newTree(arg0: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
		@overload
		@staticmethod
		def newTree(arg0: javawrappers.java.util.Set, arg1: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.String: ...
		@overload
		def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ZoneIdPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class ZoneTextPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class LocalizedOffsetIdPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class OffsetIdPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class InstantPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class TextPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class FractionPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class ReducedPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class NumberPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class StringLiteralPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class CharLiteralPrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class DefaultValueParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class SettingsParser:
		SENSITIVE: DateTimeFormatterBuilder.SettingsParser = ...
		INSENSITIVE: DateTimeFormatterBuilder.SettingsParser = ...
		STRICT: DateTimeFormatterBuilder.SettingsParser = ...
		LENIENT: DateTimeFormatterBuilder.SettingsParser = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.SettingsParser: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.time.format.DateTimeFormatterBuilder.SettingsParser, 1): ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class PadPrinterParserDecorator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class CompositePrinterParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def withOptional(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.CompositePrinterParser: ...
		def notify(self, ) -> None: ...


	class DateTimePrinterParser:
		def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
		def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def appendOffset(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def parseCaseInsensitive(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def appendChronologyText(self, arg0: javawrappers.java.time.format.TextStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendText(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendText(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: javawrappers.java.time.format.TextStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendText(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendGenericZoneText(self, arg0: javawrappers.java.time.format.TextStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendGenericZoneText(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def appendChronologyId(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	@staticmethod
	def newTree(arg0: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
	@overload
	@staticmethod
	def newTree(arg0: javawrappers.java.util.Set, arg1: javawrappers.java.time.format.DateTimeParseContext, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
	def appendOptional(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.time.format.DateTimePrintContext, arg1: javawrappers.java.lang.StringBuilder, ) -> Union[int, JBoolean]: ...
	def appendOffsetId(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def appendLocalized(self, arg0: javawrappers.java.time.format.FormatStyle, arg1: javawrappers.java.time.format.FormatStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendZoneText(self, arg0: javawrappers.java.time.format.TextStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendZoneText(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def appendZoneId(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def parseDefaulting(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def padNext(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def padNext(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def appendLocalizedOffset(self, arg0: javawrappers.java.time.format.TextStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def appendPattern(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.format.DateTimeFormatterBuilder.SettingsParser, 1): ...
	def notifyAll(self, ) -> None: ...
	def appendZoneOrOffsetId(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def notify(self, ) -> None: ...
	@overload
	def appendInstant(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendInstant(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def parseStrict(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def withOptional(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.CompositePrinterParser: ...
	def appendFraction(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def parseLenient(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def appendZoneRegionId(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def optionalEnd(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def copyTree(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.PrefixTree: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder.SettingsParser: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def parseCaseSensitive(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def optionalStart(self, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.String: ...
	@overload
	def match(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.String: ...
	@overload
	def toFormatter(self, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	@overload
	def toFormatter(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.time.format.DateTimeFormatter: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.time.format.DateTimeParseContext, arg1: javawrappers.java.lang.CharSequence, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def appendLiteral(self, arg0: Union[string, JString], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendValueReduced(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendValueReduced(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def appendValue(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.time.format.SignStyle, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendValue(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[int, JInt], ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@overload
	def appendValue(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	@staticmethod
	def getLocalizedDateTimePattern(arg0: javawrappers.java.time.format.FormatStyle, arg1: javawrappers.java.time.format.FormatStyle, arg2: javawrappers.java.time.chrono.Chronology, arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def append(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.format.DateTimeFormatterBuilder: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class TextStyle:
	FULL: TextStyle = ...
	FULL_STANDALONE: TextStyle = ...
	SHORT: TextStyle = ...
	SHORT_STANDALONE: TextStyle = ...
	NARROW: TextStyle = ...
	NARROW_STANDALONE: TextStyle = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.format.TextStyle: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.format.TextStyle, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def asNormal(self, ) -> javawrappers.java.time.format.TextStyle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isStandalone(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def asStandalone(self, ) -> javawrappers.java.time.format.TextStyle: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


