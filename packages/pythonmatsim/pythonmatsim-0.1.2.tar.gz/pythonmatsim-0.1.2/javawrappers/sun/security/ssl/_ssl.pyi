################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.sun.security.ssl
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.nio
import javawrappers.javax.net
import javawrappers.javax.net.ssl
import javawrappers.java.nio.channels
import javawrappers.java.util.function
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class SSLServerSocketFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.javax.net.ServerSocketFactory: ...
	def notify(self, ) -> None: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.net.ServerSocket: ...


class SSLSocketImpl:
	class AppOutputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		def notify(self, ) -> None: ...


	class AppInputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getPeerPort(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSSLParameters(self, ) -> javawrappers.javax.net.ssl.SSLParameters: ...
	def isInputShutdown(self, ) -> Union[int, JBoolean]: ...
	def setWantClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def removeHandshakeCompletedListener(self, arg0: javawrappers.javax.net.ssl.HandshakeCompletedListener, ) -> None: ...
	def setTcpNoDelay(self, arg0: Union[int, JBoolean], ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def getKeepAlive(self, ) -> Union[int, JBoolean]: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getApplicationProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def getSoLinger(self, ) -> Union[int, JInt]: ...
	def getTcpNoDelay(self, ) -> Union[int, JBoolean]: ...
	def setUseClientMode(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSoLinger(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], ) -> None: ...
	def useDelegatedTask(self, ) -> Union[int, JBoolean]: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def startHandshake(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def setEnableSessionCreation(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addHandshakeCompletedListener(self, arg0: javawrappers.javax.net.ssl.HandshakeCompletedListener, ) -> None: ...
	def getTrafficClass(self, ) -> Union[int, JInt]: ...
	def getHandshakeSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def setEnabledCipherSuites(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setHandshakeApplicationProtocolSelector(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	@staticmethod
	def setSocketImplFactory(arg0: javawrappers.java.net.SocketImplFactory, ) -> None: ...
	def shutdownInput(self, ) -> None: ...
	def setPerformancePreferences(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def sendUrgentData(self, arg0: Union[int, JInt], ) -> None: ...
	def getHandshakeApplicationProtocolSelector(self, ) -> javawrappers.java.util.function.BiFunction: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def setNeedClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def shutdown(self, ) -> None: ...
	def getEnableSessionCreation(self, ) -> Union[int, JBoolean]: ...
	def getNeedClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getSupportedProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getRemoteSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getOOBInline(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getHandshakeApplicationProtocol(self, ) -> javawrappers.java.lang.String: ...
	def flush(self, ) -> None: ...
	def getPeerHost(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def isOutputShutdown(self, ) -> Union[int, JBoolean]: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def setTrafficClass(self, arg0: Union[int, JInt], ) -> None: ...
	def setOOBInline(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setHost(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.Socket: ...
	def getEnabledProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def setKeepAlive(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEnabledProtocols(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSSLParameters(self, arg0: javawrappers.javax.net.ssl.SSLParameters, ) -> None: ...
	def shutdownOutput(self, ) -> None: ...
	def getUseClientMode(self, ) -> Union[int, JBoolean]: ...
	def getWantClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def getEnabledCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSendBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getSendBufferSize(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class SSLSocketFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JBoolean], ) -> javawrappers.java.net.Socket: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.javax.net.SocketFactory: ...
	def notify(self, ) -> None: ...


class SSLLogger:
	def __init__(self, ): ...
	class SSLSimpleFormatter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SSLConsoleLogger:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def finest(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def fine(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def finer(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def severe(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def isOn(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def warning(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def info(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...


class HandshakeOutStream:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def putBytes16(self, arg0: JArray(JByte, 1), ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...


class SunJSSE:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConfigured(self, ) -> Union[int, JBoolean]: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getServices(self, ) -> javawrappers.java.util.Set: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getVersion(self, ) -> Union[float, JDouble]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def getVersionStr(self, ) -> javawrappers.java.lang.String: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def configure(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getService(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider.Service: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class RSASignature:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SSLContextImpl:
	class DTLSContext:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CustomizedDTLSContext:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DTLS12Context:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DTLS10Context:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AbstractDTLSContext:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DefaultSSLContext:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DefaultSSLContextHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DefaultManagersHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TLSContext:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CustomizedTLSContext:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CustomizedSSLProtocols:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TLS13Context:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TLS12Context:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TLS11Context:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TLS10Context:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AbstractTLSContext:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CookieExtension:
	def __init__(self, ): ...
	class HRRCookieReproducer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def produce(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class HRRCookieConsumer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def consume(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, arg2: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def notify(self, ) -> None: ...


	class HRRCookieProducer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def produce(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class CHCookieUpdate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def consume(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> None: ...
		def notify(self, ) -> None: ...


	class CHCookieConsumer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def consume(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, arg2: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def notify(self, ) -> None: ...


	class CHCookieProducer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def produce(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class CookieStringizer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CookieSpec:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def consume(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, arg2: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def consume(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> None: ...
	@overload
	def consume(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, arg2: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def produce(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> JArray(JByte, 1): ...
	@overload
	def produce(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> JArray(JByte, 1): ...
	@overload
	def produce(self, arg0: javawrappers.sun.security.ssl.ConnectionContext, arg1: javawrappers.sun.security.ssl.SSLHandshake.HandshakeMessage, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...


