################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.sun.security.x509
import javawrappers.java.util
import javawrappers.javax.crypto.spec
import javawrappers.java.security.spec
import javawrappers.java.nio.charset
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.sun.security.rsa
import javawrappers.java.security.interfaces
import javawrappers.sun.security.pkcs
import javawrappers.java.util.function
import javawrappers.java.math
import javawrappers.sun.security.util

from jpype.types import *
from typing import Union

from typing import overload

class RSAPrivateCrtKeyImpl:
	@overload
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	@overload
	def encode(self, ) -> JArray(JByte, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrimeQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def notifyAll(self, ) -> None: ...
	def getPrimeP(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def decode(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getPublicExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def getAlgorithmId(self, ) -> javawrappers.sun.security.x509.AlgorithmId: ...
	@staticmethod
	def parseKey(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.java.security.PrivateKey: ...
	def getPrivateExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	@staticmethod
	def newKey(arg0: JArray(JByte, 1), ) -> javawrappers.java.security.interfaces.RSAPrivateKey: ...
	@overload
	@staticmethod
	def newKey(arg0: javawrappers.sun.security.rsa.RSAUtil.KeyType, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, arg4: javawrappers.java.math.BigInteger, arg5: javawrappers.java.math.BigInteger, arg6: javawrappers.java.math.BigInteger, arg7: javawrappers.java.math.BigInteger, arg8: javawrappers.java.math.BigInteger, arg9: javawrappers.java.math.BigInteger, ) -> javawrappers.java.security.interfaces.RSAPrivateKey: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def destroy(self, ) -> None: ...
	@staticmethod
	def parse(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.sun.security.pkcs.PKCS8Key: ...
	def getCrtCoefficient(self, ) -> javawrappers.java.math.BigInteger: ...
	def getPrimeExponentQ(self, ) -> javawrappers.java.math.BigInteger: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPrimeExponentP(self, ) -> javawrappers.java.math.BigInteger: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...


class RSAKeyFactory:
	def __init__(self, arg0: javawrappers.sun.security.rsa.RSAUtil.KeyType, ): ...
	class PSS:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def toRSAKey(arg0: javawrappers.java.security.Key, ) -> javawrappers.java.security.interfaces.RSAKey: ...
		@staticmethod
		def checkKeyLengths(arg0: Union[int, JInt], arg1: javawrappers.java.math.BigInteger, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Legacy:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def toRSAKey(arg0: javawrappers.java.security.Key, ) -> javawrappers.java.security.interfaces.RSAKey: ...
		@staticmethod
		def checkKeyLengths(arg0: Union[int, JInt], arg1: javawrappers.java.math.BigInteger, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toRSAKey(arg0: javawrappers.java.security.Key, ) -> javawrappers.java.security.interfaces.RSAKey: ...
	@staticmethod
	def checkKeyLengths(arg0: Union[int, JInt], arg1: javawrappers.java.math.BigInteger, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RSAPadding:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaxDataSize(self, ) -> Union[int, JInt]: ...
	@overload
	def pad(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def pad(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.sun.security.rsa.RSAPadding: ...
	@overload
	@staticmethod
	def getInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.security.SecureRandom, ) -> javawrappers.sun.security.rsa.RSAPadding: ...
	@overload
	@staticmethod
	def getInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.security.SecureRandom, arg3: javawrappers.javax.crypto.spec.OAEPParameterSpec, ) -> javawrappers.sun.security.rsa.RSAPadding: ...
	def notify(self, ) -> None: ...
	@overload
	def unpad(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def unpad(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...


class SunRsaSign:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConfigured(self, ) -> Union[int, JBoolean]: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getServices(self, ) -> javawrappers.java.util.Set: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getVersion(self, ) -> Union[float, JDouble]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def getVersionStr(self, ) -> javawrappers.java.lang.String: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def configure(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getService(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider.Service: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class SunRsaSignEntries:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def putEntries(arg0: javawrappers.java.util.Map, ) -> None: ...
	def notify(self, ) -> None: ...


class RSAPSSSignature:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RSAPrivateKeyImpl:
	@overload
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	@overload
	def encode(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def parseKey(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.java.security.PrivateKey: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrivateExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def destroy(self, ) -> None: ...
	@staticmethod
	def parse(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.sun.security.pkcs.PKCS8Key: ...
	@overload
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def decode(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	def getAlgorithmId(self, ) -> javawrappers.sun.security.x509.AlgorithmId: ...


class RSAUtil:
	def __init__(self, ): ...
	class KeyType:
		RSA: RSAUtil.KeyType = ...
		PSS: RSAUtil.KeyType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def lookup(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.rsa.RSAUtil.KeyType: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.rsa.RSAUtil.KeyType: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.security.rsa.RSAUtil.KeyType, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def keyAlgo(self, ) -> javawrappers.java.lang.String: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	@staticmethod
	def lookup(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.rsa.RSAUtil.KeyType: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.rsa.RSAUtil.KeyType: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.security.rsa.RSAUtil.KeyType, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def keyAlgo(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getParamSpec(arg0: javawrappers.sun.security.x509.AlgorithmId, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	@overload
	@staticmethod
	def getParamSpec(arg0: javawrappers.java.security.AlgorithmParameters, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	@staticmethod
	def checkParamsAgainstType(arg0: javawrappers.sun.security.rsa.RSAUtil.KeyType, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createAlgorithmId(arg0: javawrappers.sun.security.rsa.RSAUtil.KeyType, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> javawrappers.sun.security.x509.AlgorithmId: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class RSAPublicKeyImpl:
	@overload
	def encode(self, ) -> JArray(JByte, 1): ...
	@overload
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEncodedInternal(self, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def newKey(arg0: JArray(JByte, 1), ) -> javawrappers.java.security.interfaces.RSAPublicKey: ...
	@overload
	@staticmethod
	def newKey(arg0: javawrappers.sun.security.rsa.RSAUtil.KeyType, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, ) -> javawrappers.java.security.interfaces.RSAPublicKey: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parse(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.java.security.PublicKey: ...
	@overload
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def decode(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getPublicExponent(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getModulus(self, ) -> javawrappers.java.math.BigInteger: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	def getAlgorithmId(self, ) -> javawrappers.sun.security.x509.AlgorithmId: ...


class PSSParameters:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RSAKeyPairGenerator:
	class PSS:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		@overload
		def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		def notify(self, ) -> None: ...
		def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...


	class Legacy:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		@overload
		def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
		def notify(self, ) -> None: ...
		def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	def notify(self, ) -> None: ...
	def generateKeyPair(self, ) -> javawrappers.java.security.KeyPair: ...


class RSACore:
	class BlindingParameters:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BlindingRandomPair:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def rsa(arg0: JArray(JByte, 1), arg1: javawrappers.java.security.interfaces.RSAPublicKey, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def rsa(arg0: JArray(JByte, 1), arg1: javawrappers.java.security.interfaces.RSAPrivateKey, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def rsa(arg0: JArray(JByte, 1), arg1: javawrappers.java.security.interfaces.RSAPrivateKey, arg2: Union[int, JBoolean], ) -> JArray(JByte, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def getByteLength(arg0: javawrappers.java.security.interfaces.RSAKey, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getByteLength(arg0: javawrappers.java.math.BigInteger, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def convert(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...


class MGF1:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RSASignature:
	class SHA512_256withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class SHA512_224withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class SHA512withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class SHA384withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class SHA256withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class SHA224withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class SHA1withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class MD5withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class MD2withRSA:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@staticmethod
		def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def encodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@staticmethod
	def decodeSignature(arg0: javawrappers.sun.security.util.ObjectIdentifier, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...


