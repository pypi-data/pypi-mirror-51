################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.crypto
import javawrappers.java.security
import javawrappers.java.util
import javawrappers.sun.security.x509
import javawrappers.java.nio
import javawrappers.java.security.cert
import javawrappers.java.nio.charset
import javawrappers.java.security.spec
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.javax.security.auth.callback
import javawrappers.java.util.jar
import javawrappers.java.security.interfaces
import javawrappers.java.util.function
import javawrappers.java.math
import javawrappers.sun.security.util

from jpype.types import *
from typing import Union

from typing import overload

class Resources_ja:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Cache:
	class CacheVisitor:
		def visit(self, arg0: javawrappers.java.util.Map, ) -> None: ...


	class EqualByteArray:
		def __init__(self, arg0: JArray(JByte, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.security.util.Cache.CacheVisitor, ) -> None: ...
	@overload
	@staticmethod
	def newHardMemoryCache(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.sun.security.util.Cache: ...
	@overload
	@staticmethod
	def newHardMemoryCache(arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.Cache: ...
	def setTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@staticmethod
	def newNullCache() -> javawrappers.sun.security.util.Cache: ...
	def setCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def newSoftMemoryCache(arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.Cache: ...
	@overload
	@staticmethod
	def newSoftMemoryCache(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.sun.security.util.Cache: ...


class ObjectIdentifier:
	@overload
	def __init__(self, arg0: javawrappers.sun.security.util.DerInputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: JArray(Union[int, JInt], 1), ): ...
	class HugeOidNotSupportedByOldJDK:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def newInternal(arg0: JArray(Union[int, JInt], 1), ) -> javawrappers.sun.security.util.ObjectIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DerOutputStream:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def putPrintableString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def putIA5String(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def putTag(self, arg0: JByte, arg1: Union[int, JBoolean], arg2: JByte, ) -> None: ...
	def putOrderedSetOf(self, arg0: JByte, arg1: JArray(javawrappers.sun.security.util.DerEncoder, 1), ) -> None: ...
	def putUTCTime(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def flush(self, ) -> None: ...
	def putUnalignedBitString(self, arg0: javawrappers.sun.security.util.BitArray, ) -> None: ...
	def derEncode(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def putT61String(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putSet(self, arg0: JArray(javawrappers.sun.security.util.DerValue, 1), ) -> None: ...
	def putTruncatedUnalignedBitString(self, arg0: javawrappers.sun.security.util.BitArray, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def putSequence(self, arg0: JArray(javawrappers.sun.security.util.DerValue, 1), ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JByte, arg1: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	@overload
	def write(self, arg0: JByte, arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def putBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def putNull(self, ) -> None: ...
	def putGeneralString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def putInteger(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	@overload
	def putInteger(self, arg0: javawrappers.java.math.BigInteger, ) -> None: ...
	@overload
	def putInteger(self, arg0: Union[int, JInt], ) -> None: ...
	def writeImplicit(self, arg0: JByte, arg1: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def putUTF8String(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def putLength(self, arg0: Union[int, JInt], ) -> None: ...
	def putBMPString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def putDerValue(self, arg0: javawrappers.sun.security.util.DerValue, ) -> None: ...
	def putOctetString(self, arg0: JArray(JByte, 1), ) -> None: ...
	def reset(self, ) -> None: ...
	def putEnumerated(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def putGeneralizedTime(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def putBitString(self, arg0: JArray(JByte, 1), ) -> None: ...
	def putOrderedSet(self, arg0: JByte, arg1: JArray(javawrappers.sun.security.util.DerEncoder, 1), ) -> None: ...
	def putOID(self, arg0: javawrappers.sun.security.util.ObjectIdentifier, ) -> None: ...


class DerEncoder:
	def derEncode(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...


class HostnameChecker:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getSubjectX500Name(arg0: javawrappers.java.security.cert.X509Certificate, ) -> javawrappers.sun.security.x509.X500Name: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def match(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.X509Certificate, ) -> None: ...
	@overload
	def match(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.X509Certificate, arg2: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: JByte, ) -> javawrappers.sun.security.util.HostnameChecker: ...
	def notify(self, ) -> None: ...


class PropertyExpander:
	def __init__(self, ): ...
	class ExpandException:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def expand(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def expand(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class DerValue:
	@overload
	def __init__(self, arg0: JByte, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JByte, arg1: JArray(JByte, 1), ): ...
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	@overload
	def getBitString(self, arg0: Union[int, JBoolean], ) -> JArray(JByte, 1): ...
	@overload
	def getBitString(self, ) -> JArray(JByte, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getGeneralizedTime(self, ) -> javawrappers.java.util.Date: ...
	def getDataBytes(self, ) -> JArray(JByte, 1): ...
	def getOctetString(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getBMPString(self, ) -> javawrappers.java.lang.String: ...
	def getInteger(self, ) -> Union[int, JInt]: ...
	def getAsString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def isContextSpecific(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isContextSpecific(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def getPositiveBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def getT61String(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getUnalignedBitString(self, arg0: Union[int, JBoolean], ) -> javawrappers.sun.security.util.BitArray: ...
	@overload
	def getUnalignedBitString(self, ) -> javawrappers.sun.security.util.BitArray: ...
	@staticmethod
	def createTag(arg0: JByte, arg1: Union[int, JBoolean], arg2: JByte, ) -> JByte: ...
	def isUniversal(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEnumerated(self, ) -> Union[int, JInt]: ...
	def resetTag(self, arg0: JByte, ) -> None: ...
	def getBoolean(self, ) -> Union[int, JBoolean]: ...
	def getOID(self, ) -> javawrappers.sun.security.util.ObjectIdentifier: ...
	def getData(self, ) -> javawrappers.sun.security.util.DerInputStream: ...
	def isApplication(self, ) -> Union[int, JBoolean]: ...
	def getBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def length(self, ) -> Union[int, JInt]: ...
	def toDerInputStream(self, ) -> javawrappers.sun.security.util.DerInputStream: ...
	@staticmethod
	def isPrintableStringChar(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def isConstructed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isConstructed(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def getTag(self, ) -> JByte: ...
	def getUTCTime(self, ) -> javawrappers.java.util.Date: ...
	def getPrintableString(self, ) -> javawrappers.java.lang.String: ...
	def getGeneralString(self, ) -> javawrappers.java.lang.String: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getUTF8String(self, ) -> javawrappers.java.lang.String: ...
	def getIA5String(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HexDumpEncoder:
	def __init__(self, ): ...
	@overload
	def encode(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def encode(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def encodeBuffer(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def encodeBuffer(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def encodeBuffer(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def encodeBuffer(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...


class PermissionFactory:
	def newPermission(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Permission: ...


class DisabledAlgorithmConstraints:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.AlgorithmDecomposer, ): ...
	class DisabledConstraint:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class KeySizeConstraint:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator, arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class UsageConstraint:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DenyAfterConstraint:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class jdkCAConstraint:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Constraint:
		class Operator:
			EQ: DisabledAlgorithmConstraints.Constraint.Operator = ...
			NE: DisabledAlgorithmConstraints.Constraint.Operator = ...
			LT: DisabledAlgorithmConstraints.Constraint.Operator = ...
			LE: DisabledAlgorithmConstraints.Constraint.Operator = ...
			GT: DisabledAlgorithmConstraints.Constraint.Operator = ...
			GE: DisabledAlgorithmConstraints.Constraint.Operator = ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@staticmethod
			def values() -> JArray(javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator, 1): ...
			def name(self, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
			def notify(self, ) -> None: ...
			def ordinal(self, ) -> Union[int, JInt]: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator, 1): ...
		def notifyAll(self, ) -> None: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Constraints:
		def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
		class Holder:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
		@overload
		def permits(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
		@overload
		def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.security.util.DisabledAlgorithmConstraints.Constraint.Operator, 1): ...
	def notifyAll(self, ) -> None: ...
	def checkProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.Key, arg3: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.AlgorithmParameters, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.ConstraintsParameters, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ResourcesMgr:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getAuthResourceString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class AuthResources:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class PendingException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AuthResources_zh_CN:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class ECUtil:
	@staticmethod
	def getCurveName(arg0: javawrappers.java.security.Provider, arg1: javawrappers.java.security.spec.ECParameterSpec, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def generateECPrivateKey(arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.security.spec.ECParameterSpec, ) -> javawrappers.java.security.interfaces.ECPrivateKey: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def trimZeroes(arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@staticmethod
	def decodePKCS8ECPrivateKey(arg0: JArray(JByte, 1), ) -> javawrappers.java.security.interfaces.ECPrivateKey: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def decodeX509ECPublicKey(arg0: JArray(JByte, 1), ) -> javawrappers.java.security.interfaces.ECPublicKey: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def decodePoint(arg0: JArray(JByte, 1), arg1: javawrappers.java.security.spec.EllipticCurve, ) -> javawrappers.java.security.spec.ECPoint: ...
	@overload
	@staticmethod
	def getECParameterSpec(arg0: javawrappers.java.security.Provider, arg1: javawrappers.java.security.spec.ECParameterSpec, ) -> javawrappers.java.security.spec.ECParameterSpec: ...
	@overload
	@staticmethod
	def getECParameterSpec(arg0: javawrappers.java.security.Provider, arg1: JArray(JByte, 1), ) -> javawrappers.java.security.spec.ECParameterSpec: ...
	@overload
	@staticmethod
	def getECParameterSpec(arg0: javawrappers.java.security.Provider, arg1: Union[int, JInt], ) -> javawrappers.java.security.spec.ECParameterSpec: ...
	@overload
	@staticmethod
	def getECParameterSpec(arg0: javawrappers.java.security.Provider, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.spec.ECParameterSpec: ...
	@staticmethod
	def encodeECParameterSpec(arg0: javawrappers.java.security.Provider, arg1: javawrappers.java.security.spec.ECParameterSpec, ) -> JArray(JByte, 1): ...
	@staticmethod
	def x509EncodeECPublicKey(arg0: javawrappers.java.security.spec.ECPoint, arg1: javawrappers.java.security.spec.ECParameterSpec, ) -> JArray(JByte, 1): ...
	@staticmethod
	def getECParameters(arg0: javawrappers.java.security.Provider, ) -> javawrappers.java.security.AlgorithmParameters: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def encodePoint(arg0: javawrappers.java.security.spec.ECPoint, arg1: javawrappers.java.security.spec.EllipticCurve, ) -> JArray(JByte, 1): ...


class Debug:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def Help() -> None: ...
	@staticmethod
	def toHexString(arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isVerbose() -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getPrintStream(self, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def println(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def println(self, ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isOn(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.Debug: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.Debug: ...


class PolicyUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getKeyStore(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.sun.security.util.Debug, ) -> javawrappers.java.security.KeyStore: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInputStream(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class Length:
	def length(self, ) -> Union[int, JInt]: ...


class MessageDigestSpi2:
	def engineUpdate(self, arg0: javawrappers.javax.crypto.SecretKey, ) -> None: ...


class ByteArrayTagOrder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def notify(self, ) -> None: ...


class RegisteredDomain:
	class Type:
		ICANN: RegisteredDomain.Type = ...
		PRIVATE: RegisteredDomain.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.RegisteredDomain.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.security.util.RegisteredDomain.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.util.RegisteredDomain.Type: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.security.util.RegisteredDomain.Type, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def type(self, ) -> javawrappers.sun.security.util.RegisteredDomain.Type: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def from_(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def publicSuffix(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AnchorCertificates:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def contains(arg0: javawrappers.java.security.cert.X509Certificate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ECParameters:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getAlgorithmParameters(arg0: javawrappers.java.security.spec.ECParameterSpec, ) -> javawrappers.java.security.AlgorithmParameters: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CurveDB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedCurves() -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SignatureFileVerifier:
	def __init__(self, arg0: javawrappers.java.util.ArrayList, arg1: javawrappers.sun.security.util.ManifestDigester, arg2: javawrappers.java.lang.String, arg3: JArray(JByte, 1), ): ...
	class ConfigurationHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def process(self, arg0: javawrappers.java.util.Hashtable, arg1: javawrappers.java.util.List, ) -> None: ...
	@staticmethod
	def isBlockOrSF(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def needSignatureFile(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSigningRelated(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def needSignatureFileBytes(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSignatureFile(self, arg0: JArray(JByte, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class SecurityProviderConstants:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefDSASubprimeSize(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class AlgorithmDecomposer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def decomposeOneHash(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getAliases(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def decompose(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def hashName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ManifestDigester:
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	class Section:
		def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Entry:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def digest(self, arg0: javawrappers.java.security.MessageDigest, ) -> JArray(JByte, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def digestWorkaround(self, arg0: javawrappers.java.security.MessageDigest, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...


	class Position:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def manifestDigest(self, arg0: javawrappers.java.security.MessageDigest, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.sun.security.util.ManifestDigester.Entry: ...
	def digest(self, arg0: javawrappers.java.security.MessageDigest, ) -> JArray(JByte, 1): ...
	def digestWorkaround(self, arg0: javawrappers.java.security.MessageDigest, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AuthResources_ja:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class NamedCurve:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getCofactor(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getObjectId(self, ) -> javawrappers.java.lang.String: ...
	def getGenerator(self, ) -> javawrappers.java.security.spec.ECPoint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOrder(self, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCurve(self, ) -> javawrappers.java.security.spec.EllipticCurve: ...


class BitArray:
	@overload
	def __init__(self, arg0: JArray(Union[int, JBoolean], 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def toBooleanArray(self, ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def truncate(self, ) -> javawrappers.sun.security.util.BitArray: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class SignatureUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def specialSetParameter(arg0: javawrappers.java.security.Signature, arg1: javawrappers.java.security.AlgorithmParameters, ) -> None: ...
	@overload
	@staticmethod
	def specialSetParameter(arg0: javawrappers.java.security.Signature, arg1: JArray(JByte, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractAlgorithmConstraints:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.Key, arg3: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SecurityConstants:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LegacyAlgorithmConstraints:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.AlgorithmDecomposer, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.Key, arg3: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JBoolean]: ...
	@overload
	def permits(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class KeyUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def isOracleJCEProvider(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def trimZeroes(arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getKeySize(arg0: javawrappers.java.security.AlgorithmParameters, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getKeySize(arg0: javawrappers.java.security.Key, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def checkTlsPreMasterSecretKey(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.security.SecureRandom, arg3: JArray(JByte, 1), arg4: Union[int, JBoolean], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.java.security.spec.KeySpec, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.java.security.Key, ) -> None: ...


class Password:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def readPassword(arg0: javawrappers.java.io.InputStream, arg1: Union[int, JBoolean], ) -> JArray(Union[string, JString], 1): ...
	@overload
	@staticmethod
	def readPassword(arg0: javawrappers.java.io.InputStream, ) -> JArray(Union[string, JString], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class UntrustedCertificates:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isUntrusted(arg0: javawrappers.java.security.cert.X509Certificate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Resources:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class ByteArrayLexOrder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def notify(self, ) -> None: ...


class ECKeySizeParameterSpec:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getKeySize(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class IOUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readFully(arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def readNBytes(arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Resources_zh_CN:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class ConstraintsParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.AlgorithmParameters, arg2: javawrappers.java.security.Key, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.cert.X509Certificate, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.Timestamp, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.cert.X509Certificate, arg1: Union[int, JBoolean], arg2: javawrappers.java.util.Date, arg3: javawrappers.java.security.Timestamp, arg4: javawrappers.java.lang.String, ): ...
	def getAlgParams(self, ) -> javawrappers.java.security.AlgorithmParameters: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getJARTimestamp(self, ) -> javawrappers.java.security.Timestamp: ...
	def getVariant(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def isTrustedMatch(self, ) -> Union[int, JBoolean]: ...
	def getPublicKey(self, ) -> javawrappers.java.security.Key: ...
	def notify(self, ) -> None: ...
	def getPKIXParamDate(self, ) -> javawrappers.java.util.Date: ...
	def getCertificate(self, ) -> javawrappers.java.security.cert.X509Certificate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class KeyStoreDelegator:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
	def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
	def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
	def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineSize(self, ) -> Union[int, JInt]: ...
	def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
	def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class LocalizedMessage:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatLocalized(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getLocalized(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getNonlocalized(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def formatNonlocalized(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ConsoleCallbackHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handle(self, arg0: JArray(javawrappers.javax.security.auth.callback.Callback, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class Pem:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...


class DerInputStream:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getBitString(self, ) -> JArray(JByte, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDerValue(self, ) -> javawrappers.sun.security.util.DerValue: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getGeneralizedTime(self, ) -> javawrappers.java.util.Date: ...
	def getOctetString(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getBMPString(self, ) -> javawrappers.java.lang.String: ...
	def available(self, ) -> Union[int, JInt]: ...
	def getInteger(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getPositiveBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def getT61String(self, ) -> javawrappers.java.lang.String: ...
	def getUnalignedBitString(self, ) -> javawrappers.sun.security.util.BitArray: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEnumerated(self, ) -> Union[int, JInt]: ...
	def getOID(self, ) -> javawrappers.sun.security.util.ObjectIdentifier: ...
	def getBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def subStream(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.sun.security.util.DerInputStream: ...
	@overload
	def getSet(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> JArray(javawrappers.sun.security.util.DerValue, 1): ...
	@overload
	def getSet(self, arg0: Union[int, JInt], ) -> JArray(javawrappers.sun.security.util.DerValue, 1): ...
	def getUTCTime(self, ) -> javawrappers.java.util.Date: ...
	def getPrintableString(self, ) -> javawrappers.java.lang.String: ...
	def getGeneralString(self, ) -> javawrappers.java.lang.String: ...
	def peekByte(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def getUTF8String(self, ) -> javawrappers.java.lang.String: ...
	def getIA5String(self, ) -> javawrappers.java.lang.String: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSequence(self, arg0: Union[int, JInt], ) -> JArray(javawrappers.sun.security.util.DerValue, 1): ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def getNull(self, ) -> None: ...


class FilePermCompat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def newPermUsingAltPath(arg0: javawrappers.java.security.Permission, ) -> javawrappers.java.security.Permission: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def newPermPlusAltPath(arg0: javawrappers.java.security.Permission, ) -> javawrappers.java.security.Permission: ...


class ManifestEntryVerifier:
	def __init__(self, arg0: javawrappers.java.util.jar.Manifest, ): ...
	class SunProviderHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def verify(self, arg0: javawrappers.java.util.Hashtable, arg1: javawrappers.java.util.Hashtable, ) -> JArray(javawrappers.java.security.CodeSigner, 1): ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def update(self, arg0: JByte, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEntry(self, ) -> javawrappers.java.util.jar.JarEntry: ...
	def notify(self, ) -> None: ...
	def setEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.jar.JarEntry, ) -> None: ...


