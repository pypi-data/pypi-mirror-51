################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.crypto
import javawrappers.java.lang
import javawrappers.javax.crypto.spec

from jpype.types import *
from typing import Union

from typing import overload

class TlsPrfParameterSpec:
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: javawrappers.java.lang.String, arg2: JArray(JByte, 1), arg3: Union[int, JInt], arg4: javawrappers.java.lang.String, arg5: Union[int, JInt], arg6: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSeed(self, ) -> JArray(JByte, 1): ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getPRFHashAlg(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getPRFBlockSize(self, ) -> Union[int, JInt]: ...
	def getSecret(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPRFHashLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputLength(self, ) -> Union[int, JInt]: ...


class TlsKeyMaterialParameterSpec:
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: JArray(JByte, 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], arg10: javawrappers.java.lang.String, arg11: Union[int, JInt], arg12: Union[int, JInt], ): ...
	def getMacKeyLength(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getIvLength(self, ) -> Union[int, JInt]: ...
	def getExpandedCipherKeyLength(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getClientRandom(self, ) -> JArray(JByte, 1): ...
	def getMinorVersion(self, ) -> Union[int, JInt]: ...
	def getPRFHashAlg(self, ) -> javawrappers.java.lang.String: ...
	def getCipherKeyLength(self, ) -> Union[int, JInt]: ...
	def getCipherAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getServerRandom(self, ) -> JArray(JByte, 1): ...
	def getPRFBlockSize(self, ) -> Union[int, JInt]: ...
	def getMasterSecret(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def getMajorVersion(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPRFHashLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TlsMasterSecretParameterSpec:
	@overload
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: JArray(JByte, 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JInt], arg7: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: javawrappers.java.lang.String, arg5: Union[int, JInt], arg6: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPremasterSecret(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getClientRandom(self, ) -> JArray(JByte, 1): ...
	def getMinorVersion(self, ) -> Union[int, JInt]: ...
	def getPRFHashAlg(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getExtendedMasterSecretSessionHash(self, ) -> JArray(JByte, 1): ...
	def getServerRandom(self, ) -> JArray(JByte, 1): ...
	def getPRFBlockSize(self, ) -> Union[int, JInt]: ...
	def getMajorVersion(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPRFHashLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TlsKeyMaterialSpec:
	@overload
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: javawrappers.javax.crypto.SecretKey, arg2: javawrappers.javax.crypto.SecretKey, arg3: javawrappers.javax.crypto.SecretKey, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: javawrappers.javax.crypto.SecretKey, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: javawrappers.javax.crypto.SecretKey, arg2: javawrappers.javax.crypto.SecretKey, arg3: javawrappers.javax.crypto.spec.IvParameterSpec, arg4: javawrappers.javax.crypto.SecretKey, arg5: javawrappers.javax.crypto.spec.IvParameterSpec, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getServerMacKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def destroy(self, ) -> None: ...
	def getServerIv(self, ) -> javawrappers.javax.crypto.spec.IvParameterSpec: ...
	def getServerCipherKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def notify(self, ) -> None: ...
	def getClientMacKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def getClientIv(self, ) -> javawrappers.javax.crypto.spec.IvParameterSpec: ...
	def getClientCipherKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...


class TlsRsaPremasterSecretParameterSpec:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMajorVersion(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getClientVersion(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEncodedSecret(self, ) -> JArray(JByte, 1): ...
	def getMinorVersion(self, ) -> Union[int, JInt]: ...
	def getServerVersion(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


