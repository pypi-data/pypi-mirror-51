################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.sun.security.x509
import javawrappers.java.util
import javawrappers.javax.crypto.spec
import javawrappers.java.security.cert
import javawrappers.java.nio.charset
import javawrappers.java.security.spec
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.sun.security.provider
import javawrappers.java.security.interfaces
import javawrappers.sun.security.pkcs
import javawrappers.javax.security.auth
import javawrappers.java.util.function
import javawrappers.java.math
import javawrappers.javax.security.auth.login
import javawrappers.sun.security.util

from jpype.types import *
from typing import Union

from typing import overload

class DSAPublicKey:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def encode(self, ) -> JArray(JByte, 1): ...
	@overload
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEncodedInternal(self, ) -> JArray(JByte, 1): ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parse(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.java.security.PublicKey: ...
	@overload
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def decode(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getY(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.interfaces.DSAParams: ...
	def getAlgorithmId(self, ) -> javawrappers.sun.security.x509.AlgorithmId: ...


class X509Factory:
	def __init__(self, ): ...
	def engineGetCertPathEncodings(self, ) -> javawrappers.java.util.Iterator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineGenerateCertificates(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def intern(arg0: javawrappers.java.security.cert.X509CRL, ) -> javawrappers.sun.security.x509.X509CRLImpl: ...
	@overload
	@staticmethod
	def intern(arg0: javawrappers.java.security.cert.X509Certificate, ) -> javawrappers.sun.security.x509.X509CertImpl: ...
	def notifyAll(self, ) -> None: ...
	def engineGenerateCRLs(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...
	def engineGenerateCertificate(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.Certificate: ...
	@overload
	def engineGenerateCertPath(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPath: ...
	@overload
	def engineGenerateCertPath(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.security.cert.CertPath: ...
	@overload
	def engineGenerateCertPath(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.CertPath: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def engineGenerateCRL(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.CRL: ...


class EntropySource:
	def getEntropy(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> JArray(JByte, 1): ...


class DSAPublicKeyImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def encode(self, ) -> JArray(JByte, 1): ...
	@overload
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEncodedInternal(self, ) -> JArray(JByte, 1): ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parse(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.java.security.PublicKey: ...
	@overload
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def decode(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getY(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.interfaces.DSAParams: ...
	def getAlgorithmId(self, ) -> javawrappers.sun.security.x509.AlgorithmId: ...


class DSAPrivateKey:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.BigInteger, arg3: javawrappers.java.math.BigInteger, ): ...
	@overload
	def encode(self, arg0: javawrappers.sun.security.util.DerOutputStream, ) -> None: ...
	@overload
	def encode(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def parseKey(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.java.security.PrivateKey: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def destroy(self, ) -> None: ...
	@staticmethod
	def parse(arg0: javawrappers.sun.security.util.DerValue, ) -> javawrappers.sun.security.pkcs.PKCS8Key: ...
	@overload
	def decode(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def decode(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getX(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def getParams(self, ) -> javawrappers.java.security.interfaces.DSAParams: ...
	def getAlgorithmId(self, ) -> javawrappers.sun.security.x509.AlgorithmId: ...


class PolicyParser:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	class ParsingException:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.security.util.LocalizedMessage, arg2: JArray(javawrappers.java.lang.Object, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getNonlocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class KeyStoreEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DomainEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class PermissionEntry:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def notify(self, ) -> None: ...


	class PrincipalEntry:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getPrincipalClass(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getDisplayClass(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getPrincipalName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getDisplayName(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...
		def write(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...


	class GrantEntry:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
		def add(self, arg0: javawrappers.sun.security.provider.PolicyParser.PermissionEntry, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def contains(self, arg0: javawrappers.sun.security.provider.PolicyParser.PrincipalEntry, ) -> Union[int, JBoolean]: ...
		@overload
		def contains(self, arg0: javawrappers.sun.security.provider.PolicyParser.PermissionEntry, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def permissionElements(self, ) -> javawrappers.java.util.Enumeration: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: javawrappers.sun.security.provider.PolicyParser.PrincipalEntry, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.sun.security.provider.PolicyParser.PermissionEntry, ) -> Union[int, JBoolean]: ...


	def getDomainEntries(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getKeyStoreProvider(self, ) -> javawrappers.java.lang.String: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def replace(self, arg0: javawrappers.sun.security.provider.PolicyParser.GrantEntry, arg1: javawrappers.sun.security.provider.PolicyParser.GrantEntry, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.sun.security.provider.PolicyParser.GrantEntry, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.sun.security.provider.PolicyParser.PrincipalEntry, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.sun.security.provider.PolicyParser.PermissionEntry, ) -> Union[int, JBoolean]: ...
	def setKeyStoreUrl(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def grantElements(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def write(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setKeyStoreProvider(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.sun.security.provider.PolicyParser.PermissionEntry, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.sun.security.provider.PolicyParser.GrantEntry, ) -> None: ...
	def getPrincipalClass(self, ) -> javawrappers.java.lang.String: ...
	def read(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getKeyStoreUrl(self, ) -> javawrappers.java.lang.String: ...
	def setKeyStoreType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getDisplayClass(self, ) -> javawrappers.java.lang.String: ...
	def permissionElements(self, ) -> javawrappers.java.util.Enumeration: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def setStorePassURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getNonlocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getPrincipalName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def contains(self, arg0: javawrappers.sun.security.provider.PolicyParser.PrincipalEntry, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.sun.security.provider.PolicyParser.PermissionEntry, ) -> Union[int, JBoolean]: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def getDisplayName(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getStorePassURL(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...
	def getKeyStoreType(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Sun:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConfigured(self, ) -> Union[int, JBoolean]: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getServices(self, ) -> javawrappers.java.util.Set: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getVersion(self, ) -> Union[float, JDouble]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def getVersionStr(self, ) -> javawrappers.java.lang.String: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def configure(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getService(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider.Service: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AbstractDrbg:
	class NonceProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SeederHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineSetSeed(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineReseed(self, arg0: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class VerificationProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isConfigured(self, ) -> Union[int, JBoolean]: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getInfo(self, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getServices(self, ) -> javawrappers.java.util.Set: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getVersion(self, ) -> Union[float, JDouble]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def getVersionStr(self, ) -> javawrappers.java.lang.String: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def configure(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getService(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.Provider.Service: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ConfigFile:
	def __init__(self, ): ...
	class Spi:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.javax.security.auth.login.Configuration.Parameters, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.net.URI, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def engineRefresh(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def engineGetAppConfigurationEntry(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.security.auth.login.AppConfigurationEntry, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def refresh(self, ) -> None: ...
	def engineRefresh(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def engineGetAppConfigurationEntry(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.security.auth.login.AppConfigurationEntry, 1): ...
	@staticmethod
	def getConfiguration() -> javawrappers.javax.security.auth.login.Configuration: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.javax.security.auth.login.Configuration.Parameters: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.security.auth.login.Configuration.Parameters, ) -> javawrappers.javax.security.auth.login.Configuration: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.security.auth.login.Configuration.Parameters, arg2: javawrappers.java.security.Provider, ) -> javawrappers.javax.security.auth.login.Configuration: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.security.auth.login.Configuration.Parameters, arg2: javawrappers.java.lang.String, ) -> javawrappers.javax.security.auth.login.Configuration: ...
	@staticmethod
	def setConfiguration(arg0: javawrappers.javax.security.auth.login.Configuration, ) -> None: ...
	def getAppConfigurationEntry(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.security.auth.login.AppConfigurationEntry, 1): ...


class SHA:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MoreDrbgParameters:
	def __init__(self, arg0: javawrappers.sun.security.provider.EntropySource, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(JByte, 1), arg4: Union[int, JBoolean], arg5: javawrappers.java.security.DrbgParameters.Instantiation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CtrDrbg:
	def __init__(self, arg0: javawrappers.java.security.SecureRandomParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineSetSeed(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineReseed(self, arg0: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def generateAlgorithm(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PolicyFile:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	@overload
	def __init__(self, ): ...
	class PolicyInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SelfPermission:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ): ...
		def getSelfActions(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getSelfName(self, ) -> javawrappers.java.lang.String: ...
		def getActions(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getCerts(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSelfType(self, ) -> javawrappers.java.lang.String: ...
		def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...


	class PolicyEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getSelfActions(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getPermissions(self, arg0: javawrappers.java.security.CodeSource, ) -> javawrappers.java.security.PermissionCollection: ...
	@overload
	def getPermissions(self, arg0: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.security.PermissionCollection: ...
	def getSelfName(self, ) -> javawrappers.java.lang.String: ...
	def refresh(self, ) -> None: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getPolicy() -> javawrappers.java.security.Policy: ...
	@staticmethod
	def setPolicy(arg0: javawrappers.java.security.Policy, ) -> None: ...
	def notify(self, ) -> None: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.security.Policy.Parameters: ...
	def getCerts(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSelfType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, arg2: javawrappers.java.security.Provider, ) -> javawrappers.java.security.Policy: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.security.Policy: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Policy.Parameters, ) -> javawrappers.java.security.Policy: ...
	@overload
	def implies(self, arg0: javawrappers.java.security.ProtectionDomain, arg1: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	@overload
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...


class DSAKeyFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractHashDrbg:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineSetSeed(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineReseed(self, arg0: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def instantiateAlgorithm(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class DSAParameterGenerator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MD4:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.security.MessageDigest: ...
	def notify(self, ) -> None: ...


class DRBG:
	def __init__(self, arg0: javawrappers.java.security.SecureRandomParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HashDrbg:
	def __init__(self, arg0: javawrappers.java.security.SecureRandomParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineSetSeed(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineReseed(self, arg0: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	@staticmethod
	def hashDf(arg0: javawrappers.java.security.MessageDigest, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.List, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def generateAlgorithm(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def instantiateAlgorithm(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class PolicySpiFile:
	def __init__(self, arg0: javawrappers.java.security.Policy.Parameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SecureRandom:
	def __init__(self, ): ...
	class SeederHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineSetSeed(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def engineNextBytes(self, arg0: JArray(JByte, 1), ) -> None: ...


class MD2:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ParameterCache:
	@overload
	@staticmethod
	def getDSAParameterSpec(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.security.SecureRandom, ) -> javawrappers.java.security.spec.DSAParameterSpec: ...
	@overload
	@staticmethod
	def getDSAParameterSpec(arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> javawrappers.java.security.spec.DSAParameterSpec: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getNewDSAParameterSpec(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.security.SecureRandom, ) -> javawrappers.java.security.spec.DSAParameterSpec: ...
	@staticmethod
	def getDHParameterSpec(arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> javawrappers.javax.crypto.spec.DHParameterSpec: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getCachedDHParameterSpec(arg0: Union[int, JInt], ) -> javawrappers.javax.crypto.spec.DHParameterSpec: ...
	@staticmethod
	def getCachedDSAParameterSpec(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.security.spec.DSAParameterSpec: ...


class NativePRNG:
	def __init__(self, ): ...
	class RandomIO:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NonBlocking:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Blocking:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Variant:
		MIXED: NativePRNG.Variant = ...
		BLOCKING: NativePRNG.Variant = ...
		NONBLOCKING: NativePRNG.Variant = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.provider.NativePRNG.Variant: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.security.provider.NativePRNG.Variant, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.security.provider.NativePRNG.Variant: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.security.provider.NativePRNG.Variant, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DSAParameters:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JavaKeyStore:
	class TrustedCertEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class KeyEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DualFormatJKS:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
		def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
		@overload
		def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def engineStore(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
		@overload
		def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
		@overload
		def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
		def notify(self, ) -> None: ...
		def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
		def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
		@overload
		def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def engineLoad(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
		def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
		def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
		def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def engineSize(self, ) -> Union[int, JInt]: ...
		def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
		def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	class CaseExactJKS:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
		def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
		@overload
		def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def engineStore(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
		@overload
		def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
		@overload
		def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
		def notify(self, ) -> None: ...
		def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
		def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
		@overload
		def engineLoad(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
		@overload
		def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
		def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
		def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
		def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def engineSize(self, ) -> Union[int, JInt]: ...
		def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
		def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	class JKS:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
		def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
		@overload
		def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def engineStore(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
		@overload
		def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
		@overload
		def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
		def notify(self, ) -> None: ...
		def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
		def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
		@overload
		def engineLoad(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
		@overload
		def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
		def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
		def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
		def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def engineSize(self, ) -> Union[int, JInt]: ...
		def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
		def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def engineAliases(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
	@overload
	def engineGetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> javawrappers.java.security.KeyStore.Entry: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineStore(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def engineDeleteEntry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	@overload
	def engineGetCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Key, arg2: JArray(Union[string, JString], 1), arg3: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	@overload
	def engineSetKeyEntry(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.security.cert.Certificate, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def engineIsCertificateEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def engineEntryInstanceOf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
	@overload
	def engineGetCertificateAlias(self, arg0: javawrappers.java.security.cert.Certificate, ) -> javawrappers.java.lang.String: ...
	@overload
	def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def engineGetCreationDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.security.KeyStore.LoadStoreParameter, ) -> None: ...
	@overload
	def engineLoad(self, arg0: javawrappers.java.io.InputStream, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
	@overload
	def engineProbe(self, arg0: javawrappers.java.io.InputStream, ) -> Union[int, JBoolean]: ...
	@overload
	def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	@overload
	def engineSetCertificateEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	@overload
	def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def engineIsKeyEntry(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
	@overload
	def engineGetCertificate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.Certificate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def engineSize(self, ) -> Union[int, JInt]: ...
	@overload
	def engineSize(self, ) -> Union[int, JInt]: ...
	@overload
	def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
	@overload
	def engineGetKey(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.security.Key: ...
	@overload
	def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
	@overload
	def engineSetEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.KeyStore.Entry, arg2: javawrappers.java.security.KeyStore.ProtectionParameter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def engineContainsAlias(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class MD5:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HmacDrbg:
	def __init__(self, arg0: javawrappers.java.security.SecureRandomParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineSetSeed(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineReseed(self, arg0: javawrappers.java.security.SecureRandomParameters, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateSeed(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def generateAlgorithm(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def instantiateAlgorithm(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...


