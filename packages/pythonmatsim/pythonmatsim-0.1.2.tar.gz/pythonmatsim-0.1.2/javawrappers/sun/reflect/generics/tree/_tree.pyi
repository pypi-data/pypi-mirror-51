################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.sun.reflect.generics.tree
import javawrappers.java.util
import javawrappers.sun.reflect.generics.visitor

from jpype.types import *
from typing import Union

from typing import overload

class TypeArgument:
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class VoidDescriptor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.VoidDescriptor: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class ShortSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.ShortSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class MethodTypeSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1): ...
	def getFormalTypeParameters(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FormalTypeParameter, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReturnType(self, ) -> javawrappers.sun.reflect.generics.tree.ReturnType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterTypes(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.TypeSignature, 1): ...
	@staticmethod
	def make(arg0: JArray(javawrappers.sun.reflect.generics.tree.FormalTypeParameter, 1), arg1: JArray(javawrappers.sun.reflect.generics.tree.TypeSignature, 1), arg2: javawrappers.sun.reflect.generics.tree.ReturnType, arg3: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.sun.reflect.generics.tree.MethodTypeSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.Visitor, ) -> None: ...


class Signature:
	def getFormalTypeParameters(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FormalTypeParameter, 1): ...


class TypeVariableSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifier(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.reflect.generics.tree.TypeVariableSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class LongSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.LongSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class ArrayTypeSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getComponentType(self, ) -> javawrappers.sun.reflect.generics.tree.TypeSignature: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.sun.reflect.generics.tree.TypeSignature, ) -> javawrappers.sun.reflect.generics.tree.ArrayTypeSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class ClassSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getFormalTypeParameters(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FormalTypeParameter, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSuperInterfaces(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.ClassTypeSignature, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: JArray(javawrappers.sun.reflect.generics.tree.FormalTypeParameter, 1), arg1: javawrappers.sun.reflect.generics.tree.ClassTypeSignature, arg2: JArray(javawrappers.sun.reflect.generics.tree.ClassTypeSignature, 1), ) -> javawrappers.sun.reflect.generics.tree.ClassSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.Visitor, ) -> None: ...
	def getSuperclass(self, ) -> javawrappers.sun.reflect.generics.tree.ClassTypeSignature: ...


class TypeTree:
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class FieldTypeSignature:
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class BaseType:
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class DoubleSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.DoubleSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class FormalTypeParameter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.sun.reflect.generics.tree.FormalTypeParameter: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1): ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class Tree:


class ByteSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.ByteSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class FloatSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.FloatSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class BooleanSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.BooleanSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class ClassTypeSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPath(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.java.util.List, ) -> javawrappers.sun.reflect.generics.tree.ClassTypeSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class IntSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.IntSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class CharSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.CharSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class SimpleClassTypeSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDollar(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeArguments(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.TypeArgument, 1): ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: JArray(javawrappers.sun.reflect.generics.tree.TypeArgument, 1), ) -> javawrappers.sun.reflect.generics.tree.SimpleClassTypeSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class ReturnType:
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class TypeSignature:
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


class Wildcard:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLowerBounds(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.sun.reflect.generics.tree.Wildcard: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...
	def getUpperBounds(self, ) -> JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1): ...


class BottomSignature:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make() -> javawrappers.sun.reflect.generics.tree.BottomSignature: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.sun.reflect.generics.visitor.TypeTreeVisitor, ) -> None: ...


