################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.sun.reflect.generics.tree
import javawrappers.java.lang
import javawrappers.sun.reflect.generics.visitor
import javawrappers.sun.reflect.generics.factory

from jpype.types import *
from typing import Union

from typing import overload

class TypeTreeVisitor:
	def visitShortSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ShortSignature, ) -> None: ...
	def visitBottomSignature(self, arg0: javawrappers.sun.reflect.generics.tree.BottomSignature, ) -> None: ...
	def visitTypeVariableSignature(self, arg0: javawrappers.sun.reflect.generics.tree.TypeVariableSignature, ) -> None: ...
	def visitVoidDescriptor(self, arg0: javawrappers.sun.reflect.generics.tree.VoidDescriptor, ) -> None: ...
	def visitCharSignature(self, arg0: javawrappers.sun.reflect.generics.tree.CharSignature, ) -> None: ...
	def visitWildcard(self, arg0: javawrappers.sun.reflect.generics.tree.Wildcard, ) -> None: ...
	def visitClassTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ClassTypeSignature, ) -> None: ...
	def visitSimpleClassTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.SimpleClassTypeSignature, ) -> None: ...
	def visitLongSignature(self, arg0: javawrappers.sun.reflect.generics.tree.LongSignature, ) -> None: ...
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def visitFloatSignature(self, arg0: javawrappers.sun.reflect.generics.tree.FloatSignature, ) -> None: ...
	def visitArrayTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ArrayTypeSignature, ) -> None: ...
	def visitFormalTypeParameter(self, arg0: javawrappers.sun.reflect.generics.tree.FormalTypeParameter, ) -> None: ...
	def visitBooleanSignature(self, arg0: javawrappers.sun.reflect.generics.tree.BooleanSignature, ) -> None: ...
	def visitByteSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ByteSignature, ) -> None: ...
	def visitDoubleSignature(self, arg0: javawrappers.sun.reflect.generics.tree.DoubleSignature, ) -> None: ...
	def visitIntSignature(self, arg0: javawrappers.sun.reflect.generics.tree.IntSignature, ) -> None: ...


class Visitor:
	def visitShortSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ShortSignature, ) -> None: ...
	def visitBottomSignature(self, arg0: javawrappers.sun.reflect.generics.tree.BottomSignature, ) -> None: ...
	def visitTypeVariableSignature(self, arg0: javawrappers.sun.reflect.generics.tree.TypeVariableSignature, ) -> None: ...
	def visitVoidDescriptor(self, arg0: javawrappers.sun.reflect.generics.tree.VoidDescriptor, ) -> None: ...
	def visitCharSignature(self, arg0: javawrappers.sun.reflect.generics.tree.CharSignature, ) -> None: ...
	def visitWildcard(self, arg0: javawrappers.sun.reflect.generics.tree.Wildcard, ) -> None: ...
	def visitClassTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ClassTypeSignature, ) -> None: ...
	def visitSimpleClassTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.SimpleClassTypeSignature, ) -> None: ...
	def visitLongSignature(self, arg0: javawrappers.sun.reflect.generics.tree.LongSignature, ) -> None: ...
	def visitClassSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ClassSignature, ) -> None: ...
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def visitFloatSignature(self, arg0: javawrappers.sun.reflect.generics.tree.FloatSignature, ) -> None: ...
	def visitArrayTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ArrayTypeSignature, ) -> None: ...
	def visitFormalTypeParameter(self, arg0: javawrappers.sun.reflect.generics.tree.FormalTypeParameter, ) -> None: ...
	def visitBooleanSignature(self, arg0: javawrappers.sun.reflect.generics.tree.BooleanSignature, ) -> None: ...
	def visitByteSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ByteSignature, ) -> None: ...
	def visitMethodTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.MethodTypeSignature, ) -> None: ...
	def visitDoubleSignature(self, arg0: javawrappers.sun.reflect.generics.tree.DoubleSignature, ) -> None: ...
	def visitIntSignature(self, arg0: javawrappers.sun.reflect.generics.tree.IntSignature, ) -> None: ...


class Reifier:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitShortSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ShortSignature, ) -> None: ...
	def visitBottomSignature(self, arg0: javawrappers.sun.reflect.generics.tree.BottomSignature, ) -> None: ...
	def visitTypeVariableSignature(self, arg0: javawrappers.sun.reflect.generics.tree.TypeVariableSignature, ) -> None: ...
	def visitVoidDescriptor(self, arg0: javawrappers.sun.reflect.generics.tree.VoidDescriptor, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitCharSignature(self, arg0: javawrappers.sun.reflect.generics.tree.CharSignature, ) -> None: ...
	def visitWildcard(self, arg0: javawrappers.sun.reflect.generics.tree.Wildcard, ) -> None: ...
	def visitClassTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ClassTypeSignature, ) -> None: ...
	def visitSimpleClassTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.SimpleClassTypeSignature, ) -> None: ...
	def visitLongSignature(self, arg0: javawrappers.sun.reflect.generics.tree.LongSignature, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def visitFloatSignature(self, arg0: javawrappers.sun.reflect.generics.tree.FloatSignature, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitArrayTypeSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ArrayTypeSignature, ) -> None: ...
	def visitFormalTypeParameter(self, arg0: javawrappers.sun.reflect.generics.tree.FormalTypeParameter, ) -> None: ...
	@staticmethod
	def make(arg0: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.visitor.Reifier: ...
	def visitBooleanSignature(self, arg0: javawrappers.sun.reflect.generics.tree.BooleanSignature, ) -> None: ...
	def visitByteSignature(self, arg0: javawrappers.sun.reflect.generics.tree.ByteSignature, ) -> None: ...
	def visitDoubleSignature(self, arg0: javawrappers.sun.reflect.generics.tree.DoubleSignature, ) -> None: ...
	def visitIntSignature(self, arg0: javawrappers.sun.reflect.generics.tree.IntSignature, ) -> None: ...


