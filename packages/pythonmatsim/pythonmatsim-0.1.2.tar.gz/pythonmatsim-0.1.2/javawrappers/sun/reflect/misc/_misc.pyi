################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.stream

from jpype.types import *
from typing import Union

from typing import overload

class ConstructorUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getConstructors(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.reflect.Constructor, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getConstructor(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.reflect.Constructor: ...
	def notify(self, ) -> None: ...


class FieldUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getFields(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.reflect.Field, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getField(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Field: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ReflectUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def ensureMemberAccess(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isPackageAccessible(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isVMAnonymousClass(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def conservativeCheckMemberAccess(arg0: javawrappers.java.lang.reflect.Member, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def checkPackageAccess(arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	@staticmethod
	def checkPackageAccess(arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def checkProxyPackageAccess(arg0: javawrappers.java.lang.ClassLoader, *arg1: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	@staticmethod
	def checkProxyPackageAccess(arg0: javawrappers.java.lang.Class, ) -> None: ...
	@staticmethod
	def needsPackageAccessCheck(arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.ClassLoader, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def checkProxyMethod(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, ) -> None: ...
	@staticmethod
	def isNonPublicProxyClass(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...


class MethodUtil:
	class Signature:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def invoke(arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getMethod(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.reflect.Method: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def getPublicMethods(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.reflect.Method, 1): ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getMethods(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.reflect.Method, 1): ...


