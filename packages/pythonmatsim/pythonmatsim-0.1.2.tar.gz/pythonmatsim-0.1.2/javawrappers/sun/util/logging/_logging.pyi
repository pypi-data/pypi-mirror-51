################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.sun.util.logging
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class PlatformLogger:
	class ConfigurableBridge:
		class LoggerConfiguration:
			def __init__(self, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def getPlatformLevel(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def setPlatformLevel(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> None: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
		@overload
		@staticmethod
		def getLoggerConfiguration(arg0: javawrappers.sun.util.logging.PlatformLogger.Bridge, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
		def getPlatformLevel(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPlatformLevel(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> None: ...
		def notify(self, ) -> None: ...


	class Bridge:
		def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isEnabled(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def convert(arg0: javawrappers.java.lang.System.Logger, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...


	class Level:
		ALL: PlatformLogger.Level = ...
		FINEST: PlatformLogger.Level = ...
		FINER: PlatformLogger.Level = ...
		FINE: PlatformLogger.Level = ...
		CONFIG: PlatformLogger.Level = ...
		INFO: PlatformLogger.Level = ...
		WARNING: PlatformLogger.Level = ...
		SEVERE: PlatformLogger.Level = ...
		OFF: PlatformLogger.Level = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
		@overload
		@staticmethod
		def valueOf(arg0: Union[int, JInt], ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
		def intValue(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.util.logging.PlatformLogger.Level, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def systemLevel(self, ) -> javawrappers.java.lang.System.Logger.Level: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getPlatformLevel(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.util.logging.PlatformLogger.Level, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def convert(arg0: javawrappers.java.lang.System.Logger, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	@overload
	@staticmethod
	def getLoggerConfiguration(arg0: javawrappers.sun.util.logging.PlatformLogger.Bridge, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toPlatformLevel(arg0: javawrappers.java.lang.System.Logger.Level, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	def level(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	@overload
	@staticmethod
	def valueOf(arg0: Union[int, JInt], ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.logging.PlatformLogger: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def systemLevel(self, ) -> javawrappers.java.lang.System.Logger.Level: ...
	def setPlatformLevel(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


