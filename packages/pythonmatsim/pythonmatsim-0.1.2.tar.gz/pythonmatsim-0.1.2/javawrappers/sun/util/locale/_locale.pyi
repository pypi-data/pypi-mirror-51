################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.sun.util.locale

from jpype.types import *
from typing import Union

from typing import overload

class InternalLocaleBuilder:
	def __init__(self, ): ...
	class CaseInsensitiveChar:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> Union[string, JString]: ...
		def notify(self, ) -> None: ...


	class CaseInsensitiveString:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setRegion(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def getBaseLocale(self, ) -> javawrappers.sun.util.locale.BaseLocale: ...
	def setExtension(self, arg0: Union[string, JString], arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def setLanguageTag(self, arg0: javawrappers.sun.util.locale.LanguageTag, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def setUnicodeLocaleKeyword(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def addUnicodeLocaleAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def notify(self, ) -> None: ...
	def removeUnicodeLocaleAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def getLocaleExtensions(self, ) -> javawrappers.sun.util.locale.LocaleExtensions: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setVariant(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> Union[string, JString]: ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...
	def clearExtensions(self, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def setExtensions(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def setLocale(self, arg0: javawrappers.sun.util.locale.BaseLocale, arg1: javawrappers.sun.util.locale.LocaleExtensions, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def setScript(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...
	def setLanguage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.InternalLocaleBuilder: ...


class LocaleSyntaxException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getErrorIndex(self, ) -> Union[int, JInt]: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class BaseLocale:
	class Cache:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Key:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def normalize(arg0: javawrappers.sun.util.locale.BaseLocale.Key, ) -> javawrappers.sun.util.locale.BaseLocale.Key: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLanguage(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.BaseLocale: ...
	def getVariant(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getRegion(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def normalize(arg0: javawrappers.sun.util.locale.BaseLocale.Key, ) -> javawrappers.sun.util.locale.BaseLocale.Key: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.BaseLocale: ...
	def getScript(self, ) -> javawrappers.java.lang.String: ...


class StringTokenIterator:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def next(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def currentStart(self, ) -> Union[int, JInt]: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def current(self, ) -> javawrappers.java.lang.String: ...
	def currentEnd(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setStart(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.locale.StringTokenIterator: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def first(self, ) -> javawrappers.java.lang.String: ...
	def setText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.StringTokenIterator: ...


class ParseStatus:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getParseLength(self, ) -> Union[int, JInt]: ...
	def isError(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getErrorIndex(self, ) -> Union[int, JInt]: ...
	def getErrorMessage(self, ) -> javawrappers.java.lang.String: ...


class LocaleExtensions:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getExtension(self, arg0: javawrappers.java.lang.Character, ) -> javawrappers.sun.util.locale.Extension: ...
	def getUnicodeLocaleAttributes(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def getUnicodeLocaleKeys(self, ) -> javawrappers.java.util.Set: ...
	def getKeys(self, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def isValidKey(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isValidUnicodeLocaleKey(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getExtensionValue(self, arg0: javawrappers.java.lang.Character, ) -> javawrappers.java.lang.String: ...
	def getUnicodeLocaleType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class LocaleObjectCache:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], ): ...
	class CacheEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


class LanguageTag:
	@staticmethod
	def canonicalizeVariant(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def canonicalizePrivateuseSubtag(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isScript(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isExtensionSubtag(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def canonicalizePrivateuse(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isRegion(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isExtensionSingletonChar(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def canonicalizeExtension(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isPrivateusePrefix(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isPrivateuseSubtag(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getExtlangs(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def canonicalizeExtensionSubtag(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def canonicalizeExtlang(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getVariants(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def canonicalizeExtensionSingleton(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getLanguage(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isExtlang(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def canonicalizeLanguage(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isLanguage(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def canonicalizeRegion(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.util.locale.ParseStatus, ) -> javawrappers.sun.util.locale.LanguageTag: ...
	def getExtensions(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def isPrivateusePrefixChar(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def canonicalizeScript(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getPrivateuse(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isVariant(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getRegion(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isExtensionSingleton(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getScript(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseLocale(arg0: javawrappers.sun.util.locale.BaseLocale, arg1: javawrappers.sun.util.locale.LocaleExtensions, ) -> javawrappers.sun.util.locale.LanguageTag: ...


class LocaleUtils:
	@staticmethod
	def isAlphaNumericString(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def caseIgnoreMatch(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toLowerString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class UnicodeLocaleExtension:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> Union[string, JString]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getUnicodeLocaleAttributes(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isKey(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def getUnicodeLocaleKeys(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isAttribute(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isTypeSubtag(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSingletonChar(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getUnicodeLocaleType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class LocaleMatcher:
	@staticmethod
	def filter(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.util.Locale.FilteringMode, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def lookupTag(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def lookup(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Locale: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def mapEquivalents(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def filterTags(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.util.Locale.FilteringMode, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


