################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.nio
import javawrappers.java.util.function
import javawrappers.sun.text.normalizer

from jpype.types import *
from typing import Union

from typing import overload

class UCharacterIterator:
	def next(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def previous(self, ) -> Union[int, JInt]: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def previousCodePoint(self, ) -> Union[int, JInt]: ...
	def setToStart(self, ) -> None: ...
	@overload
	def getText(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def getText(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getText(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.StringBuffer, ) -> javawrappers.sun.text.normalizer.UCharacterIterator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.text.normalizer.UCharacterIterator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.text.CharacterIterator, ) -> javawrappers.sun.text.normalizer.UCharacterIterator: ...
	def nextCodePoint(self, ) -> Union[int, JInt]: ...
	def moveCodePointIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class NormalizerBase:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.text.normalizer.NormalizerBase.Mode, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.CharacterIterator, arg1: javawrappers.sun.text.normalizer.NormalizerBase.Mode, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.text.normalizer.NormalizerBase.Mode, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.CharacterIterator, arg1: javawrappers.sun.text.normalizer.NormalizerBase.Mode, ): ...
	class NFKCMode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFCMode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFKDMode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFDMode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NONEMode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Mode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFKC32ModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFC32ModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFKD32ModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFD32ModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Unicode32:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFKCModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFCModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFKDModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NFDModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ModeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def next(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setIndexOnly(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def previous(self, ) -> Union[int, JInt]: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setMode(self, arg0: javawrappers.sun.text.normalizer.NormalizerBase.Mode, ) -> None: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def current(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def endIndex(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normalize(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.Normalizer.Form, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def normalize(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.Normalizer.Form, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def normalize(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.text.normalizer.NormalizerBase.Mode, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMode(self, ) -> javawrappers.sun.text.normalizer.NormalizerBase.Mode: ...
	@overload
	@staticmethod
	def isNormalized(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.text.normalizer.NormalizerBase.Mode, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isNormalized(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.Normalizer.Form, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isNormalized(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.Normalizer.Form, ) -> Union[int, JBoolean]: ...
	@overload
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setText(self, arg0: javawrappers.java.text.CharacterIterator, ) -> None: ...


class UBiDiProps:
	class IsAcceptable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	@overload
	def getClass(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMirror(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getJoiningGroup(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJoiningType(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPairedBracket(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getPairedBracketType(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class NormalizerImpl:
	def __init__(self, ): ...
	class NextCCArgs:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class PrevArgs:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class IsAcceptable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class UTF16Plus:
		def __init__(self, ): ...
		@staticmethod
		def equal(arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.CharSequence, arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def isSurrogateLead(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ReorderingBuffer:
		def __init__(self, arg0: javawrappers.sun.text.normalizer.NormalizerImpl, arg1: javawrappers.java.lang.Appendable, arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLastCC(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def length(self, ) -> Union[int, JInt]: ...
		def appendZeroCC(self, arg0: Union[int, JInt], ) -> None: ...
		def flushAndAppendZeroCC(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getStringBuilder(self, ) -> javawrappers.java.lang.StringBuilder: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def append(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
		def removeSuffix(self, arg0: Union[int, JInt], ) -> None: ...


	class Hangul:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def isHangulLV(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		@staticmethod
		def decompose(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Appendable, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def isHangul(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLastCC(self, ) -> Union[int, JInt]: ...
	def hasCompBoundaryBefore(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def decomposeAndAppend(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JBoolean], arg2: javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer, ) -> None: ...
	def flushAndAppendZeroCC(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
	def getFCD16FromNormData(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isCompNo(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isHangulLV(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getCCFromNormalYesOrMaybe(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getDecompose(arg0: JArray(Union[int, JInt], 1), arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JInt]: ...
	def norm16HasDecompBoundaryAfter(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getFCD16(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getCCFromYesOrMaybeCP(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def isSurrogateLead(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def compose(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer, ) -> Union[int, JBoolean]: ...
	def isAlgorithmicNoNo(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getStringBuilder(self, ) -> javawrappers.java.lang.StringBuilder: ...
	def composeAndAppend(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer, ) -> None: ...
	def hasCompBoundaryAfter(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getCCFromYesOrMaybe(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hasDecompBoundaryBefore(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def decompose(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Appendable, ) -> Union[int, JInt]: ...
	@overload
	def decompose(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JInt], ) -> None: ...
	@overload
	def decompose(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer, ) -> Union[int, JInt]: ...
	def appendZeroCC(self, arg0: Union[int, JInt], ) -> None: ...
	def getNorm16(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def hasDecompBoundaryAfter(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def isDecompInert(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def flush(self, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.sun.text.normalizer.NormalizerImpl: ...
	@overload
	def load(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.text.normalizer.NormalizerImpl: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def composeQuickCheck(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def singleLeadMightHaveNonZeroFCD16(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def makeFCD(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer, ) -> Union[int, JInt]: ...
	def isDecompYes(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def removeSuffix(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def canonicalDecomposeWithSingleQuotation(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def getCC(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def equal(arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.CharSequence, arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDecomposition(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def norm16HasDecompBoundaryBefore(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isHangul(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.sun.text.normalizer.NormalizerImpl.ReorderingBuffer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...


class UCharacter:
	class HangulSyllableType:


	class NumericType:


	class JoiningGroup:


	@staticmethod
	def getCombiningClass(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getMirror(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getAge(arg0: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.VersionInfo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getDirection(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getCodePoint(arg0: Union[string, JString], arg1: Union[string, JString], ) -> Union[int, JInt]: ...
	@staticmethod
	def getIntPropertyValue(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getBidiPairedBracket(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getType(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getUnicodeVersion() -> javawrappers.sun.text.normalizer.VersionInfo: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def digit(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def digit(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...


class ICUBinary:
	def __init__(self, ): ...
	class Authenticate:
		def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...


	class IsAcceptable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getRequiredData(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def readHeader(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: javawrappers.sun.text.normalizer.ICUBinary.Authenticate, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def readHeader(arg0: javawrappers.java.io.InputStream, arg1: JArray(JByte, 1), arg2: javawrappers.sun.text.normalizer.ICUBinary.Authenticate, ) -> JArray(JByte, 1): ...
	@overload
	def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def isDataVersionAcceptable(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def skipBytes(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getVersionInfoFromCompactInt(arg0: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.VersionInfo: ...
	@staticmethod
	def readHeaderAndDataVersion(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: javawrappers.sun.text.normalizer.ICUBinary.Authenticate, ) -> javawrappers.sun.text.normalizer.VersionInfo: ...


class CharTrie:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.sun.text.normalizer.Trie.DataManipulate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLeadValue(self, arg0: Union[string, JString], ) -> Union[string, JString]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCodePointValue(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def notify(self, ) -> None: ...


class Trie:
	class DefaultGetFoldingOffset:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getFoldingOffset(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DataManipulate:
		def getFoldingOffset(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getFoldingOffset(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getFoldingOffset(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class VersionInfo:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.VersionInfo: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.text.normalizer.VersionInfo: ...
	def compareTo(self, arg0: javawrappers.sun.text.normalizer.VersionInfo, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class UTF16:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getCharCount(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def valueOf(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isTrailSurrogate(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getLeadSurrogate(arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	@staticmethod
	def isSurrogate(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getTrailSurrogate(arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def moveCodePointOffset(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isLeadSurrogate(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def charAt(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def charAt(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def charAt(arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def append(arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> javawrappers.java.lang.StringBuffer: ...


class Trie2_16:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSerializedLength(self, ) -> Union[int, JInt]: ...
	@overload
	def iterator(self, arg0: javawrappers.sun.text.normalizer.Trie2.ValueMapper, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getFromU16SingleLead(self, arg0: Union[string, JString], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def createFromSerialized(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.sun.text.normalizer.Trie2: ...
	@overload
	@staticmethod
	def createFromSerialized(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.sun.text.normalizer.Trie2_16: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


