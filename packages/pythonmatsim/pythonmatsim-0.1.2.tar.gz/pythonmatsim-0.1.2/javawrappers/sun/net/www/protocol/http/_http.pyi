################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.sun.net.www.http
import javawrappers.sun.net.www.protocol.http
import javawrappers.sun.util.logging
import javawrappers.sun.net.www

from jpype.types import *
from typing import Union

from typing import overload

class HttpCallerInfo:
	@overload
	def __init__(self, arg0: javawrappers.sun.net.www.protocol.http.HttpCallerInfo, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.Authenticator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.net.Authenticator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AuthenticationHeader:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.www.MessageHeader, arg2: javawrappers.sun.net.www.protocol.http.HttpCallerInfo, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.www.MessageHeader, arg2: javawrappers.sun.net.www.protocol.http.HttpCallerInfo, arg3: Union[int, JBoolean], arg4: javawrappers.java.util.Set, ): ...
	class SchemeMapValue:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getHttpCallerInfo(self, ) -> javawrappers.sun.net.www.protocol.http.HttpCallerInfo: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def scheme(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isPresent(self, ) -> Union[int, JBoolean]: ...
	def raw(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def headerParser(self, ) -> javawrappers.sun.net.www.HeaderParser: ...


class Negotiator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def firstToken(self, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def nextToken(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AuthenticatorKeys:
	class AuthenticatorKeyAccess:
		def getKey(self, arg0: javawrappers.java.net.Authenticator, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getKey(arg0: javawrappers.java.net.Authenticator, ) -> javawrappers.java.lang.String: ...
	@overload
	def getKey(self, arg0: javawrappers.java.net.Authenticator, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setAuthenticatorKeyAccess(arg0: javawrappers.sun.net.www.protocol.http.AuthenticatorKeys.AuthenticatorKeyAccess, ) -> None: ...
	@staticmethod
	def computeKey(arg0: javawrappers.java.net.Authenticator, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Handler:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AuthCache:
	def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.AuthCacheValue: ...
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.www.protocol.http.AuthCacheValue, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.www.protocol.http.AuthCacheValue, ) -> None: ...


class AuthScheme:
	BASIC: AuthScheme = ...
	DIGEST: AuthScheme = ...
	NTLM: AuthScheme = ...
	NEGOTIATE: AuthScheme = ...
	KERBEROS: AuthScheme = ...
	UNKNOWN: AuthScheme = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.AuthScheme: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.www.protocol.http.AuthScheme, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AuthCacheImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.AuthCacheValue: ...
	def setMap(self, arg0: javawrappers.java.util.HashMap, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.www.protocol.http.AuthCacheValue, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.www.protocol.http.AuthCacheValue, ) -> None: ...


class HttpURLConnection:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.Proxy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ): ...
	class ErrorStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def getErrorStream(arg0: javawrappers.java.io.InputStream, arg1: Union[long, JLong], arg2: javawrappers.sun.net.www.http.HttpClient, ) -> javawrappers.java.io.InputStream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	class StreamingOutputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		def notify(self, ) -> None: ...


	class HttpInputStream:
		@overload
		def __init__(self, arg0: javawrappers.sun.net.www.protocol.http.HttpURLConnection, arg1: javawrappers.java.io.InputStream, ): ...
		@overload
		def __init__(self, arg0: javawrappers.sun.net.www.protocol.http.HttpURLConnection, arg1: javawrappers.java.io.InputStream, arg2: javawrappers.java.net.CacheRequest, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	class TunnelState:
		NONE: HttpURLConnection.TunnelState = ...
		SETUP: HttpURLConnection.TunnelState = ...
		TUNNELING: HttpURLConnection.TunnelState = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.HttpURLConnection.TunnelState: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.net.www.protocol.http.HttpURLConnection.TunnelState, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def disconnect(self, ) -> None: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getAuthenticatorKey(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setFollowRedirects(arg0: Union[int, JBoolean], ) -> None: ...
	def setAuthenticationProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getIfModifiedSince(self, ) -> Union[long, JLong]: ...
	@overload
	def getDefaultUseCaches(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getDefaultUseCaches(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getRequestProperties(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getHeaderField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaderField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setDefaultAllowUserInteraction(arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	def setTunnelState(self, arg0: javawrappers.sun.net.www.protocol.http.HttpURLConnection.TunnelState, ) -> None: ...
	@overload
	@staticmethod
	def setDefaultUseCaches(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDefaultUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDoOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, ) -> Union[long, JLong]: ...
	def setIfModifiedSince(self, arg0: Union[long, JLong], ) -> None: ...
	@staticmethod
	def openConnectionCheckRedirects(arg0: javawrappers.java.net.URLConnection, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def streaming(self, ) -> Union[int, JBoolean]: ...
	def setAuthenticator(self, arg0: javawrappers.java.net.Authenticator, ) -> None: ...
	def getHeaderFieldDate(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def authObj(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def authObj(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getDate(self, ) -> Union[long, JLong]: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	def connect(self, ) -> None: ...
	def getHeaderFieldKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setContentHandlerFactory(arg0: javawrappers.java.net.ContentHandlerFactory, ) -> None: ...
	def getContentEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getUseCaches(self, ) -> Union[int, JBoolean]: ...
	def getRequestMethod(self, ) -> javawrappers.java.lang.String: ...
	def setChunkedStreamingMode(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getDefaultRequestProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInstanceFollowRedirects(self, ) -> Union[int, JBoolean]: ...
	def getHeaderFieldLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	@overload
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	@overload
	def available(self, ) -> Union[int, JInt]: ...
	@overload
	def available(self, ) -> Union[int, JInt]: ...
	def setUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoInput(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setDefaultAuthenticator(arg0: javawrappers.sun.net.www.protocol.http.HttpAuthenticator, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	@staticmethod
	def getDefaultAllowUserInteraction() -> Union[int, JBoolean]: ...
	def getAllowUserInteraction(self, ) -> Union[int, JBoolean]: ...
	def setAllowUserInteraction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	def getHeaderFields(self, ) -> javawrappers.java.util.Map: ...
	def getContentLengthLong(self, ) -> Union[long, JLong]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setFixedLengthStreamingMode(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def setFixedLengthStreamingMode(self, arg0: Union[int, JInt], ) -> None: ...
	def usingProxy(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def guessContentTypeFromName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setRequestMethod(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.www.protocol.http.HttpURLConnection.TunnelState, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def setInstanceFollowRedirects(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def getCookieHandler(self, ) -> javawrappers.java.net.CookieHandler: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def getResponseMessage(self, ) -> javawrappers.java.lang.String: ...
	def getHeaderFieldInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRequestProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guessContentTypeFromStream(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getErrorStream(arg0: javawrappers.java.io.InputStream, arg1: Union[long, JLong], arg2: javawrappers.sun.net.www.http.HttpClient, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getErrorStream(self, ) -> javawrappers.java.io.InputStream: ...
	def flush(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultRequestProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def getFileNameMap() -> javawrappers.java.net.FileNameMap: ...
	def doTunneling(self, ) -> None: ...
	@staticmethod
	def getFollowRedirects() -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.HttpURLConnection.TunnelState: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def setDoInput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getExpiration(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getHttpLogger() -> javawrappers.sun.util.logging.PlatformLogger: ...
	def getResponseCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setFileNameMap(arg0: javawrappers.java.net.FileNameMap, ) -> None: ...
	def getDoOutput(self, ) -> Union[int, JBoolean]: ...
	@overload
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class HttpAuthenticator:
	def authString(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def schemeSupported(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class AuthCacheValue:
	class Type:
		Proxy: AuthCacheValue.Type = ...
		Server: AuthCacheValue.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.AuthCacheValue.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.net.www.protocol.http.AuthCacheValue.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.protocol.http.AuthCacheValue.Type: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.www.protocol.http.AuthCacheValue.Type, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setAuthCache(arg0: javawrappers.sun.net.www.protocol.http.AuthCache, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AuthenticationInfo:
	@overload
	def __init__(self, arg0: Union[string, JString], arg1: javawrappers.sun.net.www.protocol.http.AuthScheme, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[string, JString], arg1: javawrappers.sun.net.www.protocol.http.AuthScheme, arg2: javawrappers.java.net.URL, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAuthType(self, ) -> javawrappers.sun.net.www.protocol.http.AuthCacheValue.Type: ...
	def setHeaders(self, arg0: javawrappers.sun.net.www.protocol.http.HttpURLConnection, arg1: javawrappers.sun.net.www.HeaderParser, arg2: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAuthenticatorKey(self, ) -> javawrappers.java.lang.String: ...
	def credentials(self, ) -> javawrappers.java.net.PasswordAuthentication: ...
	def notifyAll(self, ) -> None: ...
	def getProtocolScheme(self, ) -> javawrappers.java.lang.String: ...
	def getRealm(self, ) -> javawrappers.java.lang.String: ...
	def getHeaderValue(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeaderName(self, ) -> javawrappers.java.lang.String: ...
	def supportsPreemptiveAuthorization(self, ) -> Union[int, JBoolean]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isAuthorizationStale(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setAuthCache(arg0: javawrappers.sun.net.www.protocol.http.AuthCache, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHost(self, ) -> javawrappers.java.lang.String: ...


