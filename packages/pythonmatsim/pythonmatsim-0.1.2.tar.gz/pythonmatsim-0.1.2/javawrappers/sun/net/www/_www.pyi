################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.sun.net.www

from jpype.types import *
from typing import Union

from typing import overload

class ApplicationLaunchException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class URLConnection:
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getHeaderFieldLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setProperties(self, arg0: javawrappers.sun.net.www.MessageHeader, ) -> None: ...
	def setUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoInput(self, ) -> Union[int, JBoolean]: ...
	def setContentType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getIfModifiedSince(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def setProxiedHost(arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	@staticmethod
	def getDefaultAllowUserInteraction() -> Union[int, JBoolean]: ...
	@overload
	def getDefaultUseCaches(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getDefaultUseCaches(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getProperties(self, ) -> javawrappers.sun.net.www.MessageHeader: ...
	def getAllowUserInteraction(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAllowUserInteraction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestProperties(self, ) -> javawrappers.java.util.Map: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def getHeaderField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaderField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getHeaderFields(self, ) -> javawrappers.java.util.Map: ...
	def getContentLengthLong(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def setDefaultAllowUserInteraction(arg0: Union[int, JBoolean], ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def setDefaultUseCaches(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDefaultUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDoOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def guessContentTypeFromName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, ) -> Union[long, JLong]: ...
	def setIfModifiedSince(self, arg0: Union[long, JLong], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getHeaderFieldInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRequestProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guessContentTypeFromStream(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultRequestProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getHeaderFieldDate(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDate(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getFileNameMap() -> javawrappers.java.net.FileNameMap: ...
	def close(self, ) -> None: ...
	def connect(self, ) -> None: ...
	def getHeaderFieldKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isProxiedHost(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setContentHandlerFactory(arg0: javawrappers.java.net.ContentHandlerFactory, ) -> None: ...
	def getContentEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getUseCaches(self, ) -> Union[int, JBoolean]: ...
	def setDoInput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def canCache(self, ) -> Union[int, JBoolean]: ...
	def getExpiration(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getDefaultRequestProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setFileNameMap(arg0: javawrappers.java.net.FileNameMap, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getDoOutput(self, ) -> Union[int, JBoolean]: ...


class ParseUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toURI(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URI: ...
	@overload
	@staticmethod
	def encodePath(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodePath(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fileToEncodedURL(arg0: javawrappers.java.io.File, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def canonizeString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class MimeEntry:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLaunchString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setAction(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setAction(self, arg0: Union[int, JInt], ) -> None: ...
	def getExtensionsAsList(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def launch(self, arg0: javawrappers.java.net.URLConnection, arg1: javawrappers.java.io.InputStream, arg2: javawrappers.sun.net.www.MimeTable, ) -> javawrappers.java.lang.Object: ...
	def getAction(self, ) -> Union[int, JInt]: ...
	def toProperty(self, ) -> javawrappers.java.lang.String: ...
	def setImageFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def setCommand(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getExtensions(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getTempFileTemplate(self, ) -> javawrappers.java.lang.String: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getImageFileName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExtensions(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class MessageHeader:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	class HeaderIterator:
		def __init__(self, arg0: javawrappers.sun.net.www.MessageHeader, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ): ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def canonicalID(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def prepend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getHeaderNamesInList(self, ) -> javawrappers.java.lang.String: ...
	def filterNTLMResponses(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def parseHeader(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def setIfNotSet(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def findValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaders(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.util.Map: ...
	@overload
	def getHeaders(self, ) -> javawrappers.java.util.Map: ...
	def multiValueIterator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def filterAndAddHeaders(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.util.Map, ) -> javawrappers.java.util.Map: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findNextValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mergeHeader(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...


class MeteredStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.sun.net.ProgressSource, arg2: Union[long, JLong], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class MimeTable:
	class DefaultInstanceHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: javawrappers.sun.net.www.MimeEntry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAsProperties(self, ) -> javawrappers.java.util.Properties: ...
	def findByDescription(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.MimeEntry: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def loadTable() -> javawrappers.java.net.FileNameMap: ...
	def getContentTypeFor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.sun.net.www.MimeEntry, ) -> javawrappers.sun.net.www.MimeEntry: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.MimeEntry: ...
	@staticmethod
	def getDefaultTable() -> javawrappers.sun.net.www.MimeTable: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def load(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.MimeEntry: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def findByFileName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.MimeEntry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findByExt(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.www.MimeEntry: ...


class HeaderParser:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class ParserIterator:
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def findKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def findValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def findValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def findValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def keys(self, ) -> javawrappers.java.util.Iterator: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Iterator: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def subsequence(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.sun.net.www.HeaderParser: ...
	def findInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


