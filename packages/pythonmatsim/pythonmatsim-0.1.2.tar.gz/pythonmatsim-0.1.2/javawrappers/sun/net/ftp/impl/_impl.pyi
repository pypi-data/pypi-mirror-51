################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.sun.net.ftp
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class FtpClient:
	class FtpFileIterator:
		def __init__(self, arg0: javawrappers.sun.net.ftp.impl.FtpClient, arg1: javawrappers.sun.net.ftp.FtpDirParser, arg2: javawrappers.java.io.BufferedReader, ): ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class MLSxParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def parseLine(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...


	class DefaultParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def parseLine(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setRestartOffset(self, arg0: Union[long, JLong], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getStatus(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.OutputStream, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@staticmethod
	def defaultPort() -> Union[int, JInt]: ...
	def setAsciiType(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getSystem(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.net.InetSocketAddress, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	@staticmethod
	def create() -> javawrappers.sun.net.ftp.FtpClient: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getLastResponseString(self, ) -> javawrappers.java.lang.String: ...
	def makeDirectory(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def structureMount(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getWorkingDirectory(self, ) -> javawrappers.java.lang.String: ...
	def setDirParser(self, arg0: javawrappers.sun.net.ftp.FtpDirParser, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def isPassiveModeEnabled(self, ) -> Union[int, JBoolean]: ...
	def setProxy(self, arg0: javawrappers.java.net.Proxy, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def list(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def enablePassiveMode(self, arg0: Union[int, JBoolean], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getWelcomeMsg(self, ) -> javawrappers.java.lang.String: ...
	def getFileStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def allocate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getFeatures(self, ) -> javawrappers.java.util.List: ...
	def abort(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getLastTransferSize(self, ) -> Union[long, JLong]: ...
	def removeDirectory(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setBinaryType(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getHelp(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isLoggedIn(self, ) -> Union[int, JBoolean]: ...
	def startSecureSession(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def getLastReplyCode(self, ) -> javawrappers.sun.net.ftp.FtpReplyCode: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	def completePending(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def appendFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getProxy(self, ) -> javawrappers.java.net.Proxy: ...
	def notifyAll(self, ) -> None: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def login(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def login(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def putFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JBoolean], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def putFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def noop(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def putFileStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def putFileStream(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.io.OutputStream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def changeToParentDirectory(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def siteCmd(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def reInit(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	def listFiles(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getLastFileName(self, ) -> javawrappers.java.lang.String: ...
	def deleteFile(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getServerAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def changeDirectory(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def endSecureSession(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setType(self, arg0: javawrappers.sun.net.ftp.FtpClient.TransferType, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def useKerberos(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getSize(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def rename(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def nameList(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def parseLine(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	@overload
	def parseLine(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...


class DefaultFtpClientProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def provider() -> javawrappers.sun.net.ftp.FtpClientProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createFtpClient(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def notify(self, ) -> None: ...


