################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.jdk.internal.org.objectweb.asm

from jpype.types import *
from typing import Union

from typing import overload

class ClassWriter:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassReader, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	@overload
	def newHandle(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def newHandle(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def newField(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def newUTF8(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def newMethod(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def newMethodType(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def newModule(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def newPackage(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def newConst(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def newClass(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def newNameType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def newInvokeDynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class Attribute:
	class NestHost:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isUnknown(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


	class NestMembers:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isUnknown(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isUnknown(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


class TypePath:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStep(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStepArgument(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.TypePath: ...
	def notify(self, ) -> None: ...


class ClassVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class FieldVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...


class ByteVector:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def putByte(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.ByteVector: ...
	def putInt(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.ByteVector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putUTF8(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ByteVector: ...
	def putLong(self, arg0: Union[long, JLong], ) -> javawrappers.jdk.internal.org.objectweb.asm.ByteVector: ...
	def putShort(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.ByteVector: ...
	def notify(self, ) -> None: ...
	def putByteArray(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.ByteVector: ...


class Handle:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDesc(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOwner(self, ) -> javawrappers.java.lang.String: ...
	def getTag(self, ) -> Union[int, JInt]: ...
	def isInterface(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ModuleVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitProvide(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitUse(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitMainClass(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitRequire(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitExport(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitOpen(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitPackage(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class Type:
	@overload
	def getDescriptor(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getDescriptor(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getElementType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getArgumentTypes(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.jdk.internal.org.objectweb.asm.Type, 1): ...
	@overload
	@staticmethod
	def getArgumentTypes(arg0: javawrappers.java.lang.reflect.Method, ) -> JArray(javawrappers.jdk.internal.org.objectweb.asm.Type, 1): ...
	@overload
	def getArgumentTypes(self, ) -> JArray(javawrappers.jdk.internal.org.objectweb.asm.Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getArgumentsAndReturnSizes(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getArgumentsAndReturnSizes(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSort(self, ) -> Union[int, JInt]: ...
	def getDimensions(self, ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getMethodDescriptor(arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, *arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getMethodDescriptor(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getReturnType(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	def getReturnType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getReturnType(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	def getInternalName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInternalName(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getMethodType(arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, *arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@overload
	@staticmethod
	def getMethodType(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	@staticmethod
	def getConstructorDescriptor(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getObjectType(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class MethodVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class ClassReader:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def readPackage(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	def getSuperName(self, ) -> javawrappers.java.lang.String: ...
	def getAccess(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def readModule(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getInterfaces(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getItem(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readUTF8(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, arg1: JArray(javawrappers.jdk.internal.org.objectweb.asm.Attribute, 1), arg2: Union[int, JInt], ) -> None: ...
	def readClass(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	def readLong(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def readShort(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readConst(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	def readInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readByte(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getMaxStringLength(self, ) -> Union[int, JInt]: ...
	def readUnsignedShort(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class AnnotationVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...


class Opcodes:


class Label:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TypeReference:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTypeArgumentIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSuperTypeIndex(self, ) -> Union[int, JInt]: ...
	def getTypeParameterIndex(self, ) -> Union[int, JInt]: ...
	def getTypeParameterBoundIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def newExceptionReference(arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	def getExceptionIndex(self, ) -> Union[int, JInt]: ...
	def getFormalParameterIndex(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def newFormalParameterReference(arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def newTypeParameterBoundReference(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	@staticmethod
	def newTypeReference(arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getSort(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def newSuperTypeReference(arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	@staticmethod
	def newTryCatchReference(arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def newTypeArgumentReference(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def newTypeParameterReference(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.TypeReference: ...
	def getTryCatchBlockIndex(self, ) -> Union[int, JInt]: ...


