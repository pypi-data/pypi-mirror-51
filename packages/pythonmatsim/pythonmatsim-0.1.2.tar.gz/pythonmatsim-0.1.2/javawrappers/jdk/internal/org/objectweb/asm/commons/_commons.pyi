################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.jdk.internal.org.objectweb.asm.signature
import javawrappers.jdk.internal.org.objectweb.asm.commons
import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.jdk.internal.org.objectweb.asm.tree
import javawrappers.jdk.internal.org.objectweb.asm
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class Remapper:
	def __init__(self, ): ...
	def mapSignature(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def mapType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapModuleName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapFieldName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def mapTypes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def mapValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def mapMethodDesc(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapPackageName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapInvokeDynamicMethodName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapDesc(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def mapMethodName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def map(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class InstructionAdapter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ): ...
	def lookupswitch(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def ificmplt(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def fconst(self, arg0: Union[float, JFloat], ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def cast(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	@overload
	def invokevirtual(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def invokevirtual(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def ushr(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def multianewarray(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def monitorenter(self, ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def astore(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def dconst(self, arg0: Union[float, JDouble], ) -> None: ...
	def pop2(self, ) -> None: ...
	def putfield(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def ificmple(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def athrow(self, ) -> None: ...
	def dup2(self, ) -> None: ...
	def sub(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def jsr(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def getfield(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def ifacmpeq(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def invokespecial(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def invokespecial(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def iconst(self, arg0: Union[int, JInt], ) -> None: ...
	def aload(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def pop(self, ) -> None: ...
	def iflt(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def monitorexit(self, ) -> None: ...
	def ifacmpne(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def xor(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def areturn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def dup2X2(self, ) -> None: ...
	def dup2X1(self, ) -> None: ...
	def ifle(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def lcmp(self, ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def store(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ifnonnull(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def arraylength(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def lconst(self, arg0: Union[long, JLong], ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def ifge(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def newarray(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def invokestatic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def invokestatic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def aconst(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def checkcast(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def instanceOf(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def div(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def neg(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def rem(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ret(self, arg0: Union[int, JInt], ) -> None: ...
	def add(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def dupX1(self, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def dupX2(self, ) -> None: ...
	def swap(self, ) -> None: ...
	def ifne(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokedynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def ificmpgt(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def anew(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def goTo(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def shl(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ifeq(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def shr(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def getstatic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def mul(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def putstatic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def cmpl(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def nop(self, ) -> None: ...
	def cmpg(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ificmpge(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def load(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def and(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def ifnull(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def or_(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def hconst(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Handle, ) -> None: ...
	def iinc(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def ificmpeq(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def tableswitch(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def tconst(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ificmpne(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def ifgt(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokeinterface(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def mark(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def dup(self, ) -> None: ...


class RemappingSignatureAdapter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitInterfaceBound(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def visitTypeArgument(self, ) -> None: ...
	@overload
	def visitTypeArgument(self, arg0: Union[string, JString], ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitParameterType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitBaseType(self, arg0: Union[string, JString], ) -> None: ...
	def visitExceptionType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitTypeVariable(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitInterface(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def notify(self, ) -> None: ...
	def visitReturnType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitClassBound(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitArrayType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def visitSuperclass(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitFormalTypeParameter(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitInnerClassType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitClassType(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class RemappingAnnotationAdapter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...


class RemappingMethodAdapter:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, arg3: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def newLocal(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> Union[int, JInt]: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class Method:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Type, 1), ): ...
	def getDescriptor(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getArgumentTypes(self, ) -> JArray(javawrappers.jdk.internal.org.objectweb.asm.Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getReturnType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getMethod(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.jdk.internal.org.objectweb.asm.commons.Method: ...
	@overload
	@staticmethod
	def getMethod(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.commons.Method: ...
	@overload
	@staticmethod
	def getMethod(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.jdk.internal.org.objectweb.asm.commons.Method: ...
	@overload
	@staticmethod
	def getMethod(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.commons.Method: ...
	def notify(self, ) -> None: ...


class ClassRemapper:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class GeneratorAdapter:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Type, 1), arg4: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, arg2: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getStatic(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def loadArg(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def putStatic(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def invokeDynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def monitorExit(self, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokeInterface(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	def instanceOf(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def putField(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def cast(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def getLocalType(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	def arrayStore(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def loadArgs(self, ) -> None: ...
	@overload
	def loadArgs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def ifNonNull(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def ifCmp(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def ret(self, arg0: Union[int, JInt], ) -> None: ...
	def dupX1(self, ) -> None: ...
	def newLocal(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> Union[int, JInt]: ...
	def dupX2(self, ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	@overload
	def swap(self, ) -> None: ...
	@overload
	def swap(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def loadThis(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def catchException(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def getField(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def newInstance(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ifNull(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def push(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def push(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def push(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def push(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def push(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Handle, ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def goTo(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokeVirtual(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	def pop2(self, ) -> None: ...
	def ifICmp(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def unbox(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def newLabel(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Label: ...
	def math(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def dup2(self, ) -> None: ...
	def loadArgArray(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def returnValue(self, ) -> None: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def endMethod(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def box(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def invokeStatic(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def monitorEnter(self, ) -> None: ...
	def pop(self, ) -> None: ...
	def arrayLoad(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def not_(self, ) -> None: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def checkCast(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ifZCmp(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokeConstructor(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	@overload
	def loadLocal(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def loadLocal(self, arg0: Union[int, JInt], ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def dup2X2(self, ) -> None: ...
	def iinc(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def dup2X1(self, ) -> None: ...
	def valueOf(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def newArray(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def storeArg(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def throwException(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def throwException(self, ) -> None: ...
	@overload
	def storeLocal(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def storeLocal(self, arg0: Union[int, JInt], ) -> None: ...
	def arrayLength(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def mark(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Label: ...
	@overload
	def mark(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def tableSwitch(self, arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.TableSwitchGenerator, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def tableSwitch(self, arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.TableSwitchGenerator, ) -> None: ...
	def dup(self, ) -> None: ...


class LocalVariablesSorter:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def newLocal(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> Union[int, JInt]: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class ModuleTargetAttribute:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isUnknown(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


class CodeSizeEvaluator:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def getMinSize(self, ) -> Union[int, JInt]: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def getMaxSize(self, ) -> Union[int, JInt]: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class SimpleRemapper:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def mapSignature(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def mapType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapModuleName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapFieldName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def mapTypes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def mapValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def mapMethodDesc(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapPackageName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapDesc(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def mapInvokeDynamicMethodName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def mapMethodName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def map(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class TryCatchBlockSorter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class ModuleRemapper:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitProvide(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitUse(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitMainClass(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitRequire(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitExport(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitOpen(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitPackage(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class AnnotationRemapper:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...


class RemappingClassAdapter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class SignatureRemapper:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitInterfaceBound(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def visitTypeArgument(self, ) -> None: ...
	@overload
	def visitTypeArgument(self, arg0: Union[string, JString], ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitParameterType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitBaseType(self, arg0: Union[string, JString], ) -> None: ...
	def visitExceptionType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitTypeVariable(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitInterface(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def notify(self, ) -> None: ...
	def visitReturnType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def visitClassBound(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitArrayType(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def visitSuperclass(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.signature.SignatureVisitor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitFormalTypeParameter(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitInnerClassType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitClassType(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class ModuleHashesAttribute:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isUnknown(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


class TableSwitchGenerator:
	def generateDefault(self, ) -> None: ...
	def generateCase(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...


class AdviceAdapter:
	def getStatic(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def loadArg(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def putStatic(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def invokeDynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def monitorExit(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokeInterface(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	def instanceOf(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def putField(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def cast(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def getLocalType(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.Type: ...
	def arrayStore(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def loadArgs(self, ) -> None: ...
	@overload
	def loadArgs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def ifNonNull(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def ifCmp(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def ret(self, arg0: Union[int, JInt], ) -> None: ...
	def dupX1(self, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def newLocal(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> Union[int, JInt]: ...
	def dupX2(self, ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	@overload
	def swap(self, ) -> None: ...
	@overload
	def swap(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def loadThis(self, ) -> None: ...
	def catchException(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def getField(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def newInstance(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ifNull(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def push(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def push(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def push(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def push(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def push(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Handle, ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def goTo(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def invokeVirtual(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	def pop2(self, ) -> None: ...
	def ifICmp(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def unbox(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def newLabel(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Label: ...
	def math(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def dup2(self, ) -> None: ...
	def loadArgArray(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def returnValue(self, ) -> None: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def endMethod(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def box(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def invokeStatic(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def monitorEnter(self, ) -> None: ...
	def pop(self, ) -> None: ...
	def arrayLoad(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def not_(self, ) -> None: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def checkCast(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def ifZCmp(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def invokeConstructor(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Method, ) -> None: ...
	@overload
	def loadLocal(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def loadLocal(self, arg0: Union[int, JInt], ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def dup2X2(self, ) -> None: ...
	def iinc(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def dup2X1(self, ) -> None: ...
	def valueOf(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def newArray(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def storeArg(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def throwException(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Type, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def throwException(self, ) -> None: ...
	@overload
	def storeLocal(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Type, ) -> None: ...
	@overload
	def storeLocal(self, arg0: Union[int, JInt], ) -> None: ...
	def arrayLength(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def mark(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Label: ...
	@overload
	def mark(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def tableSwitch(self, arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.TableSwitchGenerator, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def tableSwitch(self, arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.TableSwitchGenerator, ) -> None: ...
	def dup(self, ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class ModuleResolutionAttribute:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isUnknown(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


class MethodRemapper:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class JSRInlinerAdapter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ): ...
	class Instantiation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def rangeLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def gotoLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def findOwner(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.commons.JSRInlinerAdapter.Instantiation: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def rangeLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def gotoLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def findOwner(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.commons.JSRInlinerAdapter.Instantiation: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class AnalyzerAdapter:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class StaticInitMerger:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class SerialVersionUIDAdder:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ): ...
	class Item:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.commons.SerialVersionUIDAdder.Item, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.commons.SerialVersionUIDAdder.Item, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def hasSVUID(self, ) -> Union[int, JBoolean]: ...


class FieldRemapper:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...


class RemappingFieldAdapter:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor, arg1: javawrappers.jdk.internal.org.objectweb.asm.commons.Remapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...


