################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.javax.crypto
import javawrappers.java.security
import javawrappers.java.util
import javawrappers.sun.reflect.annotation
import javawrappers.java.util.concurrent
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.jdk.internal.misc
import javawrappers.java.util.zip
import javawrappers.java.nio.charset
import javawrappers.java.lang.module
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.sun.nio.ch
import javawrappers.java.util.jar
import javawrappers.java.lang.invoke
import javawrappers.java.util.function
import javawrappers.jdk.internal.ref
import javawrappers.jdk.internal.module
import javawrappers.jdk.internal.reflect

from jpype.types import *
from typing import Union

from typing import overload

class JavaAWTFontAccess:
	def shape(self, arg0: javawrappers.java.lang.Object, arg1: JArray(Union[string, JString], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def getTextAttributeConstant(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


class Signal:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class NativeHandler:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def handle(self, arg0: javawrappers.jdk.internal.misc.Signal, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Handler:
		def handle(self, arg0: javawrappers.jdk.internal.misc.Signal, ) -> None: ...


	def getNumber(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def raise_(arg0: javawrappers.jdk.internal.misc.Signal, ) -> None: ...
	@overload
	def handle(self, arg0: javawrappers.jdk.internal.misc.Signal, ) -> None: ...
	@overload
	@staticmethod
	def handle(arg0: javawrappers.jdk.internal.misc.Signal, arg1: javawrappers.jdk.internal.misc.Signal.Handler, ) -> javawrappers.jdk.internal.misc.Signal.Handler: ...
	@overload
	def handle(self, arg0: javawrappers.jdk.internal.misc.Signal, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JavaAWTAccess:
	def getAppletContext(self, ) -> javawrappers.java.lang.Object: ...


class VM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getRuntimeArguments() -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getPeakFinalRefCount() -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def initLevel() -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def initLevel(arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def awaitInitLevel(arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getSavedProperties() -> javawrappers.java.util.Map: ...
	@staticmethod
	def isModuleSystemInited() -> Union[int, JBoolean]: ...
	@staticmethod
	def getFinalRefCount() -> Union[int, JInt]: ...
	@staticmethod
	def isDirectMemoryPageAligned() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def saveAndRemoveProperties(arg0: javawrappers.java.util.Properties, ) -> None: ...
	@staticmethod
	def toThreadState(arg0: Union[int, JInt], ) -> javawrappers.java.lang.Thread.State: ...
	@staticmethod
	def getSavedProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def initializeOSEnvironment() -> None: ...
	@staticmethod
	def latestUserDefinedLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def addFinalRefCount(arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def isSystemDomainLoader(arg0: javawrappers.java.lang.ClassLoader, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getegid() -> Union[long, JLong]: ...
	@staticmethod
	def getNanoTimeAdjustment(arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def isBooted() -> Union[int, JBoolean]: ...
	@staticmethod
	def getgid() -> Union[long, JLong]: ...
	@staticmethod
	def geteuid() -> Union[long, JLong]: ...
	@staticmethod
	def maxDirectMemory() -> Union[long, JLong]: ...
	@staticmethod
	def getuid() -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSetUID() -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def shutdown() -> None: ...
	@staticmethod
	def isShutdown() -> Union[int, JBoolean]: ...


class JavaNetUriAccess:
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URI: ...


class OSEnvironment:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def initialize() -> None: ...
	def notify(self, ) -> None: ...


class JavaLangInvokeAccess:
	def generateBasicFormsClassBytes(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def getDeclaringClass(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def generateInvokersHolderClassBytes(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.invoke.MethodType, 1), arg2: JArray(javawrappers.java.lang.invoke.MethodType, 1), ) -> JArray(JByte, 1): ...
	def getName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def generateDelegatingMethodHandleHolderClassBytes(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.invoke.MethodType, 1), ) -> JArray(JByte, 1): ...
	def getMethodDescriptor(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def newMemberName(self, ) -> javawrappers.java.lang.Object: ...
	def getMethodType(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.invoke.MethodType: ...
	def generateConcreteBMHClassBytes(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Map.Entry: ...
	def generateDirectMethodHandleHolderClassBytes(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.invoke.MethodType, 1), arg2: JArray(Union[int, JInt], 1), ) -> JArray(JByte, 1): ...
	def isNative(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class JavaIORandomAccessFileAccess:
	def openAndDelete(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.RandomAccessFile: ...


class JavaObjectInputFilterAccess:
	def createFilter2(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.ObjectInputFilter: ...


class JavaNetHttpCookieAccess:
	def header(self, arg0: javawrappers.java.net.HttpCookie, ) -> javawrappers.java.lang.String: ...
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...


class JavaNetURLAccess:
	def getHandler(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URLStreamHandler: ...


class JavaSecurityAccess:
	class ProtectionDomainCache:
		def get(self, arg0: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.security.PermissionCollection: ...
		def put(self, arg0: javawrappers.java.security.ProtectionDomain, arg1: javawrappers.java.security.PermissionCollection, ) -> None: ...


	@overload
	def doIntersectionPrivilege(self, arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, arg2: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
	@overload
	def doIntersectionPrivilege(self, arg0: javawrappers.java.security.PrivilegedAction, arg1: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.security.PermissionCollection: ...
	def getProtectionDomainCache(self, ) -> javawrappers.jdk.internal.misc.JavaSecurityAccess.ProtectionDomainCache: ...
	def put(self, arg0: javawrappers.java.security.ProtectionDomain, arg1: javawrappers.java.security.PermissionCollection, ) -> None: ...
	def getProtectDomains(self, arg0: javawrappers.java.security.AccessControlContext, ) -> JArray(javawrappers.java.security.ProtectionDomain, 1): ...


class VMNotification:
	def newAllocState(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...


class JavaNioAccess:
	class BufferPool:
		def getTotalCapacity(self, ) -> Union[long, JLong]: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def getMemoryUsed(self, ) -> Union[long, JLong]: ...
		def getCount(self, ) -> Union[long, JLong]: ...


	def getTotalCapacity(self, ) -> Union[long, JLong]: ...
	def getDirectBufferPool(self, ) -> javawrappers.jdk.internal.misc.JavaNioAccess.BufferPool: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def truncate(self, arg0: javawrappers.java.nio.Buffer, ) -> None: ...
	def newDirectByteBuffer(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.ByteBuffer: ...
	def getMemoryUsed(self, ) -> Union[long, JLong]: ...
	def getCount(self, ) -> Union[long, JLong]: ...


class JavaNetInetAddressAccess:
	def getOriginalHostName(self, arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.lang.String: ...
	def getByName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.InetAddress: ...


class JavaObjectInputStreamAccess:
	def checkArray(self, arg0: javawrappers.java.io.ObjectInputStream, arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], ) -> None: ...


class JavaIOAccess:
	def console(self, ) -> javawrappers.java.io.Console: ...
	def charset(self, ) -> javawrappers.java.nio.charset.Charset: ...


class TerminatingThreadLocal:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def threadTerminated() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def withInitial(arg0: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.lang.ThreadLocal: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...
	@staticmethod
	def register(arg0: javawrappers.jdk.internal.misc.TerminatingThreadLocal, ) -> None: ...


class JavaIOFilePermissionAccess:
	def newPermUsingAltPath(self, arg0: javawrappers.java.io.FilePermission, ) -> javawrappers.java.io.FilePermission: ...
	def newPermPlusAltPath(self, arg0: javawrappers.java.io.FilePermission, ) -> javawrappers.java.io.FilePermission: ...


class JavaLangModuleAccess:
	def newModuleBuilder(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def newExports(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Exports: ...
	@overload
	def newExports(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Exports: ...
	def newRequires(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> javawrappers.java.lang.module.ModuleDescriptor.Requires: ...
	def resolveAndBind(self, arg0: javawrappers.java.lang.module.ModuleFinder, arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.io.PrintStream, ) -> javawrappers.java.lang.module.Configuration: ...
	def packages(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Builder, ) -> javawrappers.java.util.Set: ...
	@overload
	def newOpens(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Opens: ...
	@overload
	def newOpens(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Opens: ...
	def newProvides(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.module.ModuleDescriptor.Provides: ...
	def newModuleDescriptor(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.module.ModuleDescriptor.Version, arg2: javawrappers.java.util.Set, arg3: javawrappers.java.util.Set, arg4: javawrappers.java.util.Set, arg5: javawrappers.java.util.Set, arg6: javawrappers.java.util.Set, arg7: javawrappers.java.util.Set, arg8: javawrappers.java.util.Set, arg9: javawrappers.java.lang.String, arg10: Union[int, JInt], ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	def requires(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Builder, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def newConfiguration(self, arg0: javawrappers.java.lang.module.ModuleFinder, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.module.Configuration: ...


class InnocuousThread:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def newThread(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	@overload
	@staticmethod
	def newThread(arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def run(self, ) -> None: ...
	def eraseThreadLocals(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def yield_() -> None: ...
	def interrupt(self, ) -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	@staticmethod
	def newSystemThread(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	@overload
	@staticmethod
	def newSystemThread(arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def dumpStack() -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def start(self, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


class SharedSecrets:
	def __init__(self, ): ...
	@staticmethod
	def getJavaNetHttpCookieAccess() -> javawrappers.jdk.internal.misc.JavaNetHttpCookieAccess: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def setJavaNetURLClassLoaderAccess(arg0: javawrappers.jdk.internal.misc.JavaNetURLClassLoaderAccess, ) -> None: ...
	@staticmethod
	def getJavaUtilResourceBundleAccess() -> javawrappers.jdk.internal.misc.JavaUtilResourceBundleAccess: ...
	@staticmethod
	def getJavaObjectInputStreamAccess() -> javawrappers.jdk.internal.misc.JavaObjectInputStreamAccess: ...
	@staticmethod
	def setJavaLangAccess(arg0: javawrappers.jdk.internal.misc.JavaLangAccess, ) -> None: ...
	@staticmethod
	def getJavaObjectInputFilterAccess() -> javawrappers.jdk.internal.misc.JavaObjectInputFilterAccess: ...
	@staticmethod
	def setJavaIOFileDescriptorAccess(arg0: javawrappers.jdk.internal.misc.JavaIOFileDescriptorAccess, ) -> None: ...
	@staticmethod
	def setJavaUtilZipFileAccess(arg0: javawrappers.jdk.internal.misc.JavaUtilZipFileAccess, ) -> None: ...
	@staticmethod
	def setJavaObjectInputFilterAccess(arg0: javawrappers.jdk.internal.misc.JavaObjectInputFilterAccess, ) -> None: ...
	@staticmethod
	def setJavaIOFilePermissionAccess(arg0: javawrappers.jdk.internal.misc.JavaIOFilePermissionAccess, ) -> None: ...
	@staticmethod
	def getJavaNioAccess() -> javawrappers.jdk.internal.misc.JavaNioAccess: ...
	@staticmethod
	def getJavaLangInvokeAccess() -> javawrappers.jdk.internal.misc.JavaLangInvokeAccess: ...
	@staticmethod
	def setJavaSecurityAccess(arg0: javawrappers.jdk.internal.misc.JavaSecurityAccess, ) -> None: ...
	@staticmethod
	def getJavaxCryptoSealedObjectAccess() -> javawrappers.jdk.internal.misc.JavaxCryptoSealedObjectAccess: ...
	@staticmethod
	def setJavaBeansAccess(arg0: javawrappers.jdk.internal.misc.JavaBeansAccess, ) -> None: ...
	@staticmethod
	def setJavaUtilJarAccess(arg0: javawrappers.jdk.internal.misc.JavaUtilJarAccess, ) -> None: ...
	@staticmethod
	def setJavaNetSocketAccess(arg0: javawrappers.jdk.internal.misc.JavaNetSocketAccess, ) -> None: ...
	@staticmethod
	def setJavaAWTAccess(arg0: javawrappers.jdk.internal.misc.JavaAWTAccess, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setJavaIOAccess(arg0: javawrappers.jdk.internal.misc.JavaIOAccess, ) -> None: ...
	@staticmethod
	def javaUtilJarAccess() -> javawrappers.jdk.internal.misc.JavaUtilJarAccess: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def setJavaNetHttpCookieAccess(arg0: javawrappers.jdk.internal.misc.JavaNetHttpCookieAccess, ) -> None: ...
	@staticmethod
	def setJavaNetUriAccess(arg0: javawrappers.jdk.internal.misc.JavaNetUriAccess, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def setJavaNioAccess(arg0: javawrappers.jdk.internal.misc.JavaNioAccess, ) -> None: ...
	@staticmethod
	def setJavaAWTFontAccess(arg0: javawrappers.jdk.internal.misc.JavaAWTFontAccess, ) -> None: ...
	@staticmethod
	def getJavaIOFileDescriptorAccess() -> javawrappers.jdk.internal.misc.JavaIOFileDescriptorAccess: ...
	@staticmethod
	def getJavaUtilZipFileAccess() -> javawrappers.jdk.internal.misc.JavaUtilZipFileAccess: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getJavaNetUriAccess() -> javawrappers.jdk.internal.misc.JavaNetUriAccess: ...
	@staticmethod
	def setJavaxCryptoSealedObjectAccess(arg0: javawrappers.jdk.internal.misc.JavaxCryptoSealedObjectAccess, ) -> None: ...
	@staticmethod
	def getJavaLangRefAccess() -> javawrappers.jdk.internal.misc.JavaLangRefAccess: ...
	@staticmethod
	def getJavaBeansAccess() -> javawrappers.jdk.internal.misc.JavaBeansAccess: ...
	@staticmethod
	def getJavaLangAccess() -> javawrappers.jdk.internal.misc.JavaLangAccess: ...
	@staticmethod
	def setJavaObjectInputStreamAccess(arg0: javawrappers.jdk.internal.misc.JavaObjectInputStreamAccess, ) -> None: ...
	@staticmethod
	def getJavaAWTAccess() -> javawrappers.jdk.internal.misc.JavaAWTAccess: ...
	@staticmethod
	def getJavaNetInetAddressAccess() -> javawrappers.jdk.internal.misc.JavaNetInetAddressAccess: ...
	@staticmethod
	def getJavaNetURLClassLoaderAccess() -> javawrappers.jdk.internal.misc.JavaNetURLClassLoaderAccess: ...
	@staticmethod
	def setJavaLangRefAccess(arg0: javawrappers.jdk.internal.misc.JavaLangRefAccess, ) -> None: ...
	@staticmethod
	def getJavaLangModuleAccess() -> javawrappers.jdk.internal.misc.JavaLangModuleAccess: ...
	@staticmethod
	def setJavaUtilResourceBundleAccess(arg0: javawrappers.jdk.internal.misc.JavaUtilResourceBundleAccess, ) -> None: ...
	@staticmethod
	def setJavaNetInetAddressAccess(arg0: javawrappers.jdk.internal.misc.JavaNetInetAddressAccess, ) -> None: ...
	@staticmethod
	def getJavaNetURLAccess() -> javawrappers.jdk.internal.misc.JavaNetURLAccess: ...
	@staticmethod
	def getJavaIOFilePermissionAccess() -> javawrappers.jdk.internal.misc.JavaIOFilePermissionAccess: ...
	@staticmethod
	def setJavaLangModuleAccess(arg0: javawrappers.jdk.internal.misc.JavaLangModuleAccess, ) -> None: ...
	@staticmethod
	def setJavaIORandomAccessFileAccess(arg0: javawrappers.jdk.internal.misc.JavaIORandomAccessFileAccess, ) -> None: ...
	@staticmethod
	def getJavaAWTFontAccess() -> javawrappers.jdk.internal.misc.JavaAWTFontAccess: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setJavaLangInvokeAccess(arg0: javawrappers.jdk.internal.misc.JavaLangInvokeAccess, ) -> None: ...
	@staticmethod
	def setJavaNetURLAccess(arg0: javawrappers.jdk.internal.misc.JavaNetURLAccess, ) -> None: ...
	@staticmethod
	def getJavaNetSocketAccess() -> javawrappers.jdk.internal.misc.JavaNetSocketAccess: ...
	@staticmethod
	def getJavaSecurityAccess() -> javawrappers.jdk.internal.misc.JavaSecurityAccess: ...
	@staticmethod
	def getJavaIOAccess() -> javawrappers.jdk.internal.misc.JavaIOAccess: ...
	@staticmethod
	def getJavaIORandomAccessFileAccess() -> javawrappers.jdk.internal.misc.JavaIORandomAccessFileAccess: ...


class Unsafe:
	def putCharVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> None: ...
	def getAndBitwiseAndCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def compareAndExchangeFloatRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def getByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> JByte: ...
	@overload
	def getByte(self, arg0: Union[long, JLong], ) -> JByte: ...
	def getAndSetChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def pageSize(self, ) -> Union[int, JInt]: ...
	def weakCompareAndSetChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def setMemory(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: JByte, ) -> None: ...
	@overload
	def setMemory(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: JByte, ) -> None: ...
	def compareAndExchangeByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> JByte: ...
	def getAndBitwiseAndIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getShortVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JShort]: ...
	def weakCompareAndSetFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseAndByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def compareAndSetChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getObject(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def compareAndExchangeLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndBitwiseXorShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndAddLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndSetFloatAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def getAndBitwiseAndShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def putIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	def getAndBitwiseXorShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndSetCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def allocateInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def compareAndExchangeDoubleAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getAndSetShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getUncompressedObject(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def getAndBitwiseOrIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndBitwiseOrCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def weakCompareAndSetCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def putCharUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> None: ...
	@overload
	def putCharUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def copyMemory(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def copyMemory(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	def fullFence(self, ) -> None: ...
	def putByteVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> None: ...
	def getAndBitwiseXorLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def compareAndExchangeFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def getAndAddDoubleAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getAndBitwiseOrByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getAndBitwiseOrShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndBitwiseOrByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getAndAddFloatRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def putByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> None: ...
	@overload
	def putByte(self, arg0: Union[long, JLong], arg1: JByte, ) -> None: ...
	def weakCompareAndSetDoublePlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getAndSetObject(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndAddShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def allocateMemory(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def objectFieldOffset(self, arg0: javawrappers.java.lang.reflect.Field, ) -> Union[long, JLong]: ...
	@overload
	def objectFieldOffset(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def getAndSetByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def storeFence(self, ) -> None: ...
	def getAndBitwiseAndBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndSetDoubleAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def putBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> None: ...
	def defineClass(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.ClassLoader, arg5: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.lang.Class: ...
	def getAndSetLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def compareAndExchangeShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndBitwiseOrBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndAddFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def putFloatRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> None: ...
	def weakCompareAndSetDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseAndChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def weakCompareAndSetInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseXorIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def compareAndExchangeShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...
	def weakCompareAndSetObjectAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAndSetBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndAddByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def arrayIndexScale(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def getAndBitwiseXorIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLoadAverage(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def weakCompareAndSetBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndAddCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def getAndBitwiseXorByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getFloatAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JFloat]: ...
	def getAndSetByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def compareAndExchangeObject(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndBitwiseAndLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def putLongUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def putLongUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getAndBitwiseXorBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def putObjectRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	def weakCompareAndSetFloatRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def getDoubleVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JDouble]: ...
	def getAndBitwiseOrCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def compareAndSetByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	def putBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> None: ...
	def getAndSetBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def defineAnonymousClass(self, arg0: javawrappers.java.lang.Class, arg1: JArray(JByte, 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Class: ...
	def weakCompareAndSetShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def putIntVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	def getObjectVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def getCharVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[string, JString]: ...
	def compareAndExchangeBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndSetIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndBitwiseXorShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndSetShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndBitwiseAndInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def weakCompareAndSetObjectPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[string, JString]: ...
	@overload
	def getChar(self, arg0: Union[long, JLong], ) -> Union[string, JString]: ...
	def shouldBeInitialized(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getAndSetBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseXorBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def compareAndExchangeLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndSetObjectRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetShortPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def getLongOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndBitwiseAndIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def putIntUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def putIntUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	def getAndBitwiseAndLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def putCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def getDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JDouble]: ...
	@overload
	def getDouble(self, arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...
	def weakCompareAndSetBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def getFloat(self, arg0: Union[long, JLong], ) -> Union[float, JFloat]: ...
	@overload
	def getFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JFloat]: ...
	@overload
	def putLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def putLong(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	def getObjectAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def unalignedAccess(self, ) -> Union[int, JBoolean]: ...
	def getAndSetByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def putDoubleOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def putShortUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def putShortUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAndBitwiseOrLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def weakCompareAndSetObject(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isBigEndian(self, ) -> Union[int, JBoolean]: ...
	def getAndAddIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def reallocateMemory(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getAddress(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getAddress(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def putShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> None: ...
	@overload
	def putShort(self, arg0: Union[long, JLong], arg1: Union[int, JShort], ) -> None: ...
	def weakCompareAndSetObjectRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compareAndExchangeInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def putObjectOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	def getAndBitwiseAndByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def compareAndSetDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def putFloatVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> None: ...
	def getAndBitwiseXorLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndAddFloatAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def getAndSetLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def ensureClassInitialized(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def getAndBitwiseOrShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndAddLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def putLongVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getAndBitwiseAndShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getIntVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def copySwapMemory(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: Union[long, JLong], arg4: Union[long, JLong], arg5: Union[long, JLong], ) -> None: ...
	@overload
	def copySwapMemory(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	def weakCompareAndSetFloatPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def compareAndExchangeObjectAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetLongPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseOrInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndBitwiseXorInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def compareAndSetLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def putLongOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def storeStoreFence(self, ) -> None: ...
	def putShortVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> None: ...
	def getAndAddDoubleRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def putBooleanVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> None: ...
	def weakCompareAndSetCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getFloatOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JFloat]: ...
	def compareAndExchangeObjectRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAndSetShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def getShortUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JShort]: ...
	@overload
	def getShortUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JShort]: ...
	def getAndSetFloatRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def getAndSetCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def freeMemory(self, arg0: Union[long, JLong], ) -> None: ...
	def compareAndSetObject(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAndBitwiseXorCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def compareAndExchangeShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getAndBitwiseAndBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def loadLoadFence(self, ) -> None: ...
	def staticFieldBase(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.Object: ...
	def getAndAddInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndBitwiseOrByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getAndSetIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndSetLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def putFloat(self, arg0: Union[long, JLong], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def putFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def getInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def getInt(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def compareAndExchangeLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	def compareAndExchangeDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def weakCompareAndSetBooleanPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def compareAndSetFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseAndCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def putLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAndBitwiseXorByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getAndAddLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndAddByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getAndSetFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def putDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def putDouble(self, arg0: Union[long, JLong], arg1: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def getCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[string, JString]: ...
	def compareAndExchangeDoubleRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def compareAndExchangeFloatAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def getShortOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JShort]: ...
	def putShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> None: ...
	def putDoubleVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> None: ...
	def getAndBitwiseXorLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndSetInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def weakCompareAndSetIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseAndShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def putFloatOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], ) -> None: ...
	def putBooleanOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> None: ...
	def putObjectVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getLong(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndBitwiseAndByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def staticFieldOffset(self, arg0: javawrappers.java.lang.reflect.Field, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> None: ...
	def getAndBitwiseOrShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getAndAddIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndAddShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def weakCompareAndSetLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def compareAndExchangeByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> JByte: ...
	def compareAndExchangeIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getCharOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[string, JString]: ...
	def getIntOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAndBitwiseOrBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def compareAndSetBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetBytePlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	def getByteOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> JByte: ...
	def getAndSetObjectAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compareAndSetShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def loadFence(self, ) -> None: ...
	def getAndBitwiseOrLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def weakCompareAndSetCharPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseAndBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	def compareAndSetInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAndAddChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def compareAndExchangeBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getUnsafe() -> javawrappers.jdk.internal.misc.Unsafe: ...
	def getByteVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> JByte: ...
	def weakCompareAndSetDoubleRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def getLongUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[long, JLong]: ...
	@overload
	def getLongUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def putAddress(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	@overload
	def putAddress(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def putInt(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def putInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	def compareAndExchangeCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def getIntUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def getIntUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def getBooleanOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def defineClass0(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.ClassLoader, arg5: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.lang.Class: ...
	def compareAndExchangeCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	def putCharOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> None: ...
	def weakCompareAndSetShortRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseAndLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def getCharUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[string, JString]: ...
	@overload
	def getCharUnaligned(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[string, JString]: ...
	def weakCompareAndSetDoubleAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getFloatVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JFloat]: ...
	def getAndBitwiseXorChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def allocateUninitializedArray(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def weakCompareAndSetFloatAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def putObject(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	def compareAndExchangeByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> JByte: ...
	def getBooleanVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> JByte: ...
	def getAndBitwiseOrIntAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndBitwiseXorBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	def getAndBitwiseXorByte(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def compareAndExchangeIntRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getAndBitwiseOrLongAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def putByteOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> None: ...
	def compareAndExchangeBooleanRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def compareAndExchangeChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	def getObjectOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def getAndAddShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def getDoubleAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JDouble]: ...
	def getAndAddCharAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def getLongVolatile(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def putDoubleRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> None: ...
	def weakCompareAndSetLongRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def park(self, arg0: Union[int, JBoolean], arg1: Union[long, JLong], ) -> None: ...
	def getAndSetDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def arrayBaseOffset(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def putIntOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def getShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JShort]: ...
	@overload
	def getShort(self, arg0: Union[long, JLong], ) -> Union[int, JShort]: ...
	def getShortAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JShort]: ...
	@overload
	def putChar(self, arg0: Union[long, JLong], arg1: Union[string, JString], ) -> None: ...
	@overload
	def putChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> None: ...
	def getAndAddByteRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, ) -> JByte: ...
	def getAndAddDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def unpark(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def throwException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addressSize(self, ) -> Union[int, JInt]: ...
	def getAndBitwiseOrBooleanAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getAndBitwiseXorCharRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def getDoubleOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[float, JDouble]: ...
	def weakCompareAndSetIntPlain(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def weakCompareAndSetByteAcquire(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	def getAndBitwiseOrChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def weakCompareAndSetShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def putShortOpaque(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[int, JShort], ) -> None: ...
	def getAndSetDoubleRelease(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class JavaIOFileDescriptorAccess:
	def set(self, arg0: javawrappers.java.io.FileDescriptor, arg1: Union[int, JInt], ) -> None: ...
	def setHandle(self, arg0: javawrappers.java.io.FileDescriptor, arg1: Union[long, JLong], ) -> None: ...
	def unregisterCleanup(self, arg0: javawrappers.java.io.FileDescriptor, ) -> None: ...
	def getHandle(self, arg0: javawrappers.java.io.FileDescriptor, ) -> Union[long, JLong]: ...
	def get(self, arg0: javawrappers.java.io.FileDescriptor, ) -> Union[int, JInt]: ...
	def getAppend(self, arg0: javawrappers.java.io.FileDescriptor, ) -> Union[int, JBoolean]: ...
	@overload
	def registerCleanup(self, arg0: javawrappers.java.io.FileDescriptor, ) -> None: ...
	@overload
	def registerCleanup(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.jdk.internal.ref.PhantomCleanable, ) -> None: ...
	def setAppend(self, arg0: javawrappers.java.io.FileDescriptor, arg1: Union[int, JBoolean], ) -> None: ...
	def close(self, arg0: javawrappers.java.io.FileDescriptor, ) -> None: ...


class JavaLangRefAccess:
	def waitForReferenceProcessing(self, ) -> Union[int, JBoolean]: ...
	def runFinalization(self, ) -> None: ...


class JavaLangAccess:
	def newThreadWithAcc(self, arg0: javawrappers.java.lang.Runnable, arg1: javawrappers.java.security.AccessControlContext, ) -> javawrappers.java.lang.Thread: ...
	def getServicesCatalog(self, arg0: javawrappers.java.lang.ModuleLayer, ) -> javawrappers.jdk.internal.module.ServicesCatalog: ...
	def getAnnotationType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.sun.reflect.annotation.AnnotationType: ...
	def addUses(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def getConstantPool(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.jdk.internal.reflect.ConstantPool: ...
	def getDeclaredAnnotationMap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Map: ...
	def findBootstrapClassOrNull(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getRawClassTypeAnnotations(self, arg0: javawrappers.java.lang.Class, ) -> JArray(JByte, 1): ...
	def getRawClassAnnotations(self, arg0: javawrappers.java.lang.Class, ) -> JArray(JByte, 1): ...
	@overload
	def addOpensToAllUnnamed(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addOpensToAllUnnamed(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.util.Iterator, ) -> None: ...
	def getDeclaredPublicMethods(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.util.List: ...
	def registerShutdownHook(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: javawrappers.java.lang.Runnable, ) -> None: ...
	def isReflectivelyExported(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> Union[int, JBoolean]: ...
	def casAnnotationType(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.sun.reflect.annotation.AnnotationType, arg2: javawrappers.sun.reflect.annotation.AnnotationType, ) -> Union[int, JBoolean]: ...
	def addExportsToAllUnnamed(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> None: ...
	def createOrGetClassLoaderValueMap(self, arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap: ...
	def definePackage(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.lang.Package: ...
	@overload
	def layers(self, arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def layers(self, arg0: javawrappers.java.lang.ModuleLayer, ) -> javawrappers.java.util.stream.Stream: ...
	def getBytesNoRepl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ) -> JArray(JByte, 1): ...
	def blockedOn(self, arg0: javawrappers.sun.nio.ch.Interruptible, ) -> None: ...
	def addReads(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Module, ) -> None: ...
	def defineClass(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.String, arg2: JArray(JByte, 1), arg3: javawrappers.java.security.ProtectionDomain, arg4: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def addExports(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> None: ...
	def addReadsAllUnnamed(self, arg0: javawrappers.java.lang.Module, ) -> None: ...
	def getRawExecutableTypeAnnotations(self, arg0: javawrappers.java.lang.reflect.Executable, ) -> JArray(JByte, 1): ...
	def fastUUID(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	def newStringNoRepl(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	def invalidatePackageAccessCache(self, ) -> None: ...
	def invokeFinalize(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def addNonExportedPackages(self, arg0: javawrappers.java.lang.ModuleLayer, ) -> None: ...
	def addOpens(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> None: ...
	def getEnumConstantsShared(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.Enum, 1): ...
	def defineModule(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.module.ModuleDescriptor, arg2: javawrappers.java.net.URI, ) -> javawrappers.java.lang.Module: ...
	def newStringUTF8NoRepl(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def defineUnnamedModule(self, arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.Module: ...
	def isReflectivelyOpened(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> Union[int, JBoolean]: ...
	def getBytesUTF8NoRepl(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...


class JavaNetURLClassLoaderAccess:
	def getAccessControlContext(self, arg0: javawrappers.java.net.URLClassLoader, ) -> javawrappers.java.security.AccessControlContext: ...


class JavaBeansAccess:
	def getConstructorPropertiesValue(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getReadMethod(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...


class JavaUtilZipFileAccess:
	def entries(self, arg0: javawrappers.java.util.zip.ZipFile, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Enumeration: ...
	def entryNameStream(self, arg0: javawrappers.java.util.zip.ZipFile, ) -> javawrappers.java.util.stream.Stream: ...
	def startsWithLocHeader(self, arg0: javawrappers.java.util.zip.ZipFile, ) -> Union[int, JBoolean]: ...
	def stream(self, arg0: javawrappers.java.util.zip.ZipFile, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Stream: ...
	def getEntry(self, arg0: javawrappers.java.util.zip.ZipFile, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.jar.JarEntry: ...
	def getMetaInfEntryNames(self, arg0: javawrappers.java.util.zip.ZipFile, ) -> JArray(javawrappers.java.lang.String, 1): ...


class JavaNetSocketAccess:
	def newServerSocket(self, arg0: javawrappers.java.net.SocketImpl, ) -> javawrappers.java.net.ServerSocket: ...
	def newSocketImpl(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.net.SocketImpl: ...


class JavaUtilJarAccess:
	def getCodeSources(self, arg0: javawrappers.java.util.jar.JarFile, arg1: javawrappers.java.net.URL, ) -> JArray(javawrappers.java.security.CodeSource, 1): ...
	def jarFileHasClassPathAttribute(self, arg0: javawrappers.java.util.jar.JarFile, ) -> Union[int, JBoolean]: ...
	def getManifestDigests(self, arg0: javawrappers.java.util.jar.JarFile, ) -> javawrappers.java.util.List: ...
	def entryNames(self, arg0: javawrappers.java.util.jar.JarFile, arg1: JArray(javawrappers.java.security.CodeSource, 1), ) -> javawrappers.java.util.Enumeration: ...
	def entries2(self, arg0: javawrappers.java.util.jar.JarFile, ) -> javawrappers.java.util.Enumeration: ...
	def getTrustedAttributes(self, arg0: javawrappers.java.util.jar.Manifest, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.jar.Attributes: ...
	def getCodeSource(self, arg0: javawrappers.java.util.jar.JarFile, arg1: javawrappers.java.net.URL, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.security.CodeSource: ...
	def ensureInitialization(self, arg0: javawrappers.java.util.jar.JarFile, ) -> None: ...
	def setEagerValidation(self, arg0: javawrappers.java.util.jar.JarFile, arg1: Union[int, JBoolean], ) -> None: ...


class JavaxCryptoSealedObjectAccess:
	def getExtObjectInputStream(self, arg0: javawrappers.javax.crypto.SealedObject, arg1: javawrappers.javax.crypto.Cipher, ) -> javawrappers.java.io.ObjectInputStream: ...


class JavaUtilResourceBundleAccess:
	def setName(self, arg0: javawrappers.java.util.ResourceBundle, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getParent(self, arg0: javawrappers.java.util.ResourceBundle, ) -> javawrappers.java.util.ResourceBundle: ...
	def newResourceBundle(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.ResourceBundle: ...
	def setParent(self, arg0: javawrappers.java.util.ResourceBundle, arg1: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	def setLocale(self, arg0: javawrappers.java.util.ResourceBundle, arg1: javawrappers.java.util.Locale, ) -> None: ...


