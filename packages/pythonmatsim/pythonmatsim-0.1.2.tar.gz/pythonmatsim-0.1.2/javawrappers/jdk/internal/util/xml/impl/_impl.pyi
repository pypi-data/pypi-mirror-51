################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.jdk.internal.org.xml.sax
import javawrappers.jdk.internal.util.xml.impl
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.jdk.internal.org.xml.sax.helpers
import javawrappers.java.nio

from jpype.types import *
from typing import Union

from typing import overload

class ReaderUTF16:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[string, JString], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class XMLStreamWriterImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	class Element:
		@overload
		def __init__(self, arg0: javawrappers.jdk.internal.util.xml.impl.XMLStreamWriterImpl, ): ...
		@overload
		def __init__(self, arg0: javawrappers.jdk.internal.util.xml.impl.XMLStreamWriterImpl, arg1: javawrappers.jdk.internal.util.xml.impl.XMLStreamWriterImpl.Element, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getParent(self, ) -> javawrappers.jdk.internal.util.xml.impl.XMLStreamWriterImpl.Element: ...
		def getState(self, ) -> Union[int, JInt]: ...
		def getLocalName(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def setState(self, arg0: Union[int, JInt], ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getParent(self, ) -> javawrappers.jdk.internal.util.xml.impl.XMLStreamWriterImpl.Element: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def writeEndDocument(self, ) -> None: ...
	def writeDTD(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def writeEmptyElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def writeCharacters(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeCharacters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getState(self, ) -> Union[int, JInt]: ...
	def setDoIndent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLocalName(self, ) -> javawrappers.java.lang.String: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setState(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeCData(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStartDocument(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStartDocument(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStartDocument(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStartDocument(self, ) -> None: ...
	def writeStartElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	def writeEndElement(self, ) -> None: ...
	def writeAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class XMLWriter:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def canEncode(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class SAXParserImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isNamespaceAware(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.File, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.jdk.internal.org.xml.sax.InputSource, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	def getXMLReader(self, ) -> javawrappers.jdk.internal.org.xml.sax.XMLReader: ...
	def notify(self, ) -> None: ...
	def isXIncludeAware(self, ) -> Union[int, JBoolean]: ...
	def isValidating(self, ) -> Union[int, JBoolean]: ...


class Pair:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def eqname(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def qname(self, ) -> javawrappers.java.lang.String: ...
	def pref(self, ) -> javawrappers.java.lang.String: ...
	def eqpref(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def local(self, ) -> javawrappers.java.lang.String: ...


class Attrs:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def setLength(self, arg0: Union[string, JString], ) -> None: ...
	def getLocalName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def isDeclared(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isDeclared(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isDeclared(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getQName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def isSpecified(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isSpecified(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isSpecified(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getURI(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class Parser:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Input:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[string, JString], 1), ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ReaderUTF8:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


