################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.jdk.internal.math
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class DoubleConsts:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FloatConsts:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FDBigInteger:
	def __init__(self, arg0: Union[long, JLong], arg1: JArray(Union[string, JString], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def multBy10(self, ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toHexString(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def cmp(self, arg0: javawrappers.jdk.internal.math.FDBigInteger, ) -> Union[int, JInt]: ...
	def multByPow52(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	def toBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def addAndCmp(self, arg0: javawrappers.jdk.internal.math.FDBigInteger, arg1: javawrappers.jdk.internal.math.FDBigInteger, ) -> Union[int, JInt]: ...
	def quoRemIteration(self, arg0: javawrappers.jdk.internal.math.FDBigInteger, ) -> Union[int, JInt]: ...
	def rightInplaceSub(self, arg0: javawrappers.jdk.internal.math.FDBigInteger, ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	def notify(self, ) -> None: ...
	def leftInplaceSub(self, arg0: javawrappers.jdk.internal.math.FDBigInteger, ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	@staticmethod
	def valueOfPow52(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getNormalizationBias(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def cmpPow52(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def leftShift(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	@staticmethod
	def valueOfMulPow52(arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.jdk.internal.math.FDBigInteger: ...
	def makeImmutable(self, ) -> None: ...


class FloatingDecimal:
	def __init__(self, ): ...
	class HexFloatPattern:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ASCIIToBinaryBuffer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def floatValue(self, ) -> Union[float, JFloat]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def doubleValue(self, ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	class PreparedASCIIToBinaryBuffer:
		def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JFloat], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def floatValue(self, ) -> Union[float, JFloat]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def doubleValue(self, ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	class ASCIIToBinaryConverter:
		def floatValue(self, ) -> Union[float, JFloat]: ...
		def doubleValue(self, ) -> Union[float, JDouble]: ...


	class BinaryToASCIIBuffer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isExceptional(self, ) -> Union[int, JBoolean]: ...
		def isNegative(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toJavaFormatString(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def decimalDigitsExact(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def digitsRoundedUp(self, ) -> Union[int, JBoolean]: ...
		def getDigits(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
		def getDecimalExponent(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def appendTo(self, arg0: javawrappers.java.lang.Appendable, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class ExceptionalBinaryToASCIIBuffer:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isExceptional(self, ) -> Union[int, JBoolean]: ...
		def isNegative(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toJavaFormatString(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def decimalDigitsExact(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def digitsRoundedUp(self, ) -> Union[int, JBoolean]: ...
		def getDigits(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
		def getDecimalExponent(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def appendTo(self, arg0: javawrappers.java.lang.Appendable, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class BinaryToASCIIConverter:
		def isExceptional(self, ) -> Union[int, JBoolean]: ...
		def isNegative(self, ) -> Union[int, JBoolean]: ...
		def getDecimalExponent(self, ) -> Union[int, JInt]: ...
		def toJavaFormatString(self, ) -> javawrappers.java.lang.String: ...
		def appendTo(self, arg0: javawrappers.java.lang.Appendable, ) -> None: ...
		def decimalDigitsExact(self, ) -> Union[int, JBoolean]: ...
		def digitsRoundedUp(self, ) -> Union[int, JBoolean]: ...
		def getDigits(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...


	@staticmethod
	def getBinaryToASCIIConverter(arg0: Union[float, JDouble], ) -> javawrappers.jdk.internal.math.FloatingDecimal.BinaryToASCIIConverter: ...
	@overload
	def isExceptional(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isExceptional(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isExceptional(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def parseFloat(arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def toJavaFormatString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toJavaFormatString(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toJavaFormatString(arg0: Union[float, JFloat], ) -> javawrappers.java.lang.String: ...
	@overload
	def toJavaFormatString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toJavaFormatString(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def floatValue(self, ) -> Union[float, JFloat]: ...
	@overload
	def floatValue(self, ) -> Union[float, JFloat]: ...
	@overload
	def floatValue(self, ) -> Union[float, JFloat]: ...
	@overload
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def decimalDigitsExact(self, ) -> Union[int, JBoolean]: ...
	@overload
	def decimalDigitsExact(self, ) -> Union[int, JBoolean]: ...
	@overload
	def decimalDigitsExact(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def digitsRoundedUp(self, ) -> Union[int, JBoolean]: ...
	@overload
	def digitsRoundedUp(self, ) -> Union[int, JBoolean]: ...
	@overload
	def digitsRoundedUp(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getDigits(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def getDigits(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def getDigits(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def parseDouble(arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	@overload
	def getDecimalExponent(self, ) -> Union[int, JInt]: ...
	@overload
	def getDecimalExponent(self, ) -> Union[int, JInt]: ...
	@overload
	def getDecimalExponent(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def appendTo(self, arg0: javawrappers.java.lang.Appendable, ) -> None: ...
	@overload
	def appendTo(self, arg0: javawrappers.java.lang.Appendable, ) -> None: ...
	@overload
	def appendTo(self, arg0: javawrappers.java.lang.Appendable, ) -> None: ...
	@overload
	@staticmethod
	def appendTo(arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Appendable, ) -> None: ...
	@overload
	@staticmethod
	def appendTo(arg0: Union[float, JFloat], arg1: javawrappers.java.lang.Appendable, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FormattedFloatingDecimal:
	class Form:
		SCIENTIFIC: FormattedFloatingDecimal.Form = ...
		COMPATIBLE: FormattedFloatingDecimal.Form = ...
		DECIMAL_FLOAT: FormattedFloatingDecimal.Form = ...
		GENERAL: FormattedFloatingDecimal.Form = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.math.FormattedFloatingDecimal.Form: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.jdk.internal.math.FormattedFloatingDecimal.Form, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.math.FormattedFloatingDecimal.Form: ...
	@overload
	@staticmethod
	def valueOf(arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.math.FormattedFloatingDecimal.Form, ) -> javawrappers.jdk.internal.math.FormattedFloatingDecimal: ...
	@staticmethod
	def values() -> JArray(javawrappers.jdk.internal.math.FormattedFloatingDecimal.Form, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getExponent(self, ) -> JArray(Union[string, JString], 1): ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExponentRounded(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMantissa(self, ) -> JArray(Union[string, JString], 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


