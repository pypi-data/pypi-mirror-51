################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.lang.ref
import javawrappers.java.util.concurrent
import javawrappers.jdk.internal.ref
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class Cleaner:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def clean(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Runnable, ) -> javawrappers.jdk.internal.ref.Cleaner: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


class CleanerImpl:
	def __init__(self, ): ...
	class CleanerCleanable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def clean(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class InnocuousThreadFactory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SoftCleanableRef:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def clean(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class WeakCleanableRef:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def clean(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class PhantomCleanableRef:
		def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.Cleaner, arg2: javawrappers.java.lang.Runnable, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def clean(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def setCleanerImplAccess(arg0: javawrappers.java.util.function.Function, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def start(self, arg0: javawrappers.java.lang.ref.Cleaner, arg1: javawrappers.java.util.concurrent.ThreadFactory, ) -> None: ...
	@overload
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def run(self, ) -> None: ...
	@overload
	def clean(self, ) -> None: ...
	@overload
	def clean(self, ) -> None: ...
	@overload
	def clean(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


class PhantomCleanable:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.Cleaner, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def clean(self, ) -> None: ...
	def notify(self, ) -> None: ...


class WeakCleanable:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.Cleaner, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def clean(self, ) -> None: ...
	def notify(self, ) -> None: ...


class SoftCleanable:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.ref.Cleaner, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def clean(self, ) -> None: ...
	def notify(self, ) -> None: ...


class CleanerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def cleaner() -> javawrappers.java.lang.ref.Cleaner: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


