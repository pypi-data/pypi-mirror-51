################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.jdk.internal.loader
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.java.lang.invoke
import javawrappers.java.nio
import javawrappers.java.util.function
import javawrappers.jdk.internal.module
import javawrappers.java.nio.file
import javawrappers.java.lang.module

from jpype.types import *
from typing import Union

from typing import overload

class DefaultRoots:
	@staticmethod
	def compute(arg0: javawrappers.java.lang.module.ModuleFinder, ) -> javawrappers.java.util.Set: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ModuleBootstrap:
	class Counters:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SafeModuleFinder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def findAll(self, ) -> javawrappers.java.util.Set: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def patcher() -> javawrappers.jdk.internal.module.ModulePatcher: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def unlimitedFinder() -> javawrappers.java.lang.module.ModuleFinder: ...
	def findAll(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def limitedFinder() -> javawrappers.java.lang.module.ModuleFinder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def boot() -> javawrappers.java.lang.ModuleLayer: ...


class ModuleReferenceImpl:
	def __init__(self, arg0: javawrappers.java.lang.module.ModuleDescriptor, arg1: javawrappers.java.net.URI, arg2: javawrappers.java.util.function.Supplier, arg3: javawrappers.jdk.internal.module.ModulePatcher, arg4: javawrappers.jdk.internal.module.ModuleTarget, arg5: javawrappers.jdk.internal.module.ModuleHashes, arg6: javawrappers.jdk.internal.module.ModuleHashes.HashSupplier, arg7: javawrappers.jdk.internal.module.ModuleResolution, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def moduleTarget(self, ) -> javawrappers.jdk.internal.module.ModuleTarget: ...
	def notifyAll(self, ) -> None: ...
	def computeHash(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def descriptor(self, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def location(self, ) -> javawrappers.java.util.Optional: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def moduleResolution(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
	def recordedHashes(self, ) -> javawrappers.jdk.internal.module.ModuleHashes: ...
	def open(self, ) -> javawrappers.java.lang.module.ModuleReader: ...
	def isPatched(self, ) -> Union[int, JBoolean]: ...


class ModuleHashesBuilder:
	def __init__(self, arg0: javawrappers.java.lang.module.Configuration, arg1: javawrappers.java.util.Set, ): ...
	class TopoSorter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def ordered(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reverse(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...


	class Graph:
		def __init__(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.util.Map, ): ...
		class Builder:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def addNode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
			def build(self, ) -> javawrappers.jdk.internal.module.ModuleHashesBuilder.Graph: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def addEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def ordered(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addNode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def edges(self, ) -> javawrappers.java.util.Map: ...
		def orderedNodes(self, ) -> javawrappers.java.util.stream.Stream: ...
		def reverse(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def dfs(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		@overload
		def dfs(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Set: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def printGraph(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		def nodes(self, ) -> javawrappers.java.util.Set: ...
		def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def build(self, ) -> javawrappers.jdk.internal.module.ModuleHashesBuilder.Graph: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def transpose(self, ) -> javawrappers.jdk.internal.module.ModuleHashesBuilder.Graph: ...
		def addEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...


	@overload
	def ordered(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def ordered(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def edges(self, ) -> javawrappers.java.util.Map: ...
	def orderedNodes(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def reverse(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def reverse(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def dfs(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def dfs(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Set: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def printGraph(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def computeHashes(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Map: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def build(self, ) -> javawrappers.jdk.internal.module.ModuleHashesBuilder.Graph: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def transpose(self, ) -> javawrappers.jdk.internal.module.ModuleHashesBuilder.Graph: ...
	def addEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...


class IllegalAccessLogger:
	class Usages:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	class Usage:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class StackWalkerHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Builder:
		def __init__(self, arg0: javawrappers.jdk.internal.module.IllegalAccessLogger.Mode, arg1: javawrappers.java.io.PrintStream, ): ...
		def logAccessToExportedPackages(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.util.Set, ) -> javawrappers.jdk.internal.module.IllegalAccessLogger.Builder: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def complete(self, ) -> None: ...
		def logAccessToConcealedPackages(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.util.Set, ) -> javawrappers.jdk.internal.module.IllegalAccessLogger.Builder: ...
		def notify(self, ) -> None: ...


	class Mode:
		ONESHOT: IllegalAccessLogger.Mode = ...
		WARN: IllegalAccessLogger.Mode = ...
		DEBUG: IllegalAccessLogger.Mode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.module.IllegalAccessLogger.Mode: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.jdk.internal.module.IllegalAccessLogger.Mode, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.jdk.internal.module.IllegalAccessLogger.Mode, 1): ...
	@overload
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isOpenForIllegalAccess(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def logIfOpenedForIllegalAccess(self, arg0: javawrappers.java.lang.invoke.MethodHandles.Lookup, arg1: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def logIfOpenedForIllegalAccess(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	@staticmethod
	def illegalAccessLogger() -> javawrappers.jdk.internal.module.IllegalAccessLogger: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.module.IllegalAccessLogger.Mode: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def logIfExportedForIllegalAccess(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	def logAccessToConcealedPackages(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.util.Set, ) -> javawrappers.jdk.internal.module.IllegalAccessLogger.Builder: ...
	def logAccessToExportedPackages(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.util.Set, ) -> javawrappers.jdk.internal.module.IllegalAccessLogger.Builder: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isExportedForIllegalAccess(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def complete(self, ) -> None: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Modules:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def addProvides(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> None: ...
	@staticmethod
	def addReads(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Module, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def addUses(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Class, ) -> None: ...
	@staticmethod
	def addExports(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> None: ...
	@staticmethod
	def addReadsAllUnnamed(arg0: javawrappers.java.lang.Module, ) -> None: ...
	@staticmethod
	def loadModule(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Module: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def findLoadedModule(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@staticmethod
	def addOpensToAllUnnamed(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def addExportsToAllUnnamed(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def transformedByAgent(arg0: javawrappers.java.lang.Module, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def addOpens(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Module, ) -> None: ...
	@staticmethod
	def defineModule(arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.module.ModuleDescriptor, arg2: javawrappers.java.net.URI, ) -> javawrappers.java.lang.Module: ...


class Resources:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def canEncapsulate(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toFilePath(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.Path: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toResourceName(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toPackageName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class ModulePatcher:
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	class ExplodedResourceFinder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class JarResourceFinder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class ResourceFinder:
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def close(self, ) -> None: ...


	class PatchedModuleReader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
		def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasPatches(self, ) -> Union[int, JBoolean]: ...
	@overload
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	def notify(self, ) -> None: ...
	@overload
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@overload
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
	@overload
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
	@overload
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def patchIfNeeded(self, arg0: javawrappers.java.lang.module.ModuleReference, ) -> javawrappers.java.lang.module.ModuleReference: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


class ModuleInfo:
	class DataInputWrapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def readLine(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def readChar(self, ) -> Union[string, JString]: ...
		def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		def readUTF(self, ) -> javawrappers.java.lang.String: ...
		def readLong(self, ) -> Union[long, JLong]: ...
		def readShort(self, ) -> Union[int, JShort]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def readDouble(self, ) -> Union[float, JDouble]: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readFloat(self, ) -> Union[float, JFloat]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def readBoolean(self, ) -> Union[int, JBoolean]: ...
		def readInt(self, ) -> Union[int, JInt]: ...
		def readByte(self, ) -> JByte: ...
		def readUnsignedByte(self, ) -> Union[int, JInt]: ...
		def readUnsignedShort(self, ) -> Union[int, JInt]: ...


	class ConstantPool:
		class ValueEntry:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class Index2Entry:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class IndexEntry:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class Entry:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Attributes:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def moduleResolution(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
		def descriptor(self, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
		def recordedHashes(self, ) -> javawrappers.jdk.internal.module.ModuleHashes: ...
		def notify(self, ) -> None: ...
		def target(self, ) -> javawrappers.jdk.internal.module.ModuleTarget: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def descriptor(self, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def notify(self, ) -> None: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def moduleResolution(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readIgnoringHashes(arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.jdk.internal.module.ModuleInfo.Attributes: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.jdk.internal.module.ModuleInfo.Attributes: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.jdk.internal.module.ModuleInfo.Attributes: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def target(self, ) -> javawrappers.jdk.internal.module.ModuleTarget: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readByte(self, ) -> JByte: ...
	def recordedHashes(self, ) -> javawrappers.jdk.internal.module.ModuleHashes: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class ModulePath:
	class Patterns:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.jdk.internal.module.ModulePatcher, *arg1: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.module.ModuleFinder: ...
	@overload
	@staticmethod
	def of(*arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.module.ModuleFinder: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.Runtime.Version, arg1: Union[int, JBoolean], *arg2: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.module.ModuleFinder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findAll(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class IllegalAccessMaps:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def exportedPackagesToOpen(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def concealedPackagesToOpen(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def generate(arg0: javawrappers.java.lang.module.ModuleFinder, ) -> javawrappers.jdk.internal.module.IllegalAccessMaps: ...
	def notify(self, ) -> None: ...


class ClassFileConstants:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ModuleHashes:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ): ...
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.jdk.internal.module.ModuleHashes: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hashForModule(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> javawrappers.jdk.internal.module.ModuleHashes.Builder: ...
		def notify(self, ) -> None: ...


	class HashSupplier:
		def generate(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hashFor(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def computeHash(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def hashForModule(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> javawrappers.jdk.internal.module.ModuleHashes.Builder: ...
	def notify(self, ) -> None: ...
	def names(self, ) -> javawrappers.java.util.Set: ...
	def build(self, ) -> javawrappers.jdk.internal.module.ModuleHashes: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashes(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def generate(arg0: javawrappers.java.util.Map, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.module.ModuleHashes: ...
	@overload
	def generate(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def algorithm(self, ) -> javawrappers.java.lang.String: ...


class ModuleInfoWriter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def write(arg0: javawrappers.java.lang.module.ModuleDescriptor, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	@staticmethod
	def write(arg0: javawrappers.java.lang.module.ModuleDescriptor, arg1: javawrappers.jdk.internal.module.ModuleTarget, arg2: javawrappers.java.io.OutputStream, ) -> None: ...
	@staticmethod
	def toByteBuffer(arg0: javawrappers.java.lang.module.ModuleDescriptor, ) -> javawrappers.java.nio.ByteBuffer: ...
	def notify(self, ) -> None: ...


class ModuleResolution:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasDeprecatedForRemovalWarning(self, ) -> Union[int, JBoolean]: ...
	def hasDeprecatedWarning(self, ) -> Union[int, JBoolean]: ...
	def withDoNotResolveByDefault(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
	def withIncubating(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def empty() -> javawrappers.jdk.internal.module.ModuleResolution: ...
	def withDeprecatedForRemoval(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def doNotResolveByDefault(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def doNotResolveByDefault(arg0: javawrappers.java.lang.module.ModuleReference, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> Union[int, JInt]: ...
	def withDeprecated(self, ) -> javawrappers.jdk.internal.module.ModuleResolution: ...
	@overload
	def hasIncubatingWarning(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasIncubatingWarning(arg0: javawrappers.java.lang.module.ModuleReference, ) -> Union[int, JBoolean]: ...


class ModuleLoaderMap:
	def __init__(self, ): ...
	class Mapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
		@overload
		def apply(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.ClassLoader: ...
		@overload
		def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def platformModules() -> javawrappers.java.util.Set: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	@overload
	def apply(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.ClassLoader: ...
	@overload
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def bootModules() -> javawrappers.java.util.Set: ...


class SystemModuleFinders:
	class ModuleContentSpliterator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def characteristics(self, ) -> Union[int, JInt]: ...
		def getComparator(self, ) -> javawrappers.java.util.Comparator: ...
		def notifyAll(self, ) -> None: ...
		def getExactSizeIfKnown(self, ) -> Union[long, JLong]: ...
		def hasCharacteristics(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def trySplit(self, ) -> javawrappers.java.util.Spliterator: ...
		def tryAdvance(self, arg0: javawrappers.java.util.function.Consumer, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def estimateSize(self, ) -> Union[long, JLong]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


	class SystemModuleReader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


	class SystemImage:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SystemModuleFinder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def findAll(self, ) -> javawrappers.java.util.Set: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def characteristics(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def getComparator(self, ) -> javawrappers.java.util.Comparator: ...
	def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExactSizeIfKnown(self, ) -> Union[long, JLong]: ...
	def hasCharacteristics(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	def findAll(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def trySplit(self, ) -> javawrappers.java.util.Spliterator: ...
	def tryAdvance(self, arg0: javawrappers.java.util.function.Consumer, ) -> Union[int, JBoolean]: ...
	@overload
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@overload
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def estimateSize(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def ofSystem() -> javawrappers.java.lang.module.ModuleFinder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


class ServicesCatalog:
	class ServiceProvider:
		def __init__(self, arg0: javawrappers.jdk.internal.module.ServicesCatalog, arg1: javawrappers.java.lang.Module, arg2: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def module(self, ) -> javawrappers.java.lang.Module: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def providerName(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getServicesCatalogOrNull(arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.jdk.internal.module.ServicesCatalog: ...
	def addProvider(self, arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> None: ...
	@staticmethod
	def getServicesCatalog(arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.jdk.internal.module.ServicesCatalog: ...
	def module(self, ) -> javawrappers.java.lang.Module: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create() -> javawrappers.jdk.internal.module.ServicesCatalog: ...
	def findServices(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def providerName(self, ) -> javawrappers.java.lang.String: ...
	def register(self, arg0: javawrappers.java.lang.Module, ) -> None: ...


class ModuleInfoExtender:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def mainClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def notifyAll(self, ) -> None: ...
	def packages(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def version(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def newExtender(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def hashes(self, arg0: javawrappers.jdk.internal.module.ModuleHashes, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def moduleResolution(self, arg0: javawrappers.jdk.internal.module.ModuleResolution, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def targetPlatform(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.module.ModuleInfoExtender: ...
	def write(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...


class Checks:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def requireServiceTypeName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isModuleName(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def requirePackageName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def requireModuleName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def requireQualifiedClassName(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isPackageName(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def requireServiceProviderName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isClassName(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class ModuleTarget:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def targetPlatform(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


