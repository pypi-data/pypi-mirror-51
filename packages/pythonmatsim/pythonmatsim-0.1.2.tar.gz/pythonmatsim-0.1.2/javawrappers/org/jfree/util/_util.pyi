################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.util
import javawrappers.java.text
import javawrappers.java.net
import javawrappers.org.jfree.ui
import javawrappers.java.io
import javawrappers.java.awt.geom
import javawrappers.java.util.function
import javawrappers.java.nio.charset
import javawrappers.javax.swing

from jpype.types import *
from typing import Union

from typing import overload

class AbstractObjectList:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StackableRuntimeException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.lang.Exception: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TableOrder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ObjectTable:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getColumnIncrement(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getRowIncrement(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class WaitingImageObserver:
	def __init__(self, arg0: javawrappers.java.awt.Image, ): ...
	def imageUpdate(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isError(self, ) -> Union[int, JBoolean]: ...
	def isLoadingComplete(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def waitImageLoaded(self, ) -> None: ...
	def notify(self, ) -> None: ...


class HashNMap:
	def __init__(self, ): ...
	class EmptyIterator:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Iterator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def containsValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def removeAll(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.lang.Object, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def add(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAll(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getValueCount(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class BooleanList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBoolean(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Boolean: ...
	def notify(self, ) -> None: ...
	def setBoolean(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Boolean, ) -> None: ...


class ReadOnlyIterator:
	def __init__(self, arg0: javawrappers.java.util.Iterator, ): ...
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class DefaultConfiguration:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def loadFromXML(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def load(self, arg0: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def load(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def findPropertyKeys(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def setConfigProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def stringPropertyNames(self, ) -> javawrappers.java.util.Set: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def store(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def storeToXML(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getConfigProperties(self, ) -> javawrappers.java.util.Enumeration: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PaintList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPaint(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Paint: ...
	def notify(self, ) -> None: ...
	def setPaint(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Paint, ) -> None: ...


class ResourceBundleWrapper:
	@staticmethod
	def removeCodeBase(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.URLClassLoader, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...


class Configuration:
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def findPropertyKeys(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getConfigProperties(self, ) -> javawrappers.java.util.Enumeration: ...


class LogContext:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	def log(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isErrorEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	def isWarningEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


class ClassComparator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isComparable(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class BooleanUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def valueOf(arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.Boolean: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ShapeList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getShape(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Shape: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setShape(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Shape, ) -> None: ...


class Rotation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getFactor(self, ) -> Union[float, JDouble]: ...


class LineBreakIterator:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def nextPosition(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def nextWithEnd(self, ) -> Union[int, JInt]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class ObjectList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class SortedConfigurationWriter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def save(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.util.Configuration, ) -> None: ...
	@overload
	def save(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.jfree.util.Configuration, ) -> None: ...
	@overload
	def save(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.util.Configuration, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PrintStreamLogTarget:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.PrintStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def log(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	def log(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LogTarget:
	@overload
	def log(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	def log(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...


class ExtendedConfiguration:
	@overload
	def getIntProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getIntProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getBoolProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def getBoolProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def findPropertyKeys(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isPropertySet(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getConfigProperties(self, ) -> javawrappers.java.util.Enumeration: ...


class ResourceBundleSupport:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.ResourceBundle, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.ResourceBundle, ): ...
	def getResourceURL(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createMenu(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.swing.JMenu: ...
	@overload
	def formatMessage(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def formatMessage(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def formatMessage(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getOptionalKeyStroke(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.swing.KeyStroke: ...
	@overload
	def getOptionalKeyStroke(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.javax.swing.KeyStroke: ...
	@overload
	def getKeyStroke(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.javax.swing.KeyStroke: ...
	@overload
	def getKeyStroke(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.swing.KeyStroke: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getMnemonic(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Integer: ...
	def notify(self, ) -> None: ...
	@overload
	def getIcon(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.swing.Icon: ...
	@overload
	def getIcon(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.javax.swing.Icon: ...
	def createTransparentIcon(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.javax.swing.Icon: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getOptionalMnemonic(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Integer: ...


class PaintUtilities:
	@staticmethod
	def colorToString(arg0: javawrappers.java.awt.Color, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def equal(arg0: javawrappers.java.awt.Paint, arg1: javawrappers.java.awt.Paint, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def stringToColor(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.awt.Color: ...
	def notify(self, ) -> None: ...


class ShapeUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createLineRegion(arg0: javawrappers.java.awt.geom.Line2D, arg1: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def intersects(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDiagonalCross(arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def createTranslatedShape(arg0: javawrappers.java.awt.Shape, arg1: javawrappers.org.jfree.ui.RectangleAnchor, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.Shape: ...
	@overload
	@staticmethod
	def createTranslatedShape(arg0: javawrappers.java.awt.Shape, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def getPointInRectangle(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createUpTriangle(arg0: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def createRegularCross(arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.Polygon, arg1: javawrappers.java.awt.Polygon, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.Ellipse2D, arg1: javawrappers.java.awt.geom.Ellipse2D, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.Line2D, arg1: javawrappers.java.awt.geom.Line2D, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.Shape, arg1: javawrappers.java.awt.Shape, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.GeneralPath, arg1: javawrappers.java.awt.geom.GeneralPath, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.Arc2D, arg1: javawrappers.java.awt.geom.Arc2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def contains(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDownTriangle(arg0: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def rotateShape(arg0: javawrappers.java.awt.Shape, arg1: Union[float, JDouble], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def createDiamond(arg0: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def drawRotatedShape(arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.Shape, arg2: Union[float, JDouble], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ) -> None: ...
	@staticmethod
	def clone(arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PublicCloneable:
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class StringUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def endsWithIgnoreCase(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLineSeparator() -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def startsWithIgnoreCase(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class StackableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.lang.Exception: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class UnitType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StrokeList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStroke(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Stroke: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setStroke(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Stroke, ) -> None: ...
	def notify(self, ) -> None: ...


class Log:
	class SimpleMessage:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def debug(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def debug(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	def addTarget(self, arg0: javawrappers.org.jfree.util.LogTarget, ) -> None: ...
	@overload
	@staticmethod
	def log(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	@staticmethod
	def log(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getDebuglevel(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def error(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def error(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	@staticmethod
	def createContext(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.util.LogContext: ...
	@overload
	@staticmethod
	def createContext(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.jfree.util.LogContext: ...
	def notify(self, ) -> None: ...
	def getTargets(self, ) -> JArray(javawrappers.org.jfree.util.LogTarget, 1): ...
	@overload
	@staticmethod
	def warn(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def warn(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isInfoEnabled() -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isErrorEnabled() -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.org.jfree.util.Log: ...
	@staticmethod
	def isDebugEnabled() -> Union[int, JBoolean]: ...
	def replaceTargets(self, arg0: javawrappers.org.jfree.util.LogTarget, ) -> None: ...
	@staticmethod
	def isWarningEnabled() -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def info(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	@staticmethod
	def info(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def removeTarget(self, arg0: javawrappers.org.jfree.util.LogTarget, ) -> None: ...


class AttributedStringUtilities:
	@staticmethod
	def equal(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.text.AttributedString, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SortOrder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ArrayUtilities:
	@staticmethod
	def equal(arg0: JArray(JArray(Union[float, JFloat], 1), 1), arg1: JArray(JArray(Union[float, JFloat], 1), 1), ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def equalReferencesInArrays(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def clone(arg0: JArray(JArray(Union[float, JFloat], 1), 1), ) -> JArray(JArray(Union[float, JFloat], 1), 1): ...
	@staticmethod
	def hasDuplicateItems(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def compareVersionArrays(arg0: JArray(javawrappers.java.lang.Comparable, 1), arg1: JArray(javawrappers.java.lang.Comparable, 1), ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class ExtendedConfigurationWrapper:
	def __init__(self, arg0: javawrappers.org.jfree.util.Configuration, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getBoolProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def getBoolProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getConfigProperties(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getIntProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getIntProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findPropertyKeys(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	def isPropertySet(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getConfigProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class FastStack:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def push(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def pop(self, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ObjectUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getResource(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def loadAndInstantiate(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def loadAndInstantiate(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getResourceAsStream(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.io.InputStream: ...
	@staticmethod
	def getClassLoaderSource() -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@overload
	@staticmethod
	def getClassLoader(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def setClassLoaderSource(arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def setClassLoader(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def equal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isJDK14() -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hashCode(arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getResourceRelativeAsStream(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.io.InputStream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def clone(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def deepClone(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getResourceRelative(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.net.URL: ...


