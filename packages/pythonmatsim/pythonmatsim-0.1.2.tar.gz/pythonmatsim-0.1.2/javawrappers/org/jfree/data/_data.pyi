################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.data
import javawrappers.org.jfree.chart.util
import javawrappers.java.io
import javawrappers.java.beans
import javawrappers.org.jfree.data.general
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class KeyToGroupMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getGroupCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getKeyCount(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def mapKeyToGroup(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def notify(self, ) -> None: ...
	def getGroupIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Comparable: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getGroups(self, ) -> javawrappers.java.util.List: ...


class Value:
	def getValue(self, ) -> javawrappers.java.lang.Number: ...


class KeyedObjects:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def setObject(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def removeValue(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeValue(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def addObject(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class KeyedValues:
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...


class Values:
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...


class RangeType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RangeInfo:
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...


class KeyedObject:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setObject(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


class UnknownKeyException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class KeyedValues2D:
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...


class DefaultKeyedValues:
	def __init__(self, ): ...
	def sortByValues(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def sortByKeys(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeValue(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeValue(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def addValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	@overload
	def addValue(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[float, JDouble], ) -> None: ...


class KeyedValue:
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...


class Range:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def expandToInclude(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	def intersects(self, arg0: javawrappers.org.jfree.data.Range, ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def shift(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def shift(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def combineIgnoringNaN(arg0: javawrappers.org.jfree.data.Range, arg1: javawrappers.org.jfree.data.Range, ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def scale(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	def constrain(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def isNaNRange(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def expand(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCentralValue(self, ) -> Union[float, JDouble]: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def combine(arg0: javawrappers.org.jfree.data.Range, arg1: javawrappers.org.jfree.data.Range, ) -> javawrappers.org.jfree.data.Range: ...


class DomainOrder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DataUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createNumberArray2D(arg0: JArray(JArray(Union[float, JDouble], 1), 1), ) -> JArray(JArray(javawrappers.java.lang.Number, 1), 1): ...
	@staticmethod
	def createNumberArray(arg0: JArray(Union[float, JDouble], 1), ) -> JArray(javawrappers.java.lang.Number, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def calculateColumnTotal(arg0: javawrappers.org.jfree.data.Values2D, arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateColumnTotal(arg0: javawrappers.org.jfree.data.Values2D, arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def equal(arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: JArray(JArray(Union[float, JDouble], 1), 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def calculateRowTotal(arg0: javawrappers.org.jfree.data.Values2D, arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateRowTotal(arg0: javawrappers.org.jfree.data.Values2D, arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def clone(arg0: JArray(JArray(Union[float, JDouble], 1), 1), ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@staticmethod
	def getCumulativePercentages(arg0: javawrappers.org.jfree.data.KeyedValues, ) -> javawrappers.org.jfree.data.KeyedValues: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ComparableObjectItem:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class DomainInfo:
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...


class ComparableObjectSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class KeyedValues2DItemKey:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getColumnKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def toJSONString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRowKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.jfree.data.KeyedValues2DItemKey, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class KeyedValueComparatorType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DefaultKeyedValues2D:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def removeValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def addValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...


class Values2D:
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...


class KeyedValueComparator:
	def __init__(self, arg0: javawrappers.org.jfree.data.KeyedValueComparatorType, arg1: javawrappers.org.jfree.chart.util.SortOrder, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def getType(self, ) -> javawrappers.org.jfree.data.KeyedValueComparatorType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOrder(self, ) -> javawrappers.org.jfree.chart.util.SortOrder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class DefaultKeyedValue:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ItemKey:
	def toJSONString(self, ) -> javawrappers.java.lang.String: ...


class KeyedValuesItemKey:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toJSONString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class KeyedObjects2D:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Object: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setObject(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def notify(self, ) -> None: ...
	def removeObject(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def addObject(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...


