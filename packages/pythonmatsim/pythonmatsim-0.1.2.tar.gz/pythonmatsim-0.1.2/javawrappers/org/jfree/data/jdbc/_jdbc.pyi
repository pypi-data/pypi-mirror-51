################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.sql
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.data
import javawrappers.org.jfree.chart.util
import javawrappers.org.jfree.data.general

from jpype.types import *
from typing import Union

from typing import overload

class JDBCCategoryDataset:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.sql.Connection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def incrementValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def addValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def addValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def setTranspose(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTranspose(self, ) -> Union[int, JBoolean]: ...
	def removeValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class JDBCXYDataset:
	@overload
	def __init__(self, arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.sql.Connection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def isTimeSeries(self, ) -> Union[int, JBoolean]: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def setTimeSeries(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class JDBCPieDataset:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.sql.Connection, ): ...
	def sortByValues(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def sortByKeys(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def close(self, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def clear(self, ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


