################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.data.time
import javawrappers.org.jfree.data.xy
import javawrappers.java.lang
import javawrappers.org.jfree.data
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.beans
import javawrappers.org.jfree.data.general
import javawrappers.javax.swing.event
import javawrappers.org.jfree.chart.date

from jpype.types import *
from typing import Union

from typing import overload

class TimeSeriesDataItem:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: javawrappers.java.lang.Number, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getPeriod(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notify(self, ) -> None: ...


class TimePeriodValues:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def createCopy(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimePeriodValues: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def update(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Number, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMinEndIndex(self, ) -> Union[int, JInt]: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def delete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getMaxMiddleIndex(self, ) -> Union[int, JInt]: ...
	def getMinStartIndex(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDomainDescription(self, ) -> javawrappers.java.lang.String: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDomainDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getMaxEndIndex(self, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getMaxStartIndex(self, ) -> Union[int, JInt]: ...
	def getRangeDescription(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimePeriodValue, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getMinMiddleIndex(self, ) -> Union[int, JInt]: ...
	def setRangeDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimePeriodValue: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getTimePeriod(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimePeriod: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DateRange:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.Range, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def expandToInclude(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	def getLowerMillis(self, ) -> Union[long, JLong]: ...
	@overload
	def intersects(self, arg0: javawrappers.org.jfree.data.Range, ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def shift(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def shift(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def combineIgnoringNaN(arg0: javawrappers.org.jfree.data.Range, arg1: javawrappers.org.jfree.data.Range, ) -> javawrappers.org.jfree.data.Range: ...
	def getUpperDate(self, ) -> javawrappers.java.util.Date: ...
	@staticmethod
	def scale(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	def constrain(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def isNaNRange(self, ) -> Union[int, JBoolean]: ...
	def getLowerDate(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def expand(arg0: javawrappers.org.jfree.data.Range, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getUpperMillis(self, ) -> Union[long, JLong]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def getCentralValue(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def combine(arg0: javawrappers.org.jfree.data.Range, arg1: javawrappers.org.jfree.data.Range, ) -> javawrappers.org.jfree.data.Range: ...


class DynamicTimeSeriesCollection:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.jfree.data.time.RegularTimePeriod, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.jfree.data.time.RegularTimePeriod, arg3: javawrappers.java.util.TimeZone, ): ...
	class ValueSequence:
		@overload
		def __init__(self, arg0: javawrappers.org.jfree.data.time.DynamicTimeSeriesCollection, arg1: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.jfree.data.time.DynamicTimeSeriesCollection, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def enterData(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getData(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNewestIndex(self, ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def appendData(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def appendData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def offsetFromNewest(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def addValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def advanceTime(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def addSeries(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNewestTime(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getData(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getOldestTime(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setSeriesKey(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getPosition(self, ) -> Union[int, JInt]: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def invalidateRangeInfo(self, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def enterData(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def offsetFromOldest(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setTimeBase(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> Union[long, JLong]: ...
	def getOldestIndex(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class TimePeriod:
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...


class TimeSeriesTableModel:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, arg1: Union[int, JBoolean], ): ...
	def getListeners(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.util.EventListener, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeTableModelListener(self, arg0: javawrappers.javax.swing.event.TableModelListener, ) -> None: ...
	def addTableModelListener(self, arg0: javawrappers.javax.swing.event.TableModelListener, ) -> None: ...
	def fireTableStructureChanged(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def findColumn(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def fireTableChanged(self, arg0: javawrappers.javax.swing.event.TableModelEvent, ) -> None: ...
	def getColumnName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getColumnClass(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	def setValueAt(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getValueAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def fireTableDataChanged(self, ) -> None: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def fireTableRowsUpdated(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def fireTableRowsDeleted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def fireTableCellUpdated(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def fireTableRowsInserted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getTableModelListeners(self, ) -> JArray(javawrappers.javax.swing.event.TableModelListener, 1): ...
	def isCellEditable(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Year:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def parseYear(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Year: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class Month:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Year, ): ...
	@overload
	def __init__(self, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def parseMonth(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Month: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getYear(self, ) -> javawrappers.org.jfree.data.time.Year: ...
	def getYearValue(self, ) -> Union[int, JInt]: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class Millisecond:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Second, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> javawrappers.org.jfree.data.time.Second: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class SimpleTimePeriod:
	@overload
	def __init__(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStartMillis(self, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndMillis(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...


class Minute:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Hour, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	def getDay(self, ) -> javawrappers.org.jfree.data.time.Day: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinute(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHour(self, ) -> javawrappers.org.jfree.data.time.Hour: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def parseMinute(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Minute: ...
	def getHourValue(self, ) -> Union[int, JInt]: ...


class Quarter:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Year, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def parseQuarter(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Quarter: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getYear(self, ) -> javawrappers.org.jfree.data.time.Year: ...
	def getYearValue(self, ) -> Union[int, JInt]: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getQuarter(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class Week:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Year, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def getWeek(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getYear(self, ) -> javawrappers.org.jfree.data.time.Year: ...
	def getYearValue(self, ) -> Union[int, JInt]: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def parseWeek(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Week: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class TimePeriodFormatException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TimeSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> Union[int, JInt]: ...
	@overload
	def createCopy(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	@overload
	def createCopy(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getItems(self, ) -> javawrappers.java.util.List: ...
	def getNextTimePeriod(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getDomainDescription(self, ) -> javawrappers.java.lang.String: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimeSeriesDataItem, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimeSeriesDataItem, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: javawrappers.java.lang.Number, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getMaximumItemAge(self, ) -> Union[long, JLong]: ...
	def setRangeDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimeSeriesDataItem: ...
	@overload
	def getDataItem(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> javawrappers.org.jfree.data.time.TimeSeriesDataItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getTimePeriodClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def addOrUpdate(self, arg0: javawrappers.org.jfree.data.time.TimeSeriesDataItem, ) -> javawrappers.org.jfree.data.time.TimeSeriesDataItem: ...
	@overload
	def addOrUpdate(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: javawrappers.java.lang.Number, ) -> javawrappers.org.jfree.data.time.TimeSeriesDataItem: ...
	@overload
	def addOrUpdate(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.time.TimeSeriesDataItem: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addAndOrUpdate(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	@overload
	def findValueRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	def findValueRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg2: javawrappers.java.util.TimeZone, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	def findValueRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	@overload
	def update(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def update(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: javawrappers.java.lang.Number, ) -> None: ...
	@overload
	def update(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Number, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def delete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def delete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def delete(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def removeAgedItems(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def removeAgedItems(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> None: ...
	def setMaximumItemAge(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setDomainDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getTimePeriods(self, ) -> javawrappers.java.util.Collection: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getRangeDescription(self, ) -> javawrappers.java.lang.String: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getTimePeriod(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTimePeriodsUniqueToOtherSeries(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ) -> javawrappers.java.util.Collection: ...


class TimePeriodValue:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: javawrappers.java.lang.Number, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPeriod(self, ) -> javawrappers.org.jfree.data.time.TimePeriod: ...
	def notify(self, ) -> None: ...


class RegularTimePeriod:
	def __init__(self, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class MovingAverage:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def createMovingAverage(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> javawrappers.org.jfree.data.xy.XYDataset: ...
	@overload
	@staticmethod
	def createMovingAverage(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: javawrappers.java.lang.String, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.jfree.data.xy.XYDataset: ...
	@overload
	@staticmethod
	def createMovingAverage(arg0: javawrappers.org.jfree.data.time.TimeSeries, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	@overload
	@staticmethod
	def createMovingAverage(arg0: javawrappers.org.jfree.data.time.TimeSeriesCollection, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimeSeriesCollection: ...
	@overload
	@staticmethod
	def createMovingAverage(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: Union[float, JDouble], arg4: Union[float, JDouble], ) -> javawrappers.org.jfree.data.xy.XYSeries: ...
	@staticmethod
	def createPointMovingAverage(arg0: javawrappers.org.jfree.data.time.TimeSeries, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TimeTableXYDataset:
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getItemCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JBoolean], ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setDomainIsPointsInTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: Union[float, JDouble], arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, arg1: javawrappers.java.lang.Number, arg2: javawrappers.java.lang.Comparable, arg3: Union[int, JBoolean], ) -> None: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getXPosition(self, ) -> javawrappers.org.jfree.data.time.TimePeriodAnchor: ...
	def clear(self, ) -> None: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getTimePeriod(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimePeriod: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getDomainIsPointsInTime(self, ) -> Union[int, JBoolean]: ...
	def setXPosition(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, ) -> None: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class Day:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@staticmethod
	def parseDay(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Day: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	def getSerialDate(self, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class TimePeriodValuesCollection:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimePeriodValues, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.time.TimePeriodValues, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.time.TimePeriodValues, ) -> None: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getXPosition(self, ) -> javawrappers.org.jfree.data.time.TimePeriodAnchor: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimePeriodValues: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def setXPosition(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, ) -> None: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class Second:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Minute, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> Union[int, JInt]: ...
	def getMinute(self, ) -> javawrappers.org.jfree.data.time.Minute: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def parseSecond(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Second: ...


class TimeSeriesCollection:
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, arg1: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getSeriesIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSurroundingItems(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> JArray(Union[int, JInt], 1): ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ) -> None: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	def getRangeBounds(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.jfree.data.Range, arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: javawrappers.org.jfree.data.time.TimeSeries, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	def getDomainBounds(self, arg0: javawrappers.java.util.List, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getXPosition(self, ) -> javawrappers.org.jfree.data.time.TimePeriodAnchor: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getSeries(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	@overload
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.TimeSeries: ...
	@overload
	def getSeries(self, ) -> javawrappers.java.util.List: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def setXPosition(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, ) -> None: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...
	def vetoableChange(self, arg0: javawrappers.java.beans.PropertyChangeEvent, ) -> None: ...


class TimePeriodAnchor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Hour:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.data.time.Day, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@staticmethod
	def parseHour(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.time.Hour: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def notifyAll(self, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getHour(self, ) -> Union[int, JInt]: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def getDay(self, ) -> javawrappers.org.jfree.data.time.Day: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class FixedMillisecond:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	def next(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInstance(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.TimeZone, arg3: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	@overload
	def getFirstMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	@overload
	def getFirstMillisecond(self, ) -> Union[long, JLong]: ...
	def getStart(self, ) -> javawrappers.java.util.Date: ...
	def previous(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getTime(self, ) -> javawrappers.java.util.Date: ...
	def notifyAll(self, ) -> None: ...
	def getSerialIndex(self, ) -> Union[long, JLong]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEnd(self, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	@overload
	def getLastMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getLastMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def peg(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	def getMillisecond(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, arg1: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getMiddleMillisecond(self, ) -> Union[long, JLong]: ...
	@overload
	def getMiddleMillisecond(self, arg0: javawrappers.java.util.Calendar, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def downsize(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


