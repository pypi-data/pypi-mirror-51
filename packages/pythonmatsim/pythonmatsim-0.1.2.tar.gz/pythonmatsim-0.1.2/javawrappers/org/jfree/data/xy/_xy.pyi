################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.data.xy
import javawrappers.java.lang
import javawrappers.org.jfree.data
import javawrappers.java.util
import javawrappers.java.beans
import javawrappers.org.jfree.data.general
import javawrappers.javax.swing.event

from jpype.types import *
from typing import Union

from typing import overload

class VectorDataItem:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getVector(self, ) -> javawrappers.org.jfree.data.xy.Vector: ...
	def getXValue(self, ) -> Union[float, JDouble]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getVectorY(self, ) -> Union[float, JDouble]: ...
	def getVectorX(self, ) -> Union[float, JDouble]: ...
	def getYValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DefaultXYZDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(JArray(Union[float, JDouble], 1), 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def removeSeries(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultXYDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(JArray(Union[float, JDouble], 1), 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def removeSeries(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class IntervalXYDelegate:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.xy.XYDataset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JBoolean], ): ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAutoWidth(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def datasetChanged(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeEvent, ) -> None: ...
	def setAutoWidth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getFixedIntervalWidth(self, ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def notify(self, ) -> None: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getIntervalPositionFactor(self, ) -> Union[float, JDouble]: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def setFixedIntervalWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setIntervalPositionFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIntervalWidth(self, ) -> Union[float, JDouble]: ...


class YWithXInterval:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def getXLow(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getXHigh(self, ) -> Union[float, JDouble]: ...


class XYDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class XYZDataset:
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class MatrixSeries:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def update(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getItem(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def zeroAll(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getItemColumn(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getColumnsCount(self, ) -> Union[int, JInt]: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getItemRow(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class YisSymbolic:
	@overload
	def getYSymbolicValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getYSymbolicValue(self, arg0: javawrappers.java.lang.Integer, ) -> javawrappers.java.lang.String: ...
	def getYSymbolicValues(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class Vector:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class OHLCDataItem:
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClose(self, ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpen(self, ) -> javawrappers.java.lang.Number: ...
	def notifyAll(self, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getVolume(self, ) -> javawrappers.java.lang.Number: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLow(self, ) -> javawrappers.java.lang.Number: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getHigh(self, ) -> javawrappers.java.lang.Number: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDate(self, ) -> javawrappers.java.util.Date: ...


class YIntervalSeriesCollection:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.YIntervalSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.YIntervalSeries, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.YIntervalSeries: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class OHLCDataset:
	def getOpenValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getHighValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClose(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getOpen(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getVolumeValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getVolume(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getLowValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getLow(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getCloseValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getHigh(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class NormalizedMatrixSeries:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def update(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getItem(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def zeroAll(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getItemColumn(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getColumnsCount(self, ) -> Union[int, JInt]: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setScaleFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getScaleFactor(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getItemRow(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class DefaultHighLowDataset:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(javawrappers.java.util.Date, 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: JArray(Union[float, JDouble], 1), arg5: JArray(Union[float, JDouble], 1), arg6: JArray(Union[float, JDouble], 1), ): ...
	def getOpenValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClose(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpen(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def createNumberArray(arg0: JArray(Union[float, JDouble], 1), ) -> JArray(javawrappers.java.lang.Number, 1): ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getXDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.Date: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getVolume(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getLowValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLow(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getCloseValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getHigh(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getHighValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getVolumeValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class VectorXYDataset:
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getVectorXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getVector(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.Vector: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getVectorYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class VectorSeriesCollection:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.VectorSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getVectorXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getVector(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.Vector: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.VectorSeries, ) -> Union[int, JBoolean]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: javawrappers.org.jfree.data.xy.VectorSeries, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.VectorSeries: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getVectorYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class XYItemKey:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toJSONString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.jfree.data.xy.XYItemKey, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getSeriesKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getItemIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class VectorSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getVectorXValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getXValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def getYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.xy.VectorDataItem, arg1: Union[int, JBoolean], ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getVectorYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...


class XYIntervalDataItem:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getXHighValue(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getYLowValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getX(self, ) -> javawrappers.java.lang.Double: ...
	def getYValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getXLowValue(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getYHighValue(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AbstractXYDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class YIntervalDataItem:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getX(self, ) -> javawrappers.java.lang.Double: ...
	def getYValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getYHighValue(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getYLowValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class AbstractIntervalXYDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class XYCoordinate:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class XYBarDataset:
	def __init__(self, arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getUnderlyingDataset(self, ) -> javawrappers.org.jfree.data.xy.XYDataset: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def datasetChanged(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeEvent, ) -> None: ...
	def getBarWidth(self, ) -> Union[float, JDouble]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setBarWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultWindDataset:
	@overload
	def __init__(self, arg0: JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getWindDirection(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@staticmethod
	def seriesNameListFromDataArray(arg0: JArray(JArray(javawrappers.java.lang.Object, 1), 1), ) -> javawrappers.java.util.List: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getWindForce(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultOHLCDataset:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(javawrappers.org.jfree.data.xy.OHLCDataItem, 1), ): ...
	def getOpenValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClose(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpen(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getXDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.Date: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getVolume(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getLowValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLow(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getCloseValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getHigh(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getHighValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def sortDataByDate(self, ) -> None: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getVolumeValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class XIntervalDataItem:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getX(self, ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getXHighValue(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getXLowValue(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class XYSeriesCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.xy.XYSeries, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAutoWidth(self, ) -> Union[int, JBoolean]: ...
	def removeAllSeries(self, ) -> None: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setIntervalWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setIntervalPositionFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def indexOf(self, arg0: javawrappers.org.jfree.data.xy.XYSeries, ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getIntervalWidth(self, ) -> Union[float, JDouble]: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def vetoableChange(self, arg0: javawrappers.java.beans.PropertyChangeEvent, ) -> None: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.XYSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAutoWidth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def getSeriesIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getIntervalPositionFactor(self, ) -> Union[float, JDouble]: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.XYSeries, ) -> None: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getSeries(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getSeries(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.xy.XYSeries: ...
	@overload
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XYSeries: ...
	def validateObject(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class XYIntervalSeriesCollection:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.XYIntervalSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.XYIntervalSeries, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XYIntervalSeries: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class WindDataset:
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getWindDirection(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getWindForce(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class XYSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def createCopy(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XYSeries: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def update(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def delete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XYDataItem: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.org.jfree.data.xy.XYDataItem: ...
	def getItems(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toArray(self, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	def updateByIndex(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Number, ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Number, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Number, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.xy.XYDataItem, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Number, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.xy.XYDataItem, arg1: Union[int, JBoolean], ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XYDataItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def addOrUpdate(self, arg0: javawrappers.org.jfree.data.xy.XYDataItem, ) -> javawrappers.org.jfree.data.xy.XYDataItem: ...
	@overload
	def addOrUpdate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.xy.XYDataItem: ...
	@overload
	def addOrUpdate(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> javawrappers.org.jfree.data.xy.XYDataItem: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


class IntervalXYDataset:
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class IntervalXYZDataset:
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getEndZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class XIntervalSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def getXHighValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def getYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.xy.XIntervalDataItem, arg1: Union[int, JBoolean], ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getXLowValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class YIntervalSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def getYLowValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def getYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.xy.YIntervalDataItem, arg1: Union[int, JBoolean], ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def getYHighValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class XYInterval:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def getXLow(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getYLow(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getYHigh(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getXHigh(self, ) -> Union[float, JDouble]: ...


class XYRangeInfo:
	def getRangeBounds(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.jfree.data.Range, arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...


class TableXYDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class YInterval:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getYLow(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getYHigh(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class XYDatasetTableModel:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.xy.TableXYDataset, ): ...
	@overload
	def __init__(self, ): ...
	def getListeners(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.util.EventListener, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeTableModelListener(self, arg0: javawrappers.javax.swing.event.TableModelListener, ) -> None: ...
	def addTableModelListener(self, arg0: javawrappers.javax.swing.event.TableModelListener, ) -> None: ...
	def fireTableStructureChanged(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def findColumn(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def fireTableChanged(self, arg0: javawrappers.javax.swing.event.TableModelEvent, ) -> None: ...
	def getColumnName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getColumnClass(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	def setValueAt(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getValueAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def fireTableDataChanged(self, ) -> None: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def datasetChanged(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeEvent, ) -> None: ...
	def fireTableRowsUpdated(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def fireTableRowsDeleted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def fireTableCellUpdated(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def fireTableRowsInserted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getTableModelListeners(self, ) -> JArray(javawrappers.javax.swing.event.TableModelListener, 1): ...
	def isCellEditable(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setModel(self, arg0: javawrappers.org.jfree.data.xy.TableXYDataset, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class XYIntervalSeries:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def getXHighValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def getYLowValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def getYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.xy.XYIntervalDataItem, arg1: Union[int, JBoolean], ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getXLowValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def getYHighValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MatrixSeriesCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.xy.MatrixSeries, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.MatrixSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.MatrixSeries, ) -> None: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.MatrixSeries: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class CategoryTableXYDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAutoWidth(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAutoWidth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getItemCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@overload
	def remove(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
	def getIntervalPositionFactor(self, ) -> Union[float, JDouble]: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setIntervalWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setIntervalPositionFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getIntervalWidth(self, ) -> Union[float, JDouble]: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> None: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class XisSymbolic:
	def getXSymbolicValues(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getXSymbolicValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getXSymbolicValue(self, arg0: javawrappers.java.lang.Integer, ) -> javawrappers.java.lang.String: ...


class XYDataItem:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setY(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	@overload
	def setY(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getXValue(self, ) -> Union[float, JDouble]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getX(self, ) -> javawrappers.java.lang.Number: ...
	def getY(self, ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class XYDomainInfo:
	def getDomainBounds(self, arg0: javawrappers.java.util.List, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...


class XIntervalSeriesCollection:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.XIntervalSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.XIntervalSeries, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XIntervalSeries: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultIntervalXYDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(JArray(Union[float, JDouble], 1), 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class AbstractXYZDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultTableXYDataset:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAutoWidth(self, ) -> Union[int, JBoolean]: ...
	def removeAllSeries(self, ) -> None: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setIntervalWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setIntervalPositionFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getIntervalWidth(self, ) -> Union[float, JDouble]: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def removeAllValuesForX(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.xy.XYSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAutoWidth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def getIntervalPositionFactor(self, ) -> Union[float, JDouble]: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDomainLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.xy.XYSeries, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isAutoPrune(self, ) -> Union[int, JBoolean]: ...
	def updateXPoints(self, ) -> None: ...
	def getDomainUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def getDomainBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.xy.XYSeries: ...
	def validateObject(self, ) -> None: ...
	def prune(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


