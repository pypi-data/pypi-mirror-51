################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.chart.ui
import javawrappers.java.awt.image
import javawrappers.java.util
import javawrappers.org.jfree.chart.util
import javawrappers.java.beans
import javawrappers.org.jfree.chart.panel
import javawrappers.org.jfree.chart.renderer.xy
import javawrappers.org.jfree.chart.renderer.category
import javawrappers.javax.accessibility
import javawrappers.org.jfree.data.category
import javawrappers.java.awt.geom
import javawrappers.java.awt.dnd
import javawrappers.org.jfree.chart.plot
import javawrappers.java.awt.im
import javawrappers.javax.swing.event
import javawrappers.org.jfree.chart.event
import javawrappers.org.jfree.data.general
import javawrappers.java.awt.color
import javawrappers.java.awt
import javawrappers.org.jfree.data.xy
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.awt.print
import javawrappers.java.io
import javawrappers.javax.swing.plaf
import javawrappers.java.awt.datatransfer
import javawrappers.org.jfree.chart.imagemap
import javawrappers.org.jfree.chart.title
import javawrappers.java.awt.event
import javawrappers.javax.swing.border
import javawrappers.org.jfree.chart
import javawrappers.org.jfree.chart.entity
import javawrappers.javax.swing
import javawrappers.org.jfree.data.statistics

from jpype.types import *
from typing import Union

from typing import overload

class StandardChartTheme:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getGridBandPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setLargeFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def getErrorIndicatorPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getAxisOffset(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def setShadowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getAxisLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setAxisLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getChartBackgroundPaint(self, ) -> javawrappers.java.awt.Paint: ...
	@staticmethod
	def createDarknessTheme() -> javawrappers.org.jfree.chart.ChartTheme: ...
	def getSubtitlePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setXYBarPainter(self, arg0: javawrappers.org.jfree.chart.renderer.xy.XYBarPainter, ) -> None: ...
	@staticmethod
	def createLegacyTheme() -> javawrappers.org.jfree.chart.ChartTheme: ...
	def setAxisOffset(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def isShadowVisible(self, ) -> Union[int, JBoolean]: ...
	def setPlotBackgroundPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setBaselinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelLinkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getShadowPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setLabelLinkStyle(self, arg0: javawrappers.org.jfree.chart.plot.PieLabelLinkStyle, ) -> None: ...
	def setLabelLinkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setDomainGridlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getItemLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getExtraLargeFont(self, ) -> javawrappers.java.awt.Font: ...
	@staticmethod
	def createJFreeTheme() -> javawrappers.org.jfree.chart.ChartTheme: ...
	def setTitlePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setExtraLargeFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setErrorIndicatorPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setLegendItemPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setItemLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDomainGridlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def notifyAll(self, ) -> None: ...
	def getBaselinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setRegularFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def getLabelLinkStyle(self, ) -> javawrappers.org.jfree.chart.plot.PieLabelLinkStyle: ...
	def setCrosshairPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setGridBandAlternatePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setPlotOutlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getPlotOutlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDrawingSupplier(self, arg0: javawrappers.org.jfree.chart.plot.DrawingSupplier, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSmallFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setBarPainter(self, arg0: javawrappers.org.jfree.chart.renderer.category.BarPainter, ) -> None: ...
	def getLegendBackgroundPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeGridlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setSubtitlePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setRangeGridlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLegendItemPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def apply(self, arg0: javawrappers.org.jfree.chart.JFreeChart, ) -> None: ...
	def setGridBandPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getSmallFont(self, ) -> javawrappers.java.awt.Font: ...
	def getBarPainter(self, ) -> javawrappers.org.jfree.chart.renderer.category.BarPainter: ...
	def getLargeFont(self, ) -> javawrappers.java.awt.Font: ...
	def setThermometerPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTitlePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setLegendBackgroundPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getGridBandAlternatePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getCrosshairPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getThermometerPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setShadowPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getPlotBackgroundPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setChartBackgroundPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDrawingSupplier(self, ) -> javawrappers.org.jfree.chart.plot.DrawingSupplier: ...
	def getRegularFont(self, ) -> javawrappers.java.awt.Font: ...
	def getXYBarPainter(self, ) -> javawrappers.org.jfree.chart.renderer.xy.XYBarPainter: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...


class ChartColor:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createDefaultPaintArray() -> JArray(javawrappers.java.awt.Paint, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.awt.Color: ...
	def createContext(self, arg0: javawrappers.java.awt.image.ColorModel, arg1: javawrappers.java.awt.Rectangle, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.AffineTransform, arg4: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.PaintContext: ...
	def notify(self, ) -> None: ...
	def getAlpha(self, ) -> Union[int, JInt]: ...
	@overload
	def getColorComponents(self, arg0: javawrappers.java.awt.color.ColorSpace, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getColorComponents(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def darker(self, ) -> javawrappers.java.awt.Color: ...
	def getRed(self, ) -> Union[int, JInt]: ...
	def getRGBComponents(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getComponents(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getComponents(self, arg0: javawrappers.java.awt.color.ColorSpace, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@staticmethod
	def RGBtoHSB(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@staticmethod
	def getHSBColor(arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> javawrappers.java.awt.Color: ...
	def getRGB(self, ) -> Union[int, JInt]: ...
	def brighter(self, ) -> javawrappers.java.awt.Color: ...
	@overload
	@staticmethod
	def getColor(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Color: ...
	@overload
	@staticmethod
	def getColor(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Color, ) -> javawrappers.java.awt.Color: ...
	@overload
	@staticmethod
	def getColor(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.awt.Color: ...
	@staticmethod
	def HSBtoRGB(arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[int, JInt]: ...
	def getColorSpace(self, ) -> javawrappers.java.awt.color.ColorSpace: ...
	def getBlue(self, ) -> Union[int, JInt]: ...
	def getTransparency(self, ) -> Union[int, JInt]: ...
	def getRGBColorComponents(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def getGreen(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ChartMouseListener:
	def chartMouseMoved(self, arg0: javawrappers.org.jfree.chart.ChartMouseEvent, ) -> None: ...
	def chartMouseClicked(self, arg0: javawrappers.org.jfree.chart.ChartMouseEvent, ) -> None: ...


class ChartPanel:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], arg10: Union[int, JBoolean], arg11: Union[int, JBoolean], arg12: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], arg10: Union[int, JBoolean], arg11: Union[int, JBoolean], arg12: Union[int, JBoolean], arg13: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ): ...
	@overload
	def getLocation(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Point: ...
	@overload
	def getLocation(self, ) -> javawrappers.java.awt.Point: ...
	@overload
	def requestFocusInWindow(self, ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocusInWindow(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> Union[int, JBoolean]: ...
	def doSaveAs(self, ) -> None: ...
	def getInputVerifier(self, ) -> javawrappers.javax.swing.InputVerifier: ...
	def mouseDragged(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def isOpaque(self, ) -> Union[int, JBoolean]: ...
	def createChartPrintJob(self, ) -> None: ...
	def setDoubleBuffered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def paint(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getInputMethodListeners(self, ) -> JArray(javawrappers.java.awt.event.InputMethodListener, 1): ...
	def setLayout(self, arg0: javawrappers.java.awt.LayoutManager, ) -> None: ...
	def zoomOutBoth(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getZoomFillPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def mouseDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getInputMethodRequests(self, ) -> javawrappers.java.awt.im.InputMethodRequests: ...
	def requestDefaultFocus(self, ) -> Union[int, JBoolean]: ...
	def getZoomOutlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def addHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def removeAll(self, ) -> None: ...
	def getInitialDelay(self, ) -> Union[int, JInt]: ...
	def getMinimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getAlignmentY(self, ) -> Union[float, JFloat]: ...
	def setAutoscrolls(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEnforceFileExtensions(self, arg0: Union[int, JBoolean], ) -> None: ...
	def mouseMoved(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getAlignmentX(self, ) -> Union[float, JFloat]: ...
	def setAlignmentY(self, arg0: Union[float, JFloat], ) -> None: ...
	def dispatchEvent(self, arg0: javawrappers.java.awt.AWTEvent, ) -> None: ...
	def isOptimizedDrawingEnabled(self, ) -> Union[int, JBoolean]: ...
	def restoreAutoRangeBounds(self, ) -> None: ...
	def paintComponent(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setAlignmentX(self, arg0: Union[float, JFloat], ) -> None: ...
	def postEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.Point, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> javawrappers.java.awt.Dimension: ...
	def unregisterKeyboardAction(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> None: ...
	def mouseUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def enableInputMethods(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def addComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def doCopy(self, ) -> None: ...
	def removeInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def getClientProperty(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def removeHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def setDisplayToolTips(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isRangeZoomable(self, ) -> Union[int, JBoolean]: ...
	def isRequestFocusEnabled(self, ) -> Union[int, JBoolean]: ...
	def getFontMetrics(self, arg0: javawrappers.java.awt.Font, ) -> javawrappers.java.awt.FontMetrics: ...
	def mouseReleased(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def setChart(self, arg0: javawrappers.org.jfree.chart.JFreeChart, ) -> None: ...
	def getAncestorListeners(self, ) -> JArray(javawrappers.javax.swing.event.AncestorListener, 1): ...
	def setVerticalAxisTrace(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getIgnoreRepaint(self, ) -> Union[int, JBoolean]: ...
	def getBaselineResizeBehavior(self, ) -> javawrappers.java.awt.Component.BaselineResizeBehavior: ...
	def removeMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def overlayChanged(self, arg0: javawrappers.org.jfree.chart.event.OverlayChangeEvent, ) -> None: ...
	def applyComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def validate(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.awt.Container: ...
	def isMinimumSizeSet(self, ) -> Union[int, JBoolean]: ...
	def getMinimumDrawHeight(self, ) -> Union[int, JInt]: ...
	def setComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def getVerifyInputWhenFocusTarget(self, ) -> Union[int, JBoolean]: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def setZoomInFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getChartRenderingInfo(self, ) -> javawrappers.org.jfree.chart.ChartRenderingInfo: ...
	def isValidateRoot(self, ) -> Union[int, JBoolean]: ...
	def addNotify(self, ) -> None: ...
	def zoomInDomain(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def addInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFocusCycleRootAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def getToolTipLocation(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.awt.Point: ...
	def setFocusTraversalPolicyProvider(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getConditionForKeyStroke(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setToolTipText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def countComponents(self, ) -> Union[int, JInt]: ...
	def isFocusTraversable(self, ) -> Union[int, JBoolean]: ...
	def setMinimumDrawHeight(self, arg0: Union[int, JInt], ) -> None: ...
	def inside(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def setRangeZoomable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getInputContext(self, ) -> javawrappers.java.awt.im.InputContext: ...
	def nextFocus(self, ) -> None: ...
	def getFocusTraversalKeys(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.Set: ...
	def isCursorSet(self, ) -> Union[int, JBoolean]: ...
	def setVerifyInputWhenFocusTarget(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getHorizontalAxisTrace(self, ) -> Union[int, JBoolean]: ...
	def setActionMap(self, arg0: javawrappers.javax.swing.ActionMap, ) -> None: ...
	def getZoomAroundAnchor(self, ) -> Union[int, JBoolean]: ...
	def getMouseWheelListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseWheelListener, 1): ...
	def getComponents(self, ) -> JArray(javawrappers.java.awt.Component, 1): ...
	def setInputVerifier(self, arg0: javawrappers.javax.swing.InputVerifier, ) -> None: ...
	def removeMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def doLayout(self, ) -> None: ...
	def getNextFocusableComponent(self, ) -> javawrappers.java.awt.Component: ...
	def doEditChartProperties(self, ) -> None: ...
	def setZoomTriggerDistance(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.PopupMenu, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def zoomOutRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def putClientProperty(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setFocusCycleRoot(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getZoomTriggerDistance(self, ) -> Union[int, JInt]: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setNextFocusableComponent(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	def zoomInRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setDropTarget(self, arg0: javawrappers.java.awt.dnd.DropTarget, ) -> None: ...
	@overload
	def list(self, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, arg1: Union[int, JInt], ) -> None: ...
	def revalidate(self, ) -> None: ...
	def createToolTip(self, ) -> javawrappers.javax.swing.JToolTip: ...
	def getDismissDelay(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultLocale(arg0: javawrappers.java.util.Locale, ) -> None: ...
	def removeNotify(self, ) -> None: ...
	def translateScreenToJava2D(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.geom.Point2D: ...
	def gotFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def chartChanged(self, arg0: javawrappers.org.jfree.chart.event.ChartChangeEvent, ) -> None: ...
	def removeAncestorListener(self, arg0: javawrappers.javax.swing.event.AncestorListener, ) -> None: ...
	def scrollRectToVisible(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getRegisteredKeyStrokes(self, ) -> JArray(javawrappers.javax.swing.KeyStroke, 1): ...
	def handleEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isForegroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def show(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def show(self, ) -> None: ...
	@overload
	def getScreenDataArea(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def getScreenDataArea(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def update(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def isFocusTraversalPolicySet(self, ) -> Union[int, JBoolean]: ...
	def getUIClassID(self, ) -> javawrappers.java.lang.String: ...
	def setMaximumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def getMinimumDrawWidth(self, ) -> Union[int, JInt]: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.MenuComponent, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	def addMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def imageUpdate(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def setRefreshBuffer(self, arg0: Union[int, JBoolean], ) -> None: ...
	def actionPerformed(self, arg0: javawrappers.java.awt.event.ActionEvent, ) -> None: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	def getLayout(self, ) -> javawrappers.java.awt.LayoutManager: ...
	def addChartMouseListener(self, arg0: javawrappers.org.jfree.chart.ChartMouseListener, ) -> None: ...
	def addKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def getContainerListeners(self, ) -> JArray(javawrappers.java.awt.event.ContainerListener, 1): ...
	def removeChartMouseListener(self, arg0: javawrappers.org.jfree.chart.ChartMouseListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getComponentListeners(self, ) -> JArray(javawrappers.java.awt.event.ComponentListener, 1): ...
	def isMaximumSizeSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addOverlay(self, arg0: javawrappers.org.jfree.chart.panel.Overlay, ) -> None: ...
	def getCursor(self, ) -> javawrappers.java.awt.Cursor: ...
	def getZoomInFactor(self, ) -> Union[float, JDouble]: ...
	@overload
	def createImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Image: ...
	@overload
	def createImage(self, arg0: javawrappers.java.awt.image.ImageProducer, ) -> javawrappers.java.awt.Image: ...
	def mouseMove(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def areFocusTraversalKeysSet(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getKeyListeners(self, ) -> JArray(javawrappers.java.awt.event.KeyListener, 1): ...
	@overload
	def registerKeyboardAction(self, arg0: javawrappers.java.awt.event.ActionListener, arg1: javawrappers.javax.swing.KeyStroke, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def registerKeyboardAction(self, arg0: javawrappers.java.awt.event.ActionListener, arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.swing.KeyStroke, arg3: Union[int, JInt], ) -> None: ...
	def setPopupMenu(self, arg0: javawrappers.javax.swing.JPopupMenu, ) -> None: ...
	def addAncestorListener(self, arg0: javawrappers.javax.swing.event.AncestorListener, ) -> None: ...
	def getMaximumDrawWidth(self, ) -> Union[int, JInt]: ...
	def layout(self, ) -> None: ...
	def getComponentPopupMenu(self, ) -> javawrappers.javax.swing.JPopupMenu: ...
	def getBaseline(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setUI(self, arg0: javawrappers.javax.swing.plaf.PanelUI, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.awt.Graphics, arg1: javawrappers.java.awt.print.PageFormat, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def paintComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def setBorder(self, arg0: javawrappers.javax.swing.border.Border, ) -> None: ...
	def setMaximumDrawHeight(self, arg0: Union[int, JInt], ) -> None: ...
	def getFocusListeners(self, ) -> JArray(javawrappers.java.awt.event.FocusListener, 1): ...
	@overload
	def resize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def resize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.VolatileImage: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.ImageCapabilities, ) -> javawrappers.java.awt.image.VolatileImage: ...
	def location(self, ) -> javawrappers.java.awt.Point: ...
	def lostFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDomainZoomable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def keyDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDropTarget(self, ) -> javawrappers.java.awt.dnd.DropTarget: ...
	def getTransferHandler(self, ) -> javawrappers.javax.swing.TransferHandler: ...
	def getMaximumDrawHeight(self, ) -> Union[int, JInt]: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getHierarchyBoundsListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyBoundsListener, 1): ...
	def getRootPane(self, ) -> javawrappers.javax.swing.JRootPane: ...
	def getAutoscrolls(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.Rectangle: ...
	def setPreferredSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def setInputMap(self, arg0: Union[int, JInt], arg1: javawrappers.javax.swing.InputMap, ) -> None: ...
	def setZoomOutlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def enable(self, ) -> None: ...
	@overload
	def enable(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def paintImmediately(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def paintImmediately(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	@overload
	def getMousePosition(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.awt.Point: ...
	@overload
	def getMousePosition(self, ) -> javawrappers.java.awt.Point: ...
	def isManagingFocus(self, ) -> Union[int, JBoolean]: ...
	def setZoomOutFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def action(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDismissDelay(self, arg0: Union[int, JInt], ) -> None: ...
	def removeOverlay(self, arg0: javawrappers.org.jfree.chart.panel.Overlay, ) -> None: ...
	def addContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def setComponentZOrder(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[string, JString], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: JByte, arg2: JByte, ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], arg2: Union[int, JShort], ) -> None: ...
	def addMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def getComponentOrientation(self, ) -> javawrappers.java.awt.ComponentOrientation: ...
	def setFocusable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTreeLock(self, ) -> javawrappers.java.lang.Object: ...
	def addHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def isBackgroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def findComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def findComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setOpaque(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setMouseZoomable(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setMouseZoomable(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	def setComponentPopupMenu(self, arg0: javawrappers.javax.swing.JPopupMenu, ) -> None: ...
	def setEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isLightweight(self, ) -> Union[int, JBoolean]: ...
	def setTransferHandler(self, arg0: javawrappers.javax.swing.TransferHandler, ) -> None: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def minimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def bounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def repaint(self, ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def repaint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def repaint(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getMouseMotionListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseMotionListener, 1): ...
	def setMinimumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def transferFocus(self, ) -> None: ...
	def printComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	@overload
	def getInputMap(self, ) -> javawrappers.javax.swing.InputMap: ...
	@overload
	def getInputMap(self, arg0: Union[int, JInt], ) -> javawrappers.javax.swing.InputMap: ...
	def getListeners(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.util.EventListener, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setRequestFocusEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def mouseExited(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def isMouseWheelEnabled(self, ) -> Union[int, JBoolean]: ...
	def getLocationOnScreen(self, ) -> javawrappers.java.awt.Point: ...
	def keyUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def chartProgress(self, arg0: javawrappers.org.jfree.chart.event.ChartProgressEvent, ) -> None: ...
	def setFocusTraversalPolicy(self, arg0: javawrappers.java.awt.FocusTraversalPolicy, ) -> None: ...
	def restoreAutoBounds(self, ) -> None: ...
	def isEnforceFileExtensions(self, ) -> Union[int, JBoolean]: ...
	def paintAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def mouseEntered(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def setFocusTraversalKeys(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Set, ) -> None: ...
	def setDebugGraphicsOptions(self, arg0: Union[int, JInt], ) -> None: ...
	def isPaintingTile(self, ) -> Union[int, JBoolean]: ...
	def getVerticalAxisTrace(self, ) -> Union[int, JBoolean]: ...
	def hasFocus(self, ) -> Union[int, JBoolean]: ...
	def isPreferredSizeSet(self, ) -> Union[int, JBoolean]: ...
	def setHorizontalAxisTrace(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isDoubleBuffered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPropertyChangeListeners(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	@overload
	def getPropertyChangeListeners(self, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getInsets(self, ) -> javawrappers.java.awt.Insets: ...
	@overload
	def getInsets(self, arg0: javawrappers.java.awt.Insets, ) -> javawrappers.java.awt.Insets: ...
	def getFocusTraversalKeysEnabled(self, ) -> Union[int, JBoolean]: ...
	def getZoomOutFactor(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getDefaultLocale() -> javawrappers.java.util.Locale: ...
	def setInitialDelay(self, arg0: Union[int, JInt], ) -> None: ...
	def hide(self, ) -> None: ...
	def getAnchor(self, ) -> javawrappers.java.awt.geom.Point2D: ...
	def getPreferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def disable(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	def isFocusable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getToolTipText(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def getToolTipText(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getBorder(self, ) -> javawrappers.javax.swing.border.Border: ...
	def isPaintingForPrint(self, ) -> Union[int, JBoolean]: ...
	def insets(self, ) -> javawrappers.java.awt.Insets: ...
	def zoomOutDomain(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setMixingCutoutShape(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setZoomAroundAnchor(self, arg0: Union[int, JBoolean], ) -> None: ...
	def mouseExit(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def mousePressed(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getHierarchyListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyListener, 1): ...
	def computeVisibleRect(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def isShowing(self, ) -> Union[int, JBoolean]: ...
	def mouseEnter(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def mouseDrag(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def preferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getMouseListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseListener, 1): ...
	def getEntityForPoint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.chart.entity.ChartEntity: ...
	def setFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setInheritsPopupMenu(self, arg0: Union[int, JBoolean], ) -> None: ...
	def deliverEvent(self, arg0: javawrappers.java.awt.Event, ) -> None: ...
	def getActionMap(self, ) -> javawrappers.javax.swing.ActionMap: ...
	def getForeground(self, ) -> javawrappers.java.awt.Color: ...
	def isAncestorOf(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def getComponentCount(self, ) -> Union[int, JInt]: ...
	def getScaleY(self, ) -> Union[float, JDouble]: ...
	@overload
	def getUI(self, ) -> javawrappers.javax.swing.plaf.PanelUI: ...
	@overload
	def getUI(self, ) -> javawrappers.javax.swing.plaf.ComponentUI: ...
	def getScaleX(self, ) -> Union[float, JDouble]: ...
	def getTopLevelAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def mouseClicked(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getActionForKeyStroke(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> javawrappers.java.awt.event.ActionListener: ...
	def grabFocus(self, ) -> None: ...
	def getPopupLocation(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.awt.Point: ...
	def getFont(self, ) -> javawrappers.java.awt.Font: ...
	def setCursor(self, arg0: javawrappers.java.awt.Cursor, ) -> None: ...
	def translateJava2DToScreen(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Point: ...
	def getDefaultDirectoryForSaveAs(self, ) -> javawrappers.java.io.File: ...
	def isDisplayable(self, ) -> Union[int, JBoolean]: ...
	def getGraphicsConfiguration(self, ) -> javawrappers.java.awt.GraphicsConfiguration: ...
	def getComponent(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def restoreAutoDomainBounds(self, ) -> None: ...
	def removeComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	@overload
	def requestFocus(self, ) -> None: ...
	@overload
	def requestFocus(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocus(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def locate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def addFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def getFillZoomRectangle(self, ) -> Union[int, JBoolean]: ...
	def getPopupMenu(self, ) -> javawrappers.javax.swing.JPopupMenu: ...
	def getInheritsPopupMenu(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def getComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def updateUI(self, ) -> None: ...
	def scale(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def isFocusCycleRoot(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isFocusCycleRoot(self, arg0: javawrappers.java.awt.Container, ) -> Union[int, JBoolean]: ...
	def resetKeyboardActions(self, ) -> None: ...
	def setFocusTraversalKeysEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getComponentZOrder(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JInt]: ...
	def getReshowDelay(self, ) -> Union[int, JInt]: ...
	def setBackground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def printAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getToolkit(self, ) -> javawrappers.java.awt.Toolkit: ...
	def getVetoableChangeListeners(self, ) -> JArray(javawrappers.java.beans.VetoableChangeListener, 1): ...
	def transferFocusUpCycle(self, ) -> None: ...
	def isFontSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def getRefreshBuffer(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.Point, ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def isFocusTraversalPolicyProvider(self, ) -> Union[int, JBoolean]: ...
	def setMinimumDrawWidth(self, arg0: Union[int, JInt], ) -> None: ...
	def setMaximumDrawWidth(self, arg0: Union[int, JInt], ) -> None: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def removeFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def setIgnoreRepaint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getVisibleRect(self, ) -> javawrappers.java.awt.Rectangle: ...
	def isDomainZoomable(self, ) -> Union[int, JBoolean]: ...
	def transferFocusBackward(self, ) -> None: ...
	def move(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def transferFocusDownCycle(self, ) -> None: ...
	def setReshowDelay(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def isLightweightComponent(arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def setForeground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def setMouseWheelEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setZoomFillPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def zoom(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	def invalidate(self, ) -> None: ...
	def setFillZoomRectangle(self, arg0: Union[int, JBoolean], ) -> None: ...
	def zoomInBoth(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getAccessibleContext(self, ) -> javawrappers.javax.accessibility.AccessibleContext: ...
	def isFocusOwner(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSize(self, arg0: javawrappers.java.awt.Dimension, ) -> javawrappers.java.awt.Dimension: ...
	@overload
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getX(self, ) -> Union[int, JInt]: ...
	def removeHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def getY(self, ) -> Union[int, JInt]: ...
	def setDefaultDirectoryForSaveAs(self, arg0: javawrappers.java.io.File, ) -> None: ...
	def getFocusTraversalPolicy(self, ) -> javawrappers.java.awt.FocusTraversalPolicy: ...
	def removeMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...
	def getBackground(self, ) -> javawrappers.java.awt.Color: ...
	def getDebugGraphicsOptions(self, ) -> Union[int, JInt]: ...
	def addMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...


class ChartFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def createStackedBarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createStackedBarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def createTimeSeriesChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createTimeSeriesChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def createStackedXYAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.TableXYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createStackedXYAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.TableXYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def getChartTheme() -> javawrappers.org.jfree.chart.ChartTheme: ...
	@overload
	@staticmethod
	def createXYBarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.jfree.data.xy.IntervalXYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYBarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.jfree.data.xy.IntervalXYDataset, arg5: javawrappers.org.jfree.chart.plot.PlotOrientation, arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createStackedAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createStackedAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYStepAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYStepAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createWindPlot(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.WindDataset, arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createPolarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.xy.XYDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYStepChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYStepChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createMultiplePieChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.category.CategoryDataset, arg2: javawrappers.org.jfree.chart.util.TableOrder, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createWaferMapChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.WaferMapDataset, arg2: javawrappers.org.jfree.chart.plot.PlotOrientation, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart3D(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart3D(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart3D(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createRingChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createRingChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYLineChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYLineChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createLineChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createLineChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createHighLowChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.OHLCDataset, arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createBoxAndWhiskerChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.statistics.BoxAndWhiskerXYDataset, arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createBoxAndWhiskerChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.statistics.BoxAndWhiskerCategoryDataset, arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: javawrappers.org.jfree.data.general.PieDataset, arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createPieChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.general.PieDataset, arg2: javawrappers.org.jfree.data.general.PieDataset, arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: javawrappers.java.util.Locale, arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createWaterfallChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createMultiplePieChart3D(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.category.CategoryDataset, arg2: javawrappers.org.jfree.chart.util.TableOrder, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createXYAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createAreaChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createBubbleChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYZDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createBubbleChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYZDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createBarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createBarChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createScatterPlot(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createScatterPlot(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.XYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createHistogram(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.IntervalXYDataset, arg4: javawrappers.org.jfree.chart.plot.PlotOrientation, arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createHistogram(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.IntervalXYDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createGanttChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.IntervalCategoryDataset, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@overload
	@staticmethod
	def createGanttChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.category.IntervalCategoryDataset, arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	@staticmethod
	def createCandlestickChart(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.data.xy.OHLCDataset, arg4: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setChartTheme(arg0: javawrappers.org.jfree.chart.ChartTheme, ) -> None: ...


class ChartTheme:
	def apply(self, arg0: javawrappers.org.jfree.chart.JFreeChart, ) -> None: ...


class ChartFrame:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.chart.JFreeChart, ): ...
	@overload
	def getLocation(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Point: ...
	@overload
	def getLocation(self, ) -> javawrappers.java.awt.Point: ...
	@overload
	def requestFocusInWindow(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocusInWindow(self, ) -> Union[int, JBoolean]: ...
	def isOpaque(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getFrames() -> JArray(javawrappers.java.awt.Frame, 1): ...
	def setModalExclusionType(self, arg0: javawrappers.java.awt.Dialog.ModalExclusionType, ) -> None: ...
	def paint(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def removeWindowListener(self, arg0: javawrappers.java.awt.event.WindowListener, ) -> None: ...
	def getInputMethodListeners(self, ) -> JArray(javawrappers.java.awt.event.InputMethodListener, 1): ...
	def setLayout(self, arg0: javawrappers.java.awt.LayoutManager, ) -> None: ...
	def mouseDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getOwner(self, ) -> javawrappers.java.awt.Window: ...
	def getInputMethodRequests(self, ) -> javawrappers.java.awt.im.InputMethodRequests: ...
	def addHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def removeAll(self, ) -> None: ...
	def getMinimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getAlignmentY(self, ) -> Union[float, JFloat]: ...
	def getWindowStateListeners(self, ) -> JArray(javawrappers.java.awt.event.WindowStateListener, 1): ...
	def getAlignmentX(self, ) -> Union[float, JFloat]: ...
	def dispatchEvent(self, arg0: javawrappers.java.awt.AWTEvent, ) -> None: ...
	def setFocusableWindowState(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMostRecentFocusOwner(self, ) -> javawrappers.java.awt.Component: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def pack(self, ) -> None: ...
	def toBack(self, ) -> None: ...
	def postEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	@overload
	def createBufferStrategy(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.BufferCapabilities, ) -> None: ...
	@overload
	def createBufferStrategy(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.Point, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> javawrappers.java.awt.Dimension: ...
	def getType(self, ) -> javawrappers.java.awt.Window.Type: ...
	def mouseUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def enableInputMethods(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLayeredPane(self, arg0: javawrappers.javax.swing.JLayeredPane, ) -> None: ...
	def removeContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def addComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def removeInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	@staticmethod
	def setDefaultLookAndFeelDecorated(arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximizedBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def removeHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def removeWindowFocusListener(self, arg0: javawrappers.java.awt.event.WindowFocusListener, ) -> None: ...
	def getFontMetrics(self, arg0: javawrappers.java.awt.Font, ) -> javawrappers.java.awt.FontMetrics: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def getIgnoreRepaint(self, ) -> Union[int, JBoolean]: ...
	def getBaselineResizeBehavior(self, ) -> javawrappers.java.awt.Component.BaselineResizeBehavior: ...
	def removeMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def applyComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def isAlwaysOnTopSupported(self, ) -> Union[int, JBoolean]: ...
	def validate(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.awt.Container: ...
	def isMinimumSizeSet(self, ) -> Union[int, JBoolean]: ...
	def getWindowFocusListeners(self, ) -> JArray(javawrappers.java.awt.event.WindowFocusListener, 1): ...
	def setComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	@overload
	def setBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	@staticmethod
	def getWindows() -> JArray(javawrappers.java.awt.Window, 1): ...
	def isValidateRoot(self, ) -> Union[int, JBoolean]: ...
	def addNotify(self, ) -> None: ...
	def addInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFocusCycleRootAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def setFocusTraversalPolicyProvider(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addWindowFocusListener(self, arg0: javawrappers.java.awt.event.WindowFocusListener, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def countComponents(self, ) -> Union[int, JInt]: ...
	def isFocusTraversable(self, ) -> Union[int, JBoolean]: ...
	def inside(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def nextFocus(self, ) -> None: ...
	def getFocusTraversalKeys(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.Set: ...
	def getInputContext(self, ) -> javawrappers.java.awt.im.InputContext: ...
	def isCursorSet(self, ) -> Union[int, JBoolean]: ...
	def setMenuBar(self, arg0: javawrappers.java.awt.MenuBar, ) -> None: ...
	def getMouseWheelListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseWheelListener, 1): ...
	def getComponents(self, ) -> JArray(javawrappers.java.awt.Component, 1): ...
	def removeMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def doLayout(self, ) -> None: ...
	def isLocationByPlatform(self, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.PopupMenu, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def setFocusCycleRoot(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isResizable(self, ) -> Union[int, JBoolean]: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setDropTarget(self, arg0: javawrappers.java.awt.dnd.DropTarget, ) -> None: ...
	@overload
	def list(self, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, arg1: Union[int, JInt], ) -> None: ...
	def isFocused(self, ) -> Union[int, JBoolean]: ...
	def revalidate(self, ) -> None: ...
	def removeWindowStateListener(self, arg0: javawrappers.java.awt.event.WindowStateListener, ) -> None: ...
	def setContentPane(self, arg0: javawrappers.java.awt.Container, ) -> None: ...
	def removeNotify(self, ) -> None: ...
	def getWarningString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getOwnerlessWindows() -> JArray(javawrappers.java.awt.Window, 1): ...
	def gotFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def handleEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isForegroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def show(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def show(self, ) -> None: ...
	def getShape(self, ) -> javawrappers.java.awt.Shape: ...
	def update(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def isFocusTraversalPolicySet(self, ) -> Union[int, JBoolean]: ...
	def setMaximumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.MenuComponent, ) -> None: ...
	def addMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def imageUpdate(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	def getLayout(self, ) -> javawrappers.java.awt.LayoutManager: ...
	def addKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def getContainerListeners(self, ) -> JArray(javawrappers.java.awt.event.ContainerListener, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getComponentListeners(self, ) -> JArray(javawrappers.java.awt.event.ComponentListener, 1): ...
	def getLayeredPane(self, ) -> javawrappers.javax.swing.JLayeredPane: ...
	def isMaximumSizeSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getWindowListeners(self, ) -> JArray(javawrappers.java.awt.event.WindowListener, 1): ...
	def getCursorType(self, ) -> Union[int, JInt]: ...
	def getCursor(self, ) -> javawrappers.java.awt.Cursor: ...
	@overload
	def createImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Image: ...
	@overload
	def createImage(self, arg0: javawrappers.java.awt.image.ImageProducer, ) -> javawrappers.java.awt.Image: ...
	def mouseMove(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def areFocusTraversalKeysSet(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getKeyListeners(self, ) -> JArray(javawrappers.java.awt.event.KeyListener, 1): ...
	def getContentPane(self, ) -> javawrappers.java.awt.Container: ...
	def setType(self, arg0: javawrappers.java.awt.Window.Type, ) -> None: ...
	def layout(self, ) -> None: ...
	def setExtendedState(self, arg0: Union[int, JInt], ) -> None: ...
	def getBaseline(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def print_(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def paintComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getFocusListeners(self, ) -> JArray(javawrappers.java.awt.event.FocusListener, 1): ...
	@overload
	def resize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def resize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.VolatileImage: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.ImageCapabilities, ) -> javawrappers.java.awt.image.VolatileImage: ...
	def isAutoRequestFocus(self, ) -> Union[int, JBoolean]: ...
	def setState(self, arg0: Union[int, JInt], ) -> None: ...
	def location(self, ) -> javawrappers.java.awt.Point: ...
	def lostFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDropTarget(self, ) -> javawrappers.java.awt.dnd.DropTarget: ...
	def getTransferHandler(self, ) -> javawrappers.javax.swing.TransferHandler: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def setGlassPane(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	def setOpacity(self, arg0: Union[float, JFloat], ) -> None: ...
	def getIconImage(self, ) -> javawrappers.java.awt.Image: ...
	def getHierarchyBoundsListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyBoundsListener, 1): ...
	def getRootPane(self, ) -> javawrappers.javax.swing.JRootPane: ...
	@overload
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.Rectangle: ...
	def setPreferredSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def getJMenuBar(self, ) -> javawrappers.javax.swing.JMenuBar: ...
	@overload
	def enable(self, ) -> None: ...
	@overload
	def enable(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def getMousePosition(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.awt.Point: ...
	@overload
	def getMousePosition(self, ) -> javawrappers.java.awt.Point: ...
	def action(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIconImages(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def setDefaultCloseOperation(self, arg0: Union[int, JInt], ) -> None: ...
	def addContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def setComponentZOrder(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: JByte, arg2: JByte, ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[string, JString], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], arg2: Union[int, JShort], ) -> None: ...
	def addMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	@staticmethod
	def isDefaultLookAndFeelDecorated() -> Union[int, JBoolean]: ...
	def getComponentOrientation(self, ) -> javawrappers.java.awt.ComponentOrientation: ...
	def setFocusable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTreeLock(self, ) -> javawrappers.java.lang.Object: ...
	def addHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def isBackgroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def findComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def findComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setLocationByPlatform(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isLightweight(self, ) -> Union[int, JBoolean]: ...
	def setTransferHandler(self, arg0: javawrappers.javax.swing.TransferHandler, ) -> None: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def minimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def bounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def repaint(self, ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def repaint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def getMouseMotionListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseMotionListener, 1): ...
	def getModalExclusionType(self, ) -> javawrappers.java.awt.Dialog.ModalExclusionType: ...
	def setMinimumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def transferFocus(self, ) -> None: ...
	def printComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getListeners(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.util.EventListener, 1): ...
	def setJMenuBar(self, arg0: javawrappers.javax.swing.JMenuBar, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaximumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getLocationOnScreen(self, ) -> javawrappers.java.awt.Point: ...
	def keyUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setFocusTraversalPolicy(self, arg0: javawrappers.java.awt.FocusTraversalPolicy, ) -> None: ...
	def addWindowListener(self, arg0: javawrappers.java.awt.event.WindowListener, ) -> None: ...
	def paintAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def setFocusTraversalKeys(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Set, ) -> None: ...
	def hasFocus(self, ) -> Union[int, JBoolean]: ...
	def isPreferredSizeSet(self, ) -> Union[int, JBoolean]: ...
	def addWindowStateListener(self, arg0: javawrappers.java.awt.event.WindowStateListener, ) -> None: ...
	def getFocusableWindowState(self, ) -> Union[int, JBoolean]: ...
	def getIconImages(self, ) -> javawrappers.java.util.List: ...
	def isDoubleBuffered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPropertyChangeListeners(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	@overload
	def getPropertyChangeListeners(self, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def getChartPanel(self, ) -> javawrappers.org.jfree.chart.ChartPanel: ...
	def getInsets(self, ) -> javawrappers.java.awt.Insets: ...
	def getFocusTraversalKeysEnabled(self, ) -> Union[int, JBoolean]: ...
	def hide(self, ) -> None: ...
	def getPreferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def setUndecorated(self, arg0: Union[int, JBoolean], ) -> None: ...
	def disable(self, ) -> None: ...
	def isUndecorated(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	def isFocusableWindow(self, ) -> Union[int, JBoolean]: ...
	def isFocusable(self, ) -> Union[int, JBoolean]: ...
	def setLocationRelativeTo(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def insets(self, ) -> javawrappers.java.awt.Insets: ...
	def setIconImage(self, arg0: javawrappers.java.awt.Image, ) -> None: ...
	def setMixingCutoutShape(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isActive(self, ) -> Union[int, JBoolean]: ...
	def getMenuBar(self, ) -> javawrappers.java.awt.MenuBar: ...
	def mouseExit(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getHierarchyListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyListener, 1): ...
	def getOpacity(self, ) -> Union[float, JFloat]: ...
	def isShowing(self, ) -> Union[int, JBoolean]: ...
	def mouseEnter(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def mouseDrag(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def preferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getDefaultCloseOperation(self, ) -> Union[int, JInt]: ...
	def getMouseListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseListener, 1): ...
	def setFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setAutoRequestFocus(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toFront(self, ) -> None: ...
	def getGlassPane(self, ) -> javawrappers.java.awt.Component: ...
	def deliverEvent(self, arg0: javawrappers.java.awt.Event, ) -> None: ...
	def getForeground(self, ) -> javawrappers.java.awt.Color: ...
	def isAncestorOf(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def getComponentCount(self, ) -> Union[int, JInt]: ...
	def getExtendedState(self, ) -> Union[int, JInt]: ...
	def getFont(self, ) -> javawrappers.java.awt.Font: ...
	def dispose(self, ) -> None: ...
	@overload
	def setCursor(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setCursor(self, arg0: javawrappers.java.awt.Cursor, ) -> None: ...
	def isDisplayable(self, ) -> Union[int, JBoolean]: ...
	def getGraphicsConfiguration(self, ) -> javawrappers.java.awt.GraphicsConfiguration: ...
	def getComponent(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def removeComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	@overload
	def requestFocus(self, ) -> None: ...
	@overload
	def requestFocus(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> None: ...
	def locate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def addFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	@overload
	def getComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def getComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def isAlwaysOnTop(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isFocusCycleRoot(self, arg0: javawrappers.java.awt.Container, ) -> Union[int, JBoolean]: ...
	@overload
	def isFocusCycleRoot(self, ) -> Union[int, JBoolean]: ...
	def setFocusTraversalKeysEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getComponentZOrder(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JInt]: ...
	def setBackground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def printAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getToolkit(self, ) -> javawrappers.java.awt.Toolkit: ...
	def transferFocusUpCycle(self, ) -> None: ...
	def isFontSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def setSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def isFocusTraversalPolicyProvider(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.Point, ) -> None: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def removeFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def setIgnoreRepaint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def transferFocusBackward(self, ) -> None: ...
	def getOwnedWindows(self, ) -> JArray(javawrappers.java.awt.Window, 1): ...
	def setMaximizedBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def move(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def transferFocusDownCycle(self, ) -> None: ...
	@overload
	def applyResourceBundle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def applyResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def setResizable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setForeground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def invalidate(self, ) -> None: ...
	def getBufferStrategy(self, ) -> javawrappers.java.awt.image.BufferStrategy: ...
	def getAccessibleContext(self, ) -> javawrappers.javax.accessibility.AccessibleContext: ...
	def setShape(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isFocusOwner(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	@overload
	def getSize(self, arg0: javawrappers.java.awt.Dimension, ) -> javawrappers.java.awt.Dimension: ...
	def getX(self, ) -> Union[int, JInt]: ...
	def removeHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def getY(self, ) -> Union[int, JInt]: ...
	def getState(self, ) -> Union[int, JInt]: ...
	def getFocusTraversalPolicy(self, ) -> javawrappers.java.awt.FocusTraversalPolicy: ...
	def setAlwaysOnTop(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFocusOwner(self, ) -> javawrappers.java.awt.Component: ...
	def removeMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...
	def getBackground(self, ) -> javawrappers.java.awt.Color: ...
	def addMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...


class HashUtils:
	def __init__(self, ): ...
	@staticmethod
	def hashCodeForDoubleArray(arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.util.BooleanList, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.util.PaintList, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.util.StrokeList, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.java.awt.Paint, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: Union[int, JInt], arg1: javawrappers.java.awt.Stroke, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def hashCodeForPaint(arg0: javawrappers.java.awt.Paint, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class ChartTransferable:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isDataFlavorSupported(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTransferData(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> javawrappers.java.lang.Object: ...
	def getTransferDataFlavors(self, ) -> JArray(javawrappers.java.awt.datatransfer.DataFlavor, 1): ...
	def notify(self, ) -> None: ...


class LegendItemCollection:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.org.jfree.chart.LegendItem, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def addAll(self, arg0: javawrappers.org.jfree.chart.LegendItemCollection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.LegendItem: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PaintMap:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def containsKey(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPaint(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Paint: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Paint, ) -> None: ...


class ChartUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def writeBufferedImageAsJPEG(arg0: javawrappers.java.io.OutputStream, arg1: Union[float, JFloat], arg2: javawrappers.java.awt.image.BufferedImage, ) -> None: ...
	@overload
	@staticmethod
	def writeBufferedImageAsJPEG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.awt.image.BufferedImage, ) -> None: ...
	@overload
	@staticmethod
	def getImageMap(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getImageMap(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.chart.ChartRenderingInfo, arg2: javawrappers.org.jfree.chart.imagemap.ToolTipTagFragmentGenerator, arg3: javawrappers.org.jfree.chart.imagemap.URLTagFragmentGenerator, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeChartAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, arg5: Union[int, JBoolean], arg6: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsPNG(arg0: javawrappers.java.io.File, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, arg5: Union[int, JBoolean], arg6: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsPNG(arg0: javawrappers.java.io.File, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsPNG(arg0: javawrappers.java.io.File, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsJPEG(arg0: javawrappers.java.io.OutputStream, arg1: Union[float, JFloat], arg2: javawrappers.org.jfree.chart.JFreeChart, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsJPEG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsJPEG(arg0: javawrappers.java.io.OutputStream, arg1: Union[float, JFloat], arg2: javawrappers.org.jfree.chart.JFreeChart, arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeChartAsJPEG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsJPEG(arg0: javawrappers.java.io.File, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsJPEG(arg0: javawrappers.java.io.File, arg1: Union[float, JFloat], arg2: javawrappers.org.jfree.chart.JFreeChart, arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsJPEG(arg0: javawrappers.java.io.File, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@overload
	@staticmethod
	def saveChartAsJPEG(arg0: javawrappers.java.io.File, arg1: Union[float, JFloat], arg2: javawrappers.org.jfree.chart.JFreeChart, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@staticmethod
	def writeScaledChartAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.jfree.chart.JFreeChart, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeImageMap(arg0: javawrappers.java.io.PrintWriter, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.jfree.chart.ChartRenderingInfo, arg3: javawrappers.org.jfree.chart.imagemap.ToolTipTagFragmentGenerator, arg4: javawrappers.org.jfree.chart.imagemap.URLTagFragmentGenerator, ) -> None: ...
	@overload
	@staticmethod
	def writeImageMap(arg0: javawrappers.java.io.PrintWriter, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.jfree.chart.ChartRenderingInfo, arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def encodeAsPNG(arg0: javawrappers.java.awt.image.BufferedImage, arg1: Union[int, JBoolean], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def encodeAsPNG(arg0: javawrappers.java.awt.image.BufferedImage, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeBufferedImageAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.awt.image.BufferedImage, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeBufferedImageAsPNG(arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.awt.image.BufferedImage, ) -> None: ...
	@staticmethod
	def applyCurrentTheme(arg0: javawrappers.org.jfree.chart.JFreeChart, ) -> None: ...


class ChartMouseEvent:
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: javawrappers.java.awt.event.MouseEvent, arg2: javawrappers.org.jfree.chart.entity.ChartEntity, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTrigger(self, ) -> javawrappers.java.awt.event.MouseEvent: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEntity(self, ) -> javawrappers.org.jfree.chart.entity.ChartEntity: ...
	def notify(self, ) -> None: ...


class ChartHints:
	class Key:
		def __init__(self, arg0: Union[int, JInt], ): ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LegendRenderingOrder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StrokeMap:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStroke(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Stroke: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def containsKey(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Stroke, ) -> None: ...


class LegendItem:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], arg5: javawrappers.java.awt.Shape, arg6: Union[int, JBoolean], arg7: javawrappers.java.awt.Paint, arg8: Union[int, JBoolean], arg9: javawrappers.java.awt.Paint, arg10: javawrappers.java.awt.Stroke, arg11: Union[int, JBoolean], arg12: javawrappers.java.awt.Shape, arg13: javawrappers.java.awt.Stroke, arg14: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.Shape, arg5: javawrappers.java.awt.Stroke, arg6: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.Shape, arg5: javawrappers.java.awt.Paint, arg6: javawrappers.java.awt.Stroke, arg7: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.Shape, arg5: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], arg5: javawrappers.java.awt.Shape, arg6: Union[int, JBoolean], arg7: javawrappers.java.awt.Paint, arg8: Union[int, JBoolean], arg9: javawrappers.java.awt.Paint, arg10: javawrappers.java.awt.Stroke, arg11: Union[int, JBoolean], arg12: javawrappers.java.awt.Shape, arg13: javawrappers.java.awt.Stroke, arg14: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.Shape, arg5: javawrappers.java.awt.Stroke, arg6: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.Shape, arg5: javawrappers.java.awt.Paint, arg6: javawrappers.java.awt.Stroke, arg7: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.Shape, arg5: javawrappers.java.awt.Paint, ): ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setToolTipText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setShapeVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isLineVisible(self, ) -> Union[int, JBoolean]: ...
	def setLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getDataset(self, ) -> javawrappers.org.jfree.data.general.Dataset: ...
	def getLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDatasetIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def setOutlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def isShapeOutlineVisible(self, ) -> Union[int, JBoolean]: ...
	def isShapeVisible(self, ) -> Union[int, JBoolean]: ...
	def setLine(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setFillPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getOutlineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def setURLText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setSeriesIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def getShape(self, ) -> javawrappers.java.awt.Shape: ...
	def getSeriesKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getURLText(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getSeriesIndex(self, ) -> Union[int, JInt]: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def getLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def setLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getFillPaintTransformer(self, ) -> javawrappers.org.jfree.chart.ui.GradientPaintTransformer: ...
	def isShapeFilled(self, ) -> Union[int, JBoolean]: ...
	def setFillPaintTransformer(self, arg0: javawrappers.org.jfree.chart.ui.GradientPaintTransformer, ) -> None: ...
	def getLine(self, ) -> javawrappers.java.awt.Shape: ...
	def getDatasetIndex(self, ) -> Union[int, JInt]: ...
	def getFillPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setSeriesKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def setOutlineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def setShape(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getOutlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDataset(self, arg0: javawrappers.org.jfree.data.general.Dataset, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getToolTipText(self, ) -> javawrappers.java.lang.String: ...


class PolarChartPanel:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.JFreeChart, ): ...
	@overload
	def getLocation(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Point: ...
	@overload
	def getLocation(self, ) -> javawrappers.java.awt.Point: ...
	@overload
	def requestFocusInWindow(self, ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocusInWindow(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> Union[int, JBoolean]: ...
	def doSaveAs(self, ) -> None: ...
	def getInputVerifier(self, ) -> javawrappers.javax.swing.InputVerifier: ...
	def mouseDragged(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def isOpaque(self, ) -> Union[int, JBoolean]: ...
	def createChartPrintJob(self, ) -> None: ...
	def setDoubleBuffered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def paint(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getInputMethodListeners(self, ) -> JArray(javawrappers.java.awt.event.InputMethodListener, 1): ...
	def setLayout(self, arg0: javawrappers.java.awt.LayoutManager, ) -> None: ...
	def zoomOutBoth(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getZoomFillPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def mouseDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getInputMethodRequests(self, ) -> javawrappers.java.awt.im.InputMethodRequests: ...
	def requestDefaultFocus(self, ) -> Union[int, JBoolean]: ...
	def getZoomOutlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def addHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def removeAll(self, ) -> None: ...
	def getInitialDelay(self, ) -> Union[int, JInt]: ...
	def getMinimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getAlignmentY(self, ) -> Union[float, JFloat]: ...
	def setAutoscrolls(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEnforceFileExtensions(self, arg0: Union[int, JBoolean], ) -> None: ...
	def mouseMoved(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getAlignmentX(self, ) -> Union[float, JFloat]: ...
	def setAlignmentY(self, arg0: Union[float, JFloat], ) -> None: ...
	def dispatchEvent(self, arg0: javawrappers.java.awt.AWTEvent, ) -> None: ...
	def isOptimizedDrawingEnabled(self, ) -> Union[int, JBoolean]: ...
	def restoreAutoRangeBounds(self, ) -> None: ...
	def paintComponent(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setAlignmentX(self, arg0: Union[float, JFloat], ) -> None: ...
	def postEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.Point, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> javawrappers.java.awt.Dimension: ...
	def unregisterKeyboardAction(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> None: ...
	def mouseUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def enableInputMethods(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def addComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def doCopy(self, ) -> None: ...
	def removeInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def getClientProperty(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def removeHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def setDisplayToolTips(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isRangeZoomable(self, ) -> Union[int, JBoolean]: ...
	def isRequestFocusEnabled(self, ) -> Union[int, JBoolean]: ...
	def getFontMetrics(self, arg0: javawrappers.java.awt.Font, ) -> javawrappers.java.awt.FontMetrics: ...
	def mouseReleased(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def setChart(self, arg0: javawrappers.org.jfree.chart.JFreeChart, ) -> None: ...
	def getAncestorListeners(self, ) -> JArray(javawrappers.javax.swing.event.AncestorListener, 1): ...
	def setVerticalAxisTrace(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getIgnoreRepaint(self, ) -> Union[int, JBoolean]: ...
	def getBaselineResizeBehavior(self, ) -> javawrappers.java.awt.Component.BaselineResizeBehavior: ...
	def removeMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def overlayChanged(self, arg0: javawrappers.org.jfree.chart.event.OverlayChangeEvent, ) -> None: ...
	def applyComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def validate(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.awt.Container: ...
	def isMinimumSizeSet(self, ) -> Union[int, JBoolean]: ...
	def getMinimumDrawHeight(self, ) -> Union[int, JInt]: ...
	def setComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def getVerifyInputWhenFocusTarget(self, ) -> Union[int, JBoolean]: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def setZoomInFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getChartRenderingInfo(self, ) -> javawrappers.org.jfree.chart.ChartRenderingInfo: ...
	def isValidateRoot(self, ) -> Union[int, JBoolean]: ...
	def addNotify(self, ) -> None: ...
	def zoomInDomain(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def addInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFocusCycleRootAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def getToolTipLocation(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.awt.Point: ...
	def setFocusTraversalPolicyProvider(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getConditionForKeyStroke(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setToolTipText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def countComponents(self, ) -> Union[int, JInt]: ...
	def isFocusTraversable(self, ) -> Union[int, JBoolean]: ...
	def setMinimumDrawHeight(self, arg0: Union[int, JInt], ) -> None: ...
	def inside(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def setRangeZoomable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getInputContext(self, ) -> javawrappers.java.awt.im.InputContext: ...
	def nextFocus(self, ) -> None: ...
	def getFocusTraversalKeys(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.Set: ...
	def isCursorSet(self, ) -> Union[int, JBoolean]: ...
	def setVerifyInputWhenFocusTarget(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getHorizontalAxisTrace(self, ) -> Union[int, JBoolean]: ...
	def setActionMap(self, arg0: javawrappers.javax.swing.ActionMap, ) -> None: ...
	def getZoomAroundAnchor(self, ) -> Union[int, JBoolean]: ...
	def getMouseWheelListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseWheelListener, 1): ...
	def getComponents(self, ) -> JArray(javawrappers.java.awt.Component, 1): ...
	def setInputVerifier(self, arg0: javawrappers.javax.swing.InputVerifier, ) -> None: ...
	def removeMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def doLayout(self, ) -> None: ...
	def getNextFocusableComponent(self, ) -> javawrappers.java.awt.Component: ...
	def doEditChartProperties(self, ) -> None: ...
	def setZoomTriggerDistance(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.PopupMenu, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def zoomOutRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def putClientProperty(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setFocusCycleRoot(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getZoomTriggerDistance(self, ) -> Union[int, JInt]: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setNextFocusableComponent(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	def zoomInRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setDropTarget(self, arg0: javawrappers.java.awt.dnd.DropTarget, ) -> None: ...
	@overload
	def list(self, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, arg1: Union[int, JInt], ) -> None: ...
	def revalidate(self, ) -> None: ...
	def createToolTip(self, ) -> javawrappers.javax.swing.JToolTip: ...
	def getDismissDelay(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultLocale(arg0: javawrappers.java.util.Locale, ) -> None: ...
	def removeNotify(self, ) -> None: ...
	def translateScreenToJava2D(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.geom.Point2D: ...
	def gotFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def chartChanged(self, arg0: javawrappers.org.jfree.chart.event.ChartChangeEvent, ) -> None: ...
	def removeAncestorListener(self, arg0: javawrappers.javax.swing.event.AncestorListener, ) -> None: ...
	def scrollRectToVisible(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getRegisteredKeyStrokes(self, ) -> JArray(javawrappers.javax.swing.KeyStroke, 1): ...
	def handleEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isForegroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def show(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def show(self, ) -> None: ...
	@overload
	def getScreenDataArea(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def getScreenDataArea(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def update(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def isFocusTraversalPolicySet(self, ) -> Union[int, JBoolean]: ...
	def getUIClassID(self, ) -> javawrappers.java.lang.String: ...
	def setMaximumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def getMinimumDrawWidth(self, ) -> Union[int, JInt]: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.MenuComponent, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	def addMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def imageUpdate(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def setRefreshBuffer(self, arg0: Union[int, JBoolean], ) -> None: ...
	def actionPerformed(self, arg0: javawrappers.java.awt.event.ActionEvent, ) -> None: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	def getLayout(self, ) -> javawrappers.java.awt.LayoutManager: ...
	def addChartMouseListener(self, arg0: javawrappers.org.jfree.chart.ChartMouseListener, ) -> None: ...
	def addKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def getContainerListeners(self, ) -> JArray(javawrappers.java.awt.event.ContainerListener, 1): ...
	def removeChartMouseListener(self, arg0: javawrappers.org.jfree.chart.ChartMouseListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getComponentListeners(self, ) -> JArray(javawrappers.java.awt.event.ComponentListener, 1): ...
	def isMaximumSizeSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addOverlay(self, arg0: javawrappers.org.jfree.chart.panel.Overlay, ) -> None: ...
	def getCursor(self, ) -> javawrappers.java.awt.Cursor: ...
	def getZoomInFactor(self, ) -> Union[float, JDouble]: ...
	@overload
	def createImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Image: ...
	@overload
	def createImage(self, arg0: javawrappers.java.awt.image.ImageProducer, ) -> javawrappers.java.awt.Image: ...
	def mouseMove(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def areFocusTraversalKeysSet(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getKeyListeners(self, ) -> JArray(javawrappers.java.awt.event.KeyListener, 1): ...
	@overload
	def registerKeyboardAction(self, arg0: javawrappers.java.awt.event.ActionListener, arg1: javawrappers.javax.swing.KeyStroke, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def registerKeyboardAction(self, arg0: javawrappers.java.awt.event.ActionListener, arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.swing.KeyStroke, arg3: Union[int, JInt], ) -> None: ...
	def setPopupMenu(self, arg0: javawrappers.javax.swing.JPopupMenu, ) -> None: ...
	def addAncestorListener(self, arg0: javawrappers.javax.swing.event.AncestorListener, ) -> None: ...
	def getMaximumDrawWidth(self, ) -> Union[int, JInt]: ...
	def layout(self, ) -> None: ...
	def getComponentPopupMenu(self, ) -> javawrappers.javax.swing.JPopupMenu: ...
	def getBaseline(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setUI(self, arg0: javawrappers.javax.swing.plaf.PanelUI, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.awt.Graphics, arg1: javawrappers.java.awt.print.PageFormat, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def paintComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def setBorder(self, arg0: javawrappers.javax.swing.border.Border, ) -> None: ...
	def setMaximumDrawHeight(self, arg0: Union[int, JInt], ) -> None: ...
	def getFocusListeners(self, ) -> JArray(javawrappers.java.awt.event.FocusListener, 1): ...
	@overload
	def resize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def resize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.VolatileImage: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.ImageCapabilities, ) -> javawrappers.java.awt.image.VolatileImage: ...
	def location(self, ) -> javawrappers.java.awt.Point: ...
	def lostFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDomainZoomable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def keyDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDropTarget(self, ) -> javawrappers.java.awt.dnd.DropTarget: ...
	def getTransferHandler(self, ) -> javawrappers.javax.swing.TransferHandler: ...
	def getMaximumDrawHeight(self, ) -> Union[int, JInt]: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getHierarchyBoundsListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyBoundsListener, 1): ...
	def getRootPane(self, ) -> javawrappers.javax.swing.JRootPane: ...
	def getAutoscrolls(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.Rectangle: ...
	def setPreferredSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def setInputMap(self, arg0: Union[int, JInt], arg1: javawrappers.javax.swing.InputMap, ) -> None: ...
	def setZoomOutlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def enable(self, ) -> None: ...
	@overload
	def enable(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def paintImmediately(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def paintImmediately(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	@overload
	def getMousePosition(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.awt.Point: ...
	@overload
	def getMousePosition(self, ) -> javawrappers.java.awt.Point: ...
	def isManagingFocus(self, ) -> Union[int, JBoolean]: ...
	def setZoomOutFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def action(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDismissDelay(self, arg0: Union[int, JInt], ) -> None: ...
	def removeOverlay(self, arg0: javawrappers.org.jfree.chart.panel.Overlay, ) -> None: ...
	def addContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def setComponentZOrder(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[string, JString], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: JByte, arg2: JByte, ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], arg2: Union[int, JShort], ) -> None: ...
	def addMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def getComponentOrientation(self, ) -> javawrappers.java.awt.ComponentOrientation: ...
	def setFocusable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTreeLock(self, ) -> javawrappers.java.lang.Object: ...
	def addHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def isBackgroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def findComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def findComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setOpaque(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setMouseZoomable(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setMouseZoomable(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	def setComponentPopupMenu(self, arg0: javawrappers.javax.swing.JPopupMenu, ) -> None: ...
	def setEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isLightweight(self, ) -> Union[int, JBoolean]: ...
	def setTransferHandler(self, arg0: javawrappers.javax.swing.TransferHandler, ) -> None: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def minimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def bounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def repaint(self, ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def repaint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def repaint(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getMouseMotionListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseMotionListener, 1): ...
	def setMinimumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def transferFocus(self, ) -> None: ...
	def printComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	@overload
	def getInputMap(self, ) -> javawrappers.javax.swing.InputMap: ...
	@overload
	def getInputMap(self, arg0: Union[int, JInt], ) -> javawrappers.javax.swing.InputMap: ...
	def getListeners(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.util.EventListener, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setRequestFocusEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def mouseExited(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def isMouseWheelEnabled(self, ) -> Union[int, JBoolean]: ...
	def getLocationOnScreen(self, ) -> javawrappers.java.awt.Point: ...
	def keyUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def chartProgress(self, arg0: javawrappers.org.jfree.chart.event.ChartProgressEvent, ) -> None: ...
	def setFocusTraversalPolicy(self, arg0: javawrappers.java.awt.FocusTraversalPolicy, ) -> None: ...
	def restoreAutoBounds(self, ) -> None: ...
	def isEnforceFileExtensions(self, ) -> Union[int, JBoolean]: ...
	def paintAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def mouseEntered(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def setFocusTraversalKeys(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Set, ) -> None: ...
	def setDebugGraphicsOptions(self, arg0: Union[int, JInt], ) -> None: ...
	def isPaintingTile(self, ) -> Union[int, JBoolean]: ...
	def getVerticalAxisTrace(self, ) -> Union[int, JBoolean]: ...
	def hasFocus(self, ) -> Union[int, JBoolean]: ...
	def isPreferredSizeSet(self, ) -> Union[int, JBoolean]: ...
	def setHorizontalAxisTrace(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isDoubleBuffered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPropertyChangeListeners(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	@overload
	def getPropertyChangeListeners(self, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getInsets(self, ) -> javawrappers.java.awt.Insets: ...
	@overload
	def getInsets(self, arg0: javawrappers.java.awt.Insets, ) -> javawrappers.java.awt.Insets: ...
	def getFocusTraversalKeysEnabled(self, ) -> Union[int, JBoolean]: ...
	def getZoomOutFactor(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getDefaultLocale() -> javawrappers.java.util.Locale: ...
	def setInitialDelay(self, arg0: Union[int, JInt], ) -> None: ...
	def hide(self, ) -> None: ...
	def getAnchor(self, ) -> javawrappers.java.awt.geom.Point2D: ...
	def getPreferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def disable(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	def isFocusable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getToolTipText(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def getToolTipText(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getBorder(self, ) -> javawrappers.javax.swing.border.Border: ...
	def isPaintingForPrint(self, ) -> Union[int, JBoolean]: ...
	def insets(self, ) -> javawrappers.java.awt.Insets: ...
	def zoomOutDomain(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setMixingCutoutShape(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setZoomAroundAnchor(self, arg0: Union[int, JBoolean], ) -> None: ...
	def mouseExit(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def mousePressed(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getHierarchyListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyListener, 1): ...
	def computeVisibleRect(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def isShowing(self, ) -> Union[int, JBoolean]: ...
	def mouseEnter(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def mouseDrag(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def preferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getMouseListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseListener, 1): ...
	def getEntityForPoint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.chart.entity.ChartEntity: ...
	def setFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setInheritsPopupMenu(self, arg0: Union[int, JBoolean], ) -> None: ...
	def deliverEvent(self, arg0: javawrappers.java.awt.Event, ) -> None: ...
	def getActionMap(self, ) -> javawrappers.javax.swing.ActionMap: ...
	def getForeground(self, ) -> javawrappers.java.awt.Color: ...
	def isAncestorOf(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def getComponentCount(self, ) -> Union[int, JInt]: ...
	def getScaleY(self, ) -> Union[float, JDouble]: ...
	@overload
	def getUI(self, ) -> javawrappers.javax.swing.plaf.PanelUI: ...
	@overload
	def getUI(self, ) -> javawrappers.javax.swing.plaf.ComponentUI: ...
	def getScaleX(self, ) -> Union[float, JDouble]: ...
	def getTopLevelAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def mouseClicked(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> None: ...
	def getActionForKeyStroke(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> javawrappers.java.awt.event.ActionListener: ...
	def grabFocus(self, ) -> None: ...
	def getPopupLocation(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.awt.Point: ...
	def getFont(self, ) -> javawrappers.java.awt.Font: ...
	def setCursor(self, arg0: javawrappers.java.awt.Cursor, ) -> None: ...
	def translateJava2DToScreen(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Point: ...
	def getDefaultDirectoryForSaveAs(self, ) -> javawrappers.java.io.File: ...
	def isDisplayable(self, ) -> Union[int, JBoolean]: ...
	def getGraphicsConfiguration(self, ) -> javawrappers.java.awt.GraphicsConfiguration: ...
	def getComponent(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def restoreAutoDomainBounds(self, ) -> None: ...
	def removeComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	@overload
	def requestFocus(self, ) -> None: ...
	@overload
	def requestFocus(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocus(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def locate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def addFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def getFillZoomRectangle(self, ) -> Union[int, JBoolean]: ...
	def getPopupMenu(self, ) -> javawrappers.javax.swing.JPopupMenu: ...
	def getInheritsPopupMenu(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def getComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def updateUI(self, ) -> None: ...
	def scale(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def isFocusCycleRoot(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isFocusCycleRoot(self, arg0: javawrappers.java.awt.Container, ) -> Union[int, JBoolean]: ...
	def resetKeyboardActions(self, ) -> None: ...
	def setFocusTraversalKeysEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getComponentZOrder(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JInt]: ...
	def getReshowDelay(self, ) -> Union[int, JInt]: ...
	def setBackground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def printAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getToolkit(self, ) -> javawrappers.java.awt.Toolkit: ...
	def getVetoableChangeListeners(self, ) -> JArray(javawrappers.java.beans.VetoableChangeListener, 1): ...
	def transferFocusUpCycle(self, ) -> None: ...
	def isFontSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def getRefreshBuffer(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.Point, ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def isFocusTraversalPolicyProvider(self, ) -> Union[int, JBoolean]: ...
	def setMinimumDrawWidth(self, arg0: Union[int, JInt], ) -> None: ...
	def setMaximumDrawWidth(self, arg0: Union[int, JInt], ) -> None: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def removeFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def setIgnoreRepaint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getVisibleRect(self, ) -> javawrappers.java.awt.Rectangle: ...
	def isDomainZoomable(self, ) -> Union[int, JBoolean]: ...
	def transferFocusBackward(self, ) -> None: ...
	def move(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def transferFocusDownCycle(self, ) -> None: ...
	def setReshowDelay(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def isLightweightComponent(arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def setForeground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def setMouseWheelEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setZoomFillPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def zoom(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	def invalidate(self, ) -> None: ...
	def setFillZoomRectangle(self, arg0: Union[int, JBoolean], ) -> None: ...
	def zoomInBoth(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getAccessibleContext(self, ) -> javawrappers.javax.accessibility.AccessibleContext: ...
	def isFocusOwner(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSize(self, arg0: javawrappers.java.awt.Dimension, ) -> javawrappers.java.awt.Dimension: ...
	@overload
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getX(self, ) -> Union[int, JInt]: ...
	def removeHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def getY(self, ) -> Union[int, JInt]: ...
	def setDefaultDirectoryForSaveAs(self, arg0: javawrappers.java.io.File, ) -> None: ...
	def getFocusTraversalPolicy(self, ) -> javawrappers.java.awt.FocusTraversalPolicy: ...
	def removeMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...
	def getBackground(self, ) -> javawrappers.java.awt.Color: ...
	def getDebugGraphicsOptions(self, ) -> Union[int, JInt]: ...
	def addMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...


class JFreeChart:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.chart.plot.Plot, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.org.jfree.chart.plot.Plot, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSubtitles(self, ) -> javawrappers.java.util.List: ...
	def setElementHinting(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSubtitle(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.title.Title: ...
	def getBackgroundImageAlignment(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.ChartChangeListener, ) -> None: ...
	@overload
	def setTextAntiAlias(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setTextAntiAlias(self, arg0: Union[int, JBoolean], ) -> None: ...
	def plotChanged(self, arg0: javawrappers.org.jfree.chart.event.PlotChangeEvent, ) -> None: ...
	def getTitle(self, ) -> javawrappers.org.jfree.chart.title.TextTitle: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeSubtitle(self, arg0: javawrappers.org.jfree.chart.title.Title, ) -> None: ...
	def getSubtitleCount(self, ) -> Union[int, JInt]: ...
	def getTextAntiAlias(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getLegend(self, ) -> javawrappers.org.jfree.chart.title.LegendTitle: ...
	@overload
	def getLegend(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.title.LegendTitle: ...
	def clearSubtitles(self, ) -> None: ...
	def getElementHinting(self, ) -> Union[int, JBoolean]: ...
	def isNotify(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setTitle(self, arg0: javawrappers.org.jfree.chart.title.TextTitle, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def getCategoryPlot(self, ) -> javawrappers.org.jfree.chart.plot.CategoryPlot: ...
	def setBackgroundPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getXYPlot(self, ) -> javawrappers.org.jfree.chart.plot.XYPlot: ...
	def titleChanged(self, arg0: javawrappers.org.jfree.chart.event.TitleChangeEvent, ) -> None: ...
	def handleClick(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	def getAntiAlias(self, ) -> Union[int, JBoolean]: ...
	def getBorderPaint(self, ) -> javawrappers.java.awt.Paint: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setBackgroundImageAlpha(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def createBufferedImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def createBufferedImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def createBufferedImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def createBufferedImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def addSubtitle(self, arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.title.Title, ) -> None: ...
	@overload
	def addSubtitle(self, arg0: javawrappers.org.jfree.chart.title.Title, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setBackgroundImage(self, arg0: javawrappers.java.awt.Image, ) -> None: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	def addLegend(self, arg0: javawrappers.org.jfree.chart.title.LegendTitle, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBackgroundPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setBorderPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def setBackgroundImageAlignment(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setBorderVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isBorderVisible(self, ) -> Union[int, JBoolean]: ...
	def fireChartChanged(self, ) -> None: ...
	def getBorderStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def setPadding(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setSubtitles(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def removeProgressListener(self, arg0: javawrappers.org.jfree.chart.event.ChartProgressListener, ) -> None: ...
	def removeLegend(self, ) -> None: ...
	def getPadding(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def setBorderStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	@overload
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	@overload
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Point2D, arg3: javawrappers.org.jfree.chart.ChartRenderingInfo, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.ChartChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setRenderingHints(self, arg0: javawrappers.java.awt.RenderingHints, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getBackgroundImageAlpha(self, ) -> Union[float, JFloat]: ...
	def addProgressListener(self, arg0: javawrappers.org.jfree.chart.event.ChartProgressListener, ) -> None: ...
	def setID(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBackgroundImage(self, ) -> javawrappers.java.awt.Image: ...
	def setAntiAlias(self, arg0: Union[int, JBoolean], ) -> None: ...


class ChartRenderingInfo:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.entity.EntityCollection, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEntityCollection(self, arg0: javawrappers.org.jfree.chart.entity.EntityCollection, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def getPlotInfo(self, ) -> javawrappers.org.jfree.chart.plot.PlotRenderingInfo: ...
	def notify(self, ) -> None: ...
	def setChartArea(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	def getChartArea(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEntityCollection(self, ) -> javawrappers.org.jfree.chart.entity.EntityCollection: ...


class LegendItemSource:
	def getLegendItems(self, ) -> javawrappers.org.jfree.chart.LegendItemCollection: ...


