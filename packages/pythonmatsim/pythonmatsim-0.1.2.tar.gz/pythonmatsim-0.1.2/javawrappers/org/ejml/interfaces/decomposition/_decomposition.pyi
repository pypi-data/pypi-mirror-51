################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class QRSparseDecomposition:
	def isStructureLocked(self, ) -> Union[int, JBoolean]: ...
	def lockStructure(self, ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class EigenDecomposition_F32:
	def getEigenvalue(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Complex_F32: ...
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class CholeskySparseDecomposition:
	def isStructureLocked(self, ) -> Union[int, JBoolean]: ...
	def lockStructure(self, ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def isLower(self, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class BidiagonalDecomposition_F32:
	def getV(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, arg0: JArray(Union[float, JFloat], 1), arg1: JArray(Union[float, JFloat], 1), ) -> None: ...
	def getB(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getU(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...


class CholeskyLDLDecomposition_F64:
	def getL(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, ) -> JArray(Union[float, JDouble], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getD(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class EigenDecomposition_F64:
	def getEigenvalue(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class QRPDecomposition_F64:
	def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getColPivots(self, ) -> JArray(Union[int, JInt], 1): ...
	def getRank(self, ) -> Union[int, JInt]: ...
	def setSingularThreshold(self, arg0: Union[float, JDouble], ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class DecompositionInterface:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class LUSparseDecomposition:
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def isStructureLocked(self, ) -> Union[int, JBoolean]: ...
	def lockStructure(self, ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class TridiagonalSimilarDecomposition:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class LUDecomposition:
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class LUSparseDecomposition_F64:
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def isStructureLocked(self, ) -> Union[int, JBoolean]: ...
	def lockStructure(self, ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...


class BidiagonalDecomposition:
	def getV(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getB(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getU(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...


class SingularValueDecomposition_F32:
	def getV(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getW(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isCompact(self, ) -> Union[int, JBoolean]: ...
	def numRows(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def numberOfSingularValues(self, ) -> Union[int, JInt]: ...
	def numCols(self, ) -> Union[int, JInt]: ...
	def getSingularValues(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getU(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...


class CholeskySparseDecomposition_F64:
	def isStructureLocked(self, ) -> Union[int, JBoolean]: ...
	def lockStructure(self, ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def isLower(self, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...


class EigenDecomposition:
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class DecompositionSparseInterface:
	def isStructureLocked(self, ) -> Union[int, JBoolean]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def lockStructure(self, ) -> None: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class BidiagonalDecomposition_F64:
	def getV(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getB(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getU(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...


class SingularValueDecomposition_F64:
	def getV(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getW(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isCompact(self, ) -> Union[int, JBoolean]: ...
	def numRows(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def numberOfSingularValues(self, ) -> Union[int, JInt]: ...
	def numCols(self, ) -> Union[int, JInt]: ...
	def getSingularValues(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getU(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...


class TridiagonalSimilarDecomposition_F32:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, arg0: JArray(Union[float, JFloat], 1), arg1: JArray(Union[float, JFloat], 1), ) -> None: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class LUDecomposition_F64:
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...


class SingularValueDecomposition:
	def getV(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getW(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isCompact(self, ) -> Union[int, JBoolean]: ...
	def numRows(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def numberOfSingularValues(self, ) -> Union[int, JInt]: ...
	def numCols(self, ) -> Union[int, JInt]: ...
	def getU(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...


class CholeskyDecomposition_F64:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def isLower(self, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...


class CholeskyDecomposition:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def isLower(self, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class LUDecomposition_F32:
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F32: ...


class TridiagonalSimilarDecomposition_F64:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class CholeskyLDLDecomposition:
	def getL(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getD(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


class QRPDecomposition_F32:
	def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getColPivots(self, ) -> JArray(Union[int, JInt], 1): ...
	def getRank(self, ) -> Union[int, JInt]: ...
	def setSingularThreshold(self, arg0: Union[float, JFloat], ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class QRPDecomposition:
	def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getColPivots(self, ) -> JArray(Union[int, JInt], 1): ...
	def getRank(self, ) -> Union[int, JInt]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class CholeskyDecomposition_F32:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def isLower(self, ) -> Union[int, JBoolean]: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F32: ...


class QRDecomposition:
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...


class CholeskyLDLDecomposition_F32:
	def getL(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, ) -> JArray(Union[float, JFloat], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def getD(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...


