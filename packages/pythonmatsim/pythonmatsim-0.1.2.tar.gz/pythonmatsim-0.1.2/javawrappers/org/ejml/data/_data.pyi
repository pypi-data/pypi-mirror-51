################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.ejml.ops
import javawrappers.java.util.function
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class SingularMatrixException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class DMatrix4x4:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix4x4, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class DMatrix3x3:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix3x3, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class DGrowArray:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reshape(self, arg0: Union[int, JInt], ) -> None: ...
	def free(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DMatrix6:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix6, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class FMatrix2:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix2, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class Complex_F64:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def isReal(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def minus(self, arg0: javawrappers.org.ejml.data.Complex_F64, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@overload
	def set(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getMagnitude(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def plus(self, arg0: javawrappers.org.ejml.data.Complex_F64, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def setReal(self, arg0: Union[float, JDouble], ) -> None: ...
	def getReal(self, ) -> Union[float, JDouble]: ...
	def times(self, arg0: javawrappers.org.ejml.data.Complex_F64, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMagnitude2(self, ) -> Union[float, JDouble]: ...
	def divide(self, arg0: javawrappers.org.ejml.data.Complex_F64, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setImaginary(self, arg0: Union[float, JDouble], ) -> None: ...
	def getImaginary(self, ) -> Union[float, JDouble]: ...


class FMatrix3:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix3, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class ComplexPolar_F32:
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.Complex_F32, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toStandard(self, ) -> javawrappers.org.ejml.data.Complex_F32: ...
	def setTheta(self, arg0: Union[float, JFloat], ) -> None: ...
	def setR(self, arg0: Union[float, JFloat], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTheta(self, ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getR(self, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...


class FMatrixRBlock:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.FMatrixRBlock: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getData(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixRBlock, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixD1, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixRBlock: ...


class FMatrix4x4:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix4x4, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class DMatrixRBlock:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getData(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...


class DMatrixSparseTriplet:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet, ): ...
	class Element:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
		@overload
		def set(self, arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet.Element, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def nz_index(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def printNonZero(self, ) -> None: ...
	def zero(self, ) -> None: ...
	def addItem(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet.Element, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def growData(self, arg0: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def isAssigned(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shrinkArrays(self, ) -> None: ...


class FMatrix3x3:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix3x3, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class FMatrix5x5:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], arg16: Union[float, JFloat], arg17: Union[float, JFloat], arg18: Union[float, JFloat], arg19: Union[float, JFloat], arg20: Union[float, JFloat], arg21: Union[float, JFloat], arg22: Union[float, JFloat], arg23: Union[float, JFloat], arg24: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix5x5, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], arg16: Union[float, JFloat], arg17: Union[float, JFloat], arg18: Union[float, JFloat], arg19: Union[float, JFloat], arg20: Union[float, JFloat], arg21: Union[float, JFloat], arg22: Union[float, JFloat], arg23: Union[float, JFloat], arg24: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class DMatrixFixed:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...


class DMatrix3:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix3, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class DMatrix4:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix4, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class Complex_F32:
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, ): ...
	def isReal(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def minus(self, arg0: javawrappers.org.ejml.data.Complex_F32, ) -> javawrappers.org.ejml.data.Complex_F32: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@overload
	def set(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getMagnitude(self, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	def plus(self, arg0: javawrappers.org.ejml.data.Complex_F32, ) -> javawrappers.org.ejml.data.Complex_F32: ...
	def setReal(self, arg0: Union[float, JFloat], ) -> None: ...
	def getReal(self, ) -> Union[float, JFloat]: ...
	def times(self, arg0: javawrappers.org.ejml.data.Complex_F32, ) -> javawrappers.org.ejml.data.Complex_F32: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMagnitude2(self, ) -> Union[float, JFloat]: ...
	def divide(self, arg0: javawrappers.org.ejml.data.Complex_F32, ) -> javawrappers.org.ejml.data.Complex_F32: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setImaginary(self, arg0: Union[float, JFloat], ) -> None: ...
	def getImaginary(self, ) -> Union[float, JFloat]: ...


class FMatrixSparse:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def printNonZero(self, ) -> None: ...
	def zero(self, ) -> None: ...
	def print_(self, ) -> None: ...
	def isAssigned(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def shrinkArrays(self, ) -> None: ...


class MatrixType:
	DDRM: MatrixType = ...
	FDRM: MatrixType = ...
	ZDRM: MatrixType = ...
	CDRM: MatrixType = ...
	DSCC: MatrixType = ...
	FSCC: MatrixType = ...
	ZSCC: MatrixType = ...
	CSCC: MatrixType = ...
	UNSPECIFIED: MatrixType = ...
	def isReal(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def lookup(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.ejml.data.MatrixType: ...
	@overload
	@staticmethod
	def lookup(arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.MatrixType: ...
	def getBits(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.ejml.data.MatrixType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.ejml.data.MatrixType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def isDense(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def create(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFixed(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class FMatrixFixed:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...


class FMatrix:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...


class DMatrixRMaj:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def zero(self, ) -> None: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getData(self, ) -> JArray(Union[float, JDouble], 1): ...
	def add(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def printJava(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class FSubmatrixD1:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrixD1, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrixD1, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def print_(self, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixD1, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def extract(self, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getCols(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class FEigenpair:
	def __init__(self, arg0: Union[float, JFloat], arg1: javawrappers.org.ejml.data.FMatrixRMaj, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DMatrix2:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix2, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class IScalar:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Matrix:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...


class DMatrixSparseCSC:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrixSparseCSC, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def sortIndices(self, arg0: javawrappers.org.ejml.ops.SortCoupledArray_F64, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def nz_index(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def printNonZero(self, ) -> None: ...
	def isIndicesSorted(self, ) -> Union[int, JBoolean]: ...
	def zero(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.DMatrixSparseCSC: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def growMaxColumns(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def createLike(self, ) -> javawrappers.org.ejml.data.DMatrixSparseCSC: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def growMaxLength(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def print_(self, ) -> None: ...
	def isAssigned(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def colsum(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def copyStructure(self, arg0: javawrappers.org.ejml.data.DMatrixSparseCSC, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFull(self, ) -> Union[int, JBoolean]: ...
	def shrinkArrays(self, ) -> None: ...


class DMatrixIterator:
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ): ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Double: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[float, JDouble], ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def isRowMajor(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


class FMatrix4:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix4, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class ZMatrixD1:
	def __init__(self, ): ...
	def getImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def setImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getData(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.ZMatrixD1, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def setReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getDataLength(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DMatrix1Row:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getData(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FMatrix1Row:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getData(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DMatrix5:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix5, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class FMatrix5:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix5, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class FMatrixSparseTriplet:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet, ): ...
	class Element:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
		@overload
		def set(self, arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet.Element, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def nz_index(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def printNonZero(self, ) -> None: ...
	def zero(self, ) -> None: ...
	def addItem(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet.Element, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def growData(self, arg0: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def isAssigned(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shrinkArrays(self, ) -> None: ...


class DMatrix6x6:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], arg16: Union[float, JDouble], arg17: Union[float, JDouble], arg18: Union[float, JDouble], arg19: Union[float, JDouble], arg20: Union[float, JDouble], arg21: Union[float, JDouble], arg22: Union[float, JDouble], arg23: Union[float, JDouble], arg24: Union[float, JDouble], arg25: Union[float, JDouble], arg26: Union[float, JDouble], arg27: Union[float, JDouble], arg28: Union[float, JDouble], arg29: Union[float, JDouble], arg30: Union[float, JDouble], arg31: Union[float, JDouble], arg32: Union[float, JDouble], arg33: Union[float, JDouble], arg34: Union[float, JDouble], arg35: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix6x6, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], arg16: Union[float, JDouble], arg17: Union[float, JDouble], arg18: Union[float, JDouble], arg19: Union[float, JDouble], arg20: Union[float, JDouble], arg21: Union[float, JDouble], arg22: Union[float, JDouble], arg23: Union[float, JDouble], arg24: Union[float, JDouble], arg25: Union[float, JDouble], arg26: Union[float, JDouble], arg27: Union[float, JDouble], arg28: Union[float, JDouble], arg29: Union[float, JDouble], arg30: Union[float, JDouble], arg31: Union[float, JDouble], arg32: Union[float, JDouble], arg33: Union[float, JDouble], arg34: Union[float, JDouble], arg35: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class CMatrix:
	def getDataLength(self, ) -> Union[int, JInt]: ...
	def getImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	def setImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def setReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...


class DSubmatrixD1:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def print_(self, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def extract(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getCols(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class ZMatrixRMaj:
	@overload
	def __init__(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.ZMatrixRMaj, ): ...
	@overload
	def getImag(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def zero(self, ) -> None: ...
	@overload
	def getReal(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getRowStride(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.ZMatrixRMaj: ...
	def getData(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.ZMatrixRMaj, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.ZMatrixD1, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def setReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getDataLength(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DMatrix2x2:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix2x2, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class DMatrixSparse:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def printNonZero(self, ) -> None: ...
	def zero(self, ) -> None: ...
	def print_(self, ) -> None: ...
	def isAssigned(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def shrinkArrays(self, ) -> None: ...


class BMatrixRMaj:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def sum(self, ) -> Union[int, JInt]: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def fill(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isInBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class FMatrix6:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix6, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class FMatrixD1:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getData(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DMatrix:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...


class FMatrix2x2:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix2x2, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class DMatrix5x5:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], arg16: Union[float, JDouble], arg17: Union[float, JDouble], arg18: Union[float, JDouble], arg19: Union[float, JDouble], arg20: Union[float, JDouble], arg21: Union[float, JDouble], arg22: Union[float, JDouble], arg23: Union[float, JDouble], arg24: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.DMatrix5x5, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], arg16: Union[float, JDouble], arg17: Union[float, JDouble], arg18: Union[float, JDouble], arg19: Union[float, JDouble], arg20: Union[float, JDouble], arg21: Union[float, JDouble], arg22: Union[float, JDouble], arg23: Union[float, JDouble], arg24: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class FMatrix6x6:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], arg16: Union[float, JFloat], arg17: Union[float, JFloat], arg18: Union[float, JFloat], arg19: Union[float, JFloat], arg20: Union[float, JFloat], arg21: Union[float, JFloat], arg22: Union[float, JFloat], arg23: Union[float, JFloat], arg24: Union[float, JFloat], arg25: Union[float, JFloat], arg26: Union[float, JFloat], arg27: Union[float, JFloat], arg28: Union[float, JFloat], arg29: Union[float, JFloat], arg30: Union[float, JFloat], arg31: Union[float, JFloat], arg32: Union[float, JFloat], arg33: Union[float, JFloat], arg34: Union[float, JFloat], arg35: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix6x6, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], arg16: Union[float, JFloat], arg17: Union[float, JFloat], arg18: Union[float, JFloat], arg19: Union[float, JFloat], arg20: Union[float, JFloat], arg21: Union[float, JFloat], arg22: Union[float, JFloat], arg23: Union[float, JFloat], arg24: Union[float, JFloat], arg25: Union[float, JFloat], arg26: Union[float, JFloat], arg27: Union[float, JFloat], arg28: Union[float, JFloat], arg29: Union[float, JFloat], arg30: Union[float, JFloat], arg31: Union[float, JFloat], arg32: Union[float, JFloat], arg33: Union[float, JFloat], arg34: Union[float, JFloat], arg35: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...


class ComplexPolar_F64:
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.Complex_F64, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toStandard(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def setTheta(self, arg0: Union[float, JDouble], ) -> None: ...
	def setR(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTheta(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getR(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class DScalar:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class IGrowArray:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reshape(self, arg0: Union[int, JInt], ) -> None: ...
	def free(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DEigenpair:
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixRMaj, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FMatrixIterator:
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrixD1, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ): ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Float: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[float, JFloat], ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def isRowMajor(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


class ZMatrix:
	def getDataLength(self, ) -> Union[int, JInt]: ...
	def getImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	def setImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def setReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...


class CMatrixRMaj:
	@overload
	def __init__(self, arg0: JArray(JArray(Union[float, JFloat], 1), 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.CMatrixRMaj, ): ...
	@overload
	def getImag(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def zero(self, ) -> None: ...
	@overload
	def getReal(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getRowStride(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.CMatrixRMaj: ...
	def getData(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.CMatrixRMaj, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.CMatrixD1, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def setReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def getDataLength(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FMatrixSparseCSC:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrixSparseCSC, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def sortIndices(self, arg0: javawrappers.org.ejml.ops.SortCoupledArray_F32, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def nz_index(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def printNonZero(self, ) -> None: ...
	def isIndicesSorted(self, ) -> Union[int, JBoolean]: ...
	def zero(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.FMatrixSparseCSC: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def growMaxColumns(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def createLike(self, ) -> javawrappers.org.ejml.data.FMatrixSparseCSC: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def growMaxLength(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def print_(self, ) -> None: ...
	def isAssigned(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def colsum(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def copyStructure(self, arg0: javawrappers.org.ejml.data.FMatrixSparseCSC, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFull(self, ) -> Union[int, JBoolean]: ...
	def shrinkArrays(self, ) -> None: ...


class ReshapeMatrix:
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...


class FMatrixRMaj:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JArray(Union[float, JFloat], 1), 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrix, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.data.FMatrixRMaj, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def zero(self, ) -> None: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def copy(self, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getData(self, ) -> JArray(Union[float, JFloat], 1): ...
	def add(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.FMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], *arg3: Union[float, JFloat], ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def printJava(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...


class DMatrixD1:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	def minus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def div(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def iterator(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixIterator: ...
	def times(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def unsafe_get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getData(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def plus(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def unsafe_set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CMatrixD1:
	def __init__(self, ): ...
	def getImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNumRows(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRows(self, arg0: Union[int, JInt], ) -> None: ...
	def setImag(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumElements(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	def copy(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getData(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getNumCols(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.ejml.data.CMatrixD1, ) -> None: ...
	def setNumCols(self, arg0: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def createLike(self, ) -> javawrappers.org.ejml.data.Matrix: ...
	def setReal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def getDataLength(self, ) -> Union[int, JInt]: ...
	def print_(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.ejml.data.MatrixType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


