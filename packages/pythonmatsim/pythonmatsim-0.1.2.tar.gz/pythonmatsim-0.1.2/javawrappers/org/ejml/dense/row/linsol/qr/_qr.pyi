################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.ejml.interfaces.decomposition
import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class SolveNullSpaceQRP_DDRM:
	def __init__(self, ): ...
	class CustomizedQRP:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getGammas(self, ) -> JArray(Union[float, JDouble], 1): ...
		def setSingularThreshold(self, arg0: Union[float, JDouble], ) -> None: ...
		def getRank(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
		@overload
		def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
		@overload
		def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
		@overload
		def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
		@overload
		def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
		@overload
		def getR(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
		def getQR(self, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
		def inputModified(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
		@overload
		def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
		def getColPivots(self, ) -> JArray(Union[int, JInt], 1): ...
		def setExpectedMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def process(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def getGammas(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setSingularThreshold(self, arg0: Union[float, JDouble], ) -> None: ...
	def getRank(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getQ(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getR(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getQR(self, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@overload
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getColPivotMatrix(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getColPivots(self, ) -> JArray(Union[int, JInt], 1): ...
	def setExpectedMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class SolvePseudoInverseQrp_DDRM:
	def __init__(self, arg0: javawrappers.org.ejml.interfaces.decomposition.QRPDecomposition_F64, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRPDecomposition_F64: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class SolveNullSpaceQR_DDRM:
	def __init__(self, ): ...
	class CustomizedQR:
		def applyTranQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getGammas(self, ) -> JArray(Union[float, JDouble], 1): ...
		def notifyAll(self, ) -> None: ...
		def applyQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
		@overload
		def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
		@overload
		def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
		@overload
		def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
		@overload
		def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
		@overload
		def getR(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
		@overload
		def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
		def getQR(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
		def inputModified(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def setExpectedMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def applyTranQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def process(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def getGammas(self, ) -> JArray(Union[float, JDouble], 1): ...
	def applyQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def getQ(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getR(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def getQR(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setExpectedMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AdjLinearSolverQr_DDRM:
	def __init__(self, ): ...
	def getDecomposer(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getR(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def setMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def removeRowFromA(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def addRowToA(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class LinearSolverQrpHouseCol_DDRM:
	def __init__(self, arg0: javawrappers.org.ejml.dense.row.decomposition.qr.QRColPivDecompositionHouseholderColumn_DDRM, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRPDecomposition_F64: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class LinearSolverQrHouseTran_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def setMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class LinearSolverQr_DDRM:
	def __init__(self, arg0: javawrappers.org.ejml.interfaces.decomposition.QRDecomposition, ): ...
	def getDecomposer(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getQ(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getR(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def setMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class LinearSolverQrBlock64_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...


class BaseLinearSolverQrp_DDRM:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRPDecomposition_F64: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class LinearSolverQrHouseCol_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def setMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class LinearSolverQrHouse_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def setMaxSize(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


