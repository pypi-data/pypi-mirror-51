################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class BlockHouseHolder_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def rank1UpdateMultR_TopRow(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def innerProdCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def computeZ(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: Union[int, JInt], arg4: JArray(Union[float, JDouble], 1), arg5: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def initializeW(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: Union[int, JInt], arg4: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def rank1UpdateMultR_Col(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def findMaxRow(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def multAdd_zeros(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	@staticmethod
	def divideElementsCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def computeHouseHolderRow(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def rank1UpdateMultL_Row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def computeTauAndDivideCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def findMaxCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def multBlockAdd_zerosone(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@staticmethod
	def scale_row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def add_row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], arg4: javawrappers.org.ejml.data.DSubmatrixD1, arg5: Union[int, JInt], arg6: Union[float, JDouble], arg7: javawrappers.org.ejml.data.DSubmatrixD1, arg8: Union[int, JInt], arg9: Union[int, JInt], arg10: Union[int, JInt], ) -> None: ...
	@staticmethod
	def multTransA_vecCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	@staticmethod
	def computeHouseHolderCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def computeY_t_V(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@staticmethod
	def computeTauAndDivideRow(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def innerProdRow(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.DSubmatrixD1, arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def decomposeQR_block_col(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def rank1UpdateMultL_LeftCol(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> None: ...
	@staticmethod
	def computeW_Column(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: JArray(Union[float, JDouble], 1), arg4: JArray(Union[float, JDouble], 1), arg5: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class QRDecompositionHouseholder_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def applyQ(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def applyQ(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	@staticmethod
	def initializeQ(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	@overload
	def getR(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getR(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	def getQR(self, ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def applyQTran(self, arg0: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setSaveW(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


