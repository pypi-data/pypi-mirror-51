################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class VectorOps_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def scale_row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], arg4: javawrappers.org.ejml.data.DSubmatrixD1, arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ) -> None: ...
	@staticmethod
	def add_row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], arg4: javawrappers.org.ejml.data.DSubmatrixD1, arg5: Union[int, JInt], arg6: Union[float, JDouble], arg7: javawrappers.org.ejml.data.DSubmatrixD1, arg8: Union[int, JInt], arg9: Union[int, JInt], arg10: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def div_row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: Union[float, JDouble], arg4: javawrappers.org.ejml.data.DSubmatrixD1, arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ) -> None: ...
	@staticmethod
	def dot_row(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.DSubmatrixD1, arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def dot_row_col(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.DSubmatrixD1, arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class InnerRankUpdate_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def symmRankNMinus_U(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def rankNUpdate(arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	@staticmethod
	def symmRankNMinus_L(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InnerMultiplication_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def blockMultMinus(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def blockMultSetTransB(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultSetTransB(arg0: Union[float, JDouble], arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultSetTransA(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultSetTransA(arg0: Union[float, JDouble], arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def blockMultPlusTransA(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultPlusTransA(arg0: Union[float, JDouble], arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultPlusTransB(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultPlusTransB(arg0: Union[float, JDouble], arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def blockMultPlus(arg0: Union[float, JDouble], arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultPlus(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultSet(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def blockMultSet(arg0: Union[float, JDouble], arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], ) -> None: ...
	@staticmethod
	def blockMultMinusTransB(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...
	@staticmethod
	def blockMultMinusTransA(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], ) -> None: ...


class TriangularSolver_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def solveL(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def invert(arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def invert(arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def solve(arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, arg4: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def solveBlock(arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def solveR(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: Union[int, JBoolean], ) -> None: ...


class MatrixOps_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def convertBlockToRow(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[float, JDouble], 1), arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, arg2: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def convertRowToBlock(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[float, JDouble], 1), arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, arg2: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@staticmethod
	def set(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, arg2: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def convertTranSrc(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@staticmethod
	def copyTriangle(arg0: Union[int, JBoolean], arg1: javawrappers.org.ejml.data.DMatrixRBlock, arg2: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def extractAligned(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@staticmethod
	def zeroTriangle(arg0: Union[int, JBoolean], arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@staticmethod
	def blockAligned(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def identity(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createRandom(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.java.util.Random, arg5: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	@overload
	@staticmethod
	def createRandom(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> javawrappers.org.ejml.data.DMatrixRBlock: ...
	@overload
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def checkIdenticalShape(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...


class InnerTriangularSolver_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def solveL(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def solveTransU(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def invertLower(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def invertLower(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def solveU(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...
	@staticmethod
	def solveTransL(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def solveLTransB(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...


class MatrixMult_DDRB:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def multTransA(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def multTransB(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	@staticmethod
	def mult(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def multPlus(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def multMinus(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	@staticmethod
	def multPlusTransA(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def multMinusTransA(arg0: Union[int, JInt], arg1: javawrappers.org.ejml.data.DSubmatrixD1, arg2: javawrappers.org.ejml.data.DSubmatrixD1, arg3: javawrappers.org.ejml.data.DSubmatrixD1, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


