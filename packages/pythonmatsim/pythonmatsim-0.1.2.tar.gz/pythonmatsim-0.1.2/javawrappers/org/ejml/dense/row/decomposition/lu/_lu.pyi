################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class LUDecompositionBase_DDRM:
	def __init__(self, ): ...
	def _getVV(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def _solveVectorInternal(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getLU(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getLower(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getUpper(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getIndx(self, ) -> JArray(Union[int, JInt], 1): ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	def getPivot(self, ) -> JArray(Union[int, JInt], 1): ...
	def setExpectedMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LUDecompositionAlt_DDRM:
	def __init__(self, ): ...
	def _getVV(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def _solveVectorInternal(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getRowPivot(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getLU(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def isSingular(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getLower(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getLower(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def getRowPivotV(self, arg0: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getUpper(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getUpper(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def getIndx(self, ) -> JArray(Union[int, JInt], 1): ...
	def computeDeterminant(self, ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	def getPivot(self, ) -> JArray(Union[int, JInt], 1): ...
	def setExpectedMaxSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


