################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class SymmetricQRAlgorithmDecomposition_DDRM:
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition_F64, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getEigenvalue(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def setComputeVectorsWithValues(self, arg0: Union[int, JBoolean], ) -> None: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMaxIterations(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class EigenvalueSmall_F64:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def value2x2_fast(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def symm2x2_fast(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value2x2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class SwitchingEigenDecomposition_DDRM:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[float, JDouble], ): ...
	def getEigenvalue(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class EigenvalueExtractor_DDRM:
	def process(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def getEigenvalues(self, ) -> JArray(javawrappers.org.ejml.data.Complex_F64, 1): ...


class EigenPowerMethod_DDRM:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEigenVector(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def computeShiftDirect(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def setOptions(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeShiftInvert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def setSeed(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def notify(self, ) -> None: ...
	def computeDirect(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...


class WatchedDoubleStepQRDecomposition_DDRM:
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getEigenvalue(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Complex_F64: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getEigenVector(self, arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


