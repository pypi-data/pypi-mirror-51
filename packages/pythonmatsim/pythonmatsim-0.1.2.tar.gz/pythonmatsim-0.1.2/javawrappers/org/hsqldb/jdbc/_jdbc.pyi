################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.sql
import javawrappers.java.util.logging
import javawrappers.java.util
import javawrappers.org.w3c.dom
import javawrappers.org.hsqldb
import javawrappers.javax.xml.stream
import javawrappers.org.hsqldb.types
import javawrappers.java.util.concurrent
import javawrappers.javax.sql
import javawrappers.javax.naming
import javawrappers.java.nio
import javawrappers.javax.xml.transform
import javawrappers.java.lang
import javawrappers.org.hsqldb.result
import javawrappers.org.hsqldb.jdbc
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.xml.sax
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class JDBCDataSourceFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createDataSource(arg0: javawrappers.java.util.Properties, ) -> javawrappers.javax.sql.DataSource: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getObjectInstance(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.naming.Name, arg2: javawrappers.javax.naming.Context, arg3: javawrappers.java.util.Hashtable, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JDBCSQLXML:
	def __init__(self, arg0: javawrappers.javax.xml.transform.Source, ): ...
	class SAX2XMLStreamWriter:
		def __init__(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, ): ...
		class QualifiedName:
			def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getDocumentLocator(self, ) -> javawrappers.org.xml.sax.Locator: ...
		def endDocument(self, ) -> None: ...
		def startDocument(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def isClosed(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getWriter(self, ) -> javawrappers.javax.xml.stream.XMLStreamWriter: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def comment(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
		def close(self, ) -> None: ...
		def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


	class SAX2DOMBuilder:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		def getDocument(self, ) -> javawrappers.org.w3c.dom.Document: ...
		def notifyAll(self, ) -> None: ...
		def getDocumentLocator(self, ) -> javawrappers.org.xml.sax.Locator: ...
		def endDocument(self, ) -> None: ...
		def startDocument(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def isClosed(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
		def free(self, ) -> None: ...
		def close(self, ) -> None: ...
		def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


	class Exceptions:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setResult(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.transform.Result: ...
	def notifyAll(self, ) -> None: ...
	def getBinaryStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getDocumentLocator(self, ) -> javawrappers.org.xml.sax.Locator: ...
	@overload
	def getDocumentLocator(self, ) -> javawrappers.org.xml.sax.Locator: ...
	def isWritable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def setCharacterStream(self, ) -> javawrappers.java.io.Writer: ...
	@overload
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	@overload
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	@overload
	def free(self, ) -> None: ...
	@overload
	def free(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def getDocument(self, ) -> javawrappers.org.w3c.dom.Document: ...
	def getString(self, ) -> javawrappers.java.lang.String: ...
	def getCharacterStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def endDocument(self, ) -> None: ...
	@overload
	def endDocument(self, ) -> None: ...
	@overload
	def startDocument(self, ) -> None: ...
	@overload
	def startDocument(self, ) -> None: ...
	def setString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def getWriter(self, ) -> javawrappers.javax.xml.stream.XMLStreamWriter: ...
	def getSource(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.transform.Source: ...
	@overload
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def comment(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBinaryStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def isReadable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class JDBCBlobFile:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], ): ...
	class InputStreamAdapter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	class OutputStreamAdapter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getBinaryStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getBinaryStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.InputStream: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setDeleteOnFree(self, arg0: Union[int, JBoolean], ) -> None: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def getFile(self, ) -> javawrappers.java.io.File: ...
	def notify(self, ) -> None: ...
	def getBytes(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def flush(self, ) -> None: ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def isDeleteOnFree(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def free(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setBytes(self, arg0: Union[long, JLong], arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def setBytes(self, arg0: Union[long, JLong], arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def length(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBinaryStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Blob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class JDBCCommonDataSource:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setDatabase(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def getParentLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getDatabaseName(self, ) -> javawrappers.java.lang.String: ...
	def getNetworkProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDataSourceName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createShardingKeyBuilder(self, ) -> javawrappers.java.sql.ShardingKeyBuilder: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def setLoginTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setUrl(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getUrl(self, ) -> javawrappers.java.lang.String: ...
	def getURL(self, ) -> javawrappers.java.lang.String: ...
	def getDatabase(self, ) -> javawrappers.java.lang.String: ...
	def setDatabaseName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLoginTimeout(self, ) -> Union[int, JInt]: ...


class JDBCStatement:
	def cancel(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getResultSetHoldability(self, ) -> Union[int, JInt]: ...
	def getMaxFieldSize(self, ) -> Union[int, JInt]: ...
	def setPoolable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpdateCount(self, ) -> Union[int, JInt]: ...
	def getFetchSize(self, ) -> Union[int, JInt]: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def setQueryTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setFetchDirection(self, arg0: Union[int, JInt], ) -> None: ...
	def setMaxRows(self, arg0: Union[int, JInt], ) -> None: ...
	def setCursorName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFetchDirection(self, ) -> Union[int, JInt]: ...
	def getResultSetType(self, ) -> Union[int, JInt]: ...
	@overload
	def getMoreResults(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getMoreResults(self, ) -> Union[int, JBoolean]: ...
	def addBatch(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isCloseOnCompletion(self, ) -> Union[int, JBoolean]: ...
	def executeQuery(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def enquoteIdentifier(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def executeLargeBatch(self, ) -> JArray(Union[long, JLong], 1): ...
	def getResultSet(self, ) -> javawrappers.java.sql.ResultSet: ...
	def enquoteLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getMaxRows(self, ) -> Union[int, JInt]: ...
	def setEscapeProcessing(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLargeMaxRows(self, ) -> Union[long, JLong]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def enquoteNCharLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def getLargeUpdateCount(self, ) -> Union[long, JLong]: ...
	def getQueryTimeout(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
	def notify(self, ) -> None: ...
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	def setLargeMaxRows(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMaxFieldSize(self, arg0: Union[int, JInt], ) -> None: ...
	def isPoolable(self, ) -> Union[int, JBoolean]: ...
	def clearBatch(self, ) -> None: ...
	def close(self, ) -> None: ...
	def closeOnCompletion(self, ) -> None: ...
	def getGeneratedKeys(self, ) -> javawrappers.java.sql.ResultSet: ...
	def executeBatch(self, ) -> JArray(Union[int, JInt], 1): ...
	def setFetchSize(self, arg0: Union[int, JInt], ) -> None: ...
	def clearWarnings(self, ) -> None: ...
	def getResultSetConcurrency(self, ) -> Union[int, JInt]: ...
	def isSimpleIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class JDBCResultSetMetaData:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSchemaName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isSigned(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getCatalogName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getColumnLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getColumnName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getColumnTypeName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isWritable(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getColumnClassName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isAutoIncrement(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isReadOnly(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isCurrency(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isSearchable(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isCaseSensitive(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getColumnType(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTableName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isDefinitelyWritable(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def getPrecision(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getScale(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNullable(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnDisplaySize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class JDBCResultSet:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCConnection, arg1: javawrappers.org.hsqldb.result.Result, arg2: javawrappers.org.hsqldb.result.ResultMetaData, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCConnection, arg1: javawrappers.org.hsqldb.jdbc.JDBCStatementBase, arg2: javawrappers.org.hsqldb.result.Result, arg3: javawrappers.org.hsqldb.result.ResultMetaData, ): ...
	class JDBCResultSetBasic:
		@overload
		def getByte(self, arg0: javawrappers.java.lang.String, ) -> JByte: ...
		@overload
		def getByte(self, arg0: Union[int, JInt], ) -> JByte: ...
		@overload
		def getBigDecimal(self, arg0: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
		@overload
		def getBigDecimal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigDecimal: ...
		@overload
		def getBigDecimal(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
		@overload
		def getBigDecimal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
		@overload
		def getClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Clob: ...
		@overload
		def getClob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Clob: ...
		@overload
		def getAsciiStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
		@overload
		def getAsciiStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		@overload
		def updateShort(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...
		@overload
		def updateShort(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> None: ...
		def isFirst(self, ) -> Union[int, JBoolean]: ...
		def wasNull(self, ) -> Union[int, JBoolean]: ...
		@overload
		def updateBytes(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
		@overload
		def updateBytes(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> None: ...
		@overload
		def getNString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getNString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def getNClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.NClob: ...
		@overload
		def getNClob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.NClob: ...
		@overload
		def getObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def getObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
		@overload
		def updateByte(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
		@overload
		def updateByte(self, arg0: Union[int, JInt], arg1: JByte, ) -> None: ...
		def beforeFirst(self, ) -> None: ...
		def getRow(self, ) -> Union[int, JInt]: ...
		def afterLast(self, ) -> None: ...
		def refreshRow(self, ) -> None: ...
		@overload
		def getInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def getInt(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
		@overload
		def updateClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Clob, ) -> None: ...
		@overload
		def updateClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Clob, ) -> None: ...
		def getType(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def newJDBCResultSet(arg0: javawrappers.org.hsqldb.result.Result, arg1: javawrappers.org.hsqldb.result.ResultMetaData, ) -> javawrappers.org.hsqldb.jdbc.JDBCResultSet: ...
		@overload
		def updateArray(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Array, ) -> None: ...
		@overload
		def updateArray(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Array, ) -> None: ...
		def getMetaData(self, ) -> javawrappers.java.sql.ResultSetMetaData: ...
		def relative(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def updateDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Date, ) -> None: ...
		@overload
		def updateDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Date, ) -> None: ...
		@overload
		def getNCharacterStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
		@overload
		def getNCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
		def isLast(self, ) -> Union[int, JBoolean]: ...
		def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
		@overload
		def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
		@overload
		def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
		@overload
		def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
		@overload
		def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
		@overload
		def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def updateBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
		@overload
		def updateBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Blob, ) -> None: ...
		@overload
		def updateBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
		@overload
		def updateBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Blob, ) -> None: ...
		@overload
		def updateBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateRowId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.RowId, ) -> None: ...
		@overload
		def updateRowId(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.RowId, ) -> None: ...
		@overload
		def getBoolean(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		@overload
		def getBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def getDate(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Date: ...
		@overload
		def getDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Date: ...
		@overload
		def getDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Date: ...
		@overload
		def getDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Date: ...
		def close(self, ) -> None: ...
		@overload
		def updateSQLXML(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
		@overload
		def updateSQLXML(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
		def moveToCurrentRow(self, ) -> None: ...
		def setFetchSize(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def updateTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Time, ) -> None: ...
		@overload
		def updateTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Time, ) -> None: ...
		def clearWarnings(self, ) -> None: ...
		@overload
		def getCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
		@overload
		def getCharacterStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
		@overload
		def updateTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
		@overload
		def updateTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
		@overload
		def getBlob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Blob: ...
		@overload
		def getBlob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Blob: ...
		@overload
		def getLong(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
		@overload
		def getLong(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
		def rowDeleted(self, ) -> Union[int, JBoolean]: ...
		def isAfterLast(self, ) -> Union[int, JBoolean]: ...
		def insertRow(self, ) -> None: ...
		def isClosed(self, ) -> Union[int, JBoolean]: ...
		def absolute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getUnicodeStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
		@overload
		def getUnicodeStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		@overload
		def updateFloat(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
		@overload
		def updateFloat(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
		def first(self, ) -> Union[int, JBoolean]: ...
		def updateRow(self, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getCursorName(self, ) -> javawrappers.java.lang.String: ...
		def getHoldability(self, ) -> Union[int, JInt]: ...
		@overload
		def getArray(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Array: ...
		@overload
		def getArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Array: ...
		@overload
		def updateNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.NClob, ) -> None: ...
		@overload
		def updateNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.NClob, ) -> None: ...
		@overload
		def getBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		@overload
		def getBytes(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
		def getConcurrency(self, ) -> Union[int, JInt]: ...
		def getFetchSize(self, ) -> Union[int, JInt]: ...
		def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def setFetchDirection(self, arg0: Union[int, JInt], ) -> None: ...
		def cancelRowUpdates(self, ) -> None: ...
		@overload
		def updateAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
		@overload
		def updateAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
		def getStatement(self, ) -> javawrappers.java.sql.Statement: ...
		def last(self, ) -> Union[int, JBoolean]: ...
		def getFetchDirection(self, ) -> Union[int, JInt]: ...
		@overload
		def updateNull(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def updateNull(self, arg0: Union[int, JInt], ) -> None: ...
		def isBeforeFirst(self, ) -> Union[int, JBoolean]: ...
		@overload
		def updateBoolean(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		@overload
		def updateBoolean(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
		def deleteRow(self, ) -> None: ...
		@overload
		def getURL(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def getURL(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.URL: ...
		@overload
		def getSQLXML(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.SQLXML: ...
		@overload
		def getSQLXML(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.SQLXML: ...
		@overload
		def updateBigDecimal(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
		@overload
		def updateBigDecimal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
		def rowInserted(self, ) -> Union[int, JBoolean]: ...
		@overload
		def updateInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
		@overload
		def updateInt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def updateLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
		@overload
		def updateLong(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
		def next(self, ) -> Union[int, JBoolean]: ...
		@overload
		def getTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Time: ...
		@overload
		def getTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
		@overload
		def getTime(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Time: ...
		@overload
		def getTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
		def notifyAll(self, ) -> None: ...
		def findColumn(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
		@overload
		def getRowId(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.RowId: ...
		@overload
		def getRowId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.RowId: ...
		@overload
		def getBinaryStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		@overload
		def getBinaryStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
		@overload
		def getDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		@overload
		def getDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
		def rowUpdated(self, ) -> Union[int, JBoolean]: ...
		@overload
		def getFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
		@overload
		def getFloat(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
		@overload
		def updateString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def updateString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def getRef(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Ref: ...
		@overload
		def getRef(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Ref: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getTimestamp(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Timestamp: ...
		@overload
		def getTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
		@overload
		def getTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
		@overload
		def getTimestamp(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Timestamp: ...
		@overload
		def updateRef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Ref, ) -> None: ...
		@overload
		def updateRef(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Ref, ) -> None: ...
		@staticmethod
		def newEmptyResultSet() -> javawrappers.org.hsqldb.jdbc.JDBCResultSet: ...
		def previous(self, ) -> Union[int, JBoolean]: ...
		@overload
		def getShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
		@overload
		def getShort(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
		def moveToInsertRow(self, ) -> None: ...
		@overload
		def updateNString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def updateNString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def updateDouble(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
		@overload
		def updateDouble(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		@overload
		def updateNCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateNCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		@overload
		def updateCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
		@overload
		def updateCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
		@overload
		def updateBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
		@overload
		def updateBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
		@overload
		def updateBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
		@overload
		def updateBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...


	@overload
	def getByte(self, arg0: javawrappers.java.lang.String, ) -> JByte: ...
	@overload
	def getByte(self, arg0: Union[int, JInt], ) -> JByte: ...
	@overload
	def getBigDecimal(self, arg0: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getBigDecimal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getBigDecimal(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getBigDecimal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Clob: ...
	@overload
	def getClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Clob: ...
	@overload
	def getClob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Clob: ...
	@overload
	def getAsciiStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getAsciiStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def updateShort(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...
	@overload
	def updateShort(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> None: ...
	def isFirst(self, ) -> Union[int, JBoolean]: ...
	def wasNull(self, ) -> Union[int, JBoolean]: ...
	@overload
	def updateBytes(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def updateBytes(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def getNString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getNString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getNClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.NClob: ...
	@overload
	def getNClob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.NClob: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	@overload
	def updateByte(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
	@overload
	def updateByte(self, arg0: Union[int, JInt], arg1: JByte, ) -> None: ...
	def beforeFirst(self, ) -> None: ...
	def getRow(self, ) -> Union[int, JInt]: ...
	def afterLast(self, ) -> None: ...
	def refreshRow(self, ) -> None: ...
	@overload
	def getInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getInt(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def updateClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Clob, ) -> None: ...
	@overload
	def updateClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Clob, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def newJDBCResultSet(arg0: javawrappers.org.hsqldb.result.Result, arg1: javawrappers.org.hsqldb.result.ResultMetaData, ) -> javawrappers.org.hsqldb.jdbc.JDBCResultSet: ...
	@overload
	def updateArray(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Array, ) -> None: ...
	@overload
	def updateArray(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Array, ) -> None: ...
	def getMetaData(self, ) -> javawrappers.java.sql.ResultSetMetaData: ...
	def relative(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def updateDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Date, ) -> None: ...
	@overload
	def updateDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Date, ) -> None: ...
	@overload
	def getNCharacterStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
	@overload
	def getNCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
	def isLast(self, ) -> Union[int, JBoolean]: ...
	def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
	@overload
	def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
	@overload
	def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
	@overload
	def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def updateBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def updateBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Blob, ) -> None: ...
	@overload
	def updateBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def updateBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Blob, ) -> None: ...
	@overload
	def updateBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateRowId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.RowId, ) -> None: ...
	@overload
	def updateRowId(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.RowId, ) -> None: ...
	@overload
	def getBoolean(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def getDate(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Date: ...
	def close(self, ) -> None: ...
	@overload
	def updateSQLXML(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
	@overload
	def updateSQLXML(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
	def moveToCurrentRow(self, ) -> None: ...
	def setFetchSize(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def updateTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Time, ) -> None: ...
	@overload
	def updateTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Time, ) -> None: ...
	def clearWarnings(self, ) -> None: ...
	@overload
	def getCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
	@overload
	def updateTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
	@overload
	def updateTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
	@overload
	def getBlob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Blob: ...
	@overload
	def getBlob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Blob: ...
	@overload
	def getBlob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Blob: ...
	@overload
	def getLong(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def getLong(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def rowDeleted(self, ) -> Union[int, JBoolean]: ...
	def isAfterLast(self, ) -> Union[int, JBoolean]: ...
	def insertRow(self, ) -> None: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def absolute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getUnicodeStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getUnicodeStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def updateFloat(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def updateFloat(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	def first(self, ) -> Union[int, JBoolean]: ...
	def updateRow(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCursorName(self, ) -> javawrappers.java.lang.String: ...
	def getHoldability(self, ) -> Union[int, JInt]: ...
	@overload
	def getArray(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Array: ...
	@overload
	def getArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Array: ...
	@overload
	def updateNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.NClob, ) -> None: ...
	@overload
	def updateNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.NClob, ) -> None: ...
	@overload
	def getBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def getBytes(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def getConcurrency(self, ) -> Union[int, JInt]: ...
	def getFetchSize(self, ) -> Union[int, JInt]: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def setFetchDirection(self, arg0: Union[int, JInt], ) -> None: ...
	def cancelRowUpdates(self, ) -> None: ...
	@overload
	def updateAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def updateAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	def getStatement(self, ) -> javawrappers.java.sql.Statement: ...
	def last(self, ) -> Union[int, JBoolean]: ...
	def getFetchDirection(self, ) -> Union[int, JInt]: ...
	@overload
	def updateNull(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def updateNull(self, arg0: Union[int, JInt], ) -> None: ...
	def isBeforeFirst(self, ) -> Union[int, JBoolean]: ...
	@overload
	def updateBoolean(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def updateBoolean(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def deleteRow(self, ) -> None: ...
	@overload
	def getURL(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def getURL(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.URL: ...
	@overload
	def getSQLXML(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.SQLXML: ...
	@overload
	def getSQLXML(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.SQLXML: ...
	@overload
	def updateBigDecimal(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
	@overload
	def updateBigDecimal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
	def rowInserted(self, ) -> Union[int, JBoolean]: ...
	@overload
	def updateInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def updateInt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def updateLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def updateLong(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def next(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
	def notifyAll(self, ) -> None: ...
	def findColumn(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getBinaryStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getBinaryStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getBinaryStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getRowId(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.RowId: ...
	@overload
	def getRowId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.RowId: ...
	@overload
	def getDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	def rowUpdated(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getFloat(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	@overload
	def updateString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def updateString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getRef(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Ref: ...
	@overload
	def getRef(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Ref: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getTimestamp(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def updateRef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Ref, ) -> None: ...
	@overload
	def updateRef(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Ref, ) -> None: ...
	@staticmethod
	def newEmptyResultSet() -> javawrappers.org.hsqldb.jdbc.JDBCResultSet: ...
	def previous(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	@overload
	def getShort(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def moveToInsertRow(self, ) -> None: ...
	@overload
	def updateNString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def updateNString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def updateDouble(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def updateDouble(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def updateNCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateNCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def updateCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def updateCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def updateBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def updateBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def updateBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...


class JDBCDatabaseMetaData:
	def supportsMinimumSQLGrammar(self, ) -> Union[int, JBoolean]: ...
	def getResultSetHoldability(self, ) -> Union[int, JInt]: ...
	def getMaxColumnsInGroupBy(self, ) -> Union[int, JInt]: ...
	def supportsSubqueriesInComparisons(self, ) -> Union[int, JBoolean]: ...
	def getMaxColumnsInSelect(self, ) -> Union[int, JInt]: ...
	def supportsCatalogsInDataManipulation(self, ) -> Union[int, JBoolean]: ...
	def nullPlusNonNullIsNull(self, ) -> Union[int, JBoolean]: ...
	def supportsDataDefinitionAndDataManipulationTransactions(self, ) -> Union[int, JBoolean]: ...
	def supportsTableCorrelationNames(self, ) -> Union[int, JBoolean]: ...
	def getDefaultTransactionIsolation(self, ) -> Union[int, JInt]: ...
	def supportsFullOuterJoins(self, ) -> Union[int, JBoolean]: ...
	def supportsExpressionsInOrderBy(self, ) -> Union[int, JBoolean]: ...
	def allProceduresAreCallable(self, ) -> Union[int, JBoolean]: ...
	def supportsResultSetConcurrency(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDriverMinorVersion(self, ) -> Union[int, JInt]: ...
	def getImportedKeys(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getMaxTablesInSelect(self, ) -> Union[int, JInt]: ...
	def nullsAreSortedAtStart(self, ) -> Union[int, JBoolean]: ...
	def supportsPositionedUpdate(self, ) -> Union[int, JBoolean]: ...
	def ownDeletesAreVisible(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getRowIdLifetime(self, ) -> javawrappers.java.sql.RowIdLifetime: ...
	def supportsResultSetHoldability(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getMaxStatements(self, ) -> Union[int, JInt]: ...
	def getDriverVersion(self, ) -> javawrappers.java.lang.String: ...
	def getSchemaTerm(self, ) -> javawrappers.java.lang.String: ...
	def getMaxCatalogNameLength(self, ) -> Union[int, JInt]: ...
	def getCrossReference(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getCatalogTerm(self, ) -> javawrappers.java.lang.String: ...
	def getAttributes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getMaxStatementLength(self, ) -> Union[int, JInt]: ...
	def supportsOuterJoins(self, ) -> Union[int, JBoolean]: ...
	def supportsBatchUpdates(self, ) -> Union[int, JBoolean]: ...
	def supportsLimitedOuterJoins(self, ) -> Union[int, JBoolean]: ...
	def getMaxColumnsInTable(self, ) -> Union[int, JInt]: ...
	def allTablesAreSelectable(self, ) -> Union[int, JBoolean]: ...
	def getMaxCharLiteralLength(self, ) -> Union[int, JInt]: ...
	def supportsMultipleOpenResults(self, ) -> Union[int, JBoolean]: ...
	def getMaxRowSize(self, ) -> Union[int, JInt]: ...
	def supportsUnion(self, ) -> Union[int, JBoolean]: ...
	def supportsRefCursors(self, ) -> Union[int, JBoolean]: ...
	def ownUpdatesAreVisible(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsOpenCursorsAcrossCommit(self, ) -> Union[int, JBoolean]: ...
	def getSearchStringEscape(self, ) -> javawrappers.java.lang.String: ...
	def getMaxBinaryLiteralLength(self, ) -> Union[int, JInt]: ...
	def supportsResultSetType(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsAlterTableWithDropColumn(self, ) -> Union[int, JBoolean]: ...
	def supportsCatalogsInProcedureCalls(self, ) -> Union[int, JBoolean]: ...
	def getUDTs(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(Union[int, JInt], 1), ) -> javawrappers.java.sql.ResultSet: ...
	def supportsSelectForUpdate(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def supportsOpenStatementsAcrossRollback(self, ) -> Union[int, JBoolean]: ...
	def getSystemFunctions(self, ) -> javawrappers.java.lang.String: ...
	def supportsColumnAliasing(self, ) -> Union[int, JBoolean]: ...
	def insertsAreDetected(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsMixedCaseIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def getDatabaseProductVersion(self, ) -> javawrappers.java.lang.String: ...
	def getSQLKeywords(self, ) -> javawrappers.java.lang.String: ...
	def dataDefinitionIgnoredInTransactions(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getJDBCMajorVersion(self, ) -> Union[int, JInt]: ...
	def getMaxColumnNameLength(self, ) -> Union[int, JInt]: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def getProcedureColumns(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getCatalogs(self, ) -> javawrappers.java.sql.ResultSet: ...
	def locatorsUpdateCopy(self, ) -> Union[int, JBoolean]: ...
	def supportsANSI92FullSQL(self, ) -> Union[int, JBoolean]: ...
	def supportsSchemasInPrivilegeDefinitions(self, ) -> Union[int, JBoolean]: ...
	def supportsMultipleResultSets(self, ) -> Union[int, JBoolean]: ...
	def storesUpperCaseIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def getMaxLogicalLobSize(self, ) -> Union[long, JLong]: ...
	def getDriverName(self, ) -> javawrappers.java.lang.String: ...
	def getMaxConnections(self, ) -> Union[int, JInt]: ...
	def othersUpdatesAreVisible(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getVersionColumns(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsNamedParameters(self, ) -> Union[int, JBoolean]: ...
	def doesMaxRowSizeIncludeBlobs(self, ) -> Union[int, JBoolean]: ...
	def getBestRowIdentifier(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JBoolean], ) -> javawrappers.java.sql.ResultSet: ...
	def getProcedures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsSubqueriesInQuantifieds(self, ) -> Union[int, JBoolean]: ...
	def getDriverMajorVersion(self, ) -> Union[int, JInt]: ...
	def getMaxSchemaNameLength(self, ) -> Union[int, JInt]: ...
	def supportsIntegrityEnhancementFacility(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def supportsSharding(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTablePrivileges(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsExtendedSQLGrammar(self, ) -> Union[int, JBoolean]: ...
	@overload
	def supportsConvert(self, ) -> Union[int, JBoolean]: ...
	@overload
	def supportsConvert(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getFunctionColumns(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsPositionedDelete(self, ) -> Union[int, JBoolean]: ...
	def autoCommitFailureClosesAllResultSets(self, ) -> Union[int, JBoolean]: ...
	def getMaxColumnsInOrderBy(self, ) -> Union[int, JInt]: ...
	def getDatabaseMajorVersion(self, ) -> Union[int, JInt]: ...
	def supportsANSI92IntermediateSQL(self, ) -> Union[int, JBoolean]: ...
	def getSuperTypes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsCatalogsInTableDefinitions(self, ) -> Union[int, JBoolean]: ...
	def supportsMultipleTransactions(self, ) -> Union[int, JBoolean]: ...
	def supportsOpenCursorsAcrossRollback(self, ) -> Union[int, JBoolean]: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def supportsStatementPooling(self, ) -> Union[int, JBoolean]: ...
	def usesLocalFiles(self, ) -> Union[int, JBoolean]: ...
	def othersInsertsAreVisible(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def storesMixedCaseQuotedIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def supportsSchemasInProcedureCalls(self, ) -> Union[int, JBoolean]: ...
	def getMaxCursorNameLength(self, ) -> Union[int, JInt]: ...
	def getUserName(self, ) -> javawrappers.java.lang.String: ...
	def deletesAreDetected(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsDataManipulationTransactionsOnly(self, ) -> Union[int, JBoolean]: ...
	def supportsTransactionIsolationLevel(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsLikeEscapeClause(self, ) -> Union[int, JBoolean]: ...
	def supportsSchemasInDataManipulation(self, ) -> Union[int, JBoolean]: ...
	def supportsGetGeneratedKeys(self, ) -> Union[int, JBoolean]: ...
	def supportsGroupBy(self, ) -> Union[int, JBoolean]: ...
	def getIndexInfo(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> javawrappers.java.sql.ResultSet: ...
	def supportsSchemasInIndexDefinitions(self, ) -> Union[int, JBoolean]: ...
	def getCatalogSeparator(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSchemas(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getSchemas(self, ) -> javawrappers.java.sql.ResultSet: ...
	def getExtraNameCharacters(self, ) -> javawrappers.java.lang.String: ...
	def supportsDifferentTableCorrelationNames(self, ) -> Union[int, JBoolean]: ...
	def getURL(self, ) -> javawrappers.java.lang.String: ...
	def supportsTransactions(self, ) -> Union[int, JBoolean]: ...
	def getDatabaseMinorVersion(self, ) -> Union[int, JInt]: ...
	def storesLowerCaseQuotedIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def supportsStoredProcedures(self, ) -> Union[int, JBoolean]: ...
	def supportsANSI92EntryLevelSQL(self, ) -> Union[int, JBoolean]: ...
	def supportsCatalogsInPrivilegeDefinitions(self, ) -> Union[int, JBoolean]: ...
	def getIdentifierQuoteString(self, ) -> javawrappers.java.lang.String: ...
	def getSQLStateType(self, ) -> Union[int, JInt]: ...
	def getColumnPrivileges(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getMaxTableNameLength(self, ) -> Union[int, JInt]: ...
	def getMaxColumnsInIndex(self, ) -> Union[int, JInt]: ...
	def getJDBCMinorVersion(self, ) -> Union[int, JInt]: ...
	def getTableTypes(self, ) -> javawrappers.java.sql.ResultSet: ...
	def getTimeDateFunctions(self, ) -> javawrappers.java.lang.String: ...
	def nullsAreSortedHigh(self, ) -> Union[int, JBoolean]: ...
	def supportsNonNullableColumns(self, ) -> Union[int, JBoolean]: ...
	def getMaxUserNameLength(self, ) -> Union[int, JInt]: ...
	def supportsSubqueriesInExists(self, ) -> Union[int, JBoolean]: ...
	def ownInsertsAreVisible(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsOpenStatementsAcrossCommit(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getSuperTables(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsSavepoints(self, ) -> Union[int, JBoolean]: ...
	def dataDefinitionCausesTransactionCommit(self, ) -> Union[int, JBoolean]: ...
	def getNumericFunctions(self, ) -> javawrappers.java.lang.String: ...
	def nullsAreSortedAtEnd(self, ) -> Union[int, JBoolean]: ...
	def generatedKeyAlwaysReturned(self, ) -> Union[int, JBoolean]: ...
	def supportsUnionAll(self, ) -> Union[int, JBoolean]: ...
	def isCatalogAtStart(self, ) -> Union[int, JBoolean]: ...
	def supportsAlterTableWithAddColumn(self, ) -> Union[int, JBoolean]: ...
	def othersDeletesAreVisible(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsCoreSQLGrammar(self, ) -> Union[int, JBoolean]: ...
	def getMaxProcedureNameLength(self, ) -> Union[int, JInt]: ...
	def getColumns(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	def getDatabaseProductName(self, ) -> javawrappers.java.lang.String: ...
	def supportsGroupByUnrelated(self, ) -> Union[int, JBoolean]: ...
	def nullsAreSortedLow(self, ) -> Union[int, JBoolean]: ...
	def getTables(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.sql.ResultSet: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def supportsCorrelatedSubqueries(self, ) -> Union[int, JBoolean]: ...
	def supportsGroupByBeyondSelect(self, ) -> Union[int, JBoolean]: ...
	def supportsMixedCaseQuotedIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def supportsCatalogsInIndexDefinitions(self, ) -> Union[int, JBoolean]: ...
	def getStringFunctions(self, ) -> javawrappers.java.lang.String: ...
	def supportsOrderByUnrelated(self, ) -> Union[int, JBoolean]: ...
	def getMaxIndexLength(self, ) -> Union[int, JInt]: ...
	def getProcedureTerm(self, ) -> javawrappers.java.lang.String: ...
	def getFunctions(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getClientInfoProperties(self, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsStoredFunctionsUsingCallSyntax(self, ) -> Union[int, JBoolean]: ...
	def getPseudoColumns(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def usesLocalFilePerTable(self, ) -> Union[int, JBoolean]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def updatesAreDetected(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def supportsSubqueriesInIns(self, ) -> Union[int, JBoolean]: ...
	def storesLowerCaseIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def getTypeInfo(self, ) -> javawrappers.java.sql.ResultSet: ...
	def getExportedKeys(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def getPrimaryKeys(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def supportsSchemasInTableDefinitions(self, ) -> Union[int, JBoolean]: ...
	def storesUpperCaseQuotedIdentifiers(self, ) -> Union[int, JBoolean]: ...
	def storesMixedCaseIdentifiers(self, ) -> Union[int, JBoolean]: ...


class JDBCNClob:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setStringBuffer(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[long, JLong]: ...
	def getSubString(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getCharacterStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.Reader: ...
	def getAsciiStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def setCharacterStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.Writer: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def setAsciiStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def position(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Clob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def free(self, ) -> None: ...


class JDBCBlobClient:
	def __init__(self, arg0: javawrappers.org.hsqldb.SessionInterface, arg1: javawrappers.org.hsqldb.types.BlobDataID, ): ...
	@overload
	def setBytes(self, arg0: Union[long, JLong], arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def setBytes(self, arg0: Union[long, JLong], arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setWritable(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCResultSet, arg1: Union[int, JInt], ) -> None: ...
	def clearUpdates(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getBinaryStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getBinaryStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.InputStream: ...
	def length(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getBytes(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def getBlob(self, ) -> javawrappers.org.hsqldb.types.BlobDataID: ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBinaryStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Blob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def free(self, ) -> None: ...


class JDBCClobFile:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	class ReaderAdapter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getFilePointer(self, ) -> Union[long, JLong]: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def nullReader() -> javawrappers.java.io.Reader: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def ready(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	class WriterAdapter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def nullWriter() -> javawrappers.java.io.Writer: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getFilePointer(self, ) -> Union[long, JLong]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setDeleteOnFree(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSubString(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def getFile(self, ) -> javawrappers.java.io.File: ...
	def getAsciiStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def setCharacterStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.Writer: ...
	def flush(self, ) -> None: ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def isDeleteOnFree(self, ) -> Union[int, JBoolean]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def free(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def length(self, ) -> Union[long, JLong]: ...
	@overload
	def getCharacterStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def setAsciiStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Clob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: JArray(Union[string, JString], 1), arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class JDBCBlob:
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def setBytes(self, arg0: Union[long, JLong], arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def setBytes(self, arg0: Union[long, JLong], arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getBinaryStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getBinaryStream(self, ) -> javawrappers.java.io.InputStream: ...
	def length(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getBytes(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBinaryStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Blob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def free(self, ) -> None: ...


class JDBCDriver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getParentLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getMinorVersion(self, ) -> Union[int, JInt]: ...
	def jdbcCompliant(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def acceptsURL(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getConnection(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Properties, ) -> javawrappers.java.sql.Connection: ...
	def getMajorVersion(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def connect(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Properties, ) -> javawrappers.java.sql.Connection: ...
	def getPropertyInfo(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Properties, ) -> JArray(javawrappers.java.sql.DriverPropertyInfo, 1): ...


class JDBCClob:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setStringBuffer(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[long, JLong]: ...
	def getSubString(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getCharacterStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.Reader: ...
	def getAsciiStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def setCharacterStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.Writer: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def setAsciiStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def position(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Clob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def free(self, ) -> None: ...


class JDBCArrayBasic:
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.hsqldb.types.Type, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getResultSet(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getResultSet(self, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getResultSet(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.java.util.Map, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getResultSet(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.sql.ResultSet: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getArray(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getArray(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getArray(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getArray(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def free(self, ) -> None: ...
	def getBaseTypeName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getBaseType(self, ) -> Union[int, JInt]: ...


class JDBCDataSource:
	def __init__(self, ): ...
	def createConnectionBuilder(self, ) -> javawrappers.java.sql.ConnectionBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setDatabase(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def getParentLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getDatabaseName(self, ) -> javawrappers.java.lang.String: ...
	def getNetworkProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getDataSourceName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	@overload
	def getConnection(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Connection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createShardingKeyBuilder(self, ) -> javawrappers.java.sql.ShardingKeyBuilder: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getReference(self, ) -> javawrappers.javax.naming.Reference: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def setLoginTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setUrl(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getUrl(self, ) -> javawrappers.java.lang.String: ...
	def getURL(self, ) -> javawrappers.java.lang.String: ...
	def getDatabase(self, ) -> javawrappers.java.lang.String: ...
	def setDatabaseName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLoginTimeout(self, ) -> Union[int, JInt]: ...


class JDBCCallableStatement:
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCConnection, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	def cancel(self, ) -> None: ...
	def getResultSetHoldability(self, ) -> Union[int, JInt]: ...
	@overload
	def getByte(self, arg0: Union[int, JInt], ) -> JByte: ...
	@overload
	def getByte(self, arg0: javawrappers.java.lang.String, ) -> JByte: ...
	def getMaxFieldSize(self, ) -> Union[int, JInt]: ...
	@overload
	def getBigDecimal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getBigDecimal(self, arg0: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getBigDecimal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def getClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Clob: ...
	@overload
	def getClob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Clob: ...
	@overload
	def setObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def setObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
	def setQueryTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.NClob, ) -> None: ...
	@overload
	def setNClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.NClob, ) -> None: ...
	@overload
	def setNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	def getParameterMetaData(self, ) -> javawrappers.java.sql.ParameterMetaData: ...
	def wasNull(self, ) -> Union[int, JBoolean]: ...
	def setMaxRows(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getNString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getNString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getNClob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.NClob: ...
	@overload
	def getNClob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.NClob: ...
	@overload
	def setTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Time, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def setTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Time, ) -> None: ...
	@overload
	def setTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Time, ) -> None: ...
	@overload
	def setTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Time, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	def setUnicodeStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setInt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def getInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getInt(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def setString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	def executeLargeBatch(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def setClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Clob, ) -> None: ...
	@overload
	def setClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Clob, ) -> None: ...
	@overload
	def setClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setClob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	def enquoteLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def registerOutParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.SQLType, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.SQLType, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLType, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLType, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def registerOutParameter(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getMaxRows(self, ) -> Union[int, JInt]: ...
	@overload
	def setNString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setNString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getMetaData(self, ) -> javawrappers.java.sql.ResultSetMetaData: ...
	def getLargeMaxRows(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, ) -> Union[long, JLong]: ...
	def getQueryTimeout(self, ) -> Union[int, JInt]: ...
	@overload
	def getNCharacterStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
	@overload
	def getNCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
	@overload
	def setNull(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setNull(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setNull(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setNull(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
	@overload
	def setSQLXML(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
	@overload
	def setSQLXML(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def setNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setNCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setNCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	def setLargeMaxRows(self, arg0: Union[long, JLong], ) -> None: ...
	def setMaxFieldSize(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Blob, ) -> None: ...
	@overload
	def setBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Blob, ) -> None: ...
	@overload
	def setBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setBlob(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	def isPoolable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def getBoolean(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Date: ...
	@overload
	def getDate(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Date: ...
	def clearBatch(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def setBigDecimal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
	@overload
	def setBigDecimal(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
	def closeOnCompletion(self, ) -> None: ...
	def setFetchSize(self, arg0: Union[int, JInt], ) -> None: ...
	def clearWarnings(self, ) -> None: ...
	@overload
	def getCharacterStream(self, arg0: Union[int, JInt], ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.Reader: ...
	@overload
	def getBlob(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Blob: ...
	@overload
	def getBlob(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Blob: ...
	@overload
	def getLong(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@overload
	def getLong(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def getResultSetConcurrency(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Date, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def setDate(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Date, ) -> None: ...
	@overload
	def setDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Date, ) -> None: ...
	@overload
	def setDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Date, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def clearParameters(self, ) -> None: ...
	@overload
	def setBoolean(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setBoolean(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Array: ...
	@overload
	def getArray(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Array: ...
	def setPoolable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpdateCount(self, ) -> Union[int, JInt]: ...
	@overload
	def setShort(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> None: ...
	@overload
	def setShort(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...
	def getFetchSize(self, ) -> Union[int, JInt]: ...
	@overload
	def getBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def getBytes(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setDouble(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setDouble(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setFetchDirection(self, arg0: Union[int, JInt], ) -> None: ...
	def setCursorName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFetchDirection(self, ) -> Union[int, JInt]: ...
	def getResultSetType(self, ) -> Union[int, JInt]: ...
	@overload
	def getMoreResults(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getMoreResults(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def addBatch(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addBatch(self, ) -> None: ...
	def setArray(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Array, ) -> None: ...
	def isCloseOnCompletion(self, ) -> Union[int, JBoolean]: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def executeQuery(self, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def setURL(self, arg0: Union[int, JInt], arg1: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def setURL(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URL, ) -> None: ...
	def enquoteIdentifier(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def getURL(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.URL: ...
	@overload
	def getURL(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def setLong(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def getSQLXML(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.SQLXML: ...
	@overload
	def getSQLXML(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.SQLXML: ...
	def getResultSet(self, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def setBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	def setEscapeProcessing(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def enquoteNCharLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def setByte(self, arg0: Union[int, JInt], arg1: JByte, ) -> None: ...
	@overload
	def setByte(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
	def getLargeUpdateCount(self, ) -> Union[long, JLong]: ...
	@overload
	def getTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Time: ...
	@overload
	def getTime(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Time: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getRowId(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.RowId: ...
	@overload
	def getRowId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.RowId: ...
	@overload
	def getDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	@overload
	def getDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getFloat(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	@overload
	def setCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
	def setRef(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Ref, ) -> None: ...
	@overload
	def getRef(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Ref: ...
	@overload
	def getRef(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Ref: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: Union[int, JInt], ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def getTimestamp(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Timestamp: ...
	@overload
	def setTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Timestamp, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def setTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
	@overload
	def setTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
	@overload
	def setTimestamp(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.Timestamp, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def setBytes(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def setBytes(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def setFloat(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setFloat(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	def getGeneratedKeys(self, ) -> javawrappers.java.sql.ResultSet: ...
	def executeBatch(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	@overload
	def getShort(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isSimpleIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def setRowId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.sql.RowId, ) -> None: ...
	@overload
	def setRowId(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.RowId, ) -> None: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...


class JDBCSavepoint:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSavepointName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getSavepointId(self, ) -> Union[int, JInt]: ...


class JDBCRowId:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.sql.RowId, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getBytes(self, ) -> JArray(JByte, 1): ...


class JDBCPreparedStatement:
	def cancel(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getResultSetHoldability(self, ) -> Union[int, JInt]: ...
	def getMaxFieldSize(self, ) -> Union[int, JInt]: ...
	def setShort(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> None: ...
	def setPoolable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpdateCount(self, ) -> Union[int, JInt]: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, ) -> None: ...
	@overload
	def setObject(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.sql.SQLType, arg3: Union[int, JInt], ) -> None: ...
	def getFetchSize(self, ) -> Union[int, JInt]: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def setQueryTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setDouble(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setFetchDirection(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.NClob, ) -> None: ...
	@overload
	def setNClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	def getParameterMetaData(self, ) -> javawrappers.java.sql.ParameterMetaData: ...
	def setMaxRows(self, arg0: Union[int, JInt], ) -> None: ...
	def setCursorName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Time, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def setTime(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Time, ) -> None: ...
	def getFetchDirection(self, ) -> Union[int, JInt]: ...
	def getResultSetType(self, ) -> Union[int, JInt]: ...
	def setUnicodeStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def getMoreResults(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getMoreResults(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def addBatch(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addBatch(self, ) -> None: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, ) -> Union[int, JBoolean]: ...
	def setInt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def setArray(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Array, ) -> None: ...
	def isCloseOnCompletion(self, ) -> Union[int, JBoolean]: ...
	@overload
	def executeQuery(self, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def executeQuery(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.ResultSet: ...
	def setURL(self, arg0: Union[int, JInt], arg1: javawrappers.java.net.URL, ) -> None: ...
	def enquoteIdentifier(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def setLong(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def setString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setAsciiStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	def executeLargeBatch(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def setClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Clob, ) -> None: ...
	@overload
	def setClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setClob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	def getResultSet(self, ) -> javawrappers.java.sql.ResultSet: ...
	def enquoteLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def setBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setBinaryStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	def setNString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def getMaxRows(self, ) -> Union[int, JInt]: ...
	def getMetaData(self, ) -> javawrappers.java.sql.ResultSetMetaData: ...
	def setEscapeProcessing(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLargeMaxRows(self, ) -> Union[long, JLong]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, ) -> Union[int, JInt]: ...
	@overload
	def executeUpdate(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def enquoteNCharLiteral(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setByte(self, arg0: Union[int, JInt], arg1: JByte, ) -> None: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> Union[long, JLong]: ...
	@overload
	def executeLargeUpdate(self, ) -> Union[long, JLong]: ...
	def getLargeUpdateCount(self, ) -> Union[long, JLong]: ...
	def getQueryTimeout(self, ) -> Union[int, JInt]: ...
	@overload
	def setNull(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setNull(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
	def setSQLXML(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.SQLXML, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def setNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setNCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	@overload
	def setCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setCharacterStream(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.Reader, arg2: Union[long, JLong], ) -> None: ...
	def setRef(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Ref, ) -> None: ...
	def setLargeMaxRows(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMaxFieldSize(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def setBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def setBlob(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Blob, ) -> None: ...
	def isPoolable(self, ) -> Union[int, JBoolean]: ...
	def clearBatch(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def setTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Timestamp, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	def setTimestamp(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Timestamp, ) -> None: ...
	def setBytes(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	def setFloat(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	def setBigDecimal(self, arg0: Union[int, JInt], arg1: javawrappers.java.math.BigDecimal, ) -> None: ...
	def closeOnCompletion(self, ) -> None: ...
	def getGeneratedKeys(self, ) -> javawrappers.java.sql.ResultSet: ...
	def executeBatch(self, ) -> JArray(Union[int, JInt], 1): ...
	def setFetchSize(self, arg0: Union[int, JInt], ) -> None: ...
	def clearWarnings(self, ) -> None: ...
	def getResultSetConcurrency(self, ) -> Union[int, JInt]: ...
	def isSimpleIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def setRowId(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.RowId, ) -> None: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Date, ) -> None: ...
	@overload
	def setDate(self, arg0: Union[int, JInt], arg1: javawrappers.java.sql.Date, arg2: javawrappers.java.util.Calendar, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def clearParameters(self, ) -> None: ...
	def setBoolean(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...


class JDBCConnectionEventListener:
	def connectionErrorOccurred(self, arg0: javawrappers.java.sql.SQLException, ) -> None: ...
	def connectionClosed(self, ) -> None: ...


class JDBCPool:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	class RefState:


	def createConnectionBuilder(self, ) -> javawrappers.java.sql.ConnectionBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setDatabase(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def getParentLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getDatabaseName(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getDataSourceName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getConnection(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Connection: ...
	@overload
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	def statementErrorOccurred(self, arg0: javawrappers.javax.sql.StatementEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createShardingKeyBuilder(self, ) -> javawrappers.java.sql.ShardingKeyBuilder: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, arg0: Union[int, JInt], ) -> None: ...
	def getReference(self, ) -> javawrappers.javax.naming.Reference: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def setLoginTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setUrl(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def connectionErrorOccurred(self, arg0: javawrappers.javax.sql.ConnectionEvent, ) -> None: ...
	def getUrl(self, ) -> javawrappers.java.lang.String: ...
	def getURL(self, ) -> javawrappers.java.lang.String: ...
	def getDatabase(self, ) -> javawrappers.java.lang.String: ...
	def setDatabaseName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def statementClosed(self, arg0: javawrappers.javax.sql.StatementEvent, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def connectionClosed(self, arg0: javawrappers.javax.sql.ConnectionEvent, ) -> None: ...
	def getLoginTimeout(self, ) -> Union[int, JInt]: ...


class JDBCColumnMetaData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JDBCParameterMetaData:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getParameterCount(self, ) -> Union[int, JInt]: ...
	def isSigned(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getParameterMode(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getPrecision(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getParameterType(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getScale(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNullable(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterClassName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getParameterTypeName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class JDBCUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def sqlExceptionSQL(arg0: Union[int, JInt], ) -> javawrappers.java.sql.SQLException: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def nullArgument() -> javawrappers.java.sql.SQLException: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def connectionClosedException() -> javawrappers.java.sql.SQLException: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def outOfRangeArgument() -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def outOfRangeArgument(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.SQLException: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def invalidArgument(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def invalidArgument() -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: javawrappers.org.hsqldb.result.Result, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Throwable, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: javawrappers.org.hsqldb.HsqlException, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: javawrappers.org.hsqldb.HsqlException, arg1: javawrappers.java.lang.Throwable, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: Union[int, JInt], ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> javawrappers.java.sql.SQLException: ...
	@overload
	@staticmethod
	def sqlException(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.sql.SQLException: ...
	@staticmethod
	def sqlWarning(arg0: javawrappers.org.hsqldb.result.Result, ) -> javawrappers.java.sql.SQLWarning: ...


class JDBCConnection:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCConnection, arg1: javawrappers.org.hsqldb.jdbc.JDBCConnectionEventListener, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.SessionInterface, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def beginRequest(self, ) -> None: ...
	def getHoldability(self, ) -> Union[int, JInt]: ...
	def commit(self, ) -> None: ...
	def setCatalog(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setHoldability(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.PreparedStatement: ...
	def createClob(self, ) -> javawrappers.java.sql.Clob: ...
	def closeFully(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setClientInfo(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	@overload
	def setClientInfo(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def createSQLXML(self, ) -> javawrappers.java.sql.SQLXML: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getCatalog(self, ) -> javawrappers.java.lang.String: ...
	def createBlob(self, ) -> javawrappers.java.sql.Blob: ...
	@overload
	def createStatement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.sql.Statement: ...
	@overload
	def createStatement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.sql.Statement: ...
	@overload
	def createStatement(self, ) -> javawrappers.java.sql.Statement: ...
	@overload
	def setShardingKeyIfValid(self, arg0: javawrappers.java.sql.ShardingKey, arg1: javawrappers.java.sql.ShardingKey, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def setShardingKeyIfValid(self, arg0: javawrappers.java.sql.ShardingKey, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def abort(self, arg0: javawrappers.java.util.concurrent.Executor, ) -> None: ...
	def setAutoCommit(self, arg0: Union[int, JBoolean], ) -> None: ...
	def reset(self, ) -> None: ...
	def getMetaData(self, ) -> javawrappers.java.sql.DatabaseMetaData: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def prepareCall(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.sql.CallableStatement: ...
	@overload
	def prepareCall(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.sql.CallableStatement: ...
	@overload
	def prepareCall(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.CallableStatement: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTransactionIsolation(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
	def releaseSavepoint(self, arg0: javawrappers.java.sql.Savepoint, ) -> None: ...
	def notify(self, ) -> None: ...
	def nativeSQL(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def createArrayOf(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.sql.Array: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setSavepoint(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Savepoint: ...
	@overload
	def setSavepoint(self, ) -> javawrappers.java.sql.Savepoint: ...
	def close(self, ) -> None: ...
	def createNClob(self, ) -> javawrappers.java.sql.NClob: ...
	@overload
	def rollback(self, arg0: javawrappers.java.sql.Savepoint, ) -> None: ...
	@overload
	def rollback(self, ) -> None: ...
	def setNetworkTimeout(self, arg0: javawrappers.java.util.concurrent.Executor, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setShardingKey(self, arg0: javawrappers.java.sql.ShardingKey, arg1: javawrappers.java.sql.ShardingKey, ) -> None: ...
	@overload
	def setShardingKey(self, arg0: javawrappers.java.sql.ShardingKey, ) -> None: ...
	def setTypeMap(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def isValid(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAutoCommit(self, ) -> Union[int, JBoolean]: ...
	def endRequest(self, ) -> None: ...
	def clearWarnings(self, ) -> None: ...
	def getSchema(self, ) -> javawrappers.java.lang.String: ...
	def getNetworkTimeout(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTransactionIsolation(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createStruct(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.sql.Struct: ...
	def getSession(self, ) -> javawrappers.org.hsqldb.SessionInterface: ...
	@overload
	def getClientInfo(self, ) -> javawrappers.java.util.Properties: ...
	@overload
	def getClientInfo(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getTypeMap(self, ) -> javawrappers.java.util.Map: ...


class JDBCClobClient:
	def __init__(self, arg0: javawrappers.org.hsqldb.SessionInterface, arg1: javawrappers.org.hsqldb.types.ClobDataID, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setWritable(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCResultSet, arg1: Union[int, JInt], ) -> None: ...
	def clearUpdates(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[long, JLong]: ...
	def getSubString(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getCharacterStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def getCharacterStream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.io.Reader: ...
	def getClob(self, ) -> javawrappers.org.hsqldb.types.ClobDataID: ...
	def getAsciiStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def setCharacterStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.Writer: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setString(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def setAsciiStream(self, arg0: Union[long, JLong], ) -> javawrappers.java.io.OutputStream: ...
	def truncate(self, arg0: Union[long, JLong], ) -> None: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def position(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: javawrappers.java.sql.Clob, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def free(self, ) -> None: ...


class JDBCArray:
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.hsqldb.types.Type, arg2: javawrappers.org.hsqldb.types.Type, arg3: javawrappers.org.hsqldb.SessionInterface, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getResultSet(self, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getResultSet(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getResultSet(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.sql.ResultSet: ...
	@overload
	def getResultSet(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.java.util.Map, ) -> javawrappers.java.sql.ResultSet: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getArray(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getArray(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getArray(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getArray(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def free(self, ) -> None: ...
	def getBaseTypeName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getArrayInternal(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getBaseType(self, ) -> Union[int, JInt]: ...


