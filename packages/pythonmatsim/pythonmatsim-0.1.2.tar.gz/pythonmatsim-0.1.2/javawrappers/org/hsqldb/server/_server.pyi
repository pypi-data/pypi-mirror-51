################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.hsqldb.server
import javawrappers.java.lang
import javawrappers.org.hsqldb.persist
import javawrappers.java.util
import javawrappers.org.hsqldb.result
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.hsqldb
import javawrappers.org.hsqldb.types
import javawrappers.javax.net.ssl

from jpype.types import *
from typing import Union

from typing import overload

class HsqlServerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createHsqlServer(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.server.HsqlSocketRequestHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ServerAcl:
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	class InternalException:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class AclEntry:
		def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		def validateMask(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class AclFormatException:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def matches(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def validateMask(self, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setPrintWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def dottedNotation(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def permitAccess(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def permitAccess(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def colonNotation(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class HsqlSocketRequestHandler:
	def signalCloseAllServerConnections(self, ) -> None: ...
	def handleConnection(self, arg0: javawrappers.java.net.Socket, ) -> None: ...


class ServerProperties:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.io.File, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def save(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def save(self, ) -> None: ...
	@overload
	def addProperties(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	@overload
	def addProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def notify(self, ) -> None: ...
	def setFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def load(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def isPropertyTrue(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isPropertyTrue(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def propertiesFileExists(self, ) -> Union[int, JBoolean]: ...
	def validate(self, ) -> None: ...
	@overload
	@staticmethod
	def validateProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def validateProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def argArrayToProps(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.HsqlProperties: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getErrorKeys(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setPropertyIfNotExists(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPropertyWithinRange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getIntegerProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getIntegerProperty(arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def delimitedArgPairsToProps(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.HsqlProperties: ...


class WebServer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def handleConnection(self, arg0: javawrappers.java.net.Socket, ) -> None: ...
	def setProperties(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	def getDatabaseName(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setErrWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def isTls(self, ) -> Union[int, JBoolean]: ...
	def getProductName(self, ) -> javawrappers.java.lang.String: ...
	def getDefaultWebPage(self, ) -> javawrappers.java.lang.String: ...
	def getWebRoot(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def putPropertiesFromFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def putPropertiesFromFile(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def isRestartOnShutdown(self, ) -> Union[int, JBoolean]: ...
	def setDatabasePath(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDatabasePath(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def getHelpString(self, ) -> javawrappers.java.lang.String: ...
	def getErrWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def getStateDescriptor(self, ) -> javawrappers.java.lang.String: ...
	def shutdownWithCatalogs(self, arg0: Union[int, JInt], ) -> None: ...
	def stop(self, ) -> Union[int, JInt]: ...
	def getServerId(self, ) -> javawrappers.java.lang.String: ...
	def setTls(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTrace(self, ) -> Union[int, JBoolean]: ...
	def setWebRoot(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def shutdown(self, ) -> None: ...
	def setTrace(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setRestartOnShutdown(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setNoSystemExit(self, arg0: Union[int, JBoolean], ) -> None: ...
	def checkRunning(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getProductVersion(self, ) -> javawrappers.java.lang.String: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def notify(self, ) -> None: ...
	@overload
	def notify(self, arg0: Union[int, JInt], ) -> None: ...
	def signalCloseAllServerConnections(self, ) -> None: ...
	def getDatabaseType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def setSilent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def shutdownCatalogs(self, arg0: Union[int, JInt], ) -> None: ...
	def getAddress(self, ) -> javawrappers.java.lang.String: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def isNoSystemExit(self, ) -> Union[int, JBoolean]: ...
	def isNotRunning(self, ) -> Union[int, JBoolean]: ...
	def setAddress(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def start(self, ) -> Union[int, JInt]: ...
	def setDefaultWebPage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getProtocol(self, ) -> javawrappers.java.lang.String: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def getState(self, ) -> Union[int, JInt]: ...
	def putPropertiesFromString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDatabaseName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isSilent(self, ) -> Union[int, JBoolean]: ...
	def getServerError(self, ) -> javawrappers.java.lang.Throwable: ...
	def getServerThread(self, ) -> javawrappers.java.lang.Thread: ...


class HsqlSocketFactorySecure:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def handshakeCompleted(self, arg0: javawrappers.javax.net.ssl.HandshakeCompletedEvent, ) -> None: ...
	def isSecure(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.server.HsqlSocketFactory: ...
	def configureSocket(self, arg0: javawrappers.java.net.Socket, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.ServerSocket: ...


class OdbcUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def hexCharsToOctalOctets(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getIdForColumn(arg0: Union[int, JInt], arg1: javawrappers.org.hsqldb.result.ResultMetaData, ) -> Union[int, JShort]: ...
	@staticmethod
	def getTableOidForColumn(arg0: Union[int, JInt], arg1: javawrappers.org.hsqldb.result.ResultMetaData, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class Server:
	def __init__(self, ): ...
	class ServerThread:
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def handleConnection(self, arg0: javawrappers.java.net.Socket, ) -> None: ...
	def setProperties(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def getDatabaseName(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setErrWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def isTls(self, ) -> Union[int, JBoolean]: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getProductName(self, ) -> javawrappers.java.lang.String: ...
	def getDefaultWebPage(self, ) -> javawrappers.java.lang.String: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def interrupt(self, ) -> None: ...
	def getWebRoot(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def putPropertiesFromFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def putPropertiesFromFile(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def isRestartOnShutdown(self, ) -> Union[int, JBoolean]: ...
	def setDatabasePath(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def suspend(self, ) -> None: ...
	def getDatabasePath(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def getHelpString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def getErrWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def getStateDescriptor(self, ) -> javawrappers.java.lang.String: ...
	def shutdownWithCatalogs(self, arg0: Union[int, JInt], ) -> None: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	@overload
	def stop(self, ) -> None: ...
	@overload
	def stop(self, ) -> Union[int, JInt]: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def getServerId(self, ) -> javawrappers.java.lang.String: ...
	def setTls(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTrace(self, ) -> Union[int, JBoolean]: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def setWebRoot(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def shutdown(self, ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setTrace(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setRestartOnShutdown(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setNoSystemExit(self, arg0: Union[int, JBoolean], ) -> None: ...
	def checkRunning(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def getProductVersion(self, ) -> javawrappers.java.lang.String: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def notify(self, ) -> None: ...
	@overload
	def notify(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def signalCloseAllServerConnections(self, ) -> None: ...
	def getDatabaseType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def setSilent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def shutdownCatalogs(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def yield_() -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	def getAddress(self, ) -> javawrappers.java.lang.String: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def isNoSystemExit(self, ) -> Union[int, JBoolean]: ...
	def isNotRunning(self, ) -> Union[int, JBoolean]: ...
	def setAddress(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	@overload
	def start(self, ) -> Union[int, JInt]: ...
	@overload
	def start(self, ) -> None: ...
	def setDefaultWebPage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	@overload
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	@overload
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	@overload
	def getState(self, ) -> Union[int, JInt]: ...
	def putPropertiesFromString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDatabaseName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isSilent(self, ) -> Union[int, JBoolean]: ...
	def getServerError(self, ) -> javawrappers.java.lang.Throwable: ...
	def getServerThread(self, ) -> javawrappers.java.lang.Thread: ...


class HsqlSocketFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isSecure(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.server.HsqlSocketFactory: ...
	def configureSocket(self, arg0: javawrappers.java.net.Socket, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.ServerSocket: ...


class ServerConfiguration:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getDefaultPort(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	@staticmethod
	def translateDefaultDatabaseProperty(arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def translateAddressProperty(arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def translateDefaultNoSystemExitProperty(arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	@staticmethod
	def listLocalInetAddressNames() -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def newDefaultProperties(arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.server.ServerProperties: ...
	@staticmethod
	def getPropertiesFromFile(arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.server.ServerProperties: ...


class PgType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLPConstraint(self, ) -> Union[int, JInt]: ...
	def valueString(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeWidth(self, ) -> Union[int, JInt]: ...
	def getOid(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getPgType(arg0: javawrappers.org.hsqldb.types.Type, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.server.PgType: ...
	def getParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hsqldb.Session, ) -> javawrappers.java.lang.Object: ...


class ServerConstants:


