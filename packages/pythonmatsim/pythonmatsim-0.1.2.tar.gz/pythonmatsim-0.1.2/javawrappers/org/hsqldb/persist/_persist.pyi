################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.hsqldb
import javawrappers.org.hsqldb.types
import javawrappers.org.hsqldb.lib
import javawrappers.org.hsqldb.index
import javawrappers.java.lang
import javawrappers.org.hsqldb.persist
import javawrappers.org.hsqldb.navigator
import javawrappers.org.hsqldb.map
import javawrappers.org.hsqldb.result
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.org.hsqldb.rowio

from jpype.types import *
from typing import Union

from typing import overload

class EventLogInterface:
	def logDetailEvent(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def logWarningEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def logInfoEvent(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def logSevereEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...


class SimpleStore:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class RowStoreAVLDiskData:
	def __init__(self, arg0: javawrappers.org.hsqldb.Table, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def getData(self, arg0: javawrappers.org.hsqldb.RowAVLDiskData, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class BitMapCachedObject:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getBitMap(self, ) -> javawrappers.org.hsqldb.map.BitMap: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...


class TextCache:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def bytesCapacity(self, ) -> Union[long, JLong]: ...
	def adjustStoreCount(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def release(self, ) -> None: ...
	@overload
	def release(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def notifyAll(self, ) -> None: ...
	def isIgnoreFirstLine(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setHeader(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...
	def getTotalCachedBlockSize(self, ) -> Union[long, JLong]: ...
	def getTextFileSettings(self, ) -> javawrappers.org.hsqldb.persist.TextFileSettings: ...
	def isModified(self, ) -> Union[int, JBoolean]: ...
	def addInit(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLostBlockSize(self, ) -> Union[long, JLong]: ...
	def getShadowFile(self, ) -> javawrappers.org.hsqldb.persist.RAShadowFile: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.org.hsqldb.persist.PersistentStore, arg3: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getFileName(self, ) -> javawrappers.java.lang.String: ...
	def logSevereEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def close(self, ) -> None: ...
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def saveRowOutput(self, arg0: Union[long, JLong], ) -> None: ...
	def removePersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getCachedObjectCount(self, ) -> Union[int, JInt]: ...
	@overload
	def releaseRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	@overload
	def releaseRange(self, arg0: javawrappers.org.hsqldb.lib.IntIndex, arg1: Union[int, JInt], ) -> None: ...
	def hasRowInfo(self, ) -> Union[int, JBoolean]: ...
	def setHeaderInitialise(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isFileOpen(self, ) -> Union[int, JBoolean]: ...
	def enlargeFileSpace(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDataFileScale(self, ) -> Union[int, JInt]: ...
	def getLineNumber(self, ) -> Union[long, JLong]: ...
	def getFileFreePos(self, ) -> Union[long, JLong]: ...
	def isFileModified(self, ) -> Union[int, JBoolean]: ...
	def isDataReadOnly(self, ) -> Union[int, JBoolean]: ...
	def reopen(self, ) -> None: ...
	def getTextFileReader(self, ) -> javawrappers.org.hsqldb.persist.TextFileReader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def saveRow(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def open(self, arg0: Union[int, JBoolean], ) -> None: ...


class PersistentStoreCollection:
	def getStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def release(self, ) -> None: ...
	def removeStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> None: ...


class PersistentStoreCollectionSession:
	def __init__(self, arg0: javawrappers.org.hsqldb.Session, ): ...
	def getSessionDataCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCacheSession: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def clearAllTables(self, ) -> None: ...
	def getStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def getViewStore(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Table, arg1: javawrappers.org.hsqldb.Table, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def release(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clearStatementTables(self, ) -> None: ...
	def removeStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> None: ...
	def clearRoutineTables(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def clearResultTables(self, arg0: Union[long, JLong], ) -> None: ...
	def push(self, arg0: Union[int, JBoolean], ) -> None: ...
	def pop(self, arg0: Union[int, JBoolean], ) -> None: ...
	def findStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Table, arg2: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clearTransactionTables(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def clearSessionTables(self, ) -> None: ...


class HsqlProperties:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Properties, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.lib.HashMap, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.hsqldb.lib.FileAccess, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def save(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def save(self, ) -> None: ...
	@overload
	def addProperties(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	@overload
	def addProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def notify(self, ) -> None: ...
	def setFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def load(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def isPropertyTrue(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isPropertyTrue(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def propertiesFileExists(self, ) -> Union[int, JBoolean]: ...
	def validate(self, ) -> None: ...
	@overload
	@staticmethod
	def validateProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def validateProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def argArrayToProps(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.HsqlProperties: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getErrorKeys(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setPropertyIfNotExists(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPropertyWithinRange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getIntegerProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getIntegerProperty(arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def delimitedArgPairsToProps(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.HsqlProperties: ...


class DataSpaceManagerBlocks:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ): ...
	class BlockAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultTableSpace(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def getFileBlockSize(self, ) -> Union[int, JInt]: ...
	def getFileBlockItemCount(self, ) -> Union[int, JInt]: ...
	@overload
	def freeTableSpace(self, arg0: Union[int, JInt], arg1: javawrappers.org.hsqldb.lib.DoubleIntIndex, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def freeTableSpace(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getTableSpace(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def isMultiSpace(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDirectoryList(self, ) -> JArray(javawrappers.org.hsqldb.persist.DirectoryBlockCachedObject, 1): ...
	def getLostBlocksSize(self, ) -> Union[long, JLong]: ...
	def isModified(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFileBlocks(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNewTableSpaceID(self, ) -> Union[int, JInt]: ...
	def initialiseSpaces(self, ) -> None: ...


class DataFileCache:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def bytesCapacity(self, ) -> Union[long, JLong]: ...
	def adjustStoreCount(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def release(self, ) -> None: ...
	@overload
	def release(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def getTotalCachedBlockSize(self, ) -> Union[long, JLong]: ...
	def isModified(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLostBlockSize(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.org.hsqldb.persist.PersistentStore, arg3: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getShadowFile(self, ) -> javawrappers.org.hsqldb.persist.RAShadowFile: ...
	def getFileName(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def logSevereEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def saveRowOutput(self, arg0: Union[long, JLong], ) -> None: ...
	def removePersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getCachedObjectCount(self, ) -> Union[int, JInt]: ...
	@overload
	def releaseRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	@overload
	def releaseRange(self, arg0: javawrappers.org.hsqldb.lib.IntIndex, arg1: Union[int, JInt], ) -> None: ...
	def hasRowInfo(self, ) -> Union[int, JBoolean]: ...
	def isFileOpen(self, ) -> Union[int, JBoolean]: ...
	def enlargeFileSpace(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDataFileScale(self, ) -> Union[int, JInt]: ...
	def getFileFreePos(self, ) -> Union[long, JLong]: ...
	def isFileModified(self, ) -> Union[int, JBoolean]: ...
	def isDataReadOnly(self, ) -> Union[int, JBoolean]: ...
	def reopen(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def saveRow(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def open(self, arg0: Union[int, JBoolean], ) -> None: ...


class RowStoreAVLHybridExtended:
	def __init__(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.TableBase, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def changeToDiskTable(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class LobStoreInJar:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, arg1: Union[int, JInt], ): ...
	def synch(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBlockBytes(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> None: ...
	def getBlockSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class TextFileReader8:
	class StringCreatorChars:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class StringCreatorBytes:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class StringCreator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def readHeaderLine(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLineNumber(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHeaderLine(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def readObject(self, ) -> javawrappers.org.hsqldb.rowio.RowInputInterface: ...


class HsqlDatabaseProperties:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDBModified(self, ) -> Union[int, JInt]: ...
	def setURLProperties(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	def isIntegral(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getStringPropertyDefault(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def save(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def save(self, ) -> None: ...
	@overload
	def addProperties(self, arg0: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	@overload
	def addProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def notify(self, ) -> None: ...
	def setFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def load(self, ) -> Union[int, JBoolean]: ...
	def setDatabaseProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def supportsJavaMethod(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isString(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isPropertyTrue(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def isPropertyTrue(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def propertiesFileExists(self, ) -> Union[int, JBoolean]: ...
	def validate(self, ) -> None: ...
	@overload
	@staticmethod
	def validateProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def validateProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getPropertiesMetaIterator() -> javawrappers.org.hsqldb.lib.Iterator: ...
	def getDefaultWriteDelay(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def argArrayToProps(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.HsqlProperties: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def isUserDefinedProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getPropertyString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getUserDefinedPropertyData(self, ) -> javawrappers.org.hsqldb.lib.Set: ...
	def getErrorKeys(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isVersion18(self, ) -> Union[int, JBoolean]: ...
	def setDBModified(self, arg0: Union[int, JInt], ) -> None: ...
	def propertyNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def setPropertyIfNotExists(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getMeta(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPropertyWithinRange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClientPropertiesAsString(self, ) -> javawrappers.java.lang.String: ...
	def getStringProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIntegerProperty(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getIntegerProperty(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getIntegerProperty(arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def delimitedArgPairsToProps(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.HsqlProperties: ...


class RowStoreAVLHybrid:
	def __init__(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.TableBase, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def changeToDiskTable(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class TextTableStorageManager:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def closeTextCache(self, arg0: javawrappers.org.hsqldb.Table, ) -> None: ...
	def isAnyTextCacheModified(self, ) -> Union[int, JBoolean]: ...
	def openTextFilePersistence(self, arg0: javawrappers.org.hsqldb.Table, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def closeAllTextCaches(self, arg0: Union[int, JBoolean], ) -> None: ...


class RowStoreAVLMemory:
	def __init__(self, arg0: javawrappers.org.hsqldb.Table, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	@overload
	def release(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class IntArrayCachedObject:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def getNonZeroSize(self, ) -> Union[int, JInt]: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def getValue(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setIntArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getIntArray(self, ) -> JArray(Union[int, JInt], 1): ...


class Cache:
	class CachedObjectComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def notifyAll(self, ) -> None: ...
		def longKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def hashCode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def longKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def releaseRange(self, arg0: javawrappers.org.hsqldb.lib.IntIndex, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def releaseRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	def notify(self, ) -> None: ...
	def getIterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class RandomAccessInterface:
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def synch(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def length(self, ) -> Union[long, JLong]: ...
	def getFilePointer(self, ) -> Union[long, JLong]: ...
	def ensureLength(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def seek(self, arg0: Union[long, JLong], ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class PersistentStore:
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def release(self, ) -> None: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...


class BlockObjectStore:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, arg1: javawrappers.org.hsqldb.persist.TableSpaceManager, arg2: javawrappers.java.lang.Class, arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ScriptRunner:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def runScript(arg0: javawrappers.org.hsqldb.Database, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class TableSpaceManagerSimple:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def initialiseFileBlock(self, arg0: javawrappers.org.hsqldb.lib.DoubleIntIndex, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def release(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def addFileBlock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFilePosition(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[long, JLong]: ...
	def hasFileRoom(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getLostBlocksSize(self, ) -> Union[long, JLong]: ...
	def getSpaceID(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDefaultSpace(self, ) -> Union[int, JBoolean]: ...


class DataSpaceManagerSimple:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultTableSpace(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def getFileBlockSize(self, ) -> Union[int, JInt]: ...
	def getFileBlockItemCount(self, ) -> Union[int, JInt]: ...
	@overload
	def freeTableSpace(self, arg0: Union[int, JInt], arg1: javawrappers.org.hsqldb.lib.DoubleIntIndex, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def freeTableSpace(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getTableSpace(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def isMultiSpace(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDirectoryList(self, ) -> JArray(javawrappers.org.hsqldb.persist.DirectoryBlockCachedObject, 1): ...
	def getLostBlocksSize(self, ) -> Union[long, JLong]: ...
	def isModified(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFileBlocks(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNewTableSpaceID(self, ) -> Union[int, JInt]: ...
	def initialiseSpaces(self, ) -> None: ...


class CachedObjectBase:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...


class DirectoryBlockCachedObject:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBitmapAddress(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getTableIdArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	def setBitmapAddress(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def setLastUsed(self, arg0: Union[int, JInt], arg1: JByte, ) -> None: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def setTableId(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getFreeSpaceArray(self, ) -> JArray(Union[string, JString], 1): ...
	def getFreeSpace(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def getBitmapAddressArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def getTableId(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getFreeBlock(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def setFreeBlock(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFreeBlockArray(self, ) -> JArray(Union[string, JString], 1): ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def setFreeSpace(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> None: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...


class LobStoreRAFile:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, arg1: Union[int, JInt], ): ...
	def synch(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBlockBytes(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> None: ...
	def getBlockSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class PersistentStoreCollectionDatabase:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNewTableSpaces(self, ) -> None: ...
	def getStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def release(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNextId(self, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeStore(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> None: ...
	def notify(self, ) -> None: ...


class LockFile:
	class WrongMagicException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: JArray(JByte, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def getMagic(self, ) -> JArray(JByte, 1): ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class WrongLengthException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getLength(self, ) -> Union[long, JLong]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class UnexpectedFileNotFoundException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.FileNotFoundException, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def getReason(self, ) -> javawrappers.java.io.FileNotFoundException: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class UnexpectedFileIOException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.IOException, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def getReason(self, ) -> javawrappers.java.io.IOException: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class UnexpectedEndOfFileException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.EOFException, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def getReason(self, ) -> javawrappers.java.io.EOFException: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class LockHeldExternallyException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ): ...
		def getHeartbeat(self, ) -> Union[long, JLong]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getRead(self, ) -> Union[long, JLong]: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class FileSecurityException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.SecurityException, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def getReason(self, ) -> javawrappers.java.lang.SecurityException: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class FileCanonicalizationException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.IOException, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def getReason(self, ) -> javawrappers.java.io.IOException: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class BaseException:
		def __init__(self, arg0: javawrappers.org.hsqldb.persist.LockFile, arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def getInMethod(self, ) -> javawrappers.java.lang.String: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class HeartbeatRunner:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def newLockFileLock(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
	def notifyAll(self, ) -> None: ...
	def getRead(self, ) -> Union[long, JLong]: ...
	def run(self, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getInMethod(self, ) -> javawrappers.java.lang.String: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isLocked(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getPollHeartbeatInterval(self, ) -> Union[long, JLong]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def getLockFile(self, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
	def getHeartbeat(self, ) -> Union[long, JLong]: ...
	def getCanonicalPath(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def tryRelease(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getReason(self, ) -> javawrappers.java.io.IOException: ...
	@overload
	def getReason(self, ) -> javawrappers.java.io.FileNotFoundException: ...
	@overload
	def getReason(self, ) -> javawrappers.java.lang.SecurityException: ...
	@overload
	def getReason(self, ) -> javawrappers.java.io.EOFException: ...
	@overload
	def getReason(self, ) -> javawrappers.java.io.IOException: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getPollHeartbeatRetries(self, ) -> Union[int, JInt]: ...
	def tryLock(self, ) -> Union[int, JBoolean]: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def newLockFile(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.persist.LockFile: ...
	def getLength(self, ) -> Union[long, JLong]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMagic(self, ) -> JArray(JByte, 1): ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TextFileSettings:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Logger:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, ): ...
	def getCacheSize(self, ) -> Union[long, JLong]: ...
	def getFileAccess(self, ) -> javawrappers.org.hsqldb.lib.FileAccess: ...
	def setDataFileScaleNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def checkpoint(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def backup(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> None: ...
	def getLogSize(self, ) -> Union[int, JInt]: ...
	def synchLog(self, ) -> None: ...
	def isLogged(self, ) -> Union[int, JBoolean]: ...
	def getWriteDelay(self, ) -> Union[int, JInt]: ...
	def setScriptType(self, arg0: Union[int, JInt], ) -> None: ...
	def setWriteDelay(self, arg0: Union[int, JInt], ) -> None: ...
	def setLobFileScaleNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setDataFileScale(self, arg0: Union[int, JInt], ) -> None: ...
	def hasLockFile(self, ) -> Union[int, JBoolean]: ...
	def logSevereEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def isStoredFileAccess(self, ) -> Union[int, JBoolean]: ...
	def setCacheSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getCacheMaxRows(self, ) -> Union[int, JInt]: ...
	def writeCommitStatement(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def getCrypto(self, ) -> javawrappers.org.hsqldb.persist.Crypto: ...
	def isNewStoredFileAccess(self, ) -> Union[int, JBoolean]: ...
	def getSqlEventLogLevel(self, ) -> Union[int, JInt]: ...
	def isNewDatabase(self, ) -> Union[int, JBoolean]: ...
	def getLobBlockSize(self, ) -> Union[int, JInt]: ...
	def needsCheckpointReset(self, ) -> Union[int, JBoolean]: ...
	def logInfoEvent(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDefagLimit(self, arg0: Union[int, JInt], ) -> None: ...
	def setLogSize(self, arg0: Union[int, JInt], ) -> None: ...
	def logDetailEvent(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPropertiesSQL(self, arg0: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notifyAll(self, ) -> None: ...
	def getFilesTimestamp(self, ) -> Union[long, JLong]: ...
	def setIncrementBackup(self, arg0: Union[int, JBoolean], ) -> None: ...
	def newIndex(self, arg0: javawrappers.org.hsqldb.HsqlNameManager.HsqlName, arg1: Union[long, JLong], arg2: javawrappers.org.hsqldb.TableBase, arg3: JArray(Union[int, JInt], 1), arg4: JArray(Union[int, JBoolean], 1), arg5: JArray(Union[int, JBoolean], 1), arg6: JArray(javawrappers.org.hsqldb.types.Type, 1), arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], arg10: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.index.Index: ...
	def notify(self, ) -> None: ...
	def newStore(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStoreCollection, arg2: javawrappers.org.hsqldb.TableBase, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def getValueStringForProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getDataFileFactor(self, ) -> Union[int, JInt]: ...
	def getLobFileScale(self, ) -> Union[int, JInt]: ...
	def isFileDatabase(self, ) -> Union[int, JBoolean]: ...
	def isCurrentlyLogged(self, ) -> Union[int, JBoolean]: ...
	def writeSequenceStatement(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.NumberSequence, ) -> None: ...
	def setCacheMaxRows(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def hasCache(self, ) -> Union[int, JBoolean]: ...
	def setLogData(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeInsertStatement(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: javawrappers.org.hsqldb.Table, ) -> None: ...
	def setDefaultTextTableProperties(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hsqldb.persist.HsqlProperties, ) -> None: ...
	def setCacheMinReuseSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getTempDirectoryPath(self, ) -> javawrappers.java.lang.String: ...
	def close(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDefragLimit(self, ) -> Union[int, JInt]: ...
	@overload
	def setDataFileSpaces(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setDataFileSpaces(self, arg0: Union[int, JInt], ) -> None: ...
	def releaseLock(self, ) -> None: ...
	def logWarningEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def isAllowedFullPath(self, ) -> Union[int, JBoolean]: ...
	def writeOtherStatement(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setFilesTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def logStatementEvent(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Statement, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.result.Result, arg4: Union[int, JInt], ) -> None: ...
	def getDataFileScale(self, ) -> Union[int, JInt]: ...
	def setLobFileScale(self, arg0: Union[int, JInt], ) -> None: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def getDataFileSpaces(self, ) -> Union[int, JInt]: ...
	def acquireLock(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLobFileCompressed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCheckpointRequired(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNioDataFile(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDeleteStatement(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Table, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def getSecurePath(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def setNioMaxSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setEventLogLevel(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def setLobFileCompressedNoCheck(self, arg0: Union[int, JBoolean], ) -> None: ...
	def open(self, ) -> None: ...


class LobStore:
	def synch(self, ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> None: ...
	def getBlockSize(self, ) -> Union[int, JInt]: ...
	def getLength(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def getBlockBytes(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...


class DataSpaceManager:
	def getDirectoryList(self, ) -> JArray(javawrappers.org.hsqldb.persist.DirectoryBlockCachedObject, 1): ...
	def getDefaultTableSpace(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def getLostBlocksSize(self, ) -> Union[long, JLong]: ...
	def isModified(self, ) -> Union[int, JBoolean]: ...
	def getFileBlockSize(self, ) -> Union[int, JInt]: ...
	def getFileBlockItemCount(self, ) -> Union[int, JInt]: ...
	@overload
	def freeTableSpace(self, arg0: Union[int, JInt], arg1: javawrappers.org.hsqldb.lib.DoubleIntIndex, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def freeTableSpace(self, arg0: Union[int, JInt], ) -> None: ...
	def getFileBlocks(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	def getTableSpace(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def reset(self, ) -> None: ...
	def isMultiSpace(self, ) -> Union[int, JBoolean]: ...
	def getNewTableSpaceID(self, ) -> Union[int, JInt]: ...
	def initialiseSpaces(self, ) -> None: ...


class TextFileReader16:
	def readHeaderLine(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLineNumber(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHeaderLine(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def readObject(self, ) -> javawrappers.org.hsqldb.rowio.RowInputInterface: ...


class TextFileReader:
	def readHeaderLine(self, ) -> None: ...
	def getLineNumber(self, ) -> Union[long, JLong]: ...
	def getHeaderLine(self, ) -> javawrappers.java.lang.String: ...
	def readObject(self, ) -> javawrappers.org.hsqldb.rowio.RowInputInterface: ...


class RAFileHybrid:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def synch(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[long, JLong]: ...
	def getFilePointer(self, ) -> Union[long, JLong]: ...
	def ensureLength(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def seek(self, arg0: Union[long, JLong], ) -> None: ...
	def notify(self, ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def getDatabase(self, ) -> javawrappers.org.hsqldb.Database: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class RowStoreDataChange:
	def __init__(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.TableBase, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def changeToDiskTable(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class RowStoreAVL:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class LobStoreMem:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def synch(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBlockBytes(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> None: ...
	def getBlockSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBlockBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class Log:
	def defrag(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setIncrementBackup(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class TableSpaceManager:
	def initialiseFileBlock(self, arg0: javawrappers.org.hsqldb.lib.DoubleIntIndex, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def getLostBlocksSize(self, ) -> Union[long, JLong]: ...
	def getSpaceID(self, ) -> Union[int, JInt]: ...
	def release(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def addFileBlock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	def reset(self, ) -> None: ...
	def getFilePosition(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[long, JLong]: ...
	def hasFileRoom(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def isDefaultSpace(self, ) -> Union[int, JBoolean]: ...


class Crypto:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def encode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getEncodedSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getNewKey(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.java.io.OutputStream: ...
	def decode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getInputStream(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class RAShadowFile:
	class InputStreamShadow:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		def setSizeLimit(self, arg0: Union[long, JLong], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def available(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def getSizeLimit(self, ) -> Union[long, JLong]: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def synch(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getInputStream(self, ) -> javawrappers.org.hsqldb.lib.InputStreamInterface: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def restoreFile(arg0: javawrappers.org.hsqldb.Database, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def setSizeLimit(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSizeLimit(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	def getSavedLength(self, ) -> Union[long, JLong]: ...


class TableSpaceManagerBlocks:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.DataSpaceManager, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def initialiseFileBlock(self, arg0: javawrappers.org.hsqldb.lib.DoubleIntIndex, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def release(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def addFileBlock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFilePosition(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[long, JLong]: ...
	def hasFileRoom(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getLostBlocksSize(self, ) -> Union[long, JLong]: ...
	def getSpaceID(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDefaultSpace(self, ) -> Union[int, JBoolean]: ...
	def getFileBlockIndex(self, ) -> Union[int, JInt]: ...


class CachedObject:
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def destroy(self, ) -> None: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...


class RowStoreAVLDisk:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, arg1: javawrappers.org.hsqldb.Table, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeLock(self, ) -> None: ...
	@overload
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	@overload
	def moveDataToSpace(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def release(self, ) -> None: ...
	def getAccessorStore(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.PersistentStore: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCache(self, arg0: javawrappers.org.hsqldb.persist.DataFileCache, ) -> None: ...
	def rollbackRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def removeAll(self, ) -> None: ...
	def indexRows(self, arg0: javawrappers.org.hsqldb.Session, ) -> None: ...
	def indexRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def getNewCachedObject(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def reindex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.index.Index, ) -> None: ...
	def moveData(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def getDefaultObjectSize(self, ) -> Union[int, JInt]: ...
	def readLock(self, ) -> None: ...
	def getRow(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def resetAccessorKeys(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.org.hsqldb.index.Index, 1), ) -> None: ...
	def readUnlock(self, ) -> None: ...
	@overload
	def elementCount(self, ) -> Union[long, JLong]: ...
	@overload
	def elementCount(self, arg0: javawrappers.org.hsqldb.Session, ) -> Union[long, JLong]: ...
	def writeUnlock(self, ) -> None: ...
	def rowIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def commitRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commitPersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.CachedObject, arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def canRead(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def hasNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNewInstance(self, arg0: Union[int, JInt], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def postCommitAction(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.RowAction, ) -> None: ...
	def getSpaceManager(self, ) -> javawrappers.org.hsqldb.persist.TableSpaceManager: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.Row, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getAccessorKeys(self, ) -> JArray(javawrappers.org.hsqldb.index.Index, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimestamp(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def isRowStore(self, ) -> Union[int, JBoolean]: ...
	def setTimestamp(self, arg0: Union[long, JLong], ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def setAccessor(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def setElementCount(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	def elementCountUnique(self, arg0: javawrappers.org.hsqldb.index.Index, ) -> Union[long, JLong]: ...
	def getCache(self, ) -> javawrappers.org.hsqldb.persist.DataFileCache: ...
	def setSpaceManager(self, arg0: javawrappers.org.hsqldb.persist.TableSpaceManager, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRowSet(self, ) -> Union[int, JBoolean]: ...


class DataFileCacheSession:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def bytesCapacity(self, ) -> Union[long, JLong]: ...
	def adjustStoreCount(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def release(self, ) -> None: ...
	@overload
	def release(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def getTotalCachedBlockSize(self, ) -> Union[long, JLong]: ...
	def isModified(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLostBlockSize(self, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.org.hsqldb.persist.PersistentStore, arg3: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.persist.CachedObject: ...
	def getShadowFile(self, ) -> javawrappers.org.hsqldb.persist.RAShadowFile: ...
	def getFileName(self, ) -> javawrappers.java.lang.String: ...
	def logSevereEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def close(self, ) -> None: ...
	def add(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, arg1: Union[int, JBoolean], ) -> None: ...
	def saveRowOutput(self, arg0: Union[long, JLong], ) -> None: ...
	def removePersistence(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def getCachedObjectCount(self, ) -> Union[int, JInt]: ...
	@overload
	def releaseRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> None: ...
	@overload
	def releaseRange(self, arg0: javawrappers.org.hsqldb.lib.IntIndex, arg1: Union[int, JInt], ) -> None: ...
	def hasRowInfo(self, ) -> Union[int, JBoolean]: ...
	def isFileOpen(self, ) -> Union[int, JBoolean]: ...
	def enlargeFileSpace(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getDataFileScale(self, ) -> Union[int, JInt]: ...
	def getFileFreePos(self, ) -> Union[long, JLong]: ...
	def isFileModified(self, ) -> Union[int, JBoolean]: ...
	def isDataReadOnly(self, ) -> Union[int, JBoolean]: ...
	def reopen(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def saveRow(self, arg0: javawrappers.org.hsqldb.persist.CachedObject, ) -> None: ...
	def open(self, arg0: Union[int, JBoolean], ) -> None: ...


class LobManager:
	def __init__(self, arg0: javawrappers.org.hsqldb.Database, ): ...
	class ALLOC_PART:


	class UPDATE_LENGTH:


	class UPDATE_USAGE:


	class ALLOC_BLOCKS:


	class DELETE_BLOCKS:


	class DIVIDE_BLOCK:


	class GET_LOB_PART:


	class LOB_IDS:


	class LOBS:


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLob(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.org.hsqldb.types.BlobData, arg1: javawrappers.org.hsqldb.types.BlobData, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.hsqldb.types.BlobData, arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.hsqldb.types.Collation, arg1: javawrappers.org.hsqldb.types.ClobData, arg2: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.hsqldb.types.Collation, arg1: javawrappers.org.hsqldb.types.ClobData, arg2: javawrappers.org.hsqldb.types.ClobData, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setUsageChanged(self, ) -> None: ...
	def deleteLob(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def getLobCount(self, ) -> Union[int, JInt]: ...
	def getClob(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.types.ClobData: ...
	def createClob(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getBytes(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> javawrappers.org.hsqldb.result.Result: ...
	def truncate(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def setChars(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: JArray(Union[string, JString], 1), arg3: Union[int, JInt], ) -> javawrappers.org.hsqldb.result.Result: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def lock(self, ) -> None: ...
	def close(self, ) -> None: ...
	def synch(self, ) -> None: ...
	def setBytes(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: JArray(JByte, 1), arg3: Union[int, JInt], ) -> javawrappers.org.hsqldb.result.Result: ...
	def unlock(self, ) -> None: ...
	def getChars(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> javawrappers.org.hsqldb.result.Result: ...
	def getTruncateLength(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def createSchema(self, ) -> None: ...
	def setBytesForNewBlob(self, arg0: Union[long, JLong], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def createBlob(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getBlob(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.types.BlobData: ...
	def adjustUsageCount(self, arg0: javawrappers.org.hsqldb.Session, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> javawrappers.org.hsqldb.result.Result: ...
	@overload
	def createDuplicateLob(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	@overload
	def createDuplicateLob(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def deleteUnusedLobs(self, ) -> javawrappers.org.hsqldb.result.Result: ...
	def setCharsForNewClob(self, arg0: Union[long, JLong], arg1: javawrappers.java.io.InputStream, arg2: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLobStore(self, ) -> javawrappers.org.hsqldb.persist.LobStore: ...
	def getLength(self, arg0: Union[long, JLong], ) -> javawrappers.org.hsqldb.result.Result: ...
	def compileStatements(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def open(self, ) -> None: ...


