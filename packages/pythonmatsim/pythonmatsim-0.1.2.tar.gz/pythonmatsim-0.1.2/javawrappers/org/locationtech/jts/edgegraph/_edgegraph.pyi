################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.edgegraph
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class MarkHalfEdge:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def next(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setMark(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def setMark(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, arg1: Union[int, JBoolean], ) -> None: ...
	def oNext(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def deltaX(self, ) -> Union[float, JDouble]: ...
	def sym(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	@staticmethod
	def markBoth(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def prev(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def deltaY(self, ) -> Union[float, JDouble]: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def setMarkBoth(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, arg1: Union[int, JBoolean], ) -> None: ...
	def dest(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def isMarked(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> Union[int, JBoolean]: ...
	@overload
	def isMarked(self, ) -> Union[int, JBoolean]: ...
	def prevNode(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	@staticmethod
	def create(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	@staticmethod
	def init(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, arg1: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def degree(self, ) -> Union[int, JInt]: ...
	def compareAngularDirection(self, arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> Union[int, JInt]: ...
	def orig(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def mark(self, ) -> None: ...
	@overload
	@staticmethod
	def mark(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> None: ...


class HalfEdge:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def next(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def init(arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, arg1: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def oNext(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def deltaX(self, ) -> Union[float, JDouble]: ...
	def sym(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def notifyAll(self, ) -> None: ...
	def prev(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def deltaY(self, ) -> Union[float, JDouble]: ...
	def degree(self, ) -> Union[int, JInt]: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def dest(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notify(self, ) -> None: ...
	def prevNode(self, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def compareAngularDirection(self, arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> Union[int, JInt]: ...
	def orig(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.locationtech.jts.edgegraph.HalfEdge, ) -> None: ...
	@staticmethod
	def create(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class EdgeGraph:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isValidEdge(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findEdge(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def addEdge(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.edgegraph.HalfEdge: ...
	def notify(self, ) -> None: ...
	def getVertexEdges(self, ) -> javawrappers.java.util.Collection: ...


class EdgeGraphBuilder:
	def __init__(self, ): ...
	@overload
	def add(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def build(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.locationtech.jts.edgegraph.EdgeGraph: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getGraph(self, ) -> javawrappers.org.locationtech.jts.edgegraph.EdgeGraph: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


