################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.index.quadtree
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.index

from jpype.types import *
from typing import Union

from typing import overload

class IntervalSize:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isZeroWidth(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Root:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addAllItemsFromOverlapping(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.util.List, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasChildren(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def addAllItems(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasItems(self, ) -> Union[int, JBoolean]: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getSubnodeIndex(arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getItems(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.org.locationtech.jts.index.ItemVisitor, ) -> None: ...
	def isPrunable(self, ) -> Union[int, JBoolean]: ...


class NodeBase:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addAllItemsFromOverlapping(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.util.List, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasChildren(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def addAllItems(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasItems(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSubnodeIndex(arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getItems(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.org.locationtech.jts.index.ItemVisitor, ) -> None: ...
	def isPrunable(self, ) -> Union[int, JBoolean]: ...


class Key:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getLevel(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCentre(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def computeKey(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def computeQuadLevel(arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> Union[int, JInt]: ...


class DoubleBits:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getDouble(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getExponent(self, ) -> Union[int, JInt]: ...
	def zeroLowerBits(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def truncateToPowerOfTwo(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def maximumCommonMantissa(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def toBinaryString(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def biasedExponent(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def numCommonMantissaBits(self, arg0: javawrappers.org.locationtech.jts.index.quadtree.DoubleBits, ) -> Union[int, JInt]: ...
	@staticmethod
	def powerOf2(arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getBit(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def exponent(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...


class Node:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: Union[int, JInt], ): ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addAllItemsFromOverlapping(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.util.List, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasChildren(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def addAllItems(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def createNode(arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.index.quadtree.Node: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasItems(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSubnodeIndex(arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getItems(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.index.quadtree.NodeBase: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def visit(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.org.locationtech.jts.index.ItemVisitor, ) -> None: ...
	def isPrunable(self, ) -> Union[int, JBoolean]: ...
	def getNode(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.index.quadtree.Node: ...
	@staticmethod
	def createExpanded(arg0: javawrappers.org.locationtech.jts.index.quadtree.Node, arg1: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.index.quadtree.Node: ...


class Quadtree:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def ensureExtent(arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def query(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.org.locationtech.jts.index.ItemVisitor, ) -> None: ...
	@overload
	def query(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.java.util.List: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def queryAll(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


