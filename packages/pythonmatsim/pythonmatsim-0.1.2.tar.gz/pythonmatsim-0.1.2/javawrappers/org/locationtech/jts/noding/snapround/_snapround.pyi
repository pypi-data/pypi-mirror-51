################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.locationtech.jts.index.chain
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.noding.snapround
import javawrappers.org.locationtech.jts.noding
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class GeometryNoder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def node(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setValidate(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MCIndexSnapRounder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def computeVertexSnaps(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class MCIndexPointSnapper:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.index.SpatialIndex, ): ...
	class HotPixelSnapAction:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.snapround.HotPixel, arg1: javawrappers.org.locationtech.jts.noding.SegmentString, arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def select(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], ) -> None: ...
		@overload
		def select(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isNodeAdded(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def select(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def select(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	def isNodeAdded(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def snap(self, arg0: javawrappers.org.locationtech.jts.noding.snapround.HotPixel, arg1: javawrappers.org.locationtech.jts.noding.SegmentString, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def snap(self, arg0: javawrappers.org.locationtech.jts.noding.snapround.HotPixel, ) -> Union[int, JBoolean]: ...


class SimpleSnapRounder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def computeVertexSnaps(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class HotPixel:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[float, JDouble], arg2: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def intersects(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def getSafeEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addSnappedNode(self, arg0: javawrappers.org.locationtech.jts.noding.NodedSegmentString, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


