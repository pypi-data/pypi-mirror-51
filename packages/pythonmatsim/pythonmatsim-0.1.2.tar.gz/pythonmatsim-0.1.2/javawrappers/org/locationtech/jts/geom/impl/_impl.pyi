################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.geom.impl

from jpype.types import *
from typing import Union

from typing import overload

class PackedCoordinateSequenceFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def create(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CoordinateArraySequence:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasM(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getM(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getCoordinateCopy(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getMeasures(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hasZ(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getY(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getZ(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toCoordinateArray(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.CoordinateArraySequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def createCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


class PackedCoordinateSequence:
	class Float:
		@overload
		def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setY(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def hasM(self, ) -> Union[int, JBoolean]: ...
		def setX(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def getM(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toCoordinateArray(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
		@overload
		def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		@overload
		def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence: ...
		@overload
		def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence.Float: ...
		def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getCoordinateCopy(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def getMeasures(self, ) -> Union[int, JInt]: ...
		def getCoordinateInternal(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def hasZ(self, ) -> Union[int, JBoolean]: ...
		@overload
		def getCoordinate(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
		@overload
		def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def getX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getY(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getZ(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def getRawCoordinates(self, ) -> JArray(Union[float, JFloat], 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


	class Double:
		@overload
		def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ): ...
		@overload
		def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setY(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def hasM(self, ) -> Union[int, JBoolean]: ...
		def setX(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def getM(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toCoordinateArray(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
		@overload
		def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		@overload
		def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence: ...
		@overload
		def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence.Double: ...
		def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getCoordinateCopy(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def getMeasures(self, ) -> Union[int, JInt]: ...
		def getCoordinateInternal(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def hasZ(self, ) -> Union[int, JBoolean]: ...
		@overload
		def getCoordinate(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
		@overload
		def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def getX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getY(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getZ(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def getRawCoordinates(self, ) -> JArray(Union[float, JDouble], 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setY(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def hasM(self, ) -> Union[int, JBoolean]: ...
	def setX(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def getM(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	@overload
	def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	@overload
	def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toCoordinateArray(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence.Double: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence.Float: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getCoordinateCopy(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def getCoordinateInternal(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def getCoordinateInternal(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getMeasures(self, ) -> Union[int, JInt]: ...
	def hasZ(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getY(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def getZ(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getRawCoordinates(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getRawCoordinates(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


class CoordinateArraySequenceFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def instance() -> javawrappers.org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def create(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def create(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


