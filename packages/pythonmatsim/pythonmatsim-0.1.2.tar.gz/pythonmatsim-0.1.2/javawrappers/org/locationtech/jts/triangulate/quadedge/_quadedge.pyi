################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.triangulate.quadedge
import javawrappers.java.io
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.math

from jpype.types import *
from typing import Union

from typing import overload

class QuadEdge:
	def oPrev(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def oNext(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def getPrimary(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def sym(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def notifyAll(self, ) -> None: ...
	def dest(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def delete(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def dPrev(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def dNext(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def isLive(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def rot(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def invRot(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def equalsOriented(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def connect(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...
	def toLineSegment(self, ) -> javawrappers.org.locationtech.jts.geom.LineSegment: ...
	@staticmethod
	def swap(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> None: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def splice(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> None: ...
	def lPrev(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	@staticmethod
	def makeEdge(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def lNext(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def rPrev(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def rNext(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def orig(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> None: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def equalsNonOriented(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...


class QuadEdgeLocator:
	def locate(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...


class QuadEdgeTriangle:
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ): ...
	class QuadEdgeTriangleBuilderVisitor:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
		def getTriangles(self, ) -> javawrappers.java.util.List: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getEdgeIndex(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JInt]: ...
	@overload
	def getEdgeIndex(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JInt]: ...
	def getGeometry(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	@staticmethod
	def nextIndex(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getEdge(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def notify(self, ) -> None: ...
	@overload
	def isBorder(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isBorder(self, ) -> Union[int, JBoolean]: ...
	def getTrianglesAdjacentToVertex(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def getAdjacentTriangleEdgeIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isLive(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def toPolygon(arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, 1), ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def toPolygon(arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTriangles(self, ) -> javawrappers.java.util.List: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getAdjacentTriangleAcrossEdge(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeTriangle: ...
	def kill(self, ) -> None: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def getVertex(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def getNeighbours(self, ) -> JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeTriangle, 1): ...
	@overload
	def contains(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def contains(arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def contains(arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, 1), arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getVertices(self, ) -> JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createOn(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision, ) -> javawrappers.java.util.List: ...
	def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
	def getEdges(self, ) -> JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1): ...
	def getEdgeSegment(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...


class LocateFailureException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getSegment(self, ) -> javawrappers.org.locationtech.jts.geom.LineSegment: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LastFoundQuadEdgeLocator:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def locate(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Vertex:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def classify(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def midPoint(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def interpolateZ(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def interpolateZ(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	def isInCircle(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg2: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	def setZ(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def isCCW(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	def circleCenter(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def circumRadiusRatio(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[float, JDouble]: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def leftOf(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	def getZ(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def rightOf(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	def interpolateZValue(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg2: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[float, JDouble]: ...


class QuadEdgeUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def findEdgesIncidentOnOrigin(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class EdgeConnectedTriangleTraversal:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeTriangle, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitAll(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.TraversalVisitor, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TrianglePredicate:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isInCircleCC(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isInCircleRobust(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isInCircleDDSlow(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def triAreaDDSlow(arg0: javawrappers.org.locationtech.jts.math.DD, arg1: javawrappers.org.locationtech.jts.math.DD, arg2: javawrappers.org.locationtech.jts.math.DD, arg3: javawrappers.org.locationtech.jts.math.DD, arg4: javawrappers.org.locationtech.jts.math.DD, arg5: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@staticmethod
	def isInCircleNonRobust(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def triAreaDDFast(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isInCircleNormalized(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isInCircleDDNormalized(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isInCircleDDFast(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...


class TraversalVisitor:
	def visit(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeTriangle, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeTriangle, ) -> Union[int, JBoolean]: ...


class TriangleVisitor:
	def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...


class QuadEdgeSubdivision:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: Union[float, JDouble], ): ...
	class TriangleCoordinatesVisitor:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
		def getTriangles(self, ) -> javawrappers.java.util.List: ...
		def notify(self, ) -> None: ...


	class TriangleVertexListVisitor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getTriangleVertices(self, ) -> javawrappers.java.util.List: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
		def notify(self, ) -> None: ...


	class TriangleEdgesListVisitor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTriangleEdges(self, ) -> javawrappers.java.util.List: ...
		def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
		def notify(self, ) -> None: ...


	class TriangleCircumcentreVisitor:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
		def notify(self, ) -> None: ...


	def getVoronoiCellPolygons(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isOnEdge(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def isVertexOfEdge(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	@overload
	def locate(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	@overload
	def locate(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	@overload
	def locate(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def isFrameBorderEdge(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getTriangleEdges(self, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getTriangleEdges(arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
	@overload
	def getTriangleEdges(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.util.List: ...
	def delete(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> None: ...
	def notify(self, ) -> None: ...
	def getVoronoiDiagram(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isFrameVertex(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	def getTolerance(self, ) -> Union[float, JDouble]: ...
	@overload
	def getTriangles(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getTriangles(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def connect(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def locateFromEdge(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def visitTriangles(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.TriangleVisitor, arg1: Union[int, JBoolean], ) -> None: ...
	def makeEdge(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def getVoronoiCellPolygon(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def getVertexUniqueEdges(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.util.List: ...
	def getTriangleCoordinates(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.util.List: ...
	def isFrameEdge(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	def insertSite(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getTriangleVertices(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getTriangleVertices(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.util.List: ...
	def getPrimaryEdges(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.util.List: ...
	def getVertices(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	@overload
	def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
	@overload
	def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
	@overload
	def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
	@overload
	def visit(self, arg0: JArray(javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, 1), ) -> None: ...
	@overload
	def getEdges(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getEdges(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def setLocator(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeLocator, ) -> None: ...


