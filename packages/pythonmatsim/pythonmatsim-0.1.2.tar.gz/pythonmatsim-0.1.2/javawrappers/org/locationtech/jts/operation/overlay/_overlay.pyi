################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.geomgraph
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class LineBuilder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.operation.overlay.OverlayOp, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, arg2: javawrappers.org.locationtech.jts.algorithm.PointLocator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def build(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PolygonBuilder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def add(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.PlanarGraph, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPolygons(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ConsistentPolygonRingChecker:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.PlanarGraph, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAll(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class EdgeSetNoder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNodedEdges(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class MaximalEdgeRing:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def addHole(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isShell(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def toPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def computeRing(self, ) -> None: ...
	def buildMinimalRings(self, ) -> javawrappers.java.util.List: ...
	def getShell(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeRing: ...
	def setEdgeRing(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def setShell(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def isHole(self, ) -> Union[int, JBoolean]: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def setInResult(self, ) -> None: ...
	def getNext(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def getMaxNodeDegree(self, ) -> Union[int, JInt]: ...
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getLinearRing(self, ) -> javawrappers.org.locationtech.jts.geom.LinearRing: ...
	def linkDirectedEdgesForMinimalEdgeRings(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def containsPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...


class OverlayNodeFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MinimalEdgeRing:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def addHole(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isShell(self, ) -> Union[int, JBoolean]: ...
	def isHole(self, ) -> Union[int, JBoolean]: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def setInResult(self, ) -> None: ...
	def getNext(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def notify(self, ) -> None: ...
	def getMaxNodeDegree(self, ) -> Union[int, JInt]: ...
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getLinearRing(self, ) -> javawrappers.org.locationtech.jts.geom.LinearRing: ...
	def toPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def computeRing(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getShell(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeRing: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def containsPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def setEdgeRing(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def setShell(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...


class OverlayOp:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResultGeometry(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def overlayOp(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getGraph(self, ) -> javawrappers.org.locationtech.jts.geomgraph.PlanarGraph: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def isResultOfOp(arg0: javawrappers.org.locationtech.jts.geomgraph.Label, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isResultOfOp(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getArgGeometry(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def createEmptyResult(arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: javawrappers.org.locationtech.jts.geom.Geometry, arg3: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isCoveredByLA(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isCoveredByA(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...


class PointBuilder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.operation.overlay.OverlayOp, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, arg2: javawrappers.org.locationtech.jts.algorithm.PointLocator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def build(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


