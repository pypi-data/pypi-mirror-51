################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.locationtech.jts.index.chain
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.locationtech.jts.noding
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.index
import javawrappers.org.locationtech.jts.algorithm

from jpype.types import *
from typing import Union

from typing import overload

class ScaledNoder:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.Noder, arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.Noder, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isIntegerPrecision(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class InteriorIntersectionFinderAdder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def processIntersections(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.noding.SegmentString, arg3: Union[int, JInt], ) -> None: ...
	def getInteriorIntersections(self, ) -> javawrappers.java.util.List: ...


class NodedSegmentString:
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.java.lang.Object, ): ...
	@overload
	@staticmethod
	def getNodedSubstrings(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getNodedSubstrings(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.Collection, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSegmentOctant(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addIntersections(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...
	def getNodeList(self, ) -> javawrappers.org.locationtech.jts.noding.SegmentNodeList: ...
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addIntersection(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def addIntersection(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JInt], ) -> None: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...
	def addIntersectionNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.noding.SegmentNode: ...


class SegmentIntersectionDetector:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFindProper(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIntersection(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hasProperIntersection(self, ) -> Union[int, JBoolean]: ...
	def setFindAllIntersectionTypes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hasIntersection(self, ) -> Union[int, JBoolean]: ...
	def hasNonProperIntersection(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getIntersectionSegments(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processIntersections(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.noding.SegmentString, arg3: Union[int, JInt], ) -> None: ...


class FastNodingValidator:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def computeIntersections(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIntersections(self, ) -> javawrappers.java.util.List: ...
	def setFindAllIntersections(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def checkValid(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getErrorMessage(self, ) -> javawrappers.java.lang.String: ...


class SegmentIntersector:
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def processIntersections(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.noding.SegmentString, arg3: Union[int, JInt], ) -> None: ...


class SegmentStringDissolver:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentStringDissolver.SegmentStringMerger, ): ...
	@overload
	def __init__(self, ): ...
	class SegmentStringMerger:
		def merge(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: javawrappers.org.locationtech.jts.noding.SegmentString, arg2: Union[int, JBoolean], ) -> None: ...


	def getDissolved(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: javawrappers.org.locationtech.jts.noding.SegmentString, arg2: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def dissolve(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, ) -> None: ...
	@overload
	def dissolve(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SegmentPointComparator:
	def __init__(self, ): ...
	@staticmethod
	def relativeSign(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def compare(arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class IntersectionFinderAdder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def processIntersections(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.noding.SegmentString, arg3: Union[int, JInt], ) -> None: ...
	def getInteriorIntersections(self, ) -> javawrappers.java.util.List: ...


class Noder:
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class SimpleNoder:
	def __init__(self, ): ...
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSegmentIntersector(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ) -> None: ...


class MCIndexNoder:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ): ...
	class SegmentOverlapAction:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def overlap(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg3: Union[int, JInt], ) -> None: ...
		@overload
		def overlap(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, ) -> javawrappers.org.locationtech.jts.index.SpatialIndex: ...
	def getMonotoneChains(self, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSegmentIntersector(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ) -> None: ...
	@overload
	def overlap(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg3: Union[int, JInt], ) -> None: ...
	@overload
	def overlap(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class NodingIntersectionFinder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def count(self, ) -> Union[int, JInt]: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getInteriorIntersection(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getIntersections(self, ) -> javawrappers.java.util.List: ...
	def hasIntersection(self, ) -> Union[int, JBoolean]: ...
	def setFindAllIntersections(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCheckEndSegmentsOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setKeepIntersections(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createAnyIntersectionFinder(arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ) -> javawrappers.org.locationtech.jts.noding.NodingIntersectionFinder: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getIntersectionSegments(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createAllIntersectionsFinder(arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ) -> javawrappers.org.locationtech.jts.noding.NodingIntersectionFinder: ...
	@staticmethod
	def createIntersectionCounter(arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ) -> javawrappers.org.locationtech.jts.noding.NodingIntersectionFinder: ...
	def processIntersections(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.noding.SegmentString, arg3: Union[int, JInt], ) -> None: ...


class SegmentSetMutualIntersector:
	def process(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ) -> None: ...


class SegmentNode:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.NodedSegmentString, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def isEndPoint(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def isInterior(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class IteratedNoder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setMaximumIterations(self, arg0: Union[int, JInt], ) -> None: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class NodingValidator:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkValid(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class OrientedCoordinateArray:
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class IntersectionAdder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperIntersectionPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isAdjacentSegments(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hasProperIntersection(self, ) -> Union[int, JBoolean]: ...
	def hasInteriorIntersection(self, ) -> Union[int, JBoolean]: ...
	def hasIntersection(self, ) -> Union[int, JBoolean]: ...
	def getLineIntersector(self, ) -> javawrappers.org.locationtech.jts.algorithm.LineIntersector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hasProperInteriorIntersection(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processIntersections(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentString, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.noding.SegmentString, arg3: Union[int, JInt], ) -> None: ...


class MCIndexSegmentSetMutualIntersector:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class SegmentOverlapAction:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def overlap(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
		@overload
		def overlap(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg3: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def process(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ) -> None: ...
	@overload
	def overlap(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	@overload
	def overlap(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg3: Union[int, JInt], ) -> None: ...
	def getIndex(self, ) -> javawrappers.org.locationtech.jts.index.SpatialIndex: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SegmentString:
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def size(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...


class NodableSegmentString:
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def size(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def addIntersection(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JInt], ) -> None: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...


class Octant:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def octant(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def octant(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SegmentStringUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def extractNodedSegmentStrings(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def toGeometry(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def extractSegmentStrings(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...


class FastSegmentSetIntersectionFinder:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getSegmentSetIntersector(self, ) -> javawrappers.org.locationtech.jts.noding.SegmentSetMutualIntersector: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def intersects(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.noding.SegmentIntersectionDetector, ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SinglePassNoder:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ): ...
	@overload
	def __init__(self, ): ...
	def getNodedSubstrings(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeNodes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSegmentIntersector(self, arg0: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ) -> None: ...


class SimpleSegmentSetMutualIntersector:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def process(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.noding.SegmentIntersector, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SegmentNodeList:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.noding.NodedSegmentString, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.noding.SegmentNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addSplitEdges(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdge(self, ) -> javawrappers.org.locationtech.jts.noding.NodedSegmentString: ...
	def notify(self, ) -> None: ...
	def getSplitCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...


class BasicSegmentString:
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSegmentOctant(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def size(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...


