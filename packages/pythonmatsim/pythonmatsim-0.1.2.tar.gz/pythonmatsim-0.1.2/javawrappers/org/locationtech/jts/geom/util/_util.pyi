################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.locationtech.jts.geom.util
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class GeometryExtracter:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def extract(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def extract(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AffineTransformation:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.util.AffineTransformation, ): ...
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, arg4: javawrappers.org.locationtech.jts.geom.Coordinate, arg5: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def setToIdentity(self, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def scale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def composeBefore(self, arg0: javawrappers.org.locationtech.jts.geom.util.AffineTransformation, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def rotationInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def rotationInstance(arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def rotationInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def rotationInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setToReflection(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setToReflection(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def notify(self, ) -> None: ...
	def translate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def setToReflectionBasic(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def getMatrixEntries(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reflect(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def reflect(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setToShear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def scaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def scaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def getDeterminant(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def translationInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def shear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def getInverse(self, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def shearInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def reflectionInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def reflectionInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def compose(self, arg0: javawrappers.org.locationtech.jts.geom.util.AffineTransformation, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def setToScale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setTransformation(self, arg0: javawrappers.org.locationtech.jts.geom.util.AffineTransformation, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	def setTransformation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setToTranslation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...


class SineStarFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setCentre(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def setArmLengthRatio(self, arg0: Union[float, JDouble], ) -> None: ...
	def createSineStar(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def setEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createSupercircle(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def createEllipse(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def setNumArms(self, arg0: Union[int, JInt], ) -> None: ...
	def setRotation(self, arg0: Union[float, JDouble], ) -> None: ...
	def createCircle(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def setHeight(self, arg0: Union[float, JDouble], ) -> None: ...
	def setNumPoints(self, arg0: Union[int, JInt], ) -> None: ...
	def setWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def createSquircle(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def createRectangle(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def setSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBase(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def createArcPolygon(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def createArc(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.LineString: ...


class ComponentCoordinateExtracter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCoordinates(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class AffineTransformationFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createFromBaseLines(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def createFromControlVectors(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def createFromControlVectors(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def createFromControlVectors(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, arg4: javawrappers.org.locationtech.jts.geom.Coordinate, arg5: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	@overload
	@staticmethod
	def createFromControlVectors(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def notify(self, ) -> None: ...


class PointExtracter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getPoints(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getPoints(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class GeometryCombiner:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@staticmethod
	def extractFactory(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.locationtech.jts.geom.GeometryFactory: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def combine(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def combine(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def combine(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def combine(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


class GeometryTransformer:
	def __init__(self, ): ...
	def getInputGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeometryMapper:
	def __init__(self, ): ...
	class MapOp:
		def map(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def map(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.util.GeometryMapper.MapOp, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def map(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.geom.util.GeometryMapper.MapOp, ) -> javawrappers.java.util.Collection: ...
	@overload
	def map(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class PolygonExtracter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getPolygons(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getPolygons(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AffineTransformationBuilder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, arg4: javawrappers.org.locationtech.jts.geom.Coordinate, arg5: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTransformation(self, ) -> javawrappers.org.locationtech.jts.geom.util.AffineTransformation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LinearComponentExtracter:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.Collection, arg2: Union[int, JBoolean], ) -> javawrappers.java.util.Collection: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.util.Collection, arg2: Union[int, JBoolean], ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getGeometry(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def getGeometry(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...
	def setForceToLineString(self, arg0: Union[int, JBoolean], ) -> None: ...


class GeometryEditor:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def __init__(self, ): ...
	class CoordinateSequenceOperation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		@overload
		def edit(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CoordinateOperation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		@overload
		def edit(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NoOpGeometryOperation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class GeometryEditorOperation:
		def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.util.GeometryEditor.GeometryEditorOperation, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setCopyUserData(self, arg0: Union[int, JBoolean], ) -> None: ...


class NoninvertibleTransformationException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LineStringExtracter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLines(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getGeometry(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class ShortCircuitedGeometryVisitor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeometryCollectionMapper:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.util.GeometryMapper.MapOp, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def map(arg0: javawrappers.org.locationtech.jts.geom.GeometryCollection, arg1: javawrappers.org.locationtech.jts.geom.util.GeometryMapper.MapOp, ) -> javawrappers.org.locationtech.jts.geom.GeometryCollection: ...
	@overload
	def map(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryCollection, ) -> javawrappers.org.locationtech.jts.geom.GeometryCollection: ...
	def notify(self, ) -> None: ...


