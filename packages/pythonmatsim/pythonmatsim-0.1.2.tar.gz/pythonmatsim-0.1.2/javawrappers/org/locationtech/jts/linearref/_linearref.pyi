################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.linearref
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class LengthLocationMap:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def getLocation(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	@overload
	def getLocation(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	@overload
	def getLocation(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	@overload
	@staticmethod
	def getLocation(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getLength(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> Union[float, JDouble]: ...
	@overload
	def getLength(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LinearIterator:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.linearref.LinearLocation, ): ...
	def next(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isEndOfLine(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSegmentEnd(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notifyAll(self, ) -> None: ...
	def getComponentIndex(self, ) -> Union[int, JInt]: ...
	def getLine(self, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getSegmentStart(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getVertexIndex(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LinearGeometryBuilder:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JBoolean], ) -> None: ...
	def endLine(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFixInvalidLines(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getLastCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notify(self, ) -> None: ...
	def setIgnoreInvalidLines(self, arg0: Union[int, JBoolean], ) -> None: ...


class LinearLocation:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getComponentIndex(self, ) -> Union[int, JInt]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getSegment(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.LineSegment: ...
	def getSegmentIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def copy(self, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	@staticmethod
	def pointAlongSegmentByFraction(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def clamp(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def setToEnd(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getSegmentLength(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	def isEndpoint(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def isVertex(self, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def toLowest(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def isOnSameSegment(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> Union[int, JBoolean]: ...
	def getCoordinate(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def compareLocationValues(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def compareLocationValues(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def snapToVertex(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def getEndLocation(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def getSegmentFraction(self, ) -> Union[float, JDouble]: ...


class LocationIndexedLine:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def clampIndex(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def getStartIndex(self, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def notifyAll(self, ) -> None: ...
	def project(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def notify(self, ) -> None: ...
	def indexOfAfter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def indicesOf(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.linearref.LinearLocation, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def extractLine(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, arg1: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def extractPoint(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def extractPoint(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def indexOf(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.linearref.LinearLocation: ...
	def isValidIndex(self, arg0: javawrappers.org.locationtech.jts.linearref.LinearLocation, ) -> Union[int, JBoolean]: ...


class LengthIndexedLine:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def clampIndex(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getStartIndex(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def project(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def indexOfAfter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def indicesOf(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(Union[float, JDouble], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def extractLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def extractPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def extractPoint(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def indexOf(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	def isValidIndex(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...


