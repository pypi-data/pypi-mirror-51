################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.geomgraph
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.operation.valid

from jpype.types import *
from typing import Union

from typing import overload

class ConsistentAreaTester:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasDuplicateRings(self, ) -> Union[int, JBoolean]: ...
	def isNodeConsistentArea(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getInvalidPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ConnectedInteriorTester:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def findDifferentPoint(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def isInteriorsConnected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class IsValidOp:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def findPtNotNode(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.LinearRing, arg2: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isValid(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isValid(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	@overload
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getValidationError(self, ) -> javawrappers.org.locationtech.jts.operation.valid.TopologyValidationError: ...
	def notify(self, ) -> None: ...
	def setSelfTouchingRingFormingHoleValid(self, arg0: Union[int, JBoolean], ) -> None: ...


class RepeatedPointTester:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def hasRepeatedPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	@overload
	def hasRepeatedPoint(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TopologyValidationError:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getErrorType(self, ) -> Union[int, JInt]: ...


class IndexedNestedRingTester:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.LinearRing, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNestedPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isNonNested(self, ) -> Union[int, JBoolean]: ...


