################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.locationtech.jts.geomgraph
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.algorithm

from jpype.types import *
from typing import Union

from typing import overload

class EdgeEndBundleStar:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def notify(self, ) -> None: ...
	def getNextCW(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEnd: ...
	def computeLabelling(self, arg0: JArray(javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, 1), ) -> None: ...
	def findIndex(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> Union[int, JInt]: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def isAreaLabelsConsistent(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ) -> Union[int, JBoolean]: ...


class RelateNode:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geomgraph.EdgeEndStar, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isIncidentEdgeInResult(self, ) -> Union[int, JBoolean]: ...
	def setInResult(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def setLabelBoundary(self, arg0: Union[int, JInt], ) -> None: ...
	def setCovered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def isCoveredSet(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def updateIM(self, arg0: javawrappers.org.locationtech.jts.geom.IntersectionMatrix, ) -> None: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEndStar: ...
	def isCovered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def mergeLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	@overload
	def mergeLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> None: ...
	def isInResult(self, ) -> Union[int, JBoolean]: ...


class RelateNodeFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class EdgeEndBundle:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, arg1: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def getQuadrant(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setNode(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> None: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEdge(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def notify(self, ) -> None: ...
	def getDy(self, ) -> Union[float, JDouble]: ...
	def getDx(self, ) -> Union[float, JDouble]: ...
	def getDirectedCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEdgeEnds(self, ) -> javawrappers.java.util.List: ...
	def computeLabel(self, arg0: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareDirection(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> Union[int, JInt]: ...
	def getNode(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...


class RelateComputer:
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def computeIM(self, ) -> javawrappers.org.locationtech.jts.geom.IntersectionMatrix: ...
	def notify(self, ) -> None: ...


class RelateNodeGraph:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNodeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def copyNodesAndLabels(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, arg1: Union[int, JInt], ) -> None: ...
	def build(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def insertEdgeEnds(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def computeIntersectionNodes(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, arg1: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class EdgeEndBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def computeEdgeEnds(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, arg1: javawrappers.java.util.List, ) -> None: ...
	@overload
	def computeEdgeEnds(self, arg0: javawrappers.java.util.Iterator, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class RelateOp:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def relate(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.IntersectionMatrix: ...
	@overload
	@staticmethod
	def relate(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, ) -> javawrappers.org.locationtech.jts.geom.IntersectionMatrix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIntersectionMatrix(self, ) -> javawrappers.org.locationtech.jts.geom.IntersectionMatrix: ...
	def notify(self, ) -> None: ...
	def getArgGeometry(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


