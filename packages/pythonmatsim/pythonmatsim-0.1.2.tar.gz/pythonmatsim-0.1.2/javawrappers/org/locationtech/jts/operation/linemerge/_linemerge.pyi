################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.locationtech.jts.operation.linemerge
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.planargraph

from jpype.types import *
from typing import Union

from typing import overload

class LineSequencer:
	def __init__(self, ): ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def sequence(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getSequencedLineStrings(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isSequenced(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isSequenceable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class LineMergeEdge:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.LineString, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getDirEdge(self, arg0: javawrappers.org.locationtech.jts.planargraph.Node, ) -> javawrappers.org.locationtech.jts.planargraph.DirectedEdge: ...
	@overload
	def getDirEdge(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.planargraph.DirectedEdge: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getComponentWithVisitedState(arg0: javawrappers.java.util.Iterator, arg1: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.planargraph.GraphComponent: ...
	def getLine(self, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	def setDirectedEdges(self, arg0: javawrappers.org.locationtech.jts.planargraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.planargraph.DirectedEdge, ) -> None: ...
	def notify(self, ) -> None: ...
	def getOppositeNode(self, arg0: javawrappers.org.locationtech.jts.planargraph.Node, ) -> javawrappers.org.locationtech.jts.planargraph.Node: ...
	def isMarked(self, ) -> Union[int, JBoolean]: ...
	def isRemoved(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def setMarked(arg0: javawrappers.java.util.Iterator, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setMarked(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def setVisited(arg0: javawrappers.java.util.Iterator, arg1: Union[int, JBoolean], ) -> None: ...
	def setContext(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getContext(self, ) -> javawrappers.java.lang.Object: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...


class LineMerger:
	def __init__(self, ): ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMergedLineStrings(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LineMergeGraph:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNodes(self, ) -> javawrappers.java.util.Collection: ...
	def edgeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.locationtech.jts.planargraph.Edge, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.locationtech.jts.planargraph.Node, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.locationtech.jts.planargraph.DirectedEdge, ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.org.locationtech.jts.planargraph.Edge, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.locationtech.jts.planargraph.DirectedEdge, ) -> Union[int, JBoolean]: ...
	def nodeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def findNodesOfDegree(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def dirEdgeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.planargraph.Node: ...
	def getEdges(self, ) -> javawrappers.java.util.Collection: ...
	def addEdge(self, arg0: javawrappers.org.locationtech.jts.geom.LineString, ) -> None: ...


class LineMergeDirectedEdge:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.planargraph.Node, arg1: javawrappers.org.locationtech.jts.planargraph.Node, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getQuadrant(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setSym(self, arg0: javawrappers.org.locationtech.jts.planargraph.DirectedEdge, ) -> None: ...
	@staticmethod
	def getComponentWithVisitedState(arg0: javawrappers.java.util.Iterator, arg1: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.planargraph.GraphComponent: ...
	def getEdgeDirection(self, ) -> Union[int, JBoolean]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEdge(self, ) -> javawrappers.org.locationtech.jts.planargraph.Edge: ...
	def notify(self, ) -> None: ...
	def isMarked(self, ) -> Union[int, JBoolean]: ...
	def isRemoved(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setContext(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getSym(self, ) -> javawrappers.org.locationtech.jts.planargraph.DirectedEdge: ...
	def getToNode(self, ) -> javawrappers.org.locationtech.jts.planargraph.Node: ...
	def compareDirection(self, arg0: javawrappers.org.locationtech.jts.planargraph.DirectedEdge, ) -> Union[int, JInt]: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toEdges(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getFromNode(self, ) -> javawrappers.org.locationtech.jts.planargraph.Node: ...
	def getNext(self, ) -> javawrappers.org.locationtech.jts.operation.linemerge.LineMergeDirectedEdge: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def setMarked(arg0: javawrappers.java.util.Iterator, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setMarked(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEdge(self, arg0: javawrappers.org.locationtech.jts.planargraph.Edge, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def setVisited(arg0: javawrappers.java.util.Iterator, arg1: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getContext(self, ) -> javawrappers.java.lang.Object: ...
	def getDirectionPt(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


class EdgeString:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.operation.linemerge.LineMergeDirectedEdge, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toLineString(self, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


