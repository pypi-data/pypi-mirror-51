################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.operation.distance3d
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.operation.distance
import javawrappers.org.locationtech.jts.math

from jpype.types import *
from typing import Union

from typing import overload

class PlanarPolygon3D:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Polygon, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def intersects(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.LineString, ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPlane(self, ) -> javawrappers.org.locationtech.jts.math.Plane3D: ...
	def notify(self, ) -> None: ...
	def getPolygon(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...


class Distance3DOp:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def nearestLocations(self, ) -> JArray(javawrappers.org.locationtech.jts.operation.distance.GeometryLocation, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def distance(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def distance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isWithinDistance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def nearestPoints(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	@overload
	def nearestPoints(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...


class AxisPlaneCoordinateSequence:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasM(self, ) -> Union[int, JBoolean]: ...
	def getM(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def projectToXZ(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def projectToXY(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def expandEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toCoordinateArray(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.operation.distance3d.AxisPlaneCoordinateSequence: ...
	@overload
	def copy(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getCoordinateCopy(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getMeasures(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def projectToYZ(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def hasZ(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getY(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getZ(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


