################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.locationtech.jts.util
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class StringUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def split(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def getStackTrace(arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getStackTrace(arg0: javawrappers.java.lang.Throwable, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def spaces(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def chars(arg0: Union[string, JString], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class NumberUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def equalsWithTolerance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...


class CollectionUtil:
	def __init__(self, ): ...
	class Function:
		def execute(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def transform(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.util.CollectionUtil.Function, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def select(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.util.CollectionUtil.Function, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def apply(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.locationtech.jts.util.CollectionUtil.Function, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def execute(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class CoordinateArrayFilter:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...


class Memory:
	def __init__(self, ): ...
	@staticmethod
	def usedString() -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def format(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def usedTotalString() -> javawrappers.java.lang.String: ...
	@staticmethod
	def used() -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def total() -> Union[long, JLong]: ...
	@staticmethod
	def round(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def allString() -> javawrappers.java.lang.String: ...
	@staticmethod
	def free() -> Union[long, JLong]: ...
	@staticmethod
	def totalString() -> javawrappers.java.lang.String: ...
	@staticmethod
	def freeString() -> javawrappers.java.lang.String: ...


class AssertionFailedException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GeometricShapeFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	class Dimensions:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setCentre(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
		def setEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getMinSize(self, ) -> Union[float, JDouble]: ...
		def getWidth(self, ) -> Union[float, JDouble]: ...
		def setHeight(self, arg0: Union[float, JDouble], ) -> None: ...
		def setWidth(self, arg0: Union[float, JDouble], ) -> None: ...
		def notify(self, ) -> None: ...
		def getHeight(self, ) -> Union[float, JDouble]: ...
		def setSize(self, arg0: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getCentre(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getBase(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def setBase(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createSupercircle(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def getMinSize(self, ) -> Union[float, JDouble]: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def createCircle(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def notify(self, ) -> None: ...
	def createSquircle(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def getHeight(self, ) -> Union[float, JDouble]: ...
	def createRectangle(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	@overload
	def setSize(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCentre(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def setBase(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def setBase(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def createArcPolygon(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def createArc(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	@overload
	def setCentre(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def setCentre(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def setEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	@overload
	def setEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	def createEllipse(self, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def setRotation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setHeight(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setHeight(self, arg0: Union[float, JDouble], ) -> None: ...
	def setNumPoints(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBase(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Debug:
	class SegmentFindingFilter:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def hasSegment(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDone(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def instancePrintIfWatch(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def printIfWatch(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	@staticmethod
	def breakIfEqual(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def breakIfEqual(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isDebugging() -> Union[int, JBoolean]: ...
	@overload
	def println(self, ) -> None: ...
	@overload
	@staticmethod
	def println(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def breakIf(arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def instancePrintObject(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def instancePrint(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def instancePrint(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def resetTime() -> None: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def printWatch() -> None: ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def hasSegment(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	@overload
	def hasSegment(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def addWatch(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toLine(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	@overload
	@staticmethod
	def toLine(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	@overload
	@staticmethod
	def toLine(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	def instancePrintWatch(self, ) -> None: ...
	@staticmethod
	def printTime(arg0: javawrappers.java.lang.String, ) -> None: ...


class PriorityQueue:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def poll(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class Stopwatch:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def split(self, ) -> Union[long, JLong]: ...
	def stop(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTime(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def start(self, ) -> None: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getTimeString(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def getTimeString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CoordinateCountFilter:
	def __init__(self, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class Assert:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def isTrue(arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def isTrue(arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def shouldNeverReachHere() -> None: ...
	@overload
	@staticmethod
	def shouldNeverReachHere(arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class UniqueCoordinateArrayFilter:
	def __init__(self, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def filterCoordinates(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...


class ObjectCounter:
	def __init__(self, ): ...
	class Counter:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def count(self, ) -> Union[int, JInt]: ...
		def increment(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def count(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def count(self, ) -> Union[int, JInt]: ...
	def increment(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


