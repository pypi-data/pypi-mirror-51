################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.com.fasterxml.classmate.members
import javawrappers.java.util.concurrent
import javawrappers.java.util.stream
import javawrappers.java.lang.annotation
import javawrappers.com.fasterxml.classmate
import javawrappers.org.hibernate.validator.internal.util
import javawrappers.java.util.function
import javawrappers.java.util.concurrent.locks
import javawrappers.javax.validation

from jpype.types import *
from typing import Union

from typing import overload

class ModUtil:
	@overload
	@staticmethod
	def calculateMod11Check(arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def calculateMod11Check(arg0: javawrappers.java.util.List, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def calculateMod10Check(arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def calculateModXCheckWithWeights(arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: Union[int, JInt], *arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def calculateLuhnMod10Check(arg0: javawrappers.java.util.List, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Contracts:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def assertNotEmpty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def assertNotEmpty(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def assertNotEmpty(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def assertTrue(arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def assertTrue(arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def assertNotNull(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def assertNotNull(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def assertValueNotNull(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExecutableHelper:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.util.TypeResolutionHelper, ): ...
	class SimpleMethodFilter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def include(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def include(self, arg0: javawrappers.com.fasterxml.classmate.members.RawMethod, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def include(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def include(self, arg0: javawrappers.com.fasterxml.classmate.members.RawMethod, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getElementType(arg0: javawrappers.java.lang.reflect.Executable, ) -> javawrappers.java.lang.annotation.ElementType: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getSignature(arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getSignature(arg0: javawrappers.java.lang.reflect.Executable, ) -> javawrappers.java.lang.String: ...
	def overrides(self, arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.reflect.Method, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getSimpleName(arg0: javawrappers.java.lang.reflect.Executable, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getExecutableAsString(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...


class TypeVariableBindings:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getTypeVariableBindings(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...


class TypeVariables:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getTypeParameterIndex(arg0: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.java.lang.Integer: ...
	@staticmethod
	def getContainerClass(arg0: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getActualTypeParameter(arg0: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	@staticmethod
	def isAnnotatedObject(arg0: javawrappers.java.lang.reflect.TypeVariable, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isInternal(arg0: javawrappers.java.lang.reflect.TypeVariable, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getContainerElementType(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def getTypeParameterName(arg0: javawrappers.java.lang.Class, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isArrayElement(arg0: javawrappers.java.lang.reflect.TypeVariable, ) -> Union[int, JBoolean]: ...


class DomainNameUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isValidEmailDomainAddress(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isValidDomainAddress(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class Version:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def touch() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getVersionString() -> javawrappers.java.lang.String: ...


class ReflectionHelper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getIndexedValue(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def unBoxedType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def isIndexable(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def boxedType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def boxedType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def isCollection(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getMappedValue(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def isList(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getClassFromType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isMap(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isIterable(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getValue(arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getValue(arg0: javawrappers.java.lang.reflect.Field, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def isGetterMethod(arg0: javawrappers.java.lang.reflect.Executable, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getCollectionElementType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getPropertyName(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def typeOf(arg0: javawrappers.java.lang.reflect.Executable, arg1: Union[int, JInt], ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	@staticmethod
	def typeOf(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.lang.reflect.Type: ...


class CollectionHelper:
	class ArrayAccessor:
		def size(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...


	class ArrayIterator:
		def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.util.CollectionHelper.ArrayAccessor, arg1: javawrappers.java.lang.Object, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def remove(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class ArrayIterable:
		def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.util.CollectionHelper.ArrayAccessor, arg1: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toImmutableMap(arg0: javawrappers.java.util.Map, ) -> javawrappers.java.util.Map: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@staticmethod
	def asSet(*arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def toImmutableSet(arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def newArrayList(arg0: Union[int, JInt], ) -> javawrappers.java.util.ArrayList: ...
	@overload
	@staticmethod
	def newArrayList() -> javawrappers.java.util.ArrayList: ...
	@overload
	@staticmethod
	def newArrayList(*arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.ArrayList: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	@staticmethod
	def newHashMap() -> javawrappers.java.util.HashMap: ...
	@overload
	@staticmethod
	def newHashMap(arg0: javawrappers.java.util.Map, ) -> javawrappers.java.util.HashMap: ...
	@overload
	@staticmethod
	def newHashMap(arg0: Union[int, JInt], ) -> javawrappers.java.util.HashMap: ...
	@staticmethod
	def newConcurrentHashMap() -> javawrappers.java.util.concurrent.ConcurrentHashMap: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newHashSet(arg0: Union[int, JInt], ) -> javawrappers.java.util.HashSet: ...
	@overload
	@staticmethod
	def newHashSet() -> javawrappers.java.util.HashSet: ...
	@overload
	@staticmethod
	def newHashSet(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.HashSet: ...
	@overload
	@staticmethod
	def newHashSet(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.HashSet: ...
	@staticmethod
	def iterableFromArray(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def size(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def iteratorFromArray(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toImmutableList(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TypeResolutionHelper:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeResolver(self, ) -> javawrappers.com.fasterxml.classmate.TypeResolver: ...
	def notify(self, ) -> None: ...


class StringHelper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def toShortString(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toShortString(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def join(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def join(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isNullOrEmptyString(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def decapitalize(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class IdentitySet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TypeHelper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isAssignable(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def parameterizedType(arg0: javawrappers.java.lang.Class, *arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def genericArrayType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.GenericArrayType: ...
	@staticmethod
	def getValidatorTypes(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def isInstance(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getErasedReferenceType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getComponentType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isArray(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getErasedType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def isUnboundWildcard(arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def extractType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Type: ...


class ConcurrentReferenceHashMap:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType, arg2: javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType, arg4: javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType, arg5: javawrappers.java.util.EnumSet, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	class EntrySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class EntryIterator:
		@overload
		def next(self, ) -> javawrappers.java.util.Map.Entry: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class WriteThroughEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getKey(self, ) -> javawrappers.java.lang.Object: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SimpleEntry:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.util.Map.Entry, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getKey(self, ) -> javawrappers.java.lang.Object: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ValueIterator:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def nextElement(self, ) -> javawrappers.java.lang.Object: ...


	class KeyIterator:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def nextElement(self, ) -> javawrappers.java.lang.Object: ...


	class HashIterator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class Segment:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def unlock(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getWaitQueueLength(self, arg0: javawrappers.java.util.concurrent.locks.Condition, ) -> Union[int, JInt]: ...
		def getQueueLength(self, ) -> Union[int, JInt]: ...
		def isFair(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def tryLock(self, ) -> Union[int, JBoolean]: ...
		@overload
		def tryLock(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[int, JBoolean]: ...
		def lockInterruptibly(self, ) -> None: ...
		def newCondition(self, ) -> javawrappers.java.util.concurrent.locks.Condition: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def hasQueuedThread(self, arg0: javawrappers.java.lang.Thread, ) -> Union[int, JBoolean]: ...
		def isHeldByCurrentThread(self, ) -> Union[int, JBoolean]: ...
		def lock(self, ) -> None: ...
		def hasWaiters(self, arg0: javawrappers.java.util.concurrent.locks.Condition, ) -> Union[int, JBoolean]: ...
		def hasQueuedThreads(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getHoldCount(self, ) -> Union[int, JInt]: ...


	class HashEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SoftValueReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def keyRef(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		def keyHash(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


	class WeakValueReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def keyRef(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		def keyHash(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


	class SoftKeyReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def keyRef(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		def keyHash(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


	class WeakKeyReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def keyRef(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		def keyHash(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


	class KeyReference:
		def keyHash(self, ) -> Union[int, JInt]: ...
		def keyRef(self, ) -> javawrappers.java.lang.Object: ...


	class Option:
		IDENTITY_COMPARISONS: ConcurrentReferenceHashMap.Option = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.Option: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.Option, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class ReferenceType:
		STRONG: ConcurrentReferenceHashMap.ReferenceType = ...
		WEAK: ConcurrentReferenceHashMap.ReferenceType = ...
		SOFT: ConcurrentReferenceHashMap.ReferenceType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def newCondition(self, ) -> javawrappers.java.util.concurrent.locks.Condition: ...
	def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def hasQueuedThread(self, arg0: javawrappers.java.lang.Thread, ) -> Union[int, JBoolean]: ...
	def isHeldByCurrentThread(self, ) -> Union[int, JBoolean]: ...
	def lock(self, ) -> None: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getKey(self, ) -> javawrappers.java.lang.Object: ...
	def unlock(self, ) -> None: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getWaitQueueLength(self, arg0: javawrappers.java.util.concurrent.locks.Condition, ) -> Union[int, JInt]: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getQueueLength(self, ) -> Union[int, JInt]: ...
	@overload
	def tryLock(self, ) -> Union[int, JBoolean]: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def lockInterruptibly(self, ) -> None: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def purgeStaleEntries(self, ) -> None: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.util.Map.Entry: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.Option, 1): ...
	@overload
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType, 1): ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def isFair(self, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def keyHash(self, ) -> Union[int, JInt]: ...
	@overload
	def keyHash(self, ) -> Union[int, JInt]: ...
	@overload
	def keyHash(self, ) -> Union[int, JInt]: ...
	@overload
	def keyHash(self, ) -> Union[int, JInt]: ...
	@overload
	def keyHash(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def hasQueuedThreads(self, ) -> Union[int, JBoolean]: ...
	def getHoldCount(self, ) -> Union[int, JInt]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.Option: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.internal.util.ConcurrentReferenceHashMap.ReferenceType: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def keyRef(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def keyRef(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def keyRef(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def keyRef(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def keyRef(self, ) -> javawrappers.java.lang.Object: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def hasWaiters(self, arg0: javawrappers.java.util.concurrent.locks.Condition, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def nextElement(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def nextElement(self, ) -> javawrappers.java.lang.Object: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ExecutableParameterNameProvider:
	def __init__(self, arg0: javawrappers.javax.validation.ParameterNameProvider, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameterNames(self, arg0: javawrappers.java.lang.reflect.Executable, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDelegate(self, ) -> javawrappers.javax.validation.ParameterNameProvider: ...
	def notify(self, ) -> None: ...


