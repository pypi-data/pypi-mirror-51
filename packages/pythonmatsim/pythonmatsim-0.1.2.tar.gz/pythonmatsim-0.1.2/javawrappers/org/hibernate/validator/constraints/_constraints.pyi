################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.hibernate.validator.constraints
import javawrappers.javax.validation.constraints

from jpype.types import *
from typing import Union

from typing import overload

class CodePointLength:
	class NormalizationStrategy:
		NONE: CodePointLength.NormalizationStrategy = ...
		NFD: CodePointLength.NormalizationStrategy = ...
		NFC: CodePointLength.NormalizationStrategy = ...
		NFKD: CodePointLength.NormalizationStrategy = ...
		NFKC: CodePointLength.NormalizationStrategy = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.CodePointLength.NormalizationStrategy: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.constraints.CodePointLength.NormalizationStrategy, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def normalize(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.CharSequence: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.CodePointLength, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def max(self, ) -> Union[int, JInt]: ...
	def normalizationStrategy(self, ) -> javawrappers.org.hibernate.validator.constraints.CodePointLength.NormalizationStrategy: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.CodePointLength.NormalizationStrategy: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.CodePointLength.NormalizationStrategy, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def min(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def normalize(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.CodePointLength, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ConstraintComposition:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.org.hibernate.validator.constraints.CompositionType: ...


class UniqueElements:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.UniqueElements, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.UniqueElements, 1): ...


class Mod10Check:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Mod10Check, 1): ...


	def multiplier(self, ) -> Union[int, JInt]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def ignoreNonDigitCharacters(self, ) -> Union[int, JBoolean]: ...
	def weight(self, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def startIndex(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def endIndex(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkDigitIndex(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Mod10Check, 1): ...


class Mod11Check:
	class ProcessingDirection:
		RIGHT_TO_LEFT: Mod11Check.ProcessingDirection = ...
		LEFT_TO_RIGHT: Mod11Check.ProcessingDirection = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.Mod11Check.ProcessingDirection: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.constraints.Mod11Check.ProcessingDirection, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Mod11Check, 1): ...


	def treatCheck11As(self, ) -> Union[string, JString]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.Mod11Check.ProcessingDirection, 1): ...
	def threshold(self, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def processingDirection(self, ) -> javawrappers.org.hibernate.validator.constraints.Mod11Check.ProcessingDirection: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def startIndex(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def endIndex(self, ) -> Union[int, JInt]: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Mod11Check, 1): ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.Mod11Check.ProcessingDirection: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def ignoreNonDigitCharacters(self, ) -> Union[int, JBoolean]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def checkDigitIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def treatCheck10As(self, ) -> Union[string, JString]: ...


class NotBlank:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.NotBlank, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.NotBlank, 1): ...


class ModCheck:
	class ModType:
		MOD10: ModCheck.ModType = ...
		MOD11: ModCheck.ModType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.ModCheck.ModType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.constraints.ModCheck.ModType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ModCheck, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.ModCheck.ModType: ...
	def modType(self, ) -> javawrappers.org.hibernate.validator.constraints.ModCheck.ModType: ...
	def multiplier(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.ModCheck.ModType, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def ignoreNonDigitCharacters(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def checkDigitPosition(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def startIndex(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def endIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ModCheck, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class NotEmpty:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.NotEmpty, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.NotEmpty, 1): ...


class CreditCardNumber:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.CreditCardNumber, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def ignoreNonDigitCharacters(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.CreditCardNumber, 1): ...


class ScriptAssert:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ScriptAssert, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reportOn(self, ) -> javawrappers.java.lang.String: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def alias(self, ) -> javawrappers.java.lang.String: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lang(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ScriptAssert, 1): ...
	def script(self, ) -> javawrappers.java.lang.String: ...


class LuhnCheck:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.LuhnCheck, 1): ...


	def startIndex(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def endIndex(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def ignoreNonDigitCharacters(self, ) -> Union[int, JBoolean]: ...
	def checkDigitIndex(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.LuhnCheck, 1): ...


class Email:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Email, 1): ...


	def regexp(self, ) -> javawrappers.java.lang.String: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def flags(self, ) -> JArray(javawrappers.javax.validation.constraints.Pattern.Flag, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Email, 1): ...


class EAN:
	class Type:
		EAN13: EAN.Type = ...
		EAN8: EAN.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.EAN.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.constraints.EAN.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.EAN, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.EAN.Type: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.EAN.Type, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.org.hibernate.validator.constraints.EAN.Type: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.EAN, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ISBN:
	class Type:
		ISBN_10: ISBN.Type = ...
		ISBN_13: ISBN.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.ISBN.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.constraints.ISBN.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ISBN, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.ISBN.Type: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.ISBN.Type, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> javawrappers.org.hibernate.validator.constraints.ISBN.Type: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ISBN, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Currency:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Currency, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Currency, 1): ...


class CompositionType:
	OR: CompositionType = ...
	AND: CompositionType = ...
	ALL_FALSE: CompositionType = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.CompositionType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.CompositionType, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Range:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Range, 1): ...


	def min(self, ) -> Union[long, JLong]: ...
	def max(self, ) -> Union[long, JLong]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Range, 1): ...


class ParameterScriptAssert:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ParameterScriptAssert, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lang(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.ParameterScriptAssert, 1): ...
	def script(self, ) -> javawrappers.java.lang.String: ...


class URL:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.URL, 1): ...


	def regexp(self, ) -> javawrappers.java.lang.String: ...
	def flags(self, ) -> JArray(javawrappers.javax.validation.constraints.Pattern.Flag, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def protocol(self, ) -> javawrappers.java.lang.String: ...
	def port(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def host(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.URL, 1): ...


class SafeHtml:
	class WhiteListType:
		NONE: SafeHtml.WhiteListType = ...
		SIMPLE_TEXT: SafeHtml.WhiteListType = ...
		BASIC: SafeHtml.WhiteListType = ...
		BASIC_WITH_IMAGES: SafeHtml.WhiteListType = ...
		RELAXED: SafeHtml.WhiteListType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.SafeHtml.WhiteListType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml.WhiteListType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml, 1): ...


	class Attribute:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def protocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


	class Tag:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def attributes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def attributesWithProtocols(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml.Attribute, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.constraints.SafeHtml.WhiteListType: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml.WhiteListType, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def additionalTags(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def additionalTagsWithAttributes(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml.Tag, 1): ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def baseURI(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	def attributes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def protocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml, 1): ...
	def whitelistType(self, ) -> javawrappers.org.hibernate.validator.constraints.SafeHtml.WhiteListType: ...
	def attributesWithProtocols(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.SafeHtml.Attribute, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Length:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Length, 1): ...


	def min(self, ) -> Union[int, JInt]: ...
	def max(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.org.hibernate.validator.constraints.Length, 1): ...


