################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.hibernate.validator.ap.internal.checks
import javawrappers.javax.lang.model.element

from jpype.types import *
from typing import Union

from typing import overload

class SingleValuedChecks:
	def __init__(self, *arg0: javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheck, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def execute(self, arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class PrimitiveCheck:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class GroupSequenceProviderCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, arg1: javawrappers.javax.lang.model.util.Types, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class ConstraintCheck:
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class StaticCheck:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class TypeCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, arg1: javawrappers.javax.lang.model.util.Types, arg2: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class AbstractConstraintCheck:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class ConstraintCheckIssue:
	def __init__(self, arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, arg2: javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue.IssueKind, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ): ...
	class IssueKind:
		WARNING: ConstraintCheckIssue.IssueKind = ...
		ERROR: ConstraintCheckIssue.IssueKind = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue.IssueKind: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue.IssueKind, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isWarning(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue.IssueKind: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue.IssueKind, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getKind(self, ) -> javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue.IssueKind: ...
	@staticmethod
	def error(arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMessageParameters(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def isError(self, ) -> Union[int, JBoolean]: ...
	def getMessageKey(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getElement(self, ) -> javawrappers.javax.lang.model.element.Element: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAnnotationMirror(self, ) -> javawrappers.javax.lang.model.element.AnnotationMirror: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def warning(arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheckIssue: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class MethodAnnotationCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class ConstraintChecks:
	def execute(self, arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class MixDirectAndListAnnotationCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class TargetCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class CrossParameterConstraintCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, arg1: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, arg2: javawrappers.javax.lang.model.util.Types, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class GetterCheck:
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class AnnotationTypeCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class AnnotationTypeMemberCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, arg1: javawrappers.javax.lang.model.util.Types, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class RetentionPolicyCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class ConstraintCheckFactory:
	def __init__(self, arg0: javawrappers.javax.lang.model.util.Types, arg1: javawrappers.javax.lang.model.util.Elements, arg2: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, arg3: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, arg4: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getConstraintChecks(self, arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintChecks: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ConstraintValidatorCheck:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, arg1: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def checkAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkField(self, arg0: javawrappers.javax.lang.model.element.VariableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def checkMethod(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def checkNonAnnotationType(self, arg0: javawrappers.javax.lang.model.element.TypeElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...


class MultiValuedChecks:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper, *arg1: javawrappers.org.hibernate.validator.ap.internal.checks.ConstraintCheck, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def execute(self, arg0: javawrappers.javax.lang.model.element.Element, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


