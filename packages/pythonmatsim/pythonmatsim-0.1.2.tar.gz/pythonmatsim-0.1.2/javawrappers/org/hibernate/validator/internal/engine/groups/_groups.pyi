################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.util.function
import javawrappers.org.hibernate.validator.internal.engine.groups

from jpype.types import *
from typing import Union

from typing import overload

class DefaultValidationOrder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def insertGroup(self, arg0: javawrappers.org.hibernate.validator.internal.engine.groups.Group, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getGroupIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def insertSequence(self, arg0: javawrappers.org.hibernate.validator.internal.engine.groups.Sequence, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSequenceIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def assertDefaultGroupSequenceIsExpandable(self, arg0: javawrappers.java.util.List, ) -> None: ...


class Sequence:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getDefiningClass(self, ) -> javawrappers.java.lang.Class: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getComposingGroups(self, ) -> javawrappers.java.util.List: ...
	def expandInheritedGroups(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ValidationOrderGenerator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultValidationOrder(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.org.hibernate.validator.internal.engine.groups.ValidationOrder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def getValidationOrder(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.hibernate.validator.internal.engine.groups.ValidationOrder: ...
	@overload
	def getValidationOrder(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> javawrappers.org.hibernate.validator.internal.engine.groups.ValidationOrder: ...


class GroupWithInheritance:
	def __init__(self, arg0: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Group:
	def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isDefaultGroup(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefiningClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ValidationOrder:
	class DefaultGroupValidationOrder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getGroupIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSequenceIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def notify(self, ) -> None: ...
		def assertDefaultGroupSequenceIsExpandable(self, arg0: javawrappers.java.util.List, ) -> None: ...


	class DefaultSequenceValidationOrder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getGroupIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSequenceIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def notify(self, ) -> None: ...
		def assertDefaultGroupSequenceIsExpandable(self, arg0: javawrappers.java.util.List, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getGroupIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getGroupIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getGroupIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSequenceIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getSequenceIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getSequenceIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	@overload
	def assertDefaultGroupSequenceIsExpandable(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def assertDefaultGroupSequenceIsExpandable(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def assertDefaultGroupSequenceIsExpandable(self, arg0: javawrappers.java.util.List, ) -> None: ...


