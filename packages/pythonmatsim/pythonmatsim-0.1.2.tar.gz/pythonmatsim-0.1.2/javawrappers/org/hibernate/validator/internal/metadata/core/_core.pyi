################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.hibernate.validator.internal.metadata.core
import javawrappers.org.hibernate.validator.internal.metadata.descriptor
import javawrappers.org.hibernate.validator.internal.engine
import javawrappers.java.lang.annotation
import javawrappers.org.hibernate.validator.internal.util
import javawrappers.org.hibernate.validator.internal.engine.valueextraction
import javawrappers.org.hibernate.validator.internal.metadata.location
import javawrappers.javax.validation.constraintvalidation

from jpype.types import *
from typing import Union

from typing import overload

class ConstraintOrigin:
	DEFINED_LOCALLY: ConstraintOrigin = ...
	DEFINED_IN_HIERARCHY: ConstraintOrigin = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.ConstraintOrigin: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.internal.metadata.core.ConstraintOrigin, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class MetaConstraint:
	class LinkedValueExtractionPathNode:
		def getPrevious(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getTypeParameterIndex(self, ) -> javawrappers.java.lang.Integer: ...
		def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def getNext(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
		def getValueExtractorDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class SingleValueExtractionPathNode:
		def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ContainerClassTypeParameterAndExtractor, ): ...
		def getPrevious(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getTypeParameterIndex(self, ) -> javawrappers.java.lang.Integer: ...
		def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def getNext(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
		def getValueExtractorDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class ValueExtractionPathNode:
		def getPrevious(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
		def getTypeParameterIndex(self, ) -> javawrappers.java.lang.Integer: ...
		def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
		def getTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def getNext(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
		def getValueExtractorDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...


	class ContainerClassTypeParameterAndExtractor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TypeParameterValueReceiver:
		def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint, arg1: javawrappers.org.hibernate.validator.internal.engine.ValidationContext, arg2: javawrappers.org.hibernate.validator.internal.engine.ValueContext, arg3: javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode, ): ...
		def keyedValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def indexedValue(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...
		def iterableValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def isSuccess(self, ) -> Union[int, JBoolean]: ...


	@overload
	def getPrevious(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
	@overload
	def getPrevious(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
	@overload
	def getPrevious(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
	def getDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def indexedValue(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.location.ConstraintLocation: ...
	def getGroupList(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getTypeParameterIndex(self, ) -> javawrappers.java.lang.Integer: ...
	@overload
	def getTypeParameterIndex(self, ) -> javawrappers.java.lang.Integer: ...
	@overload
	def getTypeParameterIndex(self, ) -> javawrappers.java.lang.Integer: ...
	def notifyAll(self, ) -> None: ...
	def validateConstraint(self, arg0: javawrappers.org.hibernate.validator.internal.engine.ValidationContext, arg1: javawrappers.org.hibernate.validator.internal.engine.ValueContext, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def keyedValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isDefinedForOneGroupOnly(self, ) -> Union[int, JBoolean]: ...
	def value(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def isSuccess(self, ) -> Union[int, JBoolean]: ...
	def getElementType(self, ) -> javawrappers.java.lang.annotation.ElementType: ...
	@overload
	def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getNext(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
	@overload
	def getNext(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
	@overload
	def getNext(self, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint.ValueExtractionPathNode: ...
	@overload
	def getValueExtractorDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	@overload
	def getValueExtractorDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	@overload
	def getValueExtractorDescriptor(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	def iterableValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	@overload
	def getTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	@overload
	def getTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AnnotationProcessingOptions:
	def areParameterConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def areClassLevelConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def merge(self, arg0: javawrappers.org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions, ) -> None: ...
	def areReturnValueConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, ) -> Union[int, JBoolean]: ...
	def areMemberConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, ) -> Union[int, JBoolean]: ...
	def areCrossParameterConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, ) -> Union[int, JBoolean]: ...


class MetaConstraints:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.org.hibernate.validator.internal.util.TypeResolutionHelper, arg1: javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager, arg2: javawrappers.org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl, arg3: javawrappers.org.hibernate.validator.internal.metadata.location.ConstraintLocation, ) -> javawrappers.org.hibernate.validator.internal.metadata.core.MetaConstraint: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AnnotationProcessingOptionsImpl:
	def __init__(self, ): ...
	class ExecutableParameterKey:
		def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptionsImpl, arg1: javawrappers.java.lang.reflect.Member, arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def ignoreClassLevelConstraintAnnotations(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def areParameterConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def ignoreConstraintAnnotationsOnParameter(self, arg0: javawrappers.java.lang.reflect.Member, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Boolean, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def areMemberConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, ) -> Union[int, JBoolean]: ...
	def ignoreAnnotationConstraintForClass(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Boolean, ) -> None: ...
	def ignoreConstraintAnnotationsOnMember(self, arg0: javawrappers.java.lang.reflect.Member, arg1: javawrappers.java.lang.Boolean, ) -> None: ...
	def notify(self, ) -> None: ...
	def ignoreConstraintAnnotationsForCrossParameterConstraint(self, arg0: javawrappers.java.lang.reflect.Member, arg1: javawrappers.java.lang.Boolean, ) -> None: ...
	def areClassLevelConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def ignoreConstraintAnnotationsForReturnValue(self, arg0: javawrappers.java.lang.reflect.Member, arg1: javawrappers.java.lang.Boolean, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def merge(self, arg0: javawrappers.org.hibernate.validator.internal.metadata.core.AnnotationProcessingOptions, ) -> None: ...
	def areReturnValueConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def areCrossParameterConstraintsIgnoredFor(self, arg0: javawrappers.java.lang.reflect.Member, ) -> Union[int, JBoolean]: ...


class ConstraintHelper:
	def __init__(self, ): ...
	class ValidatorDescriptorMap:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isMultiValueConstraint(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def isConstraintAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def isJdkAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def putValidatorDescriptors(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, arg2: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def findValidatorDescriptors(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.validation.constraintvalidation.ValidationTarget, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getConstraintsFromMultiValueConstraint(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.java.util.List: ...
	def getAllValidatorDescriptors(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.List: ...
	def isConstraintComposition(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


