################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util

from jpype.types import *
from typing import Union

from typing import overload

class CachingResourceBundleLocator:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.spi.resourceloading.ResourceBundleLocator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getResourceBundle(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def notify(self, ) -> None: ...


class PlatformResourceBundleLocator:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, arg2: Union[int, JBoolean], ): ...
	class AggregateResourceBundleControl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def getControl(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.ResourceBundle.Control: ...
		def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getFormats(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
		def newBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.ClassLoader, arg4: Union[int, JBoolean], ) -> javawrappers.java.util.ResourceBundle: ...
		def getTimeToLive(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> Union[long, JLong]: ...
		def getFallbackLocale(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Locale: ...
		def notify(self, ) -> None: ...
		def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
		@staticmethod
		def getNoFallbackControl(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.ResourceBundle.Control: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def needsReload(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.ClassLoader, arg4: javawrappers.java.util.ResourceBundle, arg5: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def toResourceName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


	class AggregateResourceBundle:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def clearCache() -> None: ...
		def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
		def notify(self, ) -> None: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def getLocale(self, ) -> javawrappers.java.util.Locale: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getFormats(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def newBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.ClassLoader, arg4: Union[int, JBoolean], ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getTimeToLive(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> Union[long, JLong]: ...
	def getFallbackLocale(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Locale: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def needsReload(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.ClassLoader, arg4: javawrappers.java.util.ResourceBundle, arg5: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getResourceBundle(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getControl(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.ResourceBundle.Control: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def getNoFallbackControl(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.ResourceBundle.Control: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toResourceName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class AggregateResourceBundleLocator:
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.hibernate.validator.spi.resourceloading.ResourceBundleLocator, arg2: javawrappers.java.lang.ClassLoader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.hibernate.validator.spi.resourceloading.ResourceBundleLocator, ): ...
	class IteratorEnumeration:
		def __init__(self, arg0: javawrappers.java.util.Iterator, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def nextElement(self, ) -> javawrappers.java.lang.Object: ...


	class AggregateBundle:
		def __init__(self, arg0: javawrappers.java.util.List, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def clearCache() -> None: ...
		def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
		def notify(self, ) -> None: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
		@overload
		@staticmethod
		def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def getLocale(self, ) -> javawrappers.java.util.Locale: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	def notify(self, ) -> None: ...
	def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getResourceBundle(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def nextElement(self, ) -> javawrappers.java.lang.Object: ...


class DelegatingResourceBundleLocator:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.spi.resourceloading.ResourceBundleLocator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getResourceBundle(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def notify(self, ) -> None: ...


