################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.annotation.processing
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.javax.lang.model.util
import javawrappers.org.hibernate.validator.ap.internal.util
import javawrappers.javax.tools
import javawrappers.javax.lang.model.type
import javawrappers.javax.lang.model.element

from jpype.types import *
from typing import Union

from typing import overload

class AnnotationApiHelper:
	def __init__(self, arg0: javawrappers.javax.lang.model.util.Elements, arg1: javawrappers.javax.lang.model.util.Types, ): ...
	class UnwrapMode:
		UNWRAP: AnnotationApiHelper.UnwrapMode = ...
		SKIP: AnnotationApiHelper.UnwrapMode = ...
		NONE: AnnotationApiHelper.UnwrapMode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def of(arg0: javawrappers.javax.lang.model.element.Name, ) -> javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAnnotationValueOrDefault(self, arg0: javawrappers.javax.lang.model.element.AnnotationMirror, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.lang.model.element.AnnotationValue: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: javawrappers.javax.lang.model.element.Name, ) -> javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode: ...
	def keepLowestTypePerHierarchy(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Set: ...
	def isInterface(self, arg0: javawrappers.javax.lang.model.type.TypeMirror, ) -> Union[int, JBoolean]: ...
	def isClass(self, arg0: javawrappers.javax.lang.model.type.TypeMirror, ) -> Union[int, JBoolean]: ...
	@overload
	def getMirror(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.lang.model.element.AnnotationMirror: ...
	@overload
	def getMirror(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.lang.model.element.AnnotationMirror: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode: ...
	def getAnnotationValue(self, arg0: javawrappers.javax.lang.model.element.AnnotationMirror, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.lang.model.element.AnnotationValue: ...
	def filterByType(self, arg0: javawrappers.java.util.List, arg1: javawrappers.javax.lang.model.type.TypeMirror, ) -> javawrappers.java.util.List: ...
	def getAnnotationArrayValue(self, arg0: javawrappers.javax.lang.model.element.AnnotationMirror, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def getDeclaredTypeByName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.lang.model.type.DeclaredType: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def determineUnwrapMode(self, arg0: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper.UnwrapMode: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def getMirrorForType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.lang.model.type.TypeMirror: ...


class MessagerAdapter:
	def __init__(self, arg0: javawrappers.javax.annotation.processing.Messager, arg1: javawrappers.javax.tools.Diagnostic.Kind, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def reportWarnings(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reportErrors(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDelegate(self, ) -> javawrappers.javax.annotation.processing.Messager: ...
	def notify(self, ) -> None: ...


class ConstraintHelper:
	def __init__(self, arg0: javawrappers.javax.lang.model.util.Types, arg1: javawrappers.org.hibernate.validator.ap.internal.util.AnnotationApiHelper, ): ...
	class AnnotationProcessorConstraintTarget:
		PARAMETERS: ConstraintHelper.AnnotationProcessorConstraintTarget = ...
		RETURN_VALUE: ConstraintHelper.AnnotationProcessorConstraintTarget = ...
		IMPLICIT: ConstraintHelper.AnnotationProcessorConstraintTarget = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorConstraintTarget: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorConstraintTarget, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class AnnotationProcessorValidationTarget:
		PARAMETERS: ConstraintHelper.AnnotationProcessorValidationTarget = ...
		ANNOTATED_ELEMENT: ConstraintHelper.AnnotationProcessorValidationTarget = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorValidationTarget: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorValidationTarget, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class AnnotationType:
		CONSTRAINT_ANNOTATION: ConstraintHelper.AnnotationType = ...
		MULTI_VALUED_CONSTRAINT_ANNOTATION: ConstraintHelper.AnnotationType = ...
		GRAPH_VALIDATION_ANNOTATION: ConstraintHelper.AnnotationType = ...
		CONSTRAINT_META_ANNOTATION: ConstraintHelper.AnnotationType = ...
		GROUP_SEQUENCE_ANNOTATION: ConstraintHelper.AnnotationType = ...
		GROUP_SEQUENCE_PROVIDER_ANNOTATION: ConstraintHelper.AnnotationType = ...
		NO_CONSTRAINT_ANNOTATION: ConstraintHelper.AnnotationType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class ConstraintCheckResult:
		ALLOWED: ConstraintHelper.ConstraintCheckResult = ...
		DISALLOWED: ConstraintHelper.ConstraintCheckResult = ...
		MULTIPLE_VALIDATORS_FOUND: ConstraintHelper.ConstraintCheckResult = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.ConstraintCheckResult: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.ConstraintCheckResult, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isConstraintAnnotation(self, arg0: javawrappers.javax.lang.model.element.Element, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorValidationTarget: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.ConstraintCheckResult: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorConstraintTarget: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorValidationTarget, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.ConstraintCheckResult, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationType, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorConstraintTarget, 1): ...
	def notifyAll(self, ) -> None: ...
	def getAnnotationType(self, arg0: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationType: ...
	def getUnwrappedToByDefault(self, arg0: javawrappers.javax.lang.model.element.Name, ) -> javawrappers.java.util.Optional: ...
	def getSupportedValidationTargets(self, arg0: javawrappers.javax.lang.model.type.DeclaredType, ) -> javawrappers.java.util.Set: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def checkConstraint(self, arg0: javawrappers.javax.lang.model.type.DeclaredType, arg1: javawrappers.javax.lang.model.type.TypeMirror, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.ConstraintCheckResult: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTypeUtils(self, ) -> javawrappers.javax.lang.model.util.Types: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def resolveValidationTarget(self, arg0: javawrappers.javax.lang.model.element.ExecutableElement, arg1: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.AnnotationProcessorValidationTarget: ...
	def isComposedConstraint(self, arg0: javawrappers.javax.lang.model.element.TypeElement, ) -> Union[int, JBoolean]: ...
	def getPartsOfMultiValuedConstraint(self, arg0: javawrappers.javax.lang.model.element.AnnotationMirror, ) -> javawrappers.java.util.List: ...
	def isSupportedForUnwrappingByDefault(self, arg0: javawrappers.javax.lang.model.element.Name, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def checkCrossParameterTypes(self, arg0: javawrappers.javax.lang.model.type.DeclaredType, ) -> javawrappers.org.hibernate.validator.ap.internal.util.ConstraintHelper.ConstraintCheckResult: ...


class CollectionHelper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def newHashSet() -> javawrappers.java.util.HashSet: ...
	@staticmethod
	def newArrayList() -> javawrappers.java.util.ArrayList: ...
	@staticmethod
	def asTreeSet(*arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def newHashMap() -> javawrappers.java.util.HashMap: ...
	@staticmethod
	def newTreeSet() -> javawrappers.java.util.TreeSet: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def asSet(*arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class Configuration:
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.javax.annotation.processing.Messager, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDiagnosticKind(self, ) -> javawrappers.javax.tools.Diagnostic.Kind: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isVerbose(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def methodConstraintsSupported(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class StringHelper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def join(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def join(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isNullOrEmptyString(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def decapitalize(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TypeNames:
	def __init__(self, ): ...
	class SupportedForUnwrapTypes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class JavaMoneyTypes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class JodaTypes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class HibernateValidatorTypes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BeanValidationTypes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


