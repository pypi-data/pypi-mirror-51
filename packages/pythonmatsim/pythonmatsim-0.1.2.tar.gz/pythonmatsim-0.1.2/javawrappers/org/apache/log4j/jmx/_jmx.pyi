################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.javax.management
import javawrappers.org.apache.log4j

from jpype.types import *
from typing import Union

from typing import overload

class LayoutDynamicMBean:
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, ): ...
	def preDeregister(self, ) -> None: ...
	def postDeregister(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.javax.management.AttributeList: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.lang.Object: ...
	def setAttributes(self, arg0: javawrappers.javax.management.AttributeList, ) -> javawrappers.javax.management.AttributeList: ...
	def notify(self, ) -> None: ...
	def setAttribute(self, arg0: javawrappers.javax.management.Attribute, ) -> None: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def postRegister(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def preRegister(self, arg0: javawrappers.javax.management.MBeanServer, arg1: javawrappers.javax.management.ObjectName, ) -> javawrappers.javax.management.ObjectName: ...
	def getMBeanInfo(self, ) -> javawrappers.javax.management.MBeanInfo: ...


class LoggerDynamicMBean:
	def __init__(self, arg0: javawrappers.org.apache.log4j.Logger, ): ...
	def preDeregister(self, ) -> None: ...
	def postDeregister(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.javax.management.AttributeList: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.lang.Object: ...
	def setAttributes(self, arg0: javawrappers.javax.management.AttributeList, ) -> javawrappers.javax.management.AttributeList: ...
	def notify(self, ) -> None: ...
	def setAttribute(self, arg0: javawrappers.javax.management.Attribute, ) -> None: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def postRegister(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def preRegister(self, arg0: javawrappers.javax.management.MBeanServer, arg1: javawrappers.javax.management.ObjectName, ) -> javawrappers.javax.management.ObjectName: ...
	def handleNotification(self, arg0: javawrappers.javax.management.Notification, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getMBeanInfo(self, ) -> javawrappers.javax.management.MBeanInfo: ...


class AbstractDynamicMBean:
	def __init__(self, ): ...
	def preDeregister(self, ) -> None: ...
	def postDeregister(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.javax.management.AttributeList: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.lang.Object: ...
	def setAttributes(self, arg0: javawrappers.javax.management.AttributeList, ) -> javawrappers.javax.management.AttributeList: ...
	def notify(self, ) -> None: ...
	def setAttribute(self, arg0: javawrappers.javax.management.Attribute, ) -> None: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def postRegister(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def preRegister(self, arg0: javawrappers.javax.management.MBeanServer, arg1: javawrappers.javax.management.ObjectName, ) -> javawrappers.javax.management.ObjectName: ...
	def getMBeanInfo(self, ) -> javawrappers.javax.management.MBeanInfo: ...


class Agent:


class HierarchyDynamicMBean:
	def __init__(self, ): ...
	def preDeregister(self, ) -> None: ...
	def postDeregister(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.javax.management.AttributeList: ...
	def notifyAll(self, ) -> None: ...
	def addNotificationListener(self, arg0: javawrappers.javax.management.NotificationListener, arg1: javawrappers.javax.management.NotificationFilter, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def removeAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def invoke(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.lang.Object: ...
	def setAttributes(self, arg0: javawrappers.javax.management.AttributeList, ) -> javawrappers.javax.management.AttributeList: ...
	def notify(self, ) -> None: ...
	def getNotificationInfo(self, ) -> JArray(javawrappers.javax.management.MBeanNotificationInfo, 1): ...
	def setAttribute(self, arg0: javawrappers.javax.management.Attribute, ) -> None: ...
	def addAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addLoggerMBean(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.management.ObjectName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def postRegister(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def removeNotificationListener(self, arg0: javawrappers.javax.management.NotificationListener, ) -> None: ...
	def preRegister(self, arg0: javawrappers.javax.management.MBeanServer, arg1: javawrappers.javax.management.ObjectName, ) -> javawrappers.javax.management.ObjectName: ...
	def getMBeanInfo(self, ) -> javawrappers.javax.management.MBeanInfo: ...


class AppenderDynamicMBean:
	def __init__(self, arg0: javawrappers.org.apache.log4j.Appender, ): ...
	def preDeregister(self, ) -> None: ...
	def postDeregister(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.javax.management.AttributeList: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.lang.Object: ...
	def setAttributes(self, arg0: javawrappers.javax.management.AttributeList, ) -> javawrappers.javax.management.AttributeList: ...
	def notify(self, ) -> None: ...
	def setAttribute(self, arg0: javawrappers.javax.management.Attribute, ) -> None: ...
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def postRegister(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def preRegister(self, arg0: javawrappers.javax.management.MBeanServer, arg1: javawrappers.javax.management.ObjectName, ) -> javawrappers.javax.management.ObjectName: ...
	def getMBeanInfo(self, ) -> javawrappers.javax.management.MBeanInfo: ...


