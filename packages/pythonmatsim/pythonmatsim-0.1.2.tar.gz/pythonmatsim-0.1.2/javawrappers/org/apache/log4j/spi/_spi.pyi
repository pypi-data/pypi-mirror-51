################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.org.apache.log4j.or
import javawrappers.org.apache.log4j
import javawrappers.org.apache.log4j.spi

from jpype.types import *
from typing import Union

from typing import overload

class LoggerFactory:
	def makeNewLoggerInstance(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...


class RootCategory:
	def __init__(self, arg0: javawrappers.org.apache.log4j.Level, ): ...
	def setResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	def getChainedPriority(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	@staticmethod
	def getRootLogger() -> javawrappers.org.apache.log4j.Logger: ...
	def getResourceBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	def setAdditivity(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def getDefaultHierarchy() -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	def getChainedLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setPriority(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	@overload
	def setPriority(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	@staticmethod
	def shutdown() -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def assertLog(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isEnabledFor(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getRoot() -> javawrappers.org.apache.log4j.Category: ...
	def getParent(self, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def callAppenders(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def getAdditivity(self, ) -> Union[int, JBoolean]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def getCurrentCategories() -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def getEffectiveLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def exists(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Category: ...
	def getHierarchy(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class DefaultRepositorySelector:
	def __init__(self, arg0: javawrappers.org.apache.log4j.spi.LoggerRepository, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class RepositorySelector:
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class ErrorCode:


class ThrowableInformation:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getThrowableStrRep(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notify(self, ) -> None: ...
	def getThrowable(self, ) -> javawrappers.java.lang.Throwable: ...


class AppenderAttachable:
	def removeAllAppenders(self, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class Configurator:
	def doConfigure(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...


class NOPLogger:
	def __init__(self, arg0: javawrappers.org.apache.log4j.spi.NOPLoggerRepository, arg1: javawrappers.java.lang.String, ): ...
	def setResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def assertLog(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isEnabledFor(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	def getChainedPriority(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	@staticmethod
	def getRootLogger() -> javawrappers.org.apache.log4j.Logger: ...
	@staticmethod
	def getRoot() -> javawrappers.org.apache.log4j.Category: ...
	def getResourceBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	def setAdditivity(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def getParent(self, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def callAppenders(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	def getAdditivity(self, ) -> Union[int, JBoolean]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def getDefaultHierarchy() -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	@staticmethod
	def getCurrentCategories() -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def getEffectiveLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def exists(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Category: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	def setPriority(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	@staticmethod
	def shutdown() -> None: ...
	def getHierarchy(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class Filter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def activateOptions(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def decide(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JInt]: ...
	def getNext(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def notify(self, ) -> None: ...


class OptionHandler:
	def activateOptions(self, ) -> None: ...


class LoggingEvent:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Category, arg2: javawrappers.org.apache.log4j.Priority, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Category, arg2: Union[long, JLong], arg3: javawrappers.org.apache.log4j.Priority, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Category, arg2: Union[long, JLong], arg3: javawrappers.org.apache.log4j.Level, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.String, arg6: javawrappers.org.apache.log4j.spi.ThrowableInformation, arg7: javawrappers.java.lang.String, arg8: javawrappers.org.apache.log4j.spi.LocationInfo, arg9: javawrappers.java.util.Map, ): ...
	def locationInformationExists(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRenderedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getLocationInformation(self, ) -> javawrappers.org.apache.log4j.spi.LocationInfo: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLoggerName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getStartTime() -> Union[long, JLong]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getMDCCopy(self, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.Map: ...
	def getLogger(self, ) -> javawrappers.org.apache.log4j.Category: ...
	def getMessage(self, ) -> javawrappers.java.lang.Object: ...
	def getFQNOfLoggerClass(self, ) -> javawrappers.java.lang.String: ...
	def getThrowableInformation(self, ) -> javawrappers.org.apache.log4j.spi.ThrowableInformation: ...
	def getPropertyKeySet(self, ) -> javawrappers.java.util.Set: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def getTimeStamp(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getThreadName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getThrowableStrRep(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getMDC(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNDC(self, ) -> javawrappers.java.lang.String: ...


class LocationInfo:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLineNumber(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMethodName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	def getFileName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LoggerRepository:
	def resetConfiguration(self, ) -> None: ...
	def addHierarchyEventListener(self, arg0: javawrappers.org.apache.log4j.spi.HierarchyEventListener, ) -> None: ...
	@overload
	def getLogger(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	@overload
	def setThreshold(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireAddAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def getCurrentCategories(self, ) -> javawrappers.java.util.Enumeration: ...
	def exists(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def getCurrentLoggers(self, ) -> javawrappers.java.util.Enumeration: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def isDisabled(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getRootLogger(self, ) -> javawrappers.org.apache.log4j.Logger: ...
	def shutdown(self, ) -> None: ...
	def emitNoAppenderWarning(self, arg0: javawrappers.org.apache.log4j.Category, ) -> None: ...


class NOPLoggerRepository:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resetConfiguration(self, ) -> None: ...
	def addHierarchyEventListener(self, arg0: javawrappers.org.apache.log4j.spi.HierarchyEventListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getLogger(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def setThreshold(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	def notify(self, ) -> None: ...
	def fireAddAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCurrentCategories(self, ) -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def exists(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLoggers(self, ) -> javawrappers.java.util.Enumeration: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def isDisabled(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getRootLogger(self, ) -> javawrappers.org.apache.log4j.Logger: ...
	def shutdown(self, ) -> None: ...
	def emitNoAppenderWarning(self, arg0: javawrappers.org.apache.log4j.Category, ) -> None: ...


class RootLogger:
	def __init__(self, arg0: javawrappers.org.apache.log4j.Level, ): ...
	def setResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	def getChainedPriority(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	@staticmethod
	def getRootLogger() -> javawrappers.org.apache.log4j.Logger: ...
	def getResourceBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	def setAdditivity(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def getDefaultHierarchy() -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	def getChainedLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	def setPriority(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	@staticmethod
	def shutdown() -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def assertLog(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isEnabledFor(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getRoot() -> javawrappers.org.apache.log4j.Category: ...
	def getParent(self, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def callAppenders(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def getAdditivity(self, ) -> Union[int, JBoolean]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def getCurrentCategories() -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def getEffectiveLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def exists(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Category: ...
	def getHierarchy(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class RendererSupport:
	def getRendererMap(self, ) -> javawrappers.org.apache.log4j.or.RendererMap: ...
	def setRenderer(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.apache.log4j.or.ObjectRenderer, ) -> None: ...


class HierarchyEventListener:
	def addAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def removeAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...


class ErrorHandler:
	def activateOptions(self, ) -> None: ...
	def setLogger(self, arg0: javawrappers.org.apache.log4j.Logger, ) -> None: ...
	def setBackupAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def setAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JInt], arg3: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class TriggeringEventEvaluator:
	def isTriggeringEvent(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JBoolean]: ...


