################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.apache.log4j
import javawrappers.org.apache.log4j.spi

from jpype.types import *
from typing import Union

from typing import overload

class SyslogAppender:
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getSyslogHost(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def notify(self, ) -> None: ...
	def setHeader(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getHeader(self, ) -> Union[int, JBoolean]: ...
	def activateOptions(self, ) -> None: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def setFacility(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setFacilityPrinting(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSyslogHost(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	def getFacilityPrinting(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getFacility(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getFacility(self, ) -> javawrappers.java.lang.String: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	@staticmethod
	def getFacilityString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class JMSAppender:


class SocketServer:
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class SocketHubAppender:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	class ServerMonitor:
		def __init__(self, arg0: javawrappers.org.apache.log4j.net.SocketHubAppender, arg1: Union[int, JInt], arg2: javawrappers.java.util.Vector, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def stopMonitor(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocationInfo(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def cleanUp(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def close(self, ) -> None: ...
	def stopMonitor(self, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def setLocationInfo(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class SocketAppender:
	@overload
	def __init__(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	class Connector:
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def run(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def getLocationInfo(self, ) -> Union[int, JBoolean]: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def interrupt(self, ) -> None: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def setLocationInfo(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getRemoteHost(self, ) -> javawrappers.java.lang.String: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def clearFilters(self, ) -> None: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def setApplication(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def cleanUp(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def yield_() -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def getApplication(self, ) -> javawrappers.java.lang.String: ...
	def setRemoteHost(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	def setReconnectionDelay(self, arg0: Union[int, JInt], ) -> None: ...
	def start(self, ) -> None: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def getReconnectionDelay(self, ) -> Union[int, JInt]: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class TelnetAppender:
	def __init__(self, ): ...
	class SocketHandler:
		def __init__(self, arg0: javawrappers.org.apache.log4j.net.TelnetAppender, arg1: Union[int, JInt], ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		def close(self, ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def finalize(self, ) -> None: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
		def send(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def run(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def interrupt(self, ) -> None: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def send(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def clearFilters(self, ) -> None: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def yield_() -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	def start(self, ) -> None: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def finalize(self, ) -> None: ...
	@overload
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...


class SocketNode:
	def __init__(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	def notify(self, ) -> None: ...


class SimpleSocketServer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class SMTPAppender:


