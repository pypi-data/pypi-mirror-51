################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jdom2
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class NamespaceStack:
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.jdom2.Namespace, 1), ): ...
	@overload
	def __init__(self, ): ...
	class EmptyIterable:
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.org.jdom2.Namespace: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


	class NamespaceIterable:
		def __init__(self, arg0: JArray(javawrappers.org.jdom2.Namespace, 1), arg1: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BackwardWalker:
		def __init__(self, arg0: JArray(javawrappers.org.jdom2.Namespace, 1), ): ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.org.jdom2.Namespace: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class ForwardWalker:
		def __init__(self, arg0: JArray(javawrappers.org.jdom2.Namespace, 1), ): ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.org.jdom2.Namespace: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.jdom2.Namespace: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.jdom2.Namespace: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.jdom2.Namespace: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addedForward(self, ) -> javawrappers.java.lang.Iterable: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.org.jdom2.Attribute, ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.org.jdom2.Element, ) -> None: ...
	def pop(self, ) -> None: ...
	def isInScope(self, arg0: javawrappers.org.jdom2.Namespace, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def addedReverse(self, ) -> javawrappers.java.lang.Iterable: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getScope(self, ) -> JArray(javawrappers.org.jdom2.Namespace, 1): ...


class IteratorIterable:
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def remove(self, ) -> None: ...


