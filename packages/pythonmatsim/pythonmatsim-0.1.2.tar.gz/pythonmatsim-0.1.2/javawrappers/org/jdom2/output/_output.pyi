################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.xml.sax.ext
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jdom2.output.support
import javawrappers.org.w3c.dom
import javawrappers.java.io
import javawrappers.javax.xml.stream
import javawrappers.org.jdom2
import javawrappers.org.xml.sax
import javawrappers.javax.xml.stream.util
import javawrappers.org.jdom2.output
import javawrappers.org.jdom2.adapters

from jpype.types import *
from typing import Union

from typing import overload

class Format:
	class TextMode:
		PRESERVE: Format.TextMode = ...
		TRIM: Format.TextMode = ...
		NORMALIZE: Format.TextMode = ...
		TRIM_FULL_WHITE: Format.TextMode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.Format.TextMode: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.jdom2.output.Format.TextMode, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class DefaultCharsetEscapeStrategy:
		def __init__(self, arg0: javawrappers.java.nio.charset.CharsetEncoder, ): ...
		def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class EscapeStrategy7Bits:
		def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class EscapeStrategy8Bits:
		def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class EscapeStrategyUTF:
		def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.Format: ...
	@staticmethod
	def compact(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setEscapeStrategy(self, arg0: javawrappers.org.jdom2.output.EscapeStrategy, ) -> javawrappers.org.jdom2.output.Format: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jdom2.output.Format.TextMode, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getRawFormat() -> javawrappers.org.jdom2.output.Format: ...
	def getOmitDeclaration(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setTextMode(self, arg0: javawrappers.org.jdom2.output.Format.TextMode, ) -> javawrappers.org.jdom2.output.Format: ...
	@overload
	def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def escapeText(arg0: javawrappers.org.jdom2.output.EscapeStrategy, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getEscapeStrategy(self, ) -> javawrappers.org.jdom2.output.EscapeStrategy: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def trimLeft(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setIndent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.Format: ...
	@staticmethod
	def trimBoth(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setIgnoreTrAXEscapingPIs(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLineSeparator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.Format: ...
	@overload
	def setLineSeparator(self, arg0: javawrappers.org.jdom2.output.LineSeparator, ) -> javawrappers.org.jdom2.output.Format: ...
	@staticmethod
	def getPrettyFormat() -> javawrappers.org.jdom2.output.Format: ...
	def getTextMode(self, ) -> javawrappers.org.jdom2.output.Format.TextMode: ...
	def getIndent(self, ) -> javawrappers.java.lang.String: ...
	def setOmitEncoding(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jdom2.output.Format: ...
	def setExpandEmptyElements(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jdom2.output.Format: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.Format.TextMode: ...
	def getOmitEncoding(self, ) -> Union[int, JBoolean]: ...
	def setOmitDeclaration(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jdom2.output.Format: ...
	def getLineSeparator(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCompactFormat() -> javawrappers.org.jdom2.output.Format: ...
	def getIgnoreTrAXEscapingPIs(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def trimRight(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setSpecifiedAttributesOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def escapeAttribute(arg0: javawrappers.org.jdom2.output.EscapeStrategy, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isSpecifiedAttributesOnly(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.jdom2.output.Format: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getExpandEmptyElements(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class StAXEventOutputter:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.support.StAXEventProcessor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.xml.stream.XMLEventFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, arg1: javawrappers.org.jdom2.output.support.StAXEventProcessor, arg2: javawrappers.javax.xml.stream.XMLEventFactory, ): ...
	class DefaultStAXEventProcessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.java.util.List, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.CDATA, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Text, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Comment, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.EntityRef, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Document, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.DocType, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Element, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStAXStream(self, ) -> javawrappers.org.jdom2.output.support.StAXEventProcessor: ...
	def getEventFactory(self, ) -> javawrappers.javax.xml.stream.XMLEventFactory: ...
	def notifyAll(self, ) -> None: ...
	def setStAXEventProcessor(self, arg0: javawrappers.org.jdom2.output.support.StAXEventProcessor, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Text, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.java.util.List, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Document, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.CDATA, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.EntityRef, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.ProcessingInstruction, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.DocType, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Comment, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	def outputElementContent(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.javax.xml.stream.util.XMLEventConsumer, ) -> None: ...
	def setFormat(self, arg0: javawrappers.org.jdom2.output.Format, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.jdom2.output.StAXEventOutputter: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.org.jdom2.output.Format: ...
	def setEventFactory(self, arg0: javawrappers.javax.xml.stream.XMLEventFactory, ) -> None: ...


class LineSeparator:
	CRNL: LineSeparator = ...
	NL: LineSeparator = ...
	CR: LineSeparator = ...
	DOS: LineSeparator = ...
	UNIX: LineSeparator = ...
	SYSTEM: LineSeparator = ...
	NONE: LineSeparator = ...
	DEFAULT: LineSeparator = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.LineSeparator: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jdom2.output.LineSeparator, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SAXOutputter:
	@overload
	def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.org.xml.sax.ErrorHandler, arg2: javawrappers.org.xml.sax.DTDHandler, arg3: javawrappers.org.xml.sax.EntityResolver, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.support.SAXOutputProcessor, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.xml.sax.ContentHandler, arg3: javawrappers.org.xml.sax.ErrorHandler, arg4: javawrappers.org.xml.sax.DTDHandler, arg5: javawrappers.org.xml.sax.EntityResolver, arg6: javawrappers.org.xml.sax.ext.LexicalHandler, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.org.xml.sax.ErrorHandler, arg2: javawrappers.org.xml.sax.DTDHandler, arg3: javawrappers.org.xml.sax.EntityResolver, arg4: javawrappers.org.xml.sax.ext.LexicalHandler, ): ...
	class DefaultSAXOutputProcessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@overload
		def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
		@overload
		def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEntityResolver(self, arg0: javawrappers.org.xml.sax.EntityResolver, ) -> None: ...
	def setDTDHandler(self, arg0: javawrappers.org.xml.sax.DTDHandler, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.xml.sax.ErrorHandler: ...
	def setFeature(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def setFormat(self, arg0: javawrappers.org.jdom2.output.Format, ) -> None: ...
	def getDeclHandler(self, ) -> javawrappers.org.xml.sax.ext.DeclHandler: ...
	def setContentHandler(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getContentHandler(self, ) -> javawrappers.org.xml.sax.ContentHandler: ...
	@overload
	def outputFragment(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def outputFragment(self, arg0: javawrappers.org.jdom2.Content, ) -> None: ...
	def getLocator(self, ) -> javawrappers.org.jdom2.output.JDOMLocator: ...
	def getFormat(self, ) -> javawrappers.org.jdom2.output.Format: ...
	def getReportNamespaceDeclarations(self, ) -> Union[int, JBoolean]: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getEntityResolver(self, ) -> javawrappers.org.xml.sax.EntityResolver: ...
	def getSAXOutputProcessor(self, ) -> javawrappers.org.jdom2.output.support.SAXOutputProcessor: ...
	def getFeature(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def setLexicalHandler(self, arg0: javawrappers.org.xml.sax.ext.LexicalHandler, ) -> None: ...
	def getDTDHandler(self, ) -> javawrappers.org.xml.sax.DTDHandler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setSAXOutputProcessor(self, arg0: javawrappers.org.jdom2.output.support.SAXOutputProcessor, ) -> None: ...
	def getReportDTDEvents(self, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.xml.sax.ErrorHandler, ) -> None: ...
	def getLexicalHandler(self, ) -> javawrappers.org.xml.sax.ext.LexicalHandler: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDeclHandler(self, arg0: javawrappers.org.xml.sax.ext.DeclHandler, ) -> None: ...
	def setReportDTDEvents(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setReportNamespaceDeclarations(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...


class XMLOutputter:
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.XMLOutputter, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, arg1: javawrappers.org.jdom2.output.support.XMLOutputProcessor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.support.XMLOutputProcessor, ): ...
	class DefaultXMLProcessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
		def escapeElementEntities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.output.Format, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def escapeAttributeEntities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.output.Format, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setXMLOutputProcessor(self, arg0: javawrappers.org.jdom2.output.support.XMLOutputProcessor, ) -> None: ...
	@overload
	def escapeElementEntities(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def escapeElementEntities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.output.Format, ) -> javawrappers.java.lang.String: ...
	@overload
	def escapeAttributeEntities(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def escapeAttributeEntities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.output.Format, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.CDATA, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.Text, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.Comment, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.Document, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.DocType, ) -> javawrappers.java.lang.String: ...
	@overload
	def outputString(self, arg0: javawrappers.org.jdom2.Element, ) -> javawrappers.java.lang.String: ...
	def outputElementContentString(self, arg0: javawrappers.org.jdom2.Element, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.EntityRef, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.CDATA, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.DocType, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.ProcessingInstruction, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.DocType, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Document, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Document, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.EntityRef, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.ProcessingInstruction, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Text, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Comment, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.CDATA, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Text, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Comment, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def outputElementContent(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def outputElementContent(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.java.io.Writer, ) -> None: ...
	def setFormat(self, arg0: javawrappers.org.jdom2.output.Format, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.jdom2.output.XMLOutputter: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.org.jdom2.output.Format: ...
	def getXMLOutputProcessor(self, ) -> javawrappers.org.jdom2.output.support.XMLOutputProcessor: ...


class StAXStreamOutputter:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.support.StAXStreamProcessor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, arg1: javawrappers.org.jdom2.output.support.StAXStreamProcessor, ): ...
	class DefaultStAXStreamProcessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStAXStream(self, ) -> javawrappers.org.jdom2.output.support.StAXStreamProcessor: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.java.util.List, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Text, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Document, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.DocType, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.CDATA, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.EntityRef, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.ProcessingInstruction, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Comment, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	def outputElementContent(self, arg0: javawrappers.org.jdom2.Element, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	def setFormat(self, arg0: javawrappers.org.jdom2.output.Format, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setStAXStreamProcessor(self, arg0: javawrappers.org.jdom2.output.support.StAXStreamProcessor, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.jdom2.output.StAXStreamOutputter: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.org.jdom2.output.Format: ...


class EscapeStrategy:
	def shouldEscape(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...


class JDOMLocator:
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def getSystemId(self, ) -> javawrappers.java.lang.String: ...
	def getColumnNumber(self, ) -> Union[int, JInt]: ...
	def getNode(self, ) -> javawrappers.java.lang.Object: ...
	def getPublicId(self, ) -> javawrappers.java.lang.String: ...


class DOMOutputter:
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.output.support.DOMOutputProcessor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.adapters.DOMAdapter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.output.support.DOMOutputProcessor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.adapters.DOMAdapter, ): ...
	@overload
	def __init__(self, ): ...
	class DefaultDOMOutputProcessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> javawrappers.org.w3c.dom.CDATASection: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> javawrappers.org.w3c.dom.Text: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> javawrappers.org.w3c.dom.Comment: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.org.w3c.dom.ProcessingInstruction: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.org.w3c.dom.EntityReference: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Attribute, ) -> javawrappers.org.w3c.dom.Attr: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> javawrappers.org.w3c.dom.Document: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> javawrappers.org.w3c.dom.Element: ...
		@overload
		def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> javawrappers.org.w3c.dom.CDATASection: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> javawrappers.org.w3c.dom.Text: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> javawrappers.org.w3c.dom.Comment: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.org.w3c.dom.ProcessingInstruction: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.org.w3c.dom.EntityReference: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Attribute, ) -> javawrappers.org.w3c.dom.Attr: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> javawrappers.org.w3c.dom.Document: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> javawrappers.org.w3c.dom.Element: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setDOMOutputProcessor(self, arg0: javawrappers.org.jdom2.output.support.DOMOutputProcessor, ) -> None: ...
	def getDOMOutputProcessor(self, ) -> javawrappers.org.jdom2.output.support.DOMOutputProcessor: ...
	def getDOMAdapter(self, ) -> javawrappers.org.jdom2.adapters.DOMAdapter: ...
	def notify(self, ) -> None: ...
	def getForceNamespaceAware(self, ) -> Union[int, JBoolean]: ...
	def setForceNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.org.w3c.dom.ProcessingInstruction: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.org.w3c.dom.ProcessingInstruction: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.org.w3c.dom.EntityReference: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Text, ) -> javawrappers.org.w3c.dom.Text: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.org.w3c.dom.EntityReference: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.CDATA, ) -> javawrappers.org.w3c.dom.CDATASection: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Comment, ) -> javawrappers.org.w3c.dom.Comment: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Element, ) -> javawrappers.org.w3c.dom.Element: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.DocType, ) -> javawrappers.org.w3c.dom.DocumentType: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Attribute, ) -> javawrappers.org.w3c.dom.Attr: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.Comment, ) -> javawrappers.org.w3c.dom.Comment: ...
	@overload
	def output(self, arg0: javawrappers.org.jdom2.Document, ) -> javawrappers.org.w3c.dom.Document: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.CDATA, ) -> javawrappers.org.w3c.dom.CDATASection: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.Text, ) -> javawrappers.org.w3c.dom.Text: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.Element, ) -> javawrappers.org.w3c.dom.Element: ...
	@overload
	def output(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.Attribute, ) -> javawrappers.org.w3c.dom.Attr: ...
	@overload
	def output(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def setFormat(self, arg0: javawrappers.org.jdom2.output.Format, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, ) -> javawrappers.org.jdom2.output.Format: ...
	def setDOMAdapter(self, arg0: javawrappers.org.jdom2.adapters.DOMAdapter, ) -> None: ...


