################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.xml.sax.ext
import javawrappers.java.util
import javawrappers.org.w3c.dom
import javawrappers.javax.xml.stream
import javawrappers.org.jdom2
import javawrappers.java.lang
import javawrappers.org.jdom2.output.support
import javawrappers.java.io
import javawrappers.org.xml.sax
import javawrappers.javax.xml.stream.util
import javawrappers.org.jdom2.output
import javawrappers.java.util.function
import javawrappers.javax.xml.stream.events

from jpype.types import *
from typing import Union

from typing import overload

class AbstractStAXEventProcessor:
	def __init__(self, ): ...
	class AttIterator:
		def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.javax.xml.stream.XMLEventFactory, arg2: Union[int, JBoolean], ): ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.javax.xml.stream.events.Attribute: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class NSIterator:
		def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.javax.xml.stream.XMLEventFactory, ): ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.javax.xml.stream.events.Namespace: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.javax.xml.stream.events.Namespace: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.javax.xml.stream.events.Attribute: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Element, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...


class StAXStreamProcessor:
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...


class XMLOutputProcessor:
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...


class WalkerNORMALIZE:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.jdom2.output.support.FormatStack, arg2: Union[int, JBoolean], ): ...
	def next(self, ) -> javawrappers.org.jdom2.Content: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isAllWhitespace(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isAllText(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isCDATA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, ) -> javawrappers.java.lang.String: ...


class AbstractStAXStreamProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractFormattedWalker:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.jdom2.output.support.FormatStack, arg2: Union[int, JBoolean], ): ...
	class MultiText:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def appendCDATA(self, arg0: javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def appendText(self, arg0: javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim, arg1: javawrappers.java.lang.String, ) -> None: ...
		def done(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def appendRaw(self, arg0: javawrappers.org.jdom2.Content, ) -> None: ...


	class Trim:
		LEFT: AbstractFormattedWalker.Trim = ...
		RIGHT: AbstractFormattedWalker.Trim = ...
		BOTH: AbstractFormattedWalker.Trim = ...
		COMPACT: AbstractFormattedWalker.Trim = ...
		NONE: AbstractFormattedWalker.Trim = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def next(self, ) -> javawrappers.org.jdom2.Content: ...
	def appendCDATA(self, arg0: javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim, 1): ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def appendRaw(self, arg0: javawrappers.org.jdom2.Content, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAllWhitespace(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isAllText(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def isCDATA(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, ) -> javawrappers.java.lang.String: ...
	def appendText(self, arg0: javawrappers.org.jdom2.output.support.AbstractFormattedWalker.Trim, arg1: javawrappers.java.lang.String, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DOMOutputProcessor:
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> javawrappers.org.w3c.dom.Text: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> javawrappers.org.w3c.dom.Comment: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.org.w3c.dom.ProcessingInstruction: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.org.w3c.dom.EntityReference: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Attribute, ) -> javawrappers.org.w3c.dom.Attr: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> javawrappers.org.w3c.dom.Document: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> javawrappers.org.w3c.dom.Element: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> javawrappers.org.w3c.dom.CDATASection: ...


class StAXEventProcessor:
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.javax.xml.stream.util.XMLEventConsumer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.javax.xml.stream.XMLEventFactory, arg3: javawrappers.java.util.List, ) -> None: ...


class WalkerPRESERVE:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def next(self, ) -> javawrappers.org.jdom2.Content: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAllWhitespace(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isAllText(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isCDATA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def text(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FormatStack:
	def __init__(self, arg0: javawrappers.org.jdom2.output.Format, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getLevelIndent(self, ) -> javawrappers.java.lang.String: ...
	def isOmitEncoding(self, ) -> Union[int, JBoolean]: ...
	def getDefaultMode(self, ) -> javawrappers.org.jdom2.output.Format.TextMode: ...
	def setLevelIndent(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def setTextMode(self, arg0: javawrappers.org.jdom2.output.Format.TextMode, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getEscapeStrategy(self, ) -> javawrappers.org.jdom2.output.EscapeStrategy: ...
	def pop(self, ) -> None: ...
	def setEscapeOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setIgnoreTrAXEscapingPIs(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isExpandEmptyElements(self, ) -> Union[int, JBoolean]: ...
	def isIgnoreTrAXEscapingPIs(self, ) -> Union[int, JBoolean]: ...
	def getLevelEOL(self, ) -> javawrappers.java.lang.String: ...
	def getPadLast(self, ) -> javawrappers.java.lang.String: ...
	def getTextMode(self, ) -> javawrappers.org.jdom2.output.Format.TextMode: ...
	def getIndent(self, ) -> javawrappers.java.lang.String: ...
	def setLevelEOL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLineSeparator(self, ) -> javawrappers.java.lang.String: ...
	def push(self, ) -> None: ...
	def getEscapeOutput(self, ) -> Union[int, JBoolean]: ...
	def isOmitDeclaration(self, ) -> Union[int, JBoolean]: ...
	def isSpecifiedAttributesOnly(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPadBetween(self, ) -> javawrappers.java.lang.String: ...


class AbstractOutputProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractSAXOutputProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...


class WalkerTRIM:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.jdom2.output.support.FormatStack, arg2: Union[int, JBoolean], ): ...
	def next(self, ) -> javawrappers.org.jdom2.Content: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isAllWhitespace(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isAllText(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isCDATA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, ) -> javawrappers.java.lang.String: ...


class Walker:
	def next(self, ) -> javawrappers.org.jdom2.Content: ...
	def isAllWhitespace(self, ) -> Union[int, JBoolean]: ...
	def isAllText(self, ) -> Union[int, JBoolean]: ...
	def isCDATA(self, ) -> Union[int, JBoolean]: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def text(self, ) -> javawrappers.java.lang.String: ...


class SAXOutputProcessor:
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	@overload
	def processAsDocument(self, arg0: javawrappers.org.jdom2.output.support.SAXTarget, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...


class SAXTarget:
	def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.org.xml.sax.ErrorHandler, arg2: javawrappers.org.xml.sax.DTDHandler, arg3: javawrappers.org.xml.sax.EntityResolver, arg4: javawrappers.org.xml.sax.ext.LexicalHandler, arg5: javawrappers.org.xml.sax.ext.DeclHandler, arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], arg8: javawrappers.java.lang.String, arg9: javawrappers.java.lang.String, ): ...
	class SAXLocator:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getLineNumber(self, ) -> Union[int, JInt]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getSystemId(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getColumnNumber(self, ) -> Union[int, JInt]: ...
		def setNode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNode(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def getPublicId(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSystemId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getColumnNumber(self, ) -> Union[int, JInt]: ...
	def setNode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getEntityResolver(self, ) -> javawrappers.org.xml.sax.EntityResolver: ...
	def notify(self, ) -> None: ...
	def isDeclareNamespaces(self, ) -> Union[int, JBoolean]: ...
	def getPublicId(self, ) -> javawrappers.java.lang.String: ...
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def getErrorHandler(self, ) -> javawrappers.org.xml.sax.ErrorHandler: ...
	def getDTDHandler(self, ) -> javawrappers.org.xml.sax.DTDHandler: ...
	def getDeclHandler(self, ) -> javawrappers.org.xml.sax.ext.DeclHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentHandler(self, ) -> javawrappers.org.xml.sax.ContentHandler: ...
	def isReportDTDEvents(self, ) -> Union[int, JBoolean]: ...
	def getLexicalHandler(self, ) -> javawrappers.org.xml.sax.ext.LexicalHandler: ...
	def getLocator(self, ) -> javawrappers.org.jdom2.output.support.SAXTarget.SAXLocator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, ) -> javawrappers.java.lang.Object: ...


class AbstractXMLOutputProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.DocType, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractDOMOutputProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.CDATA, ) -> javawrappers.org.w3c.dom.CDATASection: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Text, ) -> javawrappers.org.w3c.dom.Text: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Comment, ) -> javawrappers.org.w3c.dom.Comment: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.ProcessingInstruction, ) -> javawrappers.org.w3c.dom.ProcessingInstruction: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.EntityRef, ) -> javawrappers.org.w3c.dom.EntityReference: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Attribute, ) -> javawrappers.org.w3c.dom.Attr: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Document, ) -> javawrappers.org.w3c.dom.Document: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.org.jdom2.Element, ) -> javawrappers.org.w3c.dom.Element: ...
	@overload
	def process(self, arg0: javawrappers.org.w3c.dom.Document, arg1: javawrappers.org.jdom2.output.Format, arg2: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class WalkerTRIM_FULL_WHITE:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.jdom2.output.support.FormatStack, arg2: Union[int, JBoolean], ): ...
	def next(self, ) -> javawrappers.org.jdom2.Content: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isAllWhitespace(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isAllText(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isCDATA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, ) -> javawrappers.java.lang.String: ...


