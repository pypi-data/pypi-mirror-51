################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.xml.sax.helpers
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.util
import javawrappers.org.opengis.parameter
import javawrappers.org.opengis.feature.type
import javawrappers.java.lang
import javawrappers.org.opengis.filter.temporal
import javawrappers.org.opengis.filter.expression
import javawrappers.org.opengis.filter.sort
import javawrappers.org.opengis.filter.identity
import javawrappers.org.opengis.filter.spatial

from jpype.types import *
from typing import Union

from typing import overload

class FilterVisitor:
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFactory2:
	@overload
	def resourceId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.Date, ) -> javawrappers.org.opengis.filter.identity.ResourceId: ...
	@overload
	def resourceId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.filter.identity.Version, ) -> javawrappers.org.opengis.filter.identity.ResourceId: ...
	def functions(self, arg0: JArray(javawrappers.org.opengis.filter.capability.FunctionName, 1), ) -> javawrappers.org.opengis.filter.capability.Functions: ...
	@overload
	def before(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Before: ...
	@overload
	def before(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Before: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	def arithmeticOperators(self, arg0: Union[int, JBoolean], arg1: javawrappers.org.opengis.filter.capability.Functions, ) -> javawrappers.org.opengis.filter.capability.ArithmeticOperators: ...
	def spatialOperator(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), ) -> javawrappers.org.opengis.filter.capability.SpatialOperator: ...
	@overload
	def endedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.EndedBy: ...
	@overload
	def endedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.EndedBy: ...
	@overload
	def begunBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.BegunBy: ...
	@overload
	def begunBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.BegunBy: ...
	@overload
	def during(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.During: ...
	@overload
	def during(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.During: ...
	def nativeFilter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.NativeFilter: ...
	@overload
	def beyond(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def crosses(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	def operator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.Operator: ...
	@overload
	def begins(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Begins: ...
	@overload
	def begins(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Begins: ...
	@overload
	def toverlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TOverlaps: ...
	@overload
	def toverlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TOverlaps: ...
	@overload
	def disjoint(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def function(self, arg0: javawrappers.org.opengis.feature.type.Name, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def property(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def property(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.helpers.NamespaceSupport, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def property(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def overlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	def temporalCapabilities(self, arg0: JArray(javawrappers.org.opengis.filter.capability.TemporalOperator, 1), ) -> javawrappers.org.opengis.filter.capability.TemporalCapabilities: ...
	def spatialCapabilities(self, arg0: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), arg1: javawrappers.org.opengis.filter.capability.SpatialOperators, ) -> javawrappers.org.opengis.filter.capability.SpatialCapabilities: ...
	@overload
	def id(self, *arg0: javawrappers.org.opengis.filter.identity.FeatureId, ) -> javawrappers.org.opengis.filter.Id: ...
	@overload
	def id(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.filter.Id: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def between(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsBetween: ...
	@overload
	def between(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsBetween: ...
	def add(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Add: ...
	@overload
	def meets(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Meets: ...
	@overload
	def meets(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Meets: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	def subtract(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Subtract: ...
	@overload
	def tequals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TEquals: ...
	@overload
	def tequals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TEquals: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	def sort(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.sort.SortOrder, ) -> javawrappers.org.opengis.filter.sort.SortBy: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def dwithin(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	def idCapabilities(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.capability.IdCapabilities: ...
	@overload
	def tcontains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TContains: ...
	@overload
	def tcontains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TContains: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def anyInteracts(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.AnyInteracts: ...
	@overload
	def anyInteracts(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.AnyInteracts: ...
	@overload
	def intersects(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	def comparisonOperators(self, arg0: JArray(javawrappers.org.opengis.filter.capability.Operator, 1), ) -> javawrappers.org.opengis.filter.capability.ComparisonOperators: ...
	def gmlObjectId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.GmlObjectId: ...
	@overload
	def overlappedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.OverlappedBy: ...
	@overload
	def overlappedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.OverlappedBy: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def literal(self, arg0: Union[int, JShort], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[long, JLong], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[float, JFloat], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[string, JString], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: JByte, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def scalarCapabilities(self, arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, arg1: javawrappers.org.opengis.filter.capability.ArithmeticOperators, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.capability.ScalarCapabilities: ...
	def spatialOperators(self, arg0: JArray(javawrappers.org.opengis.filter.capability.SpatialOperator, 1), ) -> javawrappers.org.opengis.filter.capability.SpatialOperators: ...
	def not_(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Not: ...
	@overload
	def and(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.And: ...
	@overload
	def and(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.And: ...
	@overload
	def ends(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Ends: ...
	@overload
	def ends(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Ends: ...
	def parameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.util.InternationalString, arg4: Union[int, JBoolean], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.parameter.Parameter: ...
	def divide(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Divide: ...
	@overload
	def after(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.After: ...
	@overload
	def after(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.After: ...
	def multiply(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Multiply: ...
	@overload
	def featureId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def featureId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def capabilities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...
	@overload
	def capabilities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, arg4: javawrappers.org.opengis.filter.capability.TemporalCapabilities, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...
	@overload
	def or_(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.Or: ...
	@overload
	def or_(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Or: ...
	@overload
	def within(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.parameter.Parameter, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.parameter.Parameter, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def temporalOperator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.TemporalOperator: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def touches(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	def isNull(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsNull: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	def isNil(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.filter.PropertyIsNil: ...
	@overload
	def metBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.MetBy: ...
	@overload
	def metBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.MetBy: ...


class PropertyIsNull:
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsEqualTo:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFactory:
	@overload
	def resourceId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.Date, ) -> javawrappers.org.opengis.filter.identity.ResourceId: ...
	@overload
	def resourceId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.filter.identity.Version, ) -> javawrappers.org.opengis.filter.identity.ResourceId: ...
	def functions(self, arg0: JArray(javawrappers.org.opengis.filter.capability.FunctionName, 1), ) -> javawrappers.org.opengis.filter.capability.Functions: ...
	@overload
	def before(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Before: ...
	@overload
	def before(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Before: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	def arithmeticOperators(self, arg0: Union[int, JBoolean], arg1: javawrappers.org.opengis.filter.capability.Functions, ) -> javawrappers.org.opengis.filter.capability.ArithmeticOperators: ...
	def spatialOperator(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), ) -> javawrappers.org.opengis.filter.capability.SpatialOperator: ...
	@overload
	def endedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.EndedBy: ...
	@overload
	def endedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.EndedBy: ...
	@overload
	def begunBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.BegunBy: ...
	@overload
	def begunBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.BegunBy: ...
	@overload
	def during(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.During: ...
	@overload
	def during(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.During: ...
	@overload
	def beyond(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def crosses(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	def operator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.Operator: ...
	@overload
	def begins(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Begins: ...
	@overload
	def begins(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Begins: ...
	@overload
	def disjoint(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def toverlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TOverlaps: ...
	@overload
	def toverlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TOverlaps: ...
	@overload
	def function(self, arg0: javawrappers.org.opengis.feature.type.Name, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	def property(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def overlaps(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	def temporalCapabilities(self, arg0: JArray(javawrappers.org.opengis.filter.capability.TemporalOperator, 1), ) -> javawrappers.org.opengis.filter.capability.TemporalCapabilities: ...
	def id(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.filter.Id: ...
	def spatialCapabilities(self, arg0: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), arg1: javawrappers.org.opengis.filter.capability.SpatialOperators, ) -> javawrappers.org.opengis.filter.capability.SpatialCapabilities: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def between(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsBetween: ...
	@overload
	def between(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsBetween: ...
	def add(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Add: ...
	@overload
	def meets(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Meets: ...
	@overload
	def meets(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Meets: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	def subtract(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Subtract: ...
	@overload
	def tequals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TEquals: ...
	@overload
	def tequals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TEquals: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	def sort(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.sort.SortOrder, ) -> javawrappers.org.opengis.filter.sort.SortBy: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def dwithin(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	def idCapabilities(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.capability.IdCapabilities: ...
	@overload
	def tcontains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TContains: ...
	@overload
	def tcontains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TContains: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def anyInteracts(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.AnyInteracts: ...
	@overload
	def anyInteracts(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.AnyInteracts: ...
	@overload
	def intersects(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	def comparisonOperators(self, arg0: JArray(javawrappers.org.opengis.filter.capability.Operator, 1), ) -> javawrappers.org.opengis.filter.capability.ComparisonOperators: ...
	def gmlObjectId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.GmlObjectId: ...
	@overload
	def overlappedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.OverlappedBy: ...
	@overload
	def overlappedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.OverlappedBy: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def literal(self, arg0: Union[int, JShort], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[long, JLong], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[float, JFloat], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[string, JString], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: JByte, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def scalarCapabilities(self, arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, arg1: javawrappers.org.opengis.filter.capability.ArithmeticOperators, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.capability.ScalarCapabilities: ...
	def spatialOperators(self, arg0: JArray(javawrappers.org.opengis.filter.capability.SpatialOperator, 1), ) -> javawrappers.org.opengis.filter.capability.SpatialOperators: ...
	def not_(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Not: ...
	@overload
	def and(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.And: ...
	@overload
	def and(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.And: ...
	@overload
	def ends(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Ends: ...
	@overload
	def ends(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Ends: ...
	def divide(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Divide: ...
	@overload
	def after(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.After: ...
	@overload
	def after(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.After: ...
	def multiply(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Multiply: ...
	@overload
	def featureId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def featureId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def capabilities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...
	@overload
	def capabilities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, arg4: javawrappers.org.opengis.filter.capability.TemporalCapabilities, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...
	@overload
	def or_(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.Or: ...
	@overload
	def or_(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Or: ...
	@overload
	def within(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def temporalOperator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.TemporalOperator: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def touches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	def isNull(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsNull: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	def isNil(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.filter.PropertyIsNil: ...
	@overload
	def metBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.MetBy: ...
	@overload
	def metBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.MetBy: ...


class Filter:
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ExcludeFilter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Or:
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsGreaterThan:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BinaryLogicOperator:
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class And:
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsLessThanOrEqualTo:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Id:
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getIDs(self, ) -> javawrappers.java.util.Set: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsGreaterThanOrEqualTo:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IncludeFilter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class NativeFilter:
	def getNative(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsNil:
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getNilReason(self, ) -> javawrappers.java.lang.Object: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MultiValuedFilter:
	class MatchAction:
		ANY: MultiValuedFilter.MatchAction = ...
		ALL: MultiValuedFilter.MatchAction = ...
		ONE: MultiValuedFilter.MatchAction = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PropertyIsNotEqualTo:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsLike:
	def getWildCard(self, ) -> javawrappers.java.lang.String: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getEscape(self, ) -> javawrappers.java.lang.String: ...
	def getLiteral(self, ) -> javawrappers.java.lang.String: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getSingleChar(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BinaryComparisonOperator:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Not:
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsLessThan:
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PropertyIsBetween:
	def getLowerBoundary(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getUpperBoundary(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


