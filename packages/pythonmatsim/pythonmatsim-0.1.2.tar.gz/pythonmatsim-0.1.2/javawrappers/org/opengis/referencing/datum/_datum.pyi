################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.referencing
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.datum
import javawrappers.org.opengis.metadata.citation
import javawrappers.org.opengis.metadata.extent

from jpype.types import *
from typing import Union

from typing import overload

class Ellipsoid:
	def isSphere(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getInverseFlattening(self, ) -> Union[float, JDouble]: ...
	def getAxisUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def isIvfDefinitive(self, ) -> Union[int, JBoolean]: ...
	def getSemiMajorAxis(self, ) -> Union[float, JDouble]: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getSemiMinorAxis(self, ) -> Union[float, JDouble]: ...


class DatumFactory:
	def createEngineeringDatum(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def createFlattenedSphere(self, arg0: javawrappers.java.util.Map, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.javax.measure.Unit, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.util.Map, arg1: Union[float, JDouble], arg2: javawrappers.javax.measure.Unit, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def createImageDatum(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.datum.PixelInCell, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.util.Date, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.datum.Ellipsoid, arg2: javawrappers.org.opengis.referencing.datum.PrimeMeridian, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createVerticalDatum(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.datum.VerticalDatumType, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createEllipsoid(self, arg0: javawrappers.java.util.Map, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.javax.measure.Unit, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...


class VerticalDatum:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def getVerticalDatumType(self, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatumType: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class Datum:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class VerticalDatumType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatumType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.referencing.datum.VerticalDatumType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.referencing.datum.VerticalDatumType, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class GeodeticDatum:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getPrimeMeridian(self, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getEllipsoid(self, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class TemporalDatum:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getOrigin(self, ) -> javawrappers.java.util.Date: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class EngineeringDatum:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DatumAuthorityFactory:
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...


class ImageDatum:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getPixelInCell(self, ) -> javawrappers.org.opengis.referencing.datum.PixelInCell: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class PrimeMeridian:
	def getGreenwichLongitude(self, ) -> Union[float, JDouble]: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getAngularUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...


class PixelInCell:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PixelInCell: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.referencing.datum.PixelInCell, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.referencing.datum.PixelInCell, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


