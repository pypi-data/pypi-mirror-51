################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.geometry.primitive
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.operation
import javawrappers.java.util.stream
import javawrappers.org.opengis.referencing.crs
import javawrappers.java.util.function
import javawrappers.org.opengis.geometry.complex
import javawrappers.org.opengis.geometry.aggregate

from jpype.types import *
from typing import Union

from typing import overload

class SplineCurveForm:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.geometry.coordinate.SplineCurveForm: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.geometry.coordinate.SplineCurveForm, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.geometry.coordinate.SplineCurveForm, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class BicubicGrid:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getHorizontalVectorAtStart(self, ) -> javawrappers.java.util.List: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getVerticalVectorAtEnd(self, ) -> javawrappers.java.util.List: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getVerticalVectorAtStart(self, ) -> javawrappers.java.util.List: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getHorizontalVectorAtEnd(self, ) -> javawrappers.java.util.List: ...


class Bezier:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getKnots(self, ) -> javawrappers.java.util.List: ...
	def getKnotSpec(self, ) -> javawrappers.org.opengis.geometry.coordinate.KnotType: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def isPolynomial(self, ) -> Union[int, JBoolean]: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def getCurveForm(self, ) -> javawrappers.org.opengis.geometry.coordinate.SplineCurveForm: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class Sphere:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class ArcByBulge:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getBulges(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getNormals(self, ) -> javawrappers.java.util.List: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumArc(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	@overload
	def asArcString(self, ) -> javawrappers.org.opengis.geometry.coordinate.Arc: ...
	@overload
	def asArcString(self, ) -> javawrappers.org.opengis.geometry.coordinate.ArcString: ...


class Geodesic:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def asGeodesics(self, ) -> javawrappers.java.util.List: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class PolynomialSpline:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getKnots(self, ) -> javawrappers.java.util.List: ...
	def getVectorAtStart(self, ) -> javawrappers.java.util.List: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getVectorAtEnd(self, ) -> javawrappers.java.util.List: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class GeodesicString:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def asGeodesics(self, ) -> javawrappers.java.util.List: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class GenericSurface:
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getArea(self, ) -> Union[float, JDouble]: ...


class AffinePlacement:
	def transform(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def getLocation(self, ) -> javawrappers.org.opengis.geometry.coordinate.Position: ...
	def getInDimension(self, ) -> Union[int, JInt]: ...
	def getReferenceDirection(self, arg0: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	def getOutDimension(self, ) -> Union[int, JInt]: ...


class Conic:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getSemiLatusRectum(self, ) -> Union[float, JDouble]: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getEccentricity(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getPosition(self, ) -> javawrappers.org.opengis.geometry.coordinate.AffinePlacement: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def isShifted(self, ) -> Union[int, JBoolean]: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class Arc:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getCenter(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asArcs(self, ) -> javawrappers.java.util.List: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getNumArc(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getStartAngle(self, ) -> javawrappers.org.opengis.geometry.primitive.Bearing: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getEndAngle(self, ) -> javawrappers.org.opengis.geometry.primitive.Bearing: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getRadius(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class SplineCurve:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getKnots(self, ) -> javawrappers.java.util.List: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class Cylinder:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class Placement:
	def transform(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def getInDimension(self, ) -> Union[int, JInt]: ...
	def getOutDimension(self, ) -> Union[int, JInt]: ...


class BSplineSurfaceForm:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.geometry.coordinate.BSplineSurfaceForm: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.geometry.coordinate.BSplineSurfaceForm, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.geometry.coordinate.BSplineSurfaceForm, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Knot:
	def getValue(self, ) -> Union[float, JDouble]: ...
	def getMultiplicity(self, ) -> Union[int, JInt]: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...


class BilinearGrid:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class PolyhedralSurface:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientableSurface, 1): ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getPatches(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Tin:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientableSurface, 1): ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getControlPoints(self, ) -> javawrappers.java.util.List: ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getBreakLines(self, ) -> javawrappers.java.util.Set: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getPatches(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getStopLines(self, ) -> javawrappers.java.util.Set: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getMaxLength(self, ) -> Union[float, JDouble]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Triangle:
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	@overload
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.coordinate.TriangulatedSurface: ...
	@overload
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.coordinate.PolyhedralSurface: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def getCorners(self, ) -> javawrappers.java.util.List: ...
	def getSpanningSurface(self, ) -> javawrappers.java.util.List: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getArea(self, ) -> Union[float, JDouble]: ...


class Cone:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class ArcString:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def asArcs(self, ) -> javawrappers.java.util.List: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumArc(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class KnotType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.geometry.coordinate.KnotType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.geometry.coordinate.KnotType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.geometry.coordinate.KnotType, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Circle:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getCenter(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asArcs(self, ) -> javawrappers.java.util.List: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getNumArc(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getStartAngle(self, ) -> javawrappers.org.opengis.geometry.primitive.Bearing: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getEndAngle(self, ) -> javawrappers.org.opengis.geometry.primitive.Bearing: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getRadius(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class Position:
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class CubicSpline:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getKnots(self, ) -> javawrappers.java.util.List: ...
	def getVectorAtStart(self, ) -> javawrappers.java.util.List: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getVectorAtEnd(self, ) -> javawrappers.java.util.List: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class BSplineSurface:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getKnots(self, ) -> JArray(javawrappers.java.util.List, 1): ...
	def getKnotSpec(self, ) -> javawrappers.org.opengis.geometry.coordinate.KnotType: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getDegrees(self, ) -> JArray(Union[int, JInt], 1): ...
	def getSurfaceForm(self, ) -> javawrappers.org.opengis.geometry.coordinate.BSplineSurfaceForm: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def isPolynomial(self, ) -> Union[int, JBoolean]: ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class GriddedSurface:
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointGrid: ...
	def getRows(self, ) -> Union[int, JInt]: ...
	def getColumns(self, ) -> Union[int, JInt]: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class Polygon:
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	@overload
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.coordinate.PolyhedralSurface: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def getSpanningSurface(self, ) -> javawrappers.java.util.List: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getArea(self, ) -> Union[float, JDouble]: ...


class TriangulatedSurface:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientableSurface, 1): ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getPatches(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class BSplineCurve:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getKnots(self, ) -> javawrappers.java.util.List: ...
	def getKnotSpec(self, ) -> javawrappers.org.opengis.geometry.coordinate.KnotType: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def isPolynomial(self, ) -> Union[int, JBoolean]: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def getCurveForm(self, ) -> javawrappers.org.opengis.geometry.coordinate.SplineCurveForm: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class ArcStringByBulge:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getBulges(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getNormals(self, ) -> javawrappers.java.util.List: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumArc(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def asArcString(self, ) -> javawrappers.org.opengis.geometry.coordinate.ArcString: ...


class ParametricCurveSurface:
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def surface(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def verticalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getHorizontalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def horizontalCurve(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getVerticalCurveType(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...


class LineSegment:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asLineSegments(self, ) -> javawrappers.java.util.List: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class Clothoid:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getScaleFactor(self, ) -> Union[float, JDouble]: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getReferenceLocation(self, ) -> javawrappers.org.opengis.geometry.coordinate.AffinePlacement: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class PointGrid:
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def width(self, ) -> Union[int, JInt]: ...
	def getRow(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def rows(self, ) -> javawrappers.java.util.List: ...
	def height(self, ) -> Union[int, JInt]: ...


class GeometryFactory:
	def createPolyhedralSurface(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.PolyhedralSurface: ...
	def createMultiPrimitive(self, ) -> javawrappers.org.opengis.geometry.aggregate.MultiPrimitive: ...
	def createArcString(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.ArcString: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.opengis.geometry.primitive.SurfaceBoundary, ) -> javawrappers.org.opengis.geometry.coordinate.Polygon: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.opengis.geometry.primitive.SurfaceBoundary, arg1: javawrappers.org.opengis.geometry.primitive.Surface, ) -> javawrappers.org.opengis.geometry.coordinate.Polygon: ...
	def createLineString(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def createBSplineSurface(self, arg0: javawrappers.java.util.List, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.java.util.List, 1), arg3: javawrappers.org.opengis.geometry.coordinate.KnotType, ) -> javawrappers.org.opengis.geometry.coordinate.BSplineSurface: ...
	def createGeodesic(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.coordinate.Geodesic: ...
	def createEnvelope(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	@overload
	def createDirectPosition(self, arg0: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def createDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def createBSplineCurve(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.geometry.coordinate.PointArray, arg2: javawrappers.java.util.List, arg3: javawrappers.org.opengis.geometry.coordinate.KnotType, ) -> javawrappers.org.opengis.geometry.coordinate.BSplineCurve: ...
	def createArcByBulge(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, arg2: Union[float, JDouble], arg3: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.coordinate.ArcByBulge: ...
	def createLineSegment(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.coordinate.LineSegment: ...
	def createTin(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.util.Set, arg3: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.Tin: ...
	def createArcStringByBulge(self, arg0: javawrappers.java.util.List, arg1: JArray(Union[float, JDouble], 1), arg2: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.ArcStringByBulge: ...
	def createGeodesicString(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.GeodesicString: ...
	@overload
	def createArc(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, arg2: Union[float, JDouble], arg3: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.coordinate.Arc: ...
	@overload
	def createArc(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, arg2: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.coordinate.Arc: ...


class PointArray:
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getDirectPosition(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def setDirectPosition(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class GenericCurve:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class OffsetCurve:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getReferenceDirection(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getBaseCurves(self, ) -> javawrappers.java.util.List: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class ParamForPoint:
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getDistances(self, ) -> javawrappers.java.util.Set: ...


class LineString:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def asLineSegments(self, ) -> javawrappers.java.util.List: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getControlPoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


