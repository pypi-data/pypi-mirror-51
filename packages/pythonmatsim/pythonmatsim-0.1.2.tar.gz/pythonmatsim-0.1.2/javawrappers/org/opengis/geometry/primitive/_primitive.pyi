################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.geometry.primitive
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.geometry.complex

from jpype.types import *
from typing import Union

from typing import overload

class Shell:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def getGenerators(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getGenerators(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Curve:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientableCurve, 1): ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSegments(self, ) -> javawrappers.java.util.List: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeCurve: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Surface:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientableSurface, 1): ...
	@overload
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getPatches(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getArea(self, ) -> Union[float, JDouble]: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class PrimitiveFactory:
	@overload
	def createSurface(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def createSurface(self, arg0: javawrappers.org.opengis.geometry.primitive.SurfaceBoundary, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createPrimitive(self, arg0: javawrappers.org.opengis.geometry.Envelope, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def createSolid(self, arg0: javawrappers.org.opengis.geometry.primitive.SolidBoundary, ) -> javawrappers.org.opengis.geometry.primitive.Solid: ...
	def createRing(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.Ring: ...
	def createCurve(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def createSurfaceBoundary(self, arg0: javawrappers.org.opengis.geometry.primitive.Ring, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	@overload
	def createPoint(self, arg0: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.primitive.Point: ...


class Primitive:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class SurfaceInterpolation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Point:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getBearing(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.primitive.Bearing: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	def setDirectPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Bearing:
	def getDirection(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getAngles(self, ) -> JArray(Union[float, JDouble], 1): ...


class CurveSegment:
	def getEndConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def forConstructiveParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getStartParam(self, ) -> Union[float, JDouble]: ...
	def getSamplePoints(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getParamForPoint(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.ParamForPoint: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	@overload
	def length(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def length(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> Union[float, JDouble]: ...
	def getTangent(self, arg0: Union[float, JDouble], ) -> JArray(Union[float, JDouble], 1): ...
	def asLineString(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getStartConstructiveParam(self, ) -> Union[float, JDouble]: ...
	def reverse(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveSegment: ...
	def getNumDerivativesAtEnd(self, ) -> Union[int, JInt]: ...
	def forParam(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getNumDerivativesInterior(self, ) -> Union[int, JInt]: ...
	def getNumDerivativesAtStart(self, ) -> Union[int, JInt]: ...
	def getEndParam(self, ) -> Union[float, JDouble]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	def getCurve(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...


class OrientablePrimitive:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class SurfaceBoundary:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getExterior(self, ) -> javawrappers.org.opengis.geometry.primitive.Ring: ...
	def getInteriors(self, ) -> javawrappers.java.util.List: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class SolidBoundary:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getExterior(self, ) -> javawrappers.org.opengis.geometry.primitive.Shell: ...
	def getInteriors(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.Shell, 1): ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class CurveBoundary:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def getStartPoint(self, ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getEndPoint(self, ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class SurfacePatch:
	def getPerimeter(self, ) -> Union[float, JDouble]: ...
	def getSurface(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	def getUpNormal(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> JArray(Union[float, JDouble], 1): ...
	def getNumDerivativesOnBoundary(self, ) -> Union[int, JInt]: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getInterpolation(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceInterpolation: ...
	def getArea(self, ) -> Union[float, JDouble]: ...


class CurveInterpolation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.geometry.primitive.CurveInterpolation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.geometry.primitive.CurveInterpolation, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.CurveInterpolation, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class OrientableCurve:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeCurve: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class OrientableSurface:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Ring:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def getGenerators(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getGenerators(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getOrientation(self, ) -> Union[int, JInt]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	@overload
	def getPrimitive(self, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.CurveBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.CompositeCurve: ...
	@overload
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class Solid:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getProxy(self, ) -> JArray(javawrappers.org.opengis.geometry.primitive.OrientablePrimitive, 1): ...
	def getContainedPrimitives(self, ) -> javawrappers.java.util.Set: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getVolume(self, ) -> Union[float, JDouble]: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveBoundary: ...
	@overload
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.primitive.SolidBoundary: ...
	def getComplexes(self, ) -> javawrappers.java.util.Set: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	def getComposite(self, ) -> javawrappers.org.opengis.geometry.complex.Composite: ...
	def getContainingPrimitives(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getArea(self, ) -> Union[float, JDouble]: ...


class PrimitiveBoundary:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


