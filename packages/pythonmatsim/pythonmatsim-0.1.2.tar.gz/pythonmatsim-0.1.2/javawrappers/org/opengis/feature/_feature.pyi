################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.feature.simple
import javawrappers.java.io
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.filter.identity
import javawrappers.org.opengis.feature.type

from jpype.types import *
from typing import Union

from typing import overload

class IllegalAttributeException:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, ): ...
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ComplexAttribute:
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.util.Collection: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperty(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.Collection: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def validate(self, ) -> None: ...


class GeometryAttribute:
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	def validate(self, ) -> None: ...


class FeatureFactory:
	def createSimpleFeature(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def createAssociation(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.org.opengis.feature.type.AssociationDescriptor, ) -> javawrappers.org.opengis.feature.Association: ...
	def createGeometryAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	def createAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.FeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.ComplexType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	def createSimpleFeautre(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class Attribute:
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def validate(self, ) -> None: ...


class Association:
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AssociationDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.org.opengis.feature.Attribute: ...
	def getRelatedType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...


class Property:
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...


class BackingStoreException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FeatureVisitor:
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class Feature:
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperty(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.Collection: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def setDefaultGeometryProperty(self, arg0: javawrappers.org.opengis.feature.GeometryAttribute, ) -> None: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getDefaultGeometryProperty(self, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	def validate(self, ) -> None: ...


