################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.opengis.geometry
import javawrappers.java.util.stream
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.filter.sort
import javawrappers.org.geotools.filter.identity
import javawrappers.java.util.function
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.opengis.filter.identity

from jpype.types import *
from typing import Union

from typing import overload

class FeatureIterator:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class DefaultFeatureCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def purge(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def close(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def validate(self, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def collection(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fids(self, ) -> javawrappers.java.util.Set: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class DefaultFeatureCollections:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newCollection(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def newCollection() -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FeatureTypes:
	def __init__(self, ): ...
	@staticmethod
	def getAncestors(arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def equalsExact(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equalsExact(arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equalsExact(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equalsExact(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def equalsAncestors(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def newFeatureType(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def newFeatureType(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.URI, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def newFeatureType(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.URI, arg3: Union[int, JBoolean], arg4: JArray(javawrappers.org.opengis.feature.simple.SimpleFeatureType, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def newFeatureType(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.URI, arg3: Union[int, JBoolean], arg4: JArray(javawrappers.org.opengis.feature.simple.SimpleFeatureType, 1), arg5: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def newFeatureType(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.URI, arg3: Union[int, JBoolean], arg4: JArray(javawrappers.org.opengis.feature.simple.SimpleFeatureType, 1), arg5: javawrappers.org.opengis.feature.type.GeometryDescriptor, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def newFeatureType(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.URI, arg3: Union[int, JBoolean], ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def equals(arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def ancestors(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def equalsId(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isDecendedFrom(arg0: javawrappers.org.opengis.feature.type.FeatureType, arg1: javawrappers.java.net.URI, arg2: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isDecendedFrom(arg0: javawrappers.org.opengis.feature.type.FeatureType, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getFieldLength(arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, ) -> Union[int, JInt]: ...


class CollectionEvent:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.geotools.data.FeatureEvent, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCollection(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getEventType(self, ) -> Union[int, JInt]: ...
	def getFeatures(self, ) -> JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AttributeBuilder:
	def __init__(self, arg0: javawrappers.org.opengis.feature.FeatureFactory, ): ...
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addComplexAnyTypeAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultGeometry(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def associate(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def associate(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def associate(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDefaultGeometry(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	def setCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.org.opengis.feature.Attribute, ) -> None: ...
	@overload
	def init(self, ) -> None: ...
	def setFeatureFactory(self, arg0: javawrappers.org.opengis.feature.FeatureFactory, ) -> None: ...
	def addAnyTypeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeType, arg2: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def getCRS(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createComplexAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.ComplexType, arg2: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	def setType(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	@overload
	def build(self, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def build(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getFeatureFactory(self, ) -> javawrappers.org.opengis.feature.FeatureFactory: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDescriptor(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	def buildSimple(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.Attribute: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...


class AbstractFeatureFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createAssociation(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.org.opengis.feature.type.AssociationDescriptor, ) -> javawrappers.org.opengis.feature.Association: ...
	def getCRSFactory(self, ) -> javawrappers.org.opengis.referencing.crs.CRSFactory: ...
	def notifyAll(self, ) -> None: ...
	def getGeometryFactory(self, ) -> javawrappers.org.opengis.geometry.coordinate.GeometryFactory: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.ComplexType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	def notify(self, ) -> None: ...
	def createSimpleFeature(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def createGeometryAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	def createAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.FeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	def setCRSFactory(self, arg0: javawrappers.org.opengis.referencing.crs.CRSFactory, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setGeometryFactory(self, arg0: javawrappers.org.opengis.geometry.coordinate.GeometryFactory, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createSimpleFeautre(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class AssociationImpl:
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AssociationDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRelatedType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...


class LenientFeatureFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createAssociation(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.org.opengis.feature.type.AssociationDescriptor, ) -> javawrappers.org.opengis.feature.Association: ...
	def getCRSFactory(self, ) -> javawrappers.org.opengis.referencing.crs.CRSFactory: ...
	def notifyAll(self, ) -> None: ...
	def getGeometryFactory(self, ) -> javawrappers.org.opengis.geometry.coordinate.GeometryFactory: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.ComplexType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	def notify(self, ) -> None: ...
	def createSimpleFeature(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def createGeometryAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	def createAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.FeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	def setCRSFactory(self, arg0: javawrappers.org.opengis.referencing.crs.CRSFactory, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setGeometryFactory(self, arg0: javawrappers.org.opengis.geometry.coordinate.GeometryFactory, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createSimpleFeautre(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class FeatureCollectionIteration:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollectionIteration.Handler, arg1: javawrappers.org.geotools.feature.FeatureCollection, ): ...
	class Handler:
		def handleFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
		def endFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
		def handleAttribute(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def handleFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
		def endFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


	def handleFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def notify(self, ) -> None: ...
	def endFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def handleAttribute(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def handleFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	@staticmethod
	def iteration(arg0: javawrappers.org.geotools.feature.FeatureCollectionIteration.Handler, arg1: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def iterate(self, ) -> None: ...


class FeatureComparators:
	class Name:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class Index:
		def __init__(self, arg0: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def byAttributeName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Comparator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def byAttributeIndex(arg0: Union[int, JInt], ) -> javawrappers.java.util.Comparator: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class FeatureFactory:
	@overload
	def create(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def create(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class FeatureReaderIterator:
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, ): ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class GeometryAttributeImpl:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg2: javawrappers.org.opengis.filter.identity.Identifier, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def validate(self, ) -> None: ...


class FeatureBuilder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDefaultFeatureId() -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createDefaultFeatureIdentifier(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.identity.FeatureIdImpl: ...
	def buildFeature(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	def notify(self, ) -> None: ...


class Schema:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getAttributes(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.List: ...
	@overload
	def getAttributes(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getAttributeCount(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JInt]: ...
	@overload
	def getNames(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def getNames(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def xpath(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getIndexOf(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def names(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def names(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.List: ...
	@overload
	def getAttribute(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getAttribute(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def find(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def restriction(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.Filter: ...
	@staticmethod
	def attributeCount(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JInt]: ...
	def getXPath(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def attributes(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def attributes(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def attribute(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	@staticmethod
	def attribute(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getRestrictions(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.Filter: ...


class FeatureIndex:
	def getFeatures(self, ) -> javawrappers.java.util.Iterator: ...
	def find(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Collection: ...
	def findFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def collectionChanged(self, arg0: javawrappers.org.geotools.feature.CollectionEvent, ) -> None: ...


class ComplexFeatureBuilder:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDefaultFeatureId() -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createDefaultFeatureIdentifier(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.identity.FeatureIdImpl: ...
	def buildFeature(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	def notify(self, ) -> None: ...
	def append(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.Property, ) -> None: ...


class SchemaException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NameImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.xml.namespace.QName, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isGlobal(self, ) -> Union[int, JBoolean]: ...
	def getSeparator(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.geotools.feature.NameImpl, ) -> Union[int, JInt]: ...
	def getLocalPart(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getURI(self, ) -> javawrappers.java.lang.String: ...


class IllegalAttributeException:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class NullAttributeDescriptor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
		def notifyAll(self, ) -> None: ...
		def getMinOccurs(self, ) -> Union[int, JInt]: ...
		def getMaxOccurs(self, ) -> Union[int, JInt]: ...
		def isNillable(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
		def getLocalName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getUserData(self, ) -> javawrappers.java.util.Map: ...


	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getLocalName(self, ) -> javawrappers.java.lang.String: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AttributeTypeBuilder:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDefaultValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def userData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def defaultValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def notifyAll(self, ) -> None: ...
	def setBinding(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def binding(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def description(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def nillable(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def setIdentifiable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addRestriction(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def addUserData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def identifiable(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def namespaceURI(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def maxOccurs(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def setMaxOccurs(self, arg0: Union[int, JInt], ) -> None: ...
	def setCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def setFactory(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	@overload
	def init(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	@overload
	def init(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	def abstrct(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def minOccurs(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def crs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def length(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def setMinOccurs(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def buildDescriptor(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.GeometryType, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
	@overload
	def buildDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def buildDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.GeometryType, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
	@overload
	def buildDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def buildDescriptor(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def isCRSSet(self, ) -> Union[int, JBoolean]: ...
	def setLength(self, arg0: Union[int, JInt], ) -> None: ...
	def buildType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def buildGeometryType(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
	def name(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def setAbstract(self, arg0: Union[int, JBoolean], ) -> None: ...
	def restriction(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.AttributeTypeBuilder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNillable(self, arg0: Union[int, JBoolean], ) -> None: ...


class FeatureCollections:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def newCollection(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def newCollection() -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AttributeImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.org.opengis.filter.identity.Identifier, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeType, arg2: javawrappers.org.opengis.filter.identity.Identifier, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def validate(self, ) -> None: ...


class DecoratingFeature:
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setDefaultGeometry(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def setDefaultGeometry(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAttributes(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def setAttributes(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	@overload
	def setAttribute(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAttribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getAttribute(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getAttribute(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def setDefaultGeometryProperty(self, arg0: javawrappers.org.opengis.feature.GeometryAttribute, ) -> None: ...
	def validate(self, ) -> None: ...
	def getDefaultGeometry(self, ) -> javawrappers.java.lang.Object: ...
	def getAttributes(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getProperty(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperties(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getDefaultGeometryProperty(self, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...


class FeatureImplUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def unmodifiable(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FeatureCollection:
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...


class ValidatingFeatureFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createAssociation(self, arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.org.opengis.feature.type.AssociationDescriptor, ) -> javawrappers.org.opengis.feature.Association: ...
	def getCRSFactory(self, ) -> javawrappers.org.opengis.referencing.crs.CRSFactory: ...
	def notifyAll(self, ) -> None: ...
	def getGeometryFactory(self, ) -> javawrappers.org.opengis.geometry.coordinate.GeometryFactory: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	@overload
	def createComplexAttribute(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.ComplexType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.ComplexAttribute: ...
	def notify(self, ) -> None: ...
	def createSimpleFeature(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def createGeometryAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	def createAttribute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Attribute: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def createFeature(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.FeatureType, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	def setCRSFactory(self, arg0: javawrappers.org.opengis.referencing.crs.CRSFactory, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setGeometryFactory(self, arg0: javawrappers.org.opengis.geometry.coordinate.GeometryFactory, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createSimpleFeautre(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class CollectionListener:
	def collectionChanged(self, arg0: javawrappers.org.geotools.feature.CollectionEvent, ) -> None: ...


class PropertyImpl:
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...


class FeatureImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.org.opengis.filter.identity.FeatureId, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.FeatureType, arg2: javawrappers.org.opengis.filter.identity.FeatureId, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getProperty(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Property: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getProperties(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def setDefaultGeometryProperty(self, arg0: javawrappers.org.opengis.feature.GeometryAttribute, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getDefaultGeometryProperty(self, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	def validate(self, ) -> None: ...


class ComplexAttributeImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg2: javawrappers.org.opengis.filter.identity.Identifier, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.ComplexType, arg2: javawrappers.org.opengis.filter.identity.Identifier, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getProperty(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Property: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getProperties(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def validate(self, ) -> None: ...


class TypeBuilder:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setPropertyType(self, arg0: javawrappers.org.opengis.feature.type.PropertyType, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setBinding(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def associationDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AssociationDescriptor: ...
	def setSuper(self, arg0: javawrappers.org.opengis.feature.type.PropertyType, ) -> None: ...
	def addRestriction(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def bind(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getBinding(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def complex(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	def property(self, arg0: javawrappers.org.opengis.feature.type.PropertyType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def setMembers(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...
	def getDefaultGeometry(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def add(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def setCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.org.opengis.feature.type.PropertyType, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, ) -> None: ...
	@overload
	def init(self, ) -> None: ...
	def getTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...
	def getReferenceType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	def setMinOccurs(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def contains(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.PropertyDescriptor, ) -> Union[int, JBoolean]: ...
	@overload
	def addMemberType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.feature.type.AssociationType, ) -> None: ...
	@overload
	def addMemberType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AssociationType, ) -> None: ...
	@overload
	def addMemberType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AssociationType, ) -> None: ...
	def name(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def reset(self, ) -> None: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...
	def getMembers(self, ) -> javawrappers.java.util.Collection: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setReferenceType(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def association(self, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	@overload
	def association(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AssociationType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def association(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AssociationType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def association(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.feature.type.AssociationType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def referenceType(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def setDefaultGeometry(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def setDefaultGeometry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setDefaultGeometry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getPropertyType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def nillable(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def setTypeFactory(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ) -> None: ...
	def getAssociationSuper(self, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	def load(self, arg0: javawrappers.org.opengis.feature.type.Schema, ) -> None: ...
	def feature(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def member(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AssociationType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def member(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AssociationType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def member(self, arg0: javawrappers.org.opengis.feature.type.AssociationDescriptor, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def attribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def attribute(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def attribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def attribute(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def attribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def attribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def attribute(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def setMaxOccurs(self, arg0: Union[int, JInt], ) -> None: ...
	def setRestrictions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def attributeDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def crs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def crs(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def clear(self, ) -> None: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def addBinding(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	def cardinality(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	def setIdentified(self, arg0: Union[int, JBoolean], ) -> None: ...
	def defaultGeometry(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.TypeBuilder: ...
	@overload
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def addAttribute(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	@overload
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	@overload
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	@overload
	def addAttribute(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAbstract(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNillable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def geometry(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...


