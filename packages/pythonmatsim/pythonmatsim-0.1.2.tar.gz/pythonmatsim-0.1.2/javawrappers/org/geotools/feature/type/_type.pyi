################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.sql
import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.xml.sax.helpers
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.feature.type
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.javax.xml.namespace
import javawrappers.org.opengis.feature
import javawrappers.java.util.function
import javawrappers.org.opengis.filter.identity

from jpype.types import *
from typing import Union

from typing import overload

class AssociationTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, arg2: Union[int, JBoolean], arg3: javawrappers.java.util.List, arg4: javawrappers.org.opengis.feature.type.AssociationType, arg5: javawrappers.org.opengis.util.InternationalString, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRelatedType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...


class GeometryDescriptorImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.GeometryType, arg1: javawrappers.org.opengis.feature.type.Name, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getLocalName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...


class AssociationDescriptorImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AssociationType, arg1: javawrappers.org.opengis.feature.type.Name, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class PropertyDescriptorImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class AnnotationFeatureType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ComplexTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.Collection, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ): ...
	@overload
	def getDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getDescriptors(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInline(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...
	def createDefaultValue(self, ) -> javawrappers.java.lang.Object: ...


class ReadonlyAttributeDecorator:
	def __init__(self, arg0: javawrappers.org.opengis.feature.Attribute, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def validate(self, ) -> None: ...


class Types:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def assertNameAssignable(arg0: javawrappers.org.opengis.feature.type.FeatureType, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def typeName(arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	@staticmethod
	def typeName(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	@staticmethod
	def typeName(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@staticmethod
	def fromTypeNames(arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def descriptor(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	@staticmethod
	def descriptor(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	@staticmethod
	def descriptor(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def descriptors(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def descriptors(arg0: javawrappers.org.opengis.feature.type.ComplexType, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def descriptors(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def toTypeNames(arg0: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.org.opengis.feature.type.Name, 1): ...
	@staticmethod
	def toName(arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def toPrefixedName(arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.xml.sax.helpers.NamespaceSupport, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def degloseName(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.helpers.NamespaceSupport, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@staticmethod
	def assertOrderAssignable(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.org.opengis.feature.ComplexAttribute, arg1: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.org.opengis.feature.Attribute, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.org.opengis.feature.type.AttributeType, arg1: javawrappers.org.opengis.feature.Attribute, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.org.opengis.feature.Attribute, ) -> None: ...
	@overload
	@staticmethod
	def validate(arg0: javawrappers.org.opengis.feature.ComplexAttribute, ) -> None: ...
	@staticmethod
	def isValid(arg0: javawrappers.org.opengis.feature.Attribute, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fromNames(arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.org.opengis.feature.type.AttributeType, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def isSuperType(arg0: javawrappers.org.opengis.feature.type.PropertyType, arg1: javawrappers.org.opengis.feature.type.PropertyType, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def names(arg0: javawrappers.org.opengis.feature.type.ComplexType, ) -> JArray(javawrappers.org.opengis.feature.type.Name, 1): ...
	@overload
	@staticmethod
	def findDescriptor(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	@staticmethod
	def findDescriptor(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	@staticmethod
	def toQName(arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.javax.xml.namespace.QName: ...
	@overload
	@staticmethod
	def toQName(arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.xml.sax.helpers.NamespaceSupport, ) -> javawrappers.javax.xml.namespace.QName: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.javax.xml.namespace.QName, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toNames(arg0: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.org.opengis.feature.type.Name, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toTypeName(arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.org.opengis.feature.type.Name: ...


class FeatureTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.Collection, arg2: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ): ...
	@overload
	def getDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getDescriptors(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInline(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...
	def createDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getGeometryDescriptor(self, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...


class BasicFeatureTypes:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FeatureTypeFactoryImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CRSFactory, arg1: javawrappers.org.opengis.filter.FilterFactory, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getFilterFactory(self, ) -> javawrappers.org.opengis.filter.FilterFactory: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createComplexType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.Collection, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory, ) -> None: ...
	def getCRSFactory(self, ) -> javawrappers.org.opengis.referencing.crs.CRSFactory: ...
	def createGeometryType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: javawrappers.java.util.List, arg6: javawrappers.org.opengis.feature.type.AttributeType, arg7: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
	def notifyAll(self, ) -> None: ...
	def createAttributeDescriptor(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, arg1: javawrappers.org.opengis.feature.type.Name, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def createAssociationDescriptor(self, arg0: javawrappers.org.opengis.feature.type.AssociationType, arg1: javawrappers.org.opengis.feature.type.Name, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], ) -> javawrappers.org.opengis.feature.type.AssociationDescriptor: ...
	def createAttributeType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def createSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.Schema: ...
	def notify(self, ) -> None: ...
	def createSimpleFeatureType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def createFeatureType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.Collection, arg2: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def createAssociationType(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, arg2: Union[int, JBoolean], arg3: javawrappers.java.util.List, arg4: javawrappers.org.opengis.feature.type.AssociationType, arg5: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.feature.type.AssociationType: ...
	def setCRSFactory(self, arg0: javawrappers.org.opengis.referencing.crs.CRSFactory, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeometryDescriptor(self, arg0: javawrappers.org.opengis.feature.type.GeometryType, arg1: javawrappers.org.opengis.feature.type.Name, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AbstractLazyComplexTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.java.util.List, arg4: javawrappers.org.opengis.util.InternationalString, ): ...
	def buildSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getDescriptors(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def buildDescriptors(self, ) -> javawrappers.java.util.Collection: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInline(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...


class AttributeDescriptorImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, arg1: javawrappers.org.opengis.feature.type.Name, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getLocalName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...


class Descriptors:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def types(arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def multiple(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def list(arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def type(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	@staticmethod
	def type(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	@staticmethod
	def type(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def node(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	@staticmethod
	def node(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	@staticmethod
	def node(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	@staticmethod
	def node(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@staticmethod
	def nodes(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def find(arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def wrapAttributeTypes(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def isSimple(arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrapAttributeType(arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@staticmethod
	def maxOccurs(arg0: javawrappers.org.opengis.feature.type.ComplexType, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> Union[int, JInt]: ...


class DateUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def serializeBase64(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def deserializeDateTime(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@staticmethod
	def parseYearMonth(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@staticmethod
	def isEqual(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def serializeDate(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeDate(arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeYear(arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeYear(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def enumValue(arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def deserializeDate(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@staticmethod
	def deserializeTimestamp(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Timestamp: ...
	@staticmethod
	def deserializeBase64(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def parseCharString(arg0: javawrappers.java.lang.String, ) -> Union[string, JString]: ...
	@staticmethod
	def parseChar(arg0: javawrappers.java.lang.String, ) -> Union[string, JString]: ...
	@staticmethod
	def parseTime(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def deserializeSqlDate(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Date: ...
	@staticmethod
	def serializeSqlDate(arg0: javawrappers.java.sql.Date, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def serializeBoolean(arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def serializeByte(arg0: JByte, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def serializeDouble(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseYear(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@staticmethod
	def serializeSqlTime(arg0: javawrappers.java.sql.Time, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseDate(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@staticmethod
	def serializeFloat(arg0: Union[float, JFloat], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def deserializeSqlTime(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Time: ...
	@overload
	@staticmethod
	def serializeYearMonth(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeYearMonth(arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeDateTime(arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeDateTime(arg0: Union[long, JLong], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def serializeDateTime(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def arrayListFactory() -> javawrappers.java.util.List: ...
	@staticmethod
	def serializeInt(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseFloat(arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def parseDateTime(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def parseBoolean(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def serializeTimestamp(arg0: javawrappers.java.sql.Timestamp, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def parseDouble(arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def parseShort(arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	@staticmethod
	def serializeLong(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def serializeShort(arg0: Union[int, JShort], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseBase64(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def serializeTime(arg0: Union[int, JInt], arg1: javawrappers.java.lang.StringBuffer, ) -> None: ...
	@staticmethod
	def parseByte(arg0: javawrappers.java.lang.String, ) -> JByte: ...
	@staticmethod
	def parseInt(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def serializeChar(arg0: Union[string, JString], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseLong(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def serializeCharString(arg0: Union[string, JString], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def encodeChunk(arg0: Union[int, JInt], arg1: JArray(JByte, 1), arg2: javawrappers.java.lang.StringBuffer, ) -> None: ...
	@staticmethod
	def deserializeCharString(arg0: javawrappers.java.lang.String, ) -> Union[string, JString]: ...


class ProfileImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Schema, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def add(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def profile(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.feature.type.Schema: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getURI(self, ) -> javawrappers.java.lang.String: ...


class PropertyTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], arg3: javawrappers.java.util.List, arg4: javawrappers.org.opengis.feature.type.PropertyType, arg5: javawrappers.org.opengis.util.InternationalString, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...


class AttributeTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...
	def createDefaultValue(self, ) -> javawrappers.java.lang.Object: ...


class AbstractLazyAttributeTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.util.InternationalString, ): ...
	def buildSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...


class GeometryTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: javawrappers.java.util.List, arg6: javawrappers.org.opengis.feature.type.AttributeType, arg7: javawrappers.org.opengis.util.InternationalString, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...
	def createDefaultValue(self, ) -> javawrappers.java.lang.Object: ...


class SchemaImpl:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def add(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def profile(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.feature.type.Schema: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getURI(self, ) -> javawrappers.java.lang.String: ...


