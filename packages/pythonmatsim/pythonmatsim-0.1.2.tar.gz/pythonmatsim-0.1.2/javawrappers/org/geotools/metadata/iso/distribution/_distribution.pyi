################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.org.geotools.metadata
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.util
import javawrappers.org.opengis.metadata.distribution
import javawrappers.javax.swing.tree
import javawrappers.org.opengis.metadata.citation

from jpype.types import *
from typing import Union

from typing import overload

class DistributionImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.distribution.Distribution, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def getDistributionFormats(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def getTransferOptions(self, ) -> javawrappers.java.util.Collection: ...
	def setDistributors(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTransferOptions(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDistributors(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDistributionFormats(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class MediumImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.distribution.Medium, ): ...
	def setName(self, arg0: javawrappers.org.opengis.metadata.distribution.MediumName, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMediumFormats(self, ) -> javawrappers.java.util.Collection: ...
	def getName(self, ) -> javawrappers.org.opengis.metadata.distribution.MediumName: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMediumNote(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setMediumNote(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setDensityUnits(self, arg0: javawrappers.javax.measure.Unit, ) -> None: ...
	def getVolumes(self, ) -> javawrappers.java.lang.Integer: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setVolumes(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def setMediumFormats(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def getDensityUnits(self, ) -> javawrappers.javax.measure.Unit: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDensities(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDensities(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class StandardOrderProcessImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.distribution.StandardOrderProcess, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTurnaround(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setFees(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setPlannedAvailableDateTime(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def setOrderingInstructions(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def setTurnaround(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getPlannedAvailableDateTime(self, ) -> javawrappers.java.util.Date: ...
	def getOrderingInstructions(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFees(self, ) -> javawrappers.org.opengis.util.InternationalString: ...


class FormatImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.distribution.Format, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.util.InternationalString, arg1: javawrappers.org.opengis.util.InternationalString, ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getSpecification(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setAmendmentNumber(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setFileDecompressionTechnique(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getVersion(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def setSpecification(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setVersion(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getAmendmentNumber(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getFileDecompressionTechnique(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def setFormatDistributors(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFormatDistributors(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DigitalTransferOptionsImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.distribution.DigitalTransferOptions, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setOffLine(self, arg0: javawrappers.org.opengis.metadata.distribution.Medium, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getTransferSize(self, ) -> javawrappers.java.lang.Double: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getUnitsOfDistribution(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def setOnLines(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setTransferSize(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setUnitsOfDistribution(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOnLines(self, ) -> javawrappers.java.util.Collection: ...
	def getOffLine(self, ) -> javawrappers.org.opengis.metadata.distribution.Medium: ...


class DistributorImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.distribution.Distributor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.ResponsibleParty, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getDistributorTransferOptions(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def getDistributorContact(self, ) -> javawrappers.org.opengis.metadata.citation.ResponsibleParty: ...
	def notifyAll(self, ) -> None: ...
	def setDistributorFormats(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDistributionOrderProcesses(self, ) -> javawrappers.java.util.Collection: ...
	def setDistributorTransferOptions(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setDistributorContact(self, arg0: javawrappers.org.opengis.metadata.citation.ResponsibleParty, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def setDistributionOrderProcesses(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDistributorFormats(self, ) -> javawrappers.java.util.Collection: ...


