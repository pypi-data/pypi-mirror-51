################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.metadata
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.org.opengis.util
import javawrappers.org.opengis.metadata.distribution
import javawrappers.javax.swing.tree
import javawrappers.org.opengis.metadata.citation
import javawrappers.org.opengis.metadata.maintenance
import javawrappers.org.opengis.metadata
import javawrappers.org.opengis.metadata.identification

from jpype.types import *
from typing import Union

from typing import overload

class MetadataExtensionInformationImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.MetadataExtensionInformation, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getExtendedElementInformation(self, ) -> javawrappers.java.util.Collection: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def getExtensionOnLineResource(self, ) -> javawrappers.org.opengis.metadata.citation.OnLineResource: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setExtensionOnLineResource(self, arg0: javawrappers.org.opengis.metadata.citation.OnLineResource, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setExtendedElementInformation(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MetadataEntity:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FeatureTypeListImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.FeatureTypeList, ): ...
	def getSpatialObject(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setSpatialObject(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def setSpatialSchemaName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSpatialSchemaName(self, ) -> javawrappers.java.lang.String: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MetaDataImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.MetaData, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.ResponsibleParty, arg1: javawrappers.java.util.Date, arg2: javawrappers.org.opengis.metadata.identification.Identification, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setContentInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getFileIdentifier(self, ) -> javawrappers.java.lang.String: ...
	def getCharacterSet(self, ) -> javawrappers.org.opengis.metadata.identification.CharacterSet: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def getContentInfo(self, ) -> javawrappers.java.util.Collection: ...
	def getMetadataStandardVersion(self, ) -> javawrappers.java.lang.String: ...
	def getDateStamp(self, ) -> javawrappers.java.util.Date: ...
	def getHierarchyLevels(self, ) -> javawrappers.java.util.Collection: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def setPortrayalCatalogueInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getReferenceSystemInfo(self, ) -> javawrappers.java.util.Collection: ...
	def getMetadataExtensionInfo(self, ) -> javawrappers.java.util.Collection: ...
	def setMetadataConstraints(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def getIdentificationInfo(self, ) -> javawrappers.java.util.Collection: ...
	def setDataQualityInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setMetadataMaintenance(self, arg0: javawrappers.org.opengis.metadata.maintenance.MaintenanceInformation, ) -> None: ...
	def setDateStamp(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def setSpatialRepresentationInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getHierarchyLevelNames(self, ) -> javawrappers.java.util.Collection: ...
	def setLanguage(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMetadataStandardVersion(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMetadataConstraints(self, ) -> javawrappers.java.util.Collection: ...
	def setMetadataExtensionInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setReferenceSystemInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def getContacts(self, ) -> javawrappers.java.util.Collection: ...
	def setCharacterSet(self, arg0: javawrappers.org.opengis.metadata.identification.CharacterSet, ) -> None: ...
	def getMetadataStandardName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDataQualityInfo(self, ) -> javawrappers.java.util.Collection: ...
	def setDataSetUri(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLocales(self, ) -> javawrappers.java.util.Collection: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getDataSetUri(self, ) -> javawrappers.java.lang.String: ...
	def getLanguage(self, ) -> javawrappers.java.util.Locale: ...
	def getMetadataMaintenance(self, ) -> javawrappers.org.opengis.metadata.maintenance.MaintenanceInformation: ...
	def setContacts(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def getPortrayalCatalogueInfo(self, ) -> javawrappers.java.util.Collection: ...
	def setHierarchyLevelNames(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setHierarchyLevels(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setApplicationSchemaInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setMetadataStandardName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setFileIdentifier(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSpatialRepresentationInfo(self, ) -> javawrappers.java.util.Collection: ...
	def getDistributionInfo(self, ) -> javawrappers.org.opengis.metadata.distribution.Distribution: ...
	def setDistributionInfo(self, arg0: javawrappers.org.opengis.metadata.distribution.Distribution, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setParentIdentifier(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setIdentificationInfo(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getParentIdentifier(self, ) -> javawrappers.java.lang.String: ...
	def getApplicationSchemaInfo(self, ) -> javawrappers.java.util.Collection: ...
	def setLocales(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class ExtendedElementInformationImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.ExtendedElementInformation, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.util.InternationalString, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.metadata.Datatype, arg4: javawrappers.java.util.Collection, arg5: javawrappers.org.opengis.util.InternationalString, arg6: javawrappers.java.util.Collection, ): ...
	def getDefinition(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getDataType(self, ) -> javawrappers.org.opengis.metadata.Datatype: ...
	def setParentEntity(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getSources(self, ) -> javawrappers.java.util.Collection: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def setSources(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDomainValue(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def getDomainCode(self, ) -> javawrappers.java.lang.Integer: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setDomainValue(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setDomainCode(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def getRationales(self, ) -> javawrappers.java.util.Collection: ...
	def setObligation(self, arg0: javawrappers.org.opengis.metadata.Obligation, ) -> None: ...
	def setRule(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setDataType(self, arg0: javawrappers.org.opengis.metadata.Datatype, ) -> None: ...
	def setCondition(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getCondition(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def setMaximumOccurrence(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def getRule(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setShortName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getShortName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDefinition(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getObligation(self, ) -> javawrappers.org.opengis.metadata.Obligation: ...
	def setRationales(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getParentEntity(self, ) -> javawrappers.java.util.Collection: ...
	def getMaximumOccurrence(self, ) -> javawrappers.java.lang.Integer: ...


class SpatialAttributeSupplementImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.SpatialAttributeSupplement, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def setFeatureTypeList(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFeatureTypeList(self, ) -> javawrappers.java.util.Collection: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FeatureCatalogueDescriptionImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.FeatureCatalogueDescription, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def setFeatureCatalogueCitations(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setIncludedWithDataset(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def getLanguages(self, ) -> javawrappers.java.util.Collection: ...
	def getFeatureCatalogueCitations(self, ) -> javawrappers.java.util.Collection: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isCompliant(self, ) -> javawrappers.java.lang.Boolean: ...
	def isIncludedWithDataset(self, ) -> Union[int, JBoolean]: ...
	def setFeatureTypes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def getFeatureTypes(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLanguages(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCompliant(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...


class ApplicationSchemaInformationImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.ApplicationSchemaInformation, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSoftwareDevelopmentFileFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getGraphicsFile(self, ) -> javawrappers.java.net.URI: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getSchemaAscii(self, ) -> javawrappers.java.net.URI: ...
	def getSoftwareDevelopmentFileFormat(self, ) -> javawrappers.java.lang.String: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def getConstraintLanguage(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSoftwareDevelopmentFile(self, ) -> javawrappers.java.net.URI: ...
	def setConstraintLanguage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def getSchemaLanguage(self, ) -> javawrappers.java.lang.String: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setSoftwareDevelopmentFile(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getFeatureCatalogueSupplement(self, ) -> javawrappers.org.opengis.metadata.SpatialAttributeSupplement: ...
	def setGraphicsFile(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSchemaAscii(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSchemaLanguage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setFeatureCatalogueSupplement(self, arg0: javawrappers.org.opengis.metadata.SpatialAttributeSupplement, ) -> None: ...


class PortrayalCatalogueReferenceImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.PortrayalCatalogueReference, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getPortrayalCatalogueCitations(self, ) -> javawrappers.java.util.Collection: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPortrayalCatalogueCitations(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class IdentifierImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.Identifier, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setVersion(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setCode(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def setAuthority(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCode(self, ) -> javawrappers.java.lang.String: ...


