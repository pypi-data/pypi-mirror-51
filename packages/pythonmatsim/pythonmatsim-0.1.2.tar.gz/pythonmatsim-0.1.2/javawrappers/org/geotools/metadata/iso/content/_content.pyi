################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.org.geotools.metadata
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.util
import javawrappers.org.opengis.metadata.content
import javawrappers.javax.swing.tree
import javawrappers.org.opengis.metadata

from jpype.types import *
from typing import Union

from typing import overload

class BandImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.Band, ): ...
	def getDescriptor(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def getMaxValue(self, ) -> javawrappers.java.lang.Double: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> javawrappers.java.lang.Double: ...
	def setBitsPerValue(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def getPeakResponse(self, ) -> javawrappers.java.lang.Double: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setOffset(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setSequenceIdentifier(self, arg0: javawrappers.org.opengis.util.MemberName, ) -> None: ...
	def setToneGradation(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def getBitsPerValue(self, ) -> javawrappers.java.lang.Integer: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def getSequenceIdentifier(self, ) -> javawrappers.org.opengis.util.MemberName: ...
	def setPeakResponse(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setScaleFactor(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def getToneGradation(self, ) -> javawrappers.java.lang.Integer: ...
	def setMaxValue(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def getMinValue(self, ) -> javawrappers.java.lang.Double: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getScaleFactor(self, ) -> javawrappers.java.lang.Double: ...
	def setDescriptor(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getUnits(self, ) -> javawrappers.javax.measure.Unit: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setUnits(self, arg0: javawrappers.javax.measure.Unit, ) -> None: ...
	def setMinValue(self, arg0: javawrappers.java.lang.Double, ) -> None: ...


class ImageDescriptionImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.ImageDescription, ): ...
	@overload
	def __init__(self, ): ...
	def getTriangulationIndicator(self, ) -> javawrappers.java.lang.Boolean: ...
	def setCloudCoverPercentage(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setIlluminationAzimuthAngle(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setIlluminationElevationAngle(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isFilmDistortionInformationAvailable(self, ) -> javawrappers.java.lang.Boolean: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setImageQualityCode(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setLensDistortionInformationAvailable(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def getIlluminationAzimuthAngle(self, ) -> javawrappers.java.lang.Double: ...
	def setFilmDistortionInformationAvailable(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def setProcessingLevelCode(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setCameraCalibrationInformationAvailable(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def getImageQualityCode(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setDimensions(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getCloudCoverPercentage(self, ) -> javawrappers.java.lang.Double: ...
	def setContentType(self, arg0: javawrappers.org.opengis.metadata.content.CoverageContentType, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def isRadiometricCalibrationDataAvailable(self, ) -> javawrappers.java.lang.Boolean: ...
	def getAttributeDescription(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setCompressionGenerationQuantity(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def setAttributeDescription(self, arg0: javawrappers.org.opengis.util.RecordType, ) -> None: ...
	def setRadiometricCalibrationDataAvailable(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def getDimensions(self, ) -> javawrappers.java.util.Collection: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def getIlluminationElevationAngle(self, ) -> javawrappers.java.lang.Double: ...
	def isCameraCalibrationInformationAvailable(self, ) -> javawrappers.java.lang.Boolean: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCompressionGenerationQuantity(self, ) -> javawrappers.java.lang.Integer: ...
	def getProcessingLevelCode(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def getContentType(self, ) -> javawrappers.org.opengis.metadata.content.CoverageContentType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setImagingCondition(self, arg0: javawrappers.org.opengis.metadata.content.ImagingCondition, ) -> None: ...
	def getImagingCondition(self, ) -> javawrappers.org.opengis.metadata.content.ImagingCondition: ...
	def setTriangulationIndicator(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def isLensDistortionInformationAvailable(self, ) -> javawrappers.java.lang.Boolean: ...


class ContentInformationImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.ContentInformation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class RangeDimensionImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.RangeDimension, ): ...
	def getDescriptor(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getSequenceIdentifier(self, ) -> javawrappers.org.opengis.util.MemberName: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSequenceIdentifier(self, arg0: javawrappers.org.opengis.util.MemberName, ) -> None: ...
	def setDescriptor(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FeatureCatalogueDescriptionImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.FeatureCatalogueDescription, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def setFeatureCatalogueCitations(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setIncludedWithDataset(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLanguages(self, ) -> javawrappers.java.util.Collection: ...
	def getFeatureCatalogueCitations(self, ) -> javawrappers.java.util.Collection: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isCompliant(self, ) -> javawrappers.java.lang.Boolean: ...
	def isIncludedWithDataset(self, ) -> Union[int, JBoolean]: ...
	def setFeatureTypes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def getFeatureTypes(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLanguages(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCompliant(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...


class CoverageDescriptionImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.content.CoverageDescription, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributeDescription(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setAttributeDescription(self, arg0: javawrappers.org.opengis.util.RecordType, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDimensions(self, ) -> javawrappers.java.util.Collection: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDimensions(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getContentType(self, ) -> javawrappers.org.opengis.metadata.content.CoverageContentType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setContentType(self, arg0: javawrappers.org.opengis.metadata.content.CoverageContentType, ) -> None: ...


