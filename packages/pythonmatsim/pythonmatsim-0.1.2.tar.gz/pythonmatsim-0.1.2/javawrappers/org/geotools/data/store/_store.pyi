################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.util
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.filter.sort
import javawrappers.org.geotools.data.store
import javawrappers.java.util.function
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class FilteringFeatureCollection:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...


class ReTypingFeatureIterator:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DiffContentFeatureWriter:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentFeatureStore, arg1: javawrappers.org.geotools.data.Diff, arg2: javawrappers.org.geotools.data.FeatureReader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentFeatureStore, arg1: javawrappers.org.geotools.data.Diff, arg2: javawrappers.org.geotools.data.FeatureReader, arg3: javawrappers.org.geotools.feature.simple.SimpleFeatureBuilder, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class FeatureIteratorIterator:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class EventContentFeatureWriter:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentFeatureStore, arg1: javawrappers.org.geotools.data.FeatureWriter, ): ...
	class EventContentTransactionState:
		def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
		def rollback(self, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def commit(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def rollback(self, ) -> None: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	def commit(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class DecoratingDataStore:
	def __init__(self, arg0: javawrappers.org.geotools.data.DataStore, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def notify(self, ) -> None: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...


class MaxFeaturesIterator:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, arg1: Union[long, JLong], arg2: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, arg1: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: Union[long, JLong], arg2: Union[long, JLong], ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class NoContentIterator:
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class EmptyFeatureCollection:
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def purge(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def close(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> None: ...
	@overload
	def close(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def addListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def removeListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class ContentDataStore:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory, ) -> None: ...
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def getDataStoreFactory(self, ) -> javawrappers.org.geotools.data.DataStoreFactorySpi: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def setFeatureTypeFactory(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def notify(self, ) -> None: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEntry(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFilterFactory(self, ) -> javawrappers.org.opengis.filter.FilterFactory: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	def setFeatureFactory(self, arg0: javawrappers.org.opengis.feature.FeatureFactory, ) -> None: ...
	def setDataStoreFactory(self, arg0: javawrappers.org.geotools.data.DataStoreFactorySpi, ) -> None: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	def getGeometryFactory(self, ) -> javawrappers.org.locationtech.jts.geom.GeometryFactory: ...
	def getLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def getFeatureFactory(self, ) -> javawrappers.org.opengis.feature.FeatureFactory: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setGeometryFactory(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFeatureTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...


class ReprojectingIterator:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg4: javawrappers.org.geotools.geometry.jts.GeometryCoordinateSequenceTransformer, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg3: javawrappers.org.geotools.geometry.jts.GeometryCoordinateSequenceTransformer, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getDelegate(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class DataFeatureCollection:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def purge(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def close(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> None: ...
	@overload
	def close(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def addListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def removeListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class EmptyIterator:
	def __init__(self, ): ...
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class MaxFeaturesFeatureCollection:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: Union[long, JLong], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...


class ReprojectingFeatureCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isGeometryless(arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setTransformer(self, arg0: javawrappers.org.geotools.geometry.jts.GeometryCoordinateSequenceTransformer, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...


class ContentState:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentEntry, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def fireFeatureUpdated(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.opengis.feature.Feature, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ) -> None: ...
	def fireFeatureAdded(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	def setFeatureType(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def fireFeatureEvent(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...
	def copy(self, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	def getEntry(self, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	def close(self, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	def setCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def fireBatchFeatureEvent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def fireFeatureRemoved(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def removeListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ) -> None: ...
	def getBatchFeatureEvent(self, ) -> javawrappers.org.geotools.data.BatchFeatureEvent: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, ) -> Union[int, JBoolean]: ...


class FilteringFeatureIterator:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ReprojectingFeatureIterator:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg4: javawrappers.org.geotools.geometry.jts.GeometryCoordinateSequenceTransformer, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg3: javawrappers.org.geotools.geometry.jts.GeometryCoordinateSequenceTransformer, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ReTypingIterator:
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getDelegate(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class DiffTransactionState:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentState, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def rollback(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDiff(self, ) -> javawrappers.org.geotools.data.Diff: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def commit(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def diffWriter(self, arg0: javawrappers.org.geotools.data.store.ContentFeatureStore, arg1: javawrappers.org.geotools.data.FeatureReader, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def notify(self, ) -> None: ...
	def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class FilteringIterator:
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def getDelegate(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class ContentEntry:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentDataStore, arg1: javawrappers.org.opengis.feature.type.Name, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getState(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def clearTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.store.ContentDataStore: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ContentFeatureStore:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentEntry, arg1: javawrappers.org.geotools.data.Query, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def isView(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getEntry(self, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	@overload
	def getView(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getView(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	@overload
	def addFeatures(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	@overload
	def getReader(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def accepts(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.opengis.feature.FeatureVisitor, arg2: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def getState(self, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.geotools.data.Query, arg1: Union[int, JInt], ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: Union[int, JInt], ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.store.ContentDataStore: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...


class ReTypingFeatureCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isTypeCompatible(arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JBoolean]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...


class ContentFeatureSource:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentEntry, arg1: javawrappers.org.geotools.data.Query, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def isView(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getEntry(self, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	@overload
	def getView(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getView(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def getReader(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def accepts(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.opengis.feature.FeatureVisitor, arg2: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def getState(self, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.store.ContentDataStore: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...


class ContentFeatureCollection:
	class WrappingFeatureIterator:
		def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, ): ...
		@overload
		def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
		@overload
		def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...


