################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.factory
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.net
import javawrappers.org.geotools.util
import javawrappers.org.opengis.feature
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.geotools.geometry.jts
import javawrappers.java.awt.geom
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.geotools.feature
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.java.io
import javawrappers.org.opengis.filter.expression
import javawrappers.org.opengis.filter.sort
import javawrappers.java.util.function
import javawrappers.org.opengis.filter.identity

from jpype.types import *
from typing import Union

from typing import overload

class AbstractDataStoreFactory:
	def __init__(self, ): ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def canProcess(self, arg0: javawrappers.java.util.Map, ) -> Union[int, JBoolean]: ...
	def getParametersInfo(self, ) -> JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1): ...
	def notifyAll(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createNewDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...


class FeatureLockFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.org.geotools.data.FeatureLockFactory: ...
	@overload
	@staticmethod
	def generate(arg0: Union[long, JLong], ) -> javawrappers.org.geotools.data.FeatureLock: ...
	@overload
	@staticmethod
	def generate(arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> javawrappers.org.geotools.data.FeatureLock: ...
	def notify(self, ) -> None: ...


class DataAccessFinder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def scanForPlugins() -> None: ...
	@staticmethod
	def getAvailableDataStores() -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getAllDataStores() -> javawrappers.java.util.Iterator: ...
	@staticmethod
	def reset() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDataStore(arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def notify(self, ) -> None: ...


class Query:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.Query, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URI, arg2: javawrappers.org.opengis.filter.Filter, arg3: Union[int, JInt], arg4: javawrappers.java.util.List, arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URI, arg2: javawrappers.org.opengis.filter.Filter, arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.String, 1), arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: Union[int, JInt], arg3: JArray(javawrappers.java.lang.String, 1), arg4: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: Union[int, JInt], arg3: javawrappers.java.util.List, arg4: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: JArray(javawrappers.java.lang.String, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStartIndex(self, ) -> javawrappers.java.lang.Integer: ...
	def notifyAll(self, ) -> None: ...
	def getHandle(self, ) -> javawrappers.java.lang.String: ...
	def setProperties(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getCoordinateSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def setPropertyNames(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	def setPropertyNames(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def setSortBy(self, arg0: JArray(javawrappers.org.opengis.filter.sort.SortBy, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def isMaxFeaturesUnlimited(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def retrieveAllProperties(self, ) -> Union[int, JBoolean]: ...
	def setTypeName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def setHints(self, arg0: javawrappers.org.geotools.factory.Hints, ) -> None: ...
	def getHints(self, ) -> javawrappers.org.geotools.factory.Hints: ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def setHandle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.org.opengis.filter.identity.Version.Action, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	@overload
	def setVersion(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.org.opengis.filter.identity.ResourceId, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.List: ...
	def getSortBy(self, ) -> JArray(javawrappers.org.opengis.filter.sort.SortBy, 1): ...
	def getMaxFeatures(self, ) -> Union[int, JInt]: ...
	def setFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getJoins(self, ) -> javawrappers.java.util.List: ...
	def setMaxFeatures(self, arg0: Union[int, JInt], ) -> None: ...
	def getNamespace(self, ) -> javawrappers.java.net.URI: ...
	def setStartIndex(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setCoordinateSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setAlias(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setNamespace(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getAlias(self, ) -> javawrappers.java.lang.String: ...
	def setCoordinateSystemReproject(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def getCoordinateSystemReproject(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...


class ReTypeFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: Union[int, JBoolean], ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DataUtilities:
	def __init__(self, ): ...
	@staticmethod
	def extendURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def defaultValue(arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def defaultValue(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def reader(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	@staticmethod
	def reader(arg0: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	@staticmethod
	def reader(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	@staticmethod
	def simple(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def simple(arg0: javawrappers.org.geotools.data.FeatureReader, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureReader: ...
	@overload
	@staticmethod
	def simple(arg0: javawrappers.org.geotools.data.FeatureLocking, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureLocking: ...
	@overload
	@staticmethod
	def simple(arg0: javawrappers.org.geotools.data.FeatureSource, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	@staticmethod
	def simple(arg0: javawrappers.org.geotools.data.FeatureStore, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureStore: ...
	@overload
	@staticmethod
	def simple(arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def source(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	@staticmethod
	def source(arg0: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@staticmethod
	def spec(arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def checkDirectory(arg0: javawrappers.java.io.File, ) -> javawrappers.java.io.File: ...
	@staticmethod
	def iterator(arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> javawrappers.java.util.Iterator: ...
	@overload
	@staticmethod
	def attributeNames(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def attributeNames(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def attributeNames(arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def attributeNames(arg0: javawrappers.org.opengis.filter.Filter, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def attributeNames(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def canProcess(arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def urlToFile(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.io.File: ...
	@staticmethod
	def fidSet(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def checkFileReadable(arg0: javawrappers.java.io.File, arg1: javawrappers.java.util.logging.Logger, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def count(arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def count(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JInt]: ...
	@staticmethod
	def duplicate(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def collection(arg0: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def collection(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.org.geotools.feature.DefaultFeatureCollection: ...
	@overload
	@staticmethod
	def collection(arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def collection(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def collection(arg0: javawrappers.org.geotools.data.FeatureReader, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def collection(arg0: javawrappers.java.util.List, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	@staticmethod
	def list(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def list(arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@staticmethod
	def isMatch(arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def reType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def reType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeature, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@staticmethod
	def sortComparator(arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def fileToURL(arg0: javawrappers.java.io.File, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def bounds(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	@staticmethod
	def bounds(arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	@staticmethod
	def encodeFeature(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodeFeature(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def template(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def template(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def template(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def template(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def compare(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> Union[int, JInt]: ...
	@staticmethod
	def mixQueries(arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Query, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.Query: ...
	@staticmethod
	def excludeFilters(arg0: javawrappers.java.io.FilenameFilter, *arg1: javawrappers.java.io.FilenameFilter, ) -> javawrappers.java.io.FilenameFilter: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def changeUrlExt(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def createType(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def createType(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createFeature(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@staticmethod
	def encodeType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def defaultValues(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def defaultValues(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def createView(arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, arg1: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	@staticmethod
	def createView(arg0: javawrappers.org.geotools.data.DataStore, arg1: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@staticmethod
	def close(arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@staticmethod
	def parse(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@staticmethod
	def addMandatoryProperties(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def resolvePropertyNames(arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.geotools.data.Query: ...
	@overload
	@staticmethod
	def resolvePropertyNames(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.opengis.filter.Filter: ...
	@staticmethod
	def includeFilters(arg0: javawrappers.java.io.FilenameFilter, *arg1: javawrappers.java.io.FilenameFilter, ) -> javawrappers.java.io.FilenameFilter: ...
	@staticmethod
	def templateFeature(arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> javawrappers.org.opengis.feature.Feature: ...
	@staticmethod
	def simplifyFilter(arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.Query: ...
	@staticmethod
	def attributesEqual(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createSubType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def createSubType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.String, 1), arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.net.URI, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def createSubType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.String, 1), arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def dataStore(arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	@staticmethod
	def dataStore(arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, ) -> javawrappers.org.geotools.data.DataStore: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def visit(arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.feature.FeatureVisitor, arg2: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	@staticmethod
	def getParentUrl(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def collectionCast(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def first(arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.org.opengis.feature.Feature: ...


class GmlObjectStore:
	def getGmlObject(self, arg0: javawrappers.org.opengis.filter.identity.GmlObjectId, arg1: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.lang.Object: ...


class DataSourceException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class DefaultResourceInfo:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.ResourceInfo, ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ) -> None: ...
	def setKeywords(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FeatureLocking:
	class Response:
		def __init__(self, arg0: javawrappers.org.geotools.data.FeatureLock, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.util.Set, ): ...
		def getNotLockedFids(self, ) -> javawrappers.java.util.Set: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getLockedFids(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAuthorizationID(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLockedFids(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAuthorizationID(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def getNotLockedFids(self, ) -> javawrappers.java.util.Set: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...


class ServiceInfo:
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getPublisher(self, ) -> javawrappers.java.net.URI: ...
	def getSource(self, ) -> javawrappers.java.net.URI: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...


class Parameter:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.util.InternationalString, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.util.InternationalString, arg4: Union[int, JBoolean], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.lang.Object, arg8: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.util.InternationalString, arg4: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isRequired(self, ) -> javawrappers.java.lang.Boolean: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isDeprecated(self, ) -> javawrappers.java.lang.Boolean: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isPassword(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getLevel(self, ) -> javawrappers.java.lang.String: ...
	def getTitle(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getType(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Base64:
	class OutputStream:
		@overload
		def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def resumeEncoding(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def flushBase64(self, ) -> None: ...
		def suspendEncoding(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...


	class InputStream:
		@overload
		def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	@staticmethod
	def encodeToFile(arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def encodeFromFile(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resumeEncoding(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def decode(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def decode(arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def flushBase64(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def suspendEncoding(self, ) -> None: ...
	@staticmethod
	def decodeFromFile(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def flush(self, ) -> None: ...
	@staticmethod
	def decodeToObject(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	@overload
	@staticmethod
	def encodeObject(arg0: javawrappers.java.io.Serializable, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodeObject(arg0: javawrappers.java.io.Serializable, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodeBytes(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodeBytes(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodeBytes(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def encodeBytes(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def decodeToFile(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class DefaultFIDReader:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	def next(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DefaultFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.AttributeReader, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.AttributeReader, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DefaultQuery:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: Union[int, JInt], arg3: JArray(javawrappers.java.lang.String, 1), arg4: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URI, arg2: javawrappers.org.opengis.filter.Filter, arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.String, 1), arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URI, arg2: javawrappers.org.opengis.filter.Filter, arg3: Union[int, JInt], arg4: javawrappers.java.util.List, arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.Query, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: JArray(javawrappers.java.lang.String, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStartIndex(self, ) -> javawrappers.java.lang.Integer: ...
	def notifyAll(self, ) -> None: ...
	def getHandle(self, ) -> javawrappers.java.lang.String: ...
	def setProperties(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getCoordinateSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def setPropertyNames(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	def setPropertyNames(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def setSortBy(self, arg0: JArray(javawrappers.org.opengis.filter.sort.SortBy, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def isMaxFeaturesUnlimited(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def retrieveAllProperties(self, ) -> Union[int, JBoolean]: ...
	def setTypeName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def setHints(self, arg0: javawrappers.org.geotools.factory.Hints, ) -> None: ...
	def getHints(self, ) -> javawrappers.org.geotools.factory.Hints: ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def setHandle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.org.opengis.filter.identity.Version.Action, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	@overload
	def setVersion(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.org.opengis.filter.identity.ResourceId, ) -> None: ...
	@overload
	def setVersion(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.List: ...
	def getSortBy(self, ) -> JArray(javawrappers.org.opengis.filter.sort.SortBy, 1): ...
	def getMaxFeatures(self, ) -> Union[int, JInt]: ...
	def setFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getJoins(self, ) -> javawrappers.java.util.List: ...
	def setMaxFeatures(self, arg0: Union[int, JInt], ) -> None: ...
	def getNamespace(self, ) -> javawrappers.java.net.URI: ...
	def setStartIndex(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setCoordinateSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setAlias(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setNamespace(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getAlias(self, ) -> javawrappers.java.lang.String: ...
	def setCoordinateSystemReproject(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def getCoordinateSystemReproject(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...


class BatchFeatureEvent:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg2: javawrappers.org.opengis.filter.Filter, ): ...
	def add(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCreatedFeatureIds(self, ) -> javawrappers.org.geotools.util.WeakHashSet: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setFeatureSource(self, arg0: javawrappers.org.geotools.data.FeatureSource, ) -> None: ...
	def getFeatureSource(self, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	def setType(self, arg0: javawrappers.org.geotools.data.FeatureEvent.Type, ) -> None: ...
	def replaceFid(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getEventType(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.org.geotools.data.FeatureEvent.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FileGroupProvider:
	class FileGroup:
		def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.util.List, arg2: javawrappers.java.util.Map, ): ...
		def getSupportFiles(self, ) -> javawrappers.java.util.List: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setMetadata(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getMetadata(self, ) -> javawrappers.java.util.Map: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getMainFile(self, ) -> javawrappers.java.io.File: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setMainFile(self, arg0: javawrappers.java.io.File, ) -> None: ...
		def setSupportFiles(self, arg0: javawrappers.java.util.List, ) -> None: ...
		def notify(self, ) -> None: ...


	def getSupportFiles(self, ) -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMetadata(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setSupportFiles(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFiles(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.CloseableIterator: ...
	def notify(self, ) -> None: ...
	def setMetadata(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMainFile(self, ) -> javawrappers.java.io.File: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setMainFile(self, arg0: javawrappers.java.io.File, ) -> None: ...


class FeatureReader:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class DefaultCloseableIterator:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, arg1: javawrappers.java.io.Closeable, ): ...
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class Transaction:
	class State:
		def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
		def rollback(self, ) -> None: ...
		def commit(self, ) -> None: ...
		def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	@overload
	def rollback(self, ) -> None: ...
	@overload
	def rollback(self, ) -> None: ...
	def getState(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.data.Transaction.State: ...
	def getProperty(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def putState(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.geotools.data.Transaction.State, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	def getAuthorizations(self, ) -> javawrappers.java.util.Set: ...
	def removeState(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def close(self, ) -> None: ...
	def putProperty(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class JoiningAttributeReader:
	def __init__(self, arg0: JArray(javawrappers.org.geotools.data.AttributeReader, 1), ): ...
	def next(self, ) -> None: ...
	def getAttributeType(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DefaultFileServiceInfo:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSource(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setKeywords(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getFiles(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.CloseableIterator: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getPublisher(self, ) -> javawrappers.java.net.URI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.net.URI: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPublisher(self, arg0: javawrappers.java.net.URI, ) -> None: ...


class DataAccessFactory:
	class Param:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], arg4: javawrappers.java.lang.Object, *arg5: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.util.Map, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: Union[int, JBoolean], arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.util.Map, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.util.InternationalString, arg4: Union[int, JBoolean], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.lang.Object, arg8: javawrappers.java.util.Map, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: Union[int, JBoolean], arg4: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], arg4: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isRequired(self, ) -> javawrappers.java.lang.Boolean: ...
		def lookUp(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isDeprecated(self, ) -> javawrappers.java.lang.Boolean: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def isPassword(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getMinOccurs(self, ) -> Union[int, JInt]: ...
		def getMaxOccurs(self, ) -> Union[int, JInt]: ...
		def handle(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
		def getLevel(self, ) -> javawrappers.java.lang.String: ...
		def getTitle(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getType(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def text(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def lookUp(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.java.lang.Object: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getParametersInfo(self, ) -> JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1): ...
	def notifyAll(self, ) -> None: ...
	def getMinOccurs(self, ) -> Union[int, JInt]: ...
	@overload
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getTitle(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def text(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def isRequired(self, ) -> javawrappers.java.lang.Boolean: ...
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def isDeprecated(self, ) -> javawrappers.java.lang.Boolean: ...
	def isPassword(self, ) -> Union[int, JBoolean]: ...
	def canProcess(self, arg0: javawrappers.java.util.Map, ) -> Union[int, JBoolean]: ...
	def getMaxOccurs(self, ) -> Union[int, JInt]: ...
	def handle(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLevel(self, ) -> javawrappers.java.lang.String: ...
	def getType(self, ) -> javawrappers.java.lang.Class: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DiffFeatureWriter:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.geotools.data.Diff, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.geotools.data.Diff, arg2: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class DefaultTransaction:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def rollback(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def commit(self, ) -> None: ...
	def putProperty(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	def getState(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.data.Transaction.State: ...
	def putState(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.geotools.data.Transaction.State, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAuthorizations(self, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeState(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def close(self, ) -> None: ...
	def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class DelegatingFeatureWriter:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def remove(self, ) -> None: ...


class LockingManager:
	def lockFeatureID(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, arg3: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	def release(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	def unLockFeatureID(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, arg3: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	def refresh(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	def exists(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class WorldFileReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getXULC(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getYULC(self, ) -> Union[float, JDouble]: ...
	def getXPixelSize(self, ) -> Union[float, JDouble]: ...
	def getRotationX(self, ) -> Union[float, JDouble]: ...
	def getRotationY(self, ) -> Union[float, JDouble]: ...
	def getAffineTransform(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getYPixelSize(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...


class ResourceInfo:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...


class FileDataStoreFinder:
	@staticmethod
	def getAvailableFileExtentions() -> javawrappers.java.util.Set: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getAvailableDataStores() -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDataStoreFactory(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.FileDataStoreFactorySpi: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getDataStore(arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.FileDataStore: ...
	@overload
	@staticmethod
	def getDataStore(arg0: javawrappers.java.io.File, ) -> javawrappers.org.geotools.data.FileDataStore: ...
	def notify(self, ) -> None: ...


class PrjFileReader:
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCoodinateSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DiffFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.geotools.data.Diff, arg2: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.geotools.data.Diff, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class WorldFileWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.awt.geom.AffineTransform, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.awt.geom.AffineTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.awt.geom.AffineTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.awt.geom.AffineTransform, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DefaultServiceInfo:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.ServiceInfo, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSource(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setKeywords(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getPublisher(self, ) -> javawrappers.java.net.URI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.net.URI: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPublisher(self, arg0: javawrappers.java.net.URI, ) -> None: ...


class CachingFeatureSource:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureSource, ): ...
	class CachingFeatureCollection:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def getID(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
		@overload
		def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
		def notify(self, ) -> None: ...
		def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
		@overload
		def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
		@overload
		def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
		@overload
		def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
		@overload
		def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
		@overload
		def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def reType(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataStore: ...


class EmptyFeatureReader:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class Repository:
	def access(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def dataStore(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.DataStore: ...
	def getDataStores(self, ) -> javawrappers.java.util.List: ...


class SchemaNotFoundException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FeatureListener:
	def changed(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...


class FilteringFeatureWriter:
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureWriter, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class FileDataStore:
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	@overload
	def getFeatureReader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def getFeatureSource(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def dispose(self, ) -> None: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriterAppend(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...


class DefaultFeatureLockFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.org.geotools.data.FeatureLockFactory: ...
	@overload
	@staticmethod
	def generate(arg0: Union[long, JLong], ) -> javawrappers.org.geotools.data.FeatureLock: ...
	@overload
	@staticmethod
	def generate(arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> javawrappers.org.geotools.data.FeatureLock: ...
	def notify(self, ) -> None: ...


class FeatureLockException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getFeatureID(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class QueryCapabilities:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isUseProvidedFIDSupported(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isJoiningSupported(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isReliableFIDSupported(self, ) -> Union[int, JBoolean]: ...
	def supportsSorting(self, arg0: JArray(javawrappers.org.opengis.filter.sort.SortBy, 1), ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isVersionSupported(self, ) -> Union[int, JBoolean]: ...
	def isOffsetSupported(self, ) -> Union[int, JBoolean]: ...


class FIDFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.AttributeReader, arg1: javawrappers.org.geotools.data.FIDReader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.AttributeReader, arg1: javawrappers.org.geotools.data.FIDReader, arg2: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class FeatureWriter:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def remove(self, ) -> None: ...


class MapInfoFileReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getControlPoints(self, ) -> javawrappers.java.util.List: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def notify(self, ) -> None: ...


class DataStore:
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def dispose(self, ) -> None: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...


class FilteringFeatureReader:
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class JoiningAttributeWriter:
	def __init__(self, arg0: JArray(javawrappers.org.geotools.data.AttributeWriter, 1), ): ...
	def next(self, ) -> None: ...
	def getAttributeType(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


class FeatureStore:
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...


class FeatureEvent:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.geotools.data.FeatureEvent.Type, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg3: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.geom.Envelope, ): ...
	class Type:
		ADDED: FeatureEvent.Type = ...
		CHANGED: FeatureEvent.Type = ...
		REMOVED: FeatureEvent.Type = ...
		COMMIT: FeatureEvent.Type = ...
		ROLLBACK: FeatureEvent.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.FeatureEvent.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.data.FeatureEvent.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.FeatureEvent.Type: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.data.FeatureEvent.Type, 1): ...
	def notifyAll(self, ) -> None: ...
	def setFeatureSource(self, arg0: javawrappers.org.geotools.data.FeatureSource, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getFeatureSource(self, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getEventType(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.org.geotools.data.FeatureEvent.Type: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DataStoreFinder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def scanForPlugins() -> None: ...
	@staticmethod
	def getAvailableDataStores() -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getAllDataStores() -> javawrappers.java.util.Iterator: ...
	@staticmethod
	def reset() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDataStore(arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	def notify(self, ) -> None: ...


class FileServiceInfo:
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getPublisher(self, ) -> javawrappers.java.net.URI: ...
	def getSource(self, ) -> javawrappers.java.net.URI: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getFiles(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.CloseableIterator: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...


class FeatureLock:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.util.concurrent.TimeUnit, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDuration(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAuthorization(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CollectionFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class FileDataStoreFactorySpi:
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.FileDataStore: ...
	@overload
	def canProcess(self, arg0: javawrappers.java.util.Map, ) -> Union[int, JBoolean]: ...
	@overload
	def canProcess(self, arg0: javawrappers.java.net.URL, ) -> Union[int, JBoolean]: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def getParametersInfo(self, ) -> JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1): ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getTypeName(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def createNewDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	def getFileExtensions(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class FileResourceInfo:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getFiles(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.CloseableIterator: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...


class FeatureSource:
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...


class DelegatingFeatureReader:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def close(self, ) -> None: ...


class DefaultFileResourceInfo:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getKeywords(self, ) -> javawrappers.java.util.Set: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ) -> None: ...
	def setKeywords(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getFiles(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.CloseableIterator: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.java.net.URI: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MaxFeatureReader:
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: Union[int, JInt], ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class AttributeWriter:
	def next(self, ) -> None: ...
	def getAttributeType(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...


class FIDReader:
	def next(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class DataAccess:
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	def dispose(self, ) -> None: ...
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...


class DefaultRepository:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def access(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def access(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def lockRefresh(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	def lockExists(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def datastore(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.DataStore: ...
	def notifyAll(self, ) -> None: ...
	def source(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	def getNames(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getDataStores(self, ) -> javawrappers.java.util.List: ...
	def load(self, arg0: javawrappers.java.io.File, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def dataStore(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	def dataStore(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.DataStore: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lockRelease(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	@overload
	def register(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.DataAccess, ) -> None: ...
	@overload
	def register(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.geotools.data.DataAccess, ) -> None: ...


class DefaultFeatureResults:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, arg1: javawrappers.org.geotools.data.Query, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def purge(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def close(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> None: ...
	@overload
	def close(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def addListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def removeListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	def collection(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class InProcessLockingManager:
	def __init__(self, ): ...
	class MemoryLock:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isAuthorized(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def release(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def refresh(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isExpired(self, ) -> Union[int, JBoolean]: ...
		def isMatch(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TransactionLock:
		def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
		def rollback(self, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def release(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def commit(self, ) -> None: ...
		def refresh(self, ) -> None: ...
		def isMatch(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def isAuthorized(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isExpired(self, ) -> Union[int, JBoolean]: ...
		def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	class Lock:
		def isAuthorized(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
		def release(self, ) -> None: ...
		def refresh(self, ) -> None: ...
		def isExpired(self, ) -> Union[int, JBoolean]: ...
		def isMatch(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def rollback(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def assertAccess(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	@overload
	def release(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	@overload
	def release(self, ) -> None: ...
	@overload
	def release(self, ) -> None: ...
	@overload
	def release(self, ) -> None: ...
	def allLocks(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def commit(self, ) -> None: ...
	def unLockFeatureID(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, arg3: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	@overload
	def refresh(self, ) -> None: ...
	@overload
	def refresh(self, ) -> None: ...
	@overload
	def refresh(self, ) -> None: ...
	@overload
	def refresh(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	@overload
	def isMatch(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isMatch(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isMatch(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def locks(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...
	@overload
	def isAuthorized(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	@overload
	def isAuthorized(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	@overload
	def isAuthorized(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	def lockFeatureID(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, arg3: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def exists(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def isExpired(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isExpired(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isExpired(self, ) -> Union[int, JBoolean]: ...
	def addAuthorization(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def checkedWriter(self, arg0: javawrappers.org.geotools.data.FeatureWriter, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...


class CloseableIterator:
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def remove(self, ) -> None: ...


class EmptyFeatureWriter:
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class DefaultFeatureLock:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDuration(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAuthorization(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FeatureListenerManager:
	def __init__(self, ): ...
	class WeakFeatureListener:
		def __init__(self, arg0: javawrappers.org.geotools.data.FeatureListenerManager, arg1: javawrappers.org.geotools.data.FeatureListener, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def changed(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def fireEvent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, arg2: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def fireChanged(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, arg2: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def cleanListenerList(self, arg0: javawrappers.org.geotools.data.FeatureSource, ) -> None: ...
	def fireFeaturesChanged(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg3: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def fireFeaturesRemoved(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg3: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fireFeaturesAdded(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg3: Union[int, JBoolean], ) -> None: ...
	def changed(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...


class Diff:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.Diff, ): ...
	@overload
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAdded(self, ) -> javawrappers.java.util.Map: ...
	def getAddedOrder(self, ) -> javawrappers.java.util.List: ...
	def queryIndex(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def modify(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	def getModified(self, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DataStoreFactorySpi:
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def canProcess(self, arg0: javawrappers.java.util.Map, ) -> Union[int, JBoolean]: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def getParametersInfo(self, ) -> JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1): ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def createNewDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...


class Join:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.Join, ): ...
	class Type:
		INNER: Join.Type = ...
		OUTER: Join.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.Join.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.data.Join.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.data.Join.Type, 1): ...
	def notifyAll(self, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def type(self, arg0: javawrappers.org.geotools.data.Join.Type, ) -> javawrappers.org.geotools.data.Join: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def alias(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.Join: ...
	def attributeName(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.Join.Type: ...
	def getProperties(self, ) -> javawrappers.java.util.List: ...
	def setType(self, arg0: javawrappers.org.geotools.data.Join.Type, ) -> None: ...
	def setFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def filter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.Join: ...
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getJoinFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getType(self, ) -> javawrappers.org.geotools.data.Join.Type: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setAlias(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAlias(self, ) -> javawrappers.java.lang.String: ...
	def properties(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.Join: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AttributeReader:
	def next(self, ) -> None: ...
	def getAttributeType(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def read(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...


