################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.geotools.data.shapefile.dbf
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class IndexedDbaseFileReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, arg3: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def readRow(self, ) -> javawrappers.org.geotools.data.shapefile.dbf.DbaseFileReader.Row: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def transferTo(self, arg0: javawrappers.org.geotools.data.shapefile.dbf.DbaseFileWriter, ) -> None: ...
	@overload
	def readEntry(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readEntry(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readEntry(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.org.geotools.data.shapefile.dbf.DbaseFileHeader: ...
	def goTo(self, arg0: Union[int, JInt], ) -> None: ...
	def IsRandomAccessEnabled(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def id(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...


class DbaseFileWriter:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.dbf.DbaseFileHeader, arg1: javawrappers.java.nio.channels.WritableByteChannel, arg2: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.dbf.DbaseFileHeader, arg1: javawrappers.java.nio.channels.WritableByteChannel, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.dbf.DbaseFileHeader, arg1: javawrappers.java.nio.channels.WritableByteChannel, arg2: javawrappers.java.nio.charset.Charset, arg3: javawrappers.java.util.TimeZone, ): ...
	class FieldFormatter:
		def __init__(self, arg0: javawrappers.java.nio.charset.Charset, arg1: javawrappers.java.util.TimeZone, arg2: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getFieldString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.String: ...
		@overload
		def getFieldString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getFieldString(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
		def getFieldStringDateTime(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getReportFieldSizeErrors(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getFieldString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.String: ...
	@overload
	def getFieldString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getFieldString(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.org.geotools.data.shapefile.dbf.DbaseFileHeader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFieldStringDateTime(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def write(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def setReportFieldSizeErrors(self, arg0: Union[int, JBoolean], ) -> None: ...


class DbaseFileReader:
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, arg3: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, arg3: javawrappers.java.util.TimeZone, ): ...
	class Row:
		def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.dbf.DbaseFileReader, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		def isDeleted(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def readRow(self, ) -> javawrappers.org.geotools.data.shapefile.dbf.DbaseFileReader.Row: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> None: ...
	@overload
	def read(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def transferTo(self, arg0: javawrappers.org.geotools.data.shapefile.dbf.DbaseFileWriter, ) -> None: ...
	@overload
	def readEntry(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readEntry(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readEntry(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.org.geotools.data.shapefile.dbf.DbaseFileHeader: ...
	def isDeleted(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def id(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...


class DbaseFileHeader:
	def __init__(self, ): ...
	class DbaseField:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getLargestFieldSize(self, ) -> Union[int, JInt]: ...
	def getLastUpdateDate(self, ) -> javawrappers.java.util.Date: ...
	def getFieldClass(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	def writeHeader(self, arg0: javawrappers.java.nio.channels.WritableByteChannel, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addColumn(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumRecords(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNumRecords(self, ) -> Union[int, JInt]: ...
	def getFieldType(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	@overload
	def readHeader(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def readHeader(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def readHeader(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, ) -> None: ...
	def notify(self, ) -> None: ...
	def getRecordLength(self, ) -> Union[int, JInt]: ...
	def getLengthForRecords(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def removeColumn(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getFieldDecimalCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNumFields(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFieldName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getHeaderLength(self, ) -> Union[int, JInt]: ...
	def getFieldLength(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class DbaseFileException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


