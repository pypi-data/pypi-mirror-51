################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.util
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.filter.sort
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class ForceCoordinateSystemFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ForceCoordinateSystemIterator:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class ReprojectFeatureReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ForceCoordinateSystemFeatureResults:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrigin(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def openIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def closeIterator(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...


class ReprojectFeatureIterator:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class ReprojectFeatureResults:
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrigin(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def openIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def closeIterator(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...


