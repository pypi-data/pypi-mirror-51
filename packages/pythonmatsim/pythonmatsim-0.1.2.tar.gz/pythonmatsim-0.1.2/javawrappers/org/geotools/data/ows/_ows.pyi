################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.util.logging
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.geotools.data
import javawrappers.org.geotools.ows
import javawrappers.org.opengis.metadata.citation
import javawrappers.org.geotools.data.ows

from jpype.types import *
from typing import Union

from typing import overload

class DelegateHTTPClient:
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.HTTPClient, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getPassword(self, ) -> javawrappers.java.lang.String: ...
	def post(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.io.InputStream, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTryGzip(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isTryGzip(self, ) -> Union[int, JBoolean]: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class ServiceExceptionParser:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parse(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.org.geotools.ows.ServiceException: ...
	def notify(self, ) -> None: ...


class Specification:
	def __init__(self, ): ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGetCapabilitiesRequest(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.ows.GetCapabilitiesRequest: ...
	def notify(self, ) -> None: ...


class AbstractRequest:
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.util.Properties, ): ...
	def getPostContentType(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRequestHints(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def createResponse(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ) -> javawrappers.org.geotools.data.ows.Response: ...
	def notify(self, ) -> None: ...
	def performPostOutput(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getFinalURL(self, ) -> javawrappers.java.net.URL: ...
	def requiresPost(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRequestHints(self, arg0: javawrappers.java.util.Map, ) -> None: ...


class Service:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMaxDimension(self, ) -> javawrappers.java.awt.Dimension: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def get_abstract(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setContactInformation(self, arg0: javawrappers.org.opengis.metadata.citation.ResponsibleParty, ) -> None: ...
	def notify(self, ) -> None: ...
	def getMaxWidth(self, ) -> Union[int, JInt]: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def getOnlineResource(self, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMaxHeight(self, arg0: Union[int, JInt], ) -> None: ...
	def setLayerLimit(self, arg0: Union[int, JInt], ) -> None: ...
	def getContactInformation(self, ) -> javawrappers.org.opengis.metadata.citation.ResponsibleParty: ...
	def setOnlineResource(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def getKeywordList(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getMaxHeight(self, ) -> Union[int, JInt]: ...
	def set_abstract(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setMaxWidth(self, arg0: Union[int, JInt], ) -> None: ...
	def setKeywordList(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getLayerLimit(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class GetCapabilitiesResponse:
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getCapabilities(self, ) -> javawrappers.org.geotools.data.ows.Capabilities: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class SimpleHttpClient:
	def __init__(self, ): ...
	class SimpleHTTPResponse:
		def __init__(self, arg0: javawrappers.java.net.URLConnection, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResponseStream(self, ) -> javawrappers.java.io.InputStream: ...
		def getContentType(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def dispose(self, ) -> None: ...
		def getResponseHeader(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getResponseCharset(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getResponseStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getResponseCharset(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getPassword(self, ) -> javawrappers.java.lang.String: ...
	def post(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.io.InputStream, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTryGzip(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getResponseHeader(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isTryGzip(self, ) -> Union[int, JBoolean]: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class HTTPClient:
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPassword(self, ) -> javawrappers.java.lang.String: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def post(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.io.InputStream, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def setTryGzip(self, arg0: Union[int, JBoolean], ) -> None: ...
	def get(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def isTryGzip(self, ) -> Union[int, JBoolean]: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class LoggingHTTPClient:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.HTTPClient, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.HTTPClient, ): ...
	class LoggingHTTPResponse:
		def __init__(self, arg0: javawrappers.org.geotools.data.ows.LoggingHTTPClient, arg1: javawrappers.org.geotools.data.ows.HTTPResponse, arg2: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResponseStream(self, ) -> javawrappers.java.io.InputStream: ...
		def getContentType(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def dispose(self, ) -> None: ...
		def getResponseHeader(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getResponseCharset(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getResponseStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def post(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.io.InputStream, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTryGzip(self, arg0: Union[int, JBoolean], ) -> None: ...
	def get(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.ows.HTTPResponse: ...
	def getResponseHeader(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getResponseCharset(self, ) -> javawrappers.java.lang.String: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getPassword(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isTryGzip(self, ) -> Union[int, JBoolean]: ...


class OperationType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPost(self, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setGet(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setFormats(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getGet(self, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormats(self, ) -> javawrappers.java.util.List: ...
	def setPost(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractOpenWebService:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.Capabilities, arg1: javawrappers.java.net.URL, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.geotools.data.ows.HTTPClient, arg2: javawrappers.org.geotools.data.ows.Capabilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.geotools.data.ows.HTTPClient, arg2: javawrappers.org.geotools.data.ows.Capabilities, arg3: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setHttpClient(self, arg0: javawrappers.org.geotools.data.ows.HTTPClient, ) -> None: ...
	@overload
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	@overload
	def getInfo(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def notifyAll(self, ) -> None: ...
	def getCapabilities(self, ) -> javawrappers.org.geotools.data.ows.Capabilities: ...
	def issueRequest(self, arg0: javawrappers.org.geotools.data.ows.GetCapabilitiesRequest, ) -> javawrappers.org.geotools.data.ows.GetCapabilitiesResponse: ...
	def notify(self, ) -> None: ...
	def setLoggingLevel(self, arg0: javawrappers.java.util.logging.Level, ) -> None: ...
	def getHTTPClient(self, ) -> javawrappers.org.geotools.data.ows.HTTPClient: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setHints(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def getHints(self, ) -> javawrappers.java.util.Map: ...


class Response:
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class GetCapabilitiesRequest:
	def getPostContentType(self, ) -> javawrappers.java.lang.String: ...
	def getFinalURL(self, ) -> javawrappers.java.net.URL: ...
	def requiresPost(self, ) -> Union[int, JBoolean]: ...
	def getRequestHints(self, ) -> javawrappers.java.util.Map: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def createResponse(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ) -> javawrappers.org.geotools.data.ows.Response: ...
	def performPostOutput(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def setRequestHints(self, arg0: javawrappers.java.util.Map, ) -> None: ...


class DelegateHTTPResponse:
	def __init__(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResponseStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getResponseHeader(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getResponseCharset(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Capabilities:
	def __init__(self, ): ...
	def setUpdateSequence(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setService(self, arg0: javawrappers.org.geotools.data.ows.Service, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setVersion(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getUpdateSequence(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getService(self, ) -> javawrappers.org.geotools.data.ows.Service: ...


class Request:
	def getPostContentType(self, ) -> javawrappers.java.lang.String: ...
	def getFinalURL(self, ) -> javawrappers.java.net.URL: ...
	def requiresPost(self, ) -> Union[int, JBoolean]: ...
	def getRequestHints(self, ) -> javawrappers.java.util.Map: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def createResponse(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ) -> javawrappers.org.geotools.data.ows.Response: ...
	def performPostOutput(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def setRequestHints(self, arg0: javawrappers.java.util.Map, ) -> None: ...


class HTTPResponse:
	def getResponseStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getResponseHeader(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getResponseCharset(self, ) -> javawrappers.java.lang.String: ...


class AbstractGetCapabilitiesRequest:
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getPostContentType(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRequestHints(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getProperties(self, ) -> javawrappers.java.util.Properties: ...
	def createResponse(self, arg0: javawrappers.org.geotools.data.ows.HTTPResponse, ) -> javawrappers.org.geotools.data.ows.Response: ...
	def notify(self, ) -> None: ...
	def performPostOutput(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getFinalURL(self, ) -> javawrappers.java.net.URL: ...
	def requiresPost(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRequestHints(self, arg0: javawrappers.java.util.Map, ) -> None: ...


