################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.geotools.data.shapefile.index.quadtree
import javawrappers.org.geotools.data.shapefile.shp
import javawrappers.java.nio
import javawrappers.org.geotools.data.shapefile.index.quadtree.fs
import javawrappers.java.nio.channels
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class FileSystemNode:
	class ScrollingBuffer:
		def __init__(self, arg0: javawrappers.java.nio.channels.FileChannel, arg1: javawrappers.java.nio.ByteOrder, arg2: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getInt(self, ) -> Union[int, JInt]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getPosition(self, ) -> Union[long, JLong]: ...
		def goTo(self, arg0: Union[long, JLong], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def getIntArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumSubNodes(self, ) -> Union[int, JInt]: ...
	def getSubNode(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.Node: ...
	def notifyAll(self, ) -> None: ...
	def getShapesId(self, ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...
	@overload
	def setShapesId(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setShapesId(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addShapeId(self, arg0: Union[int, JInt], ) -> None: ...
	def setChildrenVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSubNodesLength(self, ) -> Union[int, JInt]: ...
	def addSubNode(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> None: ...
	def getShapeId(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def copy(self, ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.Node: ...
	def setNumSubNodes(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	def isChildrenVisited(self, ) -> Union[int, JBoolean]: ...
	def removeSubNode(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> Union[int, JBoolean]: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def clearSubNodes(self, ) -> None: ...
	def clean(self, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	def pack(self, ) -> None: ...
	def getInt(self, ) -> Union[int, JInt]: ...
	def getSubNodeStartByte(self, ) -> Union[int, JInt]: ...
	def getPosition(self, ) -> Union[long, JLong]: ...
	def goTo(self, arg0: Union[long, JLong], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIntArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def getNumShapeIds(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readNode(arg0: Union[int, JInt], arg1: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, arg2: javawrappers.java.nio.channels.FileChannel, arg3: javawrappers.java.nio.ByteOrder, arg4: Union[int, JBoolean], ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.fs.FileSystemNode: ...


class FileSystemIndexStore:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: JByte, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def load(self, arg0: javawrappers.org.geotools.data.shapefile.shp.IndexFile, arg1: Union[int, JBoolean], ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.QuadTree: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setByteOrder(self, arg0: JByte, ) -> None: ...
	def getByteOrder(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def store(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.QuadTree, ) -> None: ...
	def notify(self, ) -> None: ...


class IndexHeader:
	@overload
	def __init__(self, arg0: JByte, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeTo(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getByteOrder(self, ) -> JByte: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


