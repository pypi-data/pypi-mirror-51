################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.org.geotools.math

from jpype.types import *
from typing import Union

from typing import overload

class Polynom:
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def y(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	@staticmethod
	def roots(arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def roots(self, ) -> JArray(Union[float, JDouble], 1): ...
	def notify(self, ) -> None: ...


class Line:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def intersectionPoint(self, arg0: javawrappers.org.geotools.math.Line, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def intersectionPoint(self, arg0: javawrappers.java.awt.geom.Line2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def notify(self, ) -> None: ...
	def translate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getSlope(self, ) -> Union[float, JDouble]: ...
	def isoscelesTriangleBase(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Line2D: ...
	def nearestColinearPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def getX0(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getY0(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def x(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Line: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def y(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setLine(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setLine(self, arg0: javawrappers.java.awt.geom.Line2D, ) -> None: ...
	@overload
	def setLine(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ) -> Union[float, JDouble]: ...
	@overload
	def setLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...


class Fraction:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.math.Fraction, ): ...
	def add(self, arg0: javawrappers.org.geotools.math.Fraction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def subtract(self, arg0: javawrappers.org.geotools.math.Fraction, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	@staticmethod
	def ceil(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.geotools.math.Fraction, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def numerator(self, ) -> Union[int, JInt]: ...
	def denominator(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def round(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def round(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Fraction: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	def divide(self, arg0: javawrappers.org.geotools.math.Fraction, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def multiply(self, arg0: javawrappers.org.geotools.math.Fraction, ) -> None: ...
	@staticmethod
	def floor(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def byteValue(self, ) -> JByte: ...


class Complex:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.math.Complex, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def add(self, arg0: javawrappers.org.geotools.math.Complex, arg1: javawrappers.org.geotools.math.Complex, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addMultiply(self, arg0: javawrappers.org.geotools.math.Complex, arg1: javawrappers.org.geotools.math.Complex, arg2: javawrappers.org.geotools.math.Complex, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.math.Complex, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Complex: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def divide(self, arg0: javawrappers.org.geotools.math.Complex, arg1: javawrappers.org.geotools.math.Complex, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def copy(self, arg0: javawrappers.org.geotools.math.Complex, ) -> None: ...
	def power(self, arg0: javawrappers.org.geotools.math.Complex, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def multiply(self, arg0: javawrappers.org.geotools.math.Complex, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def multiply(self, arg0: javawrappers.org.geotools.math.Complex, arg1: javawrappers.org.geotools.math.Complex, ) -> None: ...


class Plane:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPlane(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def setPlane(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def x(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Plane: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def y(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def z(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMath:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def divisors(arg0: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def countDecimalFractionDigits(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def pow10(arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def pow10(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def roundIfAlmostInteger(arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def primeNumber(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def trimDecimalFractionDigits(arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def toNaN(arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def sgn(arg0: JByte, ) -> JByte: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...


class Statistics:
	def __init__(self, ): ...
	class Delta:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.geotools.math.Statistics, ): ...
		@overload
		def add(self, arg0: javawrappers.org.geotools.math.Statistics, ) -> None: ...
		@overload
		def add(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def add(self, arg0: Union[float, JDouble], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def count(self, ) -> Union[int, JInt]: ...
		def range(self, ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...
		def mean(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDeltaStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def clone(self, ) -> javawrappers.org.geotools.math.Statistics: ...
		@overload
		def clone(self, ) -> javawrappers.org.geotools.math.Statistics.Delta: ...
		def rms(self, ) -> Union[float, JDouble]: ...
		def maximum(self, ) -> Union[float, JDouble]: ...
		def reset(self, ) -> None: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, arg0: javawrappers.java.util.Locale, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		def minimum(self, ) -> Union[float, JDouble]: ...
		def standardDeviation(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
		def countNaN(self, ) -> Union[int, JInt]: ...


	@overload
	def add(self, arg0: javawrappers.org.geotools.math.Statistics, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.math.Statistics, ) -> None: ...
	@overload
	def add(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def count(self, ) -> Union[int, JInt]: ...
	def range(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getDeltaStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def mean(self, ) -> Union[float, JDouble]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.math.Statistics.Delta: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	def rms(self, ) -> Union[float, JDouble]: ...
	def maximum(self, ) -> Union[float, JDouble]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.util.Locale, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def minimum(self, ) -> Union[float, JDouble]: ...
	def standardDeviation(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def countNaN(self, ) -> Union[int, JInt]: ...


