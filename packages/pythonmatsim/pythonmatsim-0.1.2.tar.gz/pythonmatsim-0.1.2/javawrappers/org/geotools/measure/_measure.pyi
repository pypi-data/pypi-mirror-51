################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.util
import javawrappers.org.opengis.geometry
import javawrappers.javax.measure.format
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.geotools.measure

from jpype.types import *
from typing import Union

from typing import overload

class Units:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toName(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDefaultFormat() -> javawrappers.javax.measure.format.UnitFormat: ...
	@staticmethod
	def toSymbol(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseUnit(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def autoCorrect(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def getConverterToAny(arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class Measure:
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.javax.measure.Unit, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def byteValue(self, ) -> JByte: ...


class Longitude:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.geotools.measure.Angle, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def radians(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def degrees(self, ) -> Union[float, JDouble]: ...


class AngleFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.DecimalFormatSymbols, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ): ...
	class RoundingMethod:
		ROUND_HALF_EVEN: AngleFormat.RoundingMethod = ...
		ROUND_HALF_UP: AngleFormat.RoundingMethod = ...
		ROUND_HALF_DOWN: AngleFormat.RoundingMethod = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.measure.AngleFormat.RoundingMethod: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.measure.AngleFormat.RoundingMethod, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.measure.AngleFormat.RoundingMethod, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultRoundingMethod(arg0: javawrappers.org.geotools.measure.AngleFormat.RoundingMethod, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def applyPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toPattern(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.measure.AngleFormat.RoundingMethod: ...
	@staticmethod
	def getDefaultRoundingMethod() -> javawrappers.org.geotools.measure.AngleFormat.RoundingMethod: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.org.geotools.measure.Angle: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.measure.Angle: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.measure.Angle: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.org.geotools.measure.Angle: ...
	def setRoundingMethod(self, arg0: javawrappers.org.geotools.measure.AngleFormat.RoundingMethod, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.measure.AngleFormat: ...
	@staticmethod
	def getRoundingMethod() -> javawrappers.org.geotools.measure.AngleFormat.RoundingMethod: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Latitude:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.geotools.measure.Angle, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def radians(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def degrees(self, ) -> Union[float, JDouble]: ...


class Angle:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.geotools.measure.Angle, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def radians(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def degrees(self, ) -> Union[float, JDouble]: ...


class CoordinateFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	def setSeparator(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setNumberPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def setDatePattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getSeparator(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormat(self, arg0: Union[int, JInt], ) -> javawrappers.java.text.Format: ...
	def setAnglePattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...


