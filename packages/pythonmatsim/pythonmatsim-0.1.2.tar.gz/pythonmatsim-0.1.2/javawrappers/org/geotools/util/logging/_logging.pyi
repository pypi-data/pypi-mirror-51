################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.java.lang
import javawrappers.org.geotools.util.logging
import javawrappers.java.util
import javawrappers.java.text
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class LoggerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getImplementationClass(self, ) -> javawrappers.java.lang.Class: ...


class Logging:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLoggerFactory(self, ) -> javawrappers.org.geotools.util.logging.LoggerFactory: ...
	@overload
	def setLoggerFactory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setLoggerFactory(self, arg0: javawrappers.org.geotools.util.logging.LoggerFactory, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.logging.Logger: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def forceMonolineConsoleOutput(self, arg0: javawrappers.java.util.logging.Level, ) -> None: ...
	@overload
	def forceMonolineConsoleOutput(self, ) -> None: ...
	@overload
	@staticmethod
	def unexpectedException(arg0: javawrappers.java.util.logging.Logger, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def unexpectedException(arg0: javawrappers.java.util.logging.Logger, arg1: javawrappers.java.lang.Throwable, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def unexpectedException(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def unexpectedException(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def recoverableException(arg0: javawrappers.java.util.logging.Logger, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def recoverableException(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLogging(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.util.logging.Logging: ...


class CommonsLoggerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.org.geotools.util.logging.CommonsLoggerFactory: ...
	def notify(self, ) -> None: ...
	def getImplementationClass(self, ) -> javawrappers.java.lang.Class: ...


class LoggerAdapter:
	def setResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setUseParentHandlers(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.LogRecord, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: javawrappers.java.util.logging.Level, ) -> None: ...
	def throwing(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getGlobal() -> javawrappers.java.util.logging.Logger: ...
	@overload
	def warning(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getResourceBundleName(self, ) -> javawrappers.java.lang.String: ...
	def setParent(self, arg0: javawrappers.java.util.logging.Logger, ) -> None: ...
	@overload
	def exiting(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def exiting(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getResourceBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	def logp(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getUseParentHandlers(self, ) -> Union[int, JBoolean]: ...
	def addHandler(self, arg0: javawrappers.java.util.logging.Handler, ) -> None: ...
	def isLoggable(self, arg0: javawrappers.java.util.logging.Level, ) -> Union[int, JBoolean]: ...
	def getParent(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getHandlers(self, ) -> JArray(javawrappers.java.util.logging.Handler, 1): ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	def removeHandler(self, arg0: javawrappers.java.util.logging.Handler, ) -> None: ...
	def setFilter(self, arg0: javawrappers.java.util.logging.Filter, ) -> None: ...
	def getFilter(self, ) -> javawrappers.java.util.logging.Filter: ...
	@overload
	def entering(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def entering(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def entering(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def getLevel(self, ) -> javawrappers.java.util.logging.Level: ...
	@overload
	@staticmethod
	def getAnonymousLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	@overload
	@staticmethod
	def getAnonymousLogger() -> javawrappers.java.util.logging.Logger: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finer(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def severe(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def config(self, arg0: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class MonolineFormatter:
	def __init__(self, ): ...
	@staticmethod
	def configureConsoleHandler(arg0: javawrappers.java.util.logging.Logger, arg1: javawrappers.java.util.logging.Level, ) -> javawrappers.org.geotools.util.logging.MonolineFormatter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatMessage(self, arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	def getTail(self, arg0: javawrappers.java.util.logging.Handler, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def format(self, arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	def getTimeFormat(self, ) -> javawrappers.java.lang.String: ...
	def getSourceFormat(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getHead(self, arg0: javawrappers.java.util.logging.Handler, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setTimeFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setSourceFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class LoggedFormat:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def setCaller(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def formatUnparsable(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def formatUnparsable(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, arg4: javawrappers.java.util.logging.Level, ) -> javawrappers.java.util.logging.LogRecord: ...
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	def setLevel(self, arg0: javawrappers.java.util.logging.Level, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setLogger(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: javawrappers.java.text.Format, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.util.logging.LoggedFormat: ...


class Log4JLoggerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.org.geotools.util.logging.Log4JLoggerFactory: ...
	def notify(self, ) -> None: ...
	def getImplementationClass(self, ) -> javawrappers.java.lang.Class: ...


