################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.geotools.renderer.crs
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class ProjectionHandler:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.locationtech.jts.geom.Envelope, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getValidAreaBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getRenderingTransform(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def requiresProcessing(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getQueryEnvelopes(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRenderingEnvelope(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def preProcess(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def postProcess(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


class MercatorHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class GeographicHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class TransverseMercatorHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class WorldVanDerGrintenIHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class ProjectionHandlerFactory:
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...


class GeometryDimensionCollector:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def collect(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class ConicHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class ProjectionHandlerFinder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getHandler(arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def setWrapLimit(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class PolarStereographicHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class LambertAzimuthalEqualAreaHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHandler(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.renderer.crs.ProjectionHandler: ...
	def notify(self, ) -> None: ...


class WrappingProjectionHandler:
	def __init__(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg1: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: Union[float, JDouble], arg4: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getValidAreaBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getRenderingTransform(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def requiresProcessing(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getQueryEnvelopes(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def isDatelineWrappingCheckEnabled(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRenderingEnvelope(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def preProcess(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def setDatelineWrappingCheckEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def postProcess(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


