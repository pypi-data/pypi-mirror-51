################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.geotools.factory
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.geometry.aggregate
import javawrappers.java.awt
import javawrappers.org.opengis.geometry.primitive
import javawrappers.java.lang
import javawrappers.org.geotools.geometry
import javawrappers.org.opengis.geometry.complex

from jpype.types import *
from typing import Union

from typing import overload

class DirectPosition2D:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.Point2D, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ): ...
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def distance(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
	@overload
	def distance(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def distance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def distanceSq(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def distanceSq(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def distanceSq(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getY(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.DirectPosition2D: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def toPoint2D(self, ) -> javawrappers.java.awt.geom.Point2D: ...


class GeometryFactoryFinder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getAggregateFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.geometry.aggregate.AggregateFactory: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getGeometryFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.geometry.coordinate.GeometryFactory: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getPrecision(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.geometry.Precision: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getComplexFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.geometry.complex.ComplexFactory: ...
	@staticmethod
	def getPrimitiveFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveFactory: ...
	@staticmethod
	def mergeSystemHints(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.factory.Hints: ...
	@staticmethod
	def getPositionFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.geometry.PositionFactory: ...


class Envelope2D:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.Envelope, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.geometry.DirectPosition2D, arg1: javawrappers.org.geotools.geometry.DirectPosition2D, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.java.awt.geom.Rectangle2D, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCenter(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getUpperCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def setFrameFromCenter(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setFrameFromCenter(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> javawrappers.java.awt.geom.PathIterator: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getCenterY(self, ) -> Union[float, JDouble]: ...
	def getCenterX(self, ) -> Union[float, JDouble]: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRect(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def setRect(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[int, JBoolean]: ...
	def createUnion(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def outcode(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[int, JInt]: ...
	@overload
	def outcode(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def intersects(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> Union[int, JBoolean]: ...
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getFrame(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getHeight(self, ) -> Union[float, JDouble]: ...
	@overload
	def setFrame(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Dimension2D, ) -> None: ...
	@overload
	def setFrame(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def setFrame(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def getMedian(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def toBounds(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	@overload
	def include(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	@overload
	def include(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def intersect(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	def boundsEquals(self, arg0: javawrappers.org.opengis.geometry.Envelope, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def union(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	@overload
	def setFrameFromDiagonal(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setFrameFromDiagonal(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def intersectsLine(self, arg0: javawrappers.java.awt.geom.Line2D, ) -> Union[int, JBoolean]: ...
	@overload
	def intersectsLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getBounds2D(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getLength(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createIntersection(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getLowerCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class DirectPosition3D:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ): ...
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def notify(self, ) -> None: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setLocation(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.DirectPosition3D: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class GeneralDirectPosition:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.Point2D, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def setLocation(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.org.geotools.geometry.GeneralDirectPosition, ) -> None: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.GeneralDirectPosition: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def toPoint2D(self, ) -> javawrappers.java.awt.geom.Point2D: ...


class TransformedDirectPosition:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, ): ...
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.org.geotools.geometry.GeneralDirectPosition, ) -> None: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def inverseTransform(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def inverseTransform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.GeneralDirectPosition: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def toPoint2D(self, ) -> javawrappers.java.awt.geom.Point2D: ...


class GeneralEnvelope:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.coverage.grid.GridEnvelope, arg1: javawrappers.org.opengis.referencing.datum.PixelInCell, arg2: javawrappers.org.opengis.referencing.operation.MathTransform, arg3: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.extent.GeographicBoundingBox, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.Envelope, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.geometry.GeneralDirectPosition, arg1: javawrappers.org.geotools.geometry.GeneralDirectPosition, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.Envelope, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def getSpan(self, arg0: Union[int, JInt], arg1: javawrappers.javax.measure.Unit, ) -> Union[float, JDouble]: ...
	@overload
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getUpperCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def isInfinite(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getMedian(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getMedian(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def normalize(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setToNull(self, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.opengis.geometry.Envelope, ) -> None: ...
	def getReducedEnvelope(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	@staticmethod
	def toGeneralEnvelope(arg0: javawrappers.org.opengis.geometry.Envelope, ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	def intersect(self, arg0: javawrappers.org.opengis.geometry.Envelope, ) -> None: ...
	def setRange(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setEnvelope(self, *arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setEnvelope(self, arg0: javawrappers.org.geotools.geometry.GeneralEnvelope, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getSubEnvelope(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	def toRectangle2D(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.Envelope, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	def setToInfinite(self, ) -> None: ...
	def isNull(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.geometry.Envelope, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLowerCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class AbstractEnvelope:
	class UpperCorner:
		def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
		def notifyAll(self, ) -> None: ...
		def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		def notify(self, ) -> None: ...
		def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
		def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
		def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class LowerCorner:
		def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
		def notifyAll(self, ) -> None: ...
		def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		def notify(self, ) -> None: ...
		def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
		def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
		def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class Corner:
		def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
		def notifyAll(self, ) -> None: ...
		def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		def notify(self, ) -> None: ...
		def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
		def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
		def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def notify(self, ) -> None: ...
	def getUpperCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def getMedian(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getDimension(self, ) -> Union[int, JInt]: ...
	@overload
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLowerCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class AbstractDirectPosition:
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class GeometryBuilder:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createPolyhedralSurface(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.PolyhedralSurface: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createPrimitive(self, arg0: javawrappers.org.opengis.geometry.Envelope, ) -> javawrappers.org.opengis.geometry.primitive.Primitive: ...
	def createMultiPoint(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.geometry.aggregate.MultiPoint: ...
	def notifyAll(self, ) -> None: ...
	def createPosition(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.coordinate.Position: ...
	@overload
	def createPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	@overload
	def createPoint(self, arg0: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	@overload
	def createPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.primitive.Point: ...
	def notify(self, ) -> None: ...
	def setCoordianteReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def createMultiSurface(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.geometry.aggregate.MultiSurface: ...
	def createMultiCurve(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.geometry.aggregate.MultiCurve: ...
	@overload
	def createDirectPosition(self, arg0: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def createDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def createLineSegment(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.coordinate.LineSegment: ...
	@overload
	def createLineSegment(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, arg1: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.coordinate.LineSegment: ...
	def createTin(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.util.Set, arg3: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.coordinate.Tin: ...
	def createRing(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.Ring: ...
	def createCompositeCurve(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.complex.CompositeCurve: ...
	@overload
	def createCurve(self, arg0: javawrappers.org.opengis.geometry.coordinate.PointArray, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	@overload
	def createCurve(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	@overload
	def createCurve(self, arg0: javawrappers.org.opengis.geometry.coordinate.PointArray, arg1: Union[int, JBoolean], ) -> javawrappers.org.opengis.geometry.primitive.Curve: ...
	def getPrimitiveFactory(self, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveFactory: ...
	@overload
	def createSurface(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def createSurface(self, arg0: javawrappers.org.opengis.geometry.primitive.SurfaceBoundary, ) -> javawrappers.org.opengis.geometry.primitive.Surface: ...
	@overload
	def createMultiPrimitive(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.geometry.aggregate.MultiPrimitive: ...
	@overload
	def createMultiPrimitive(self, ) -> javawrappers.org.opengis.geometry.aggregate.MultiPrimitive: ...
	@overload
	def createPointArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def createPointArray(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def createPointArray(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getAggregateFactory(self, ) -> javawrappers.org.opengis.geometry.aggregate.AggregateFactory: ...
	def createSolid(self, arg0: javawrappers.org.opengis.geometry.primitive.SolidBoundary, ) -> javawrappers.org.opengis.geometry.primitive.Solid: ...
	def getGeometryFactory(self, ) -> javawrappers.org.opengis.geometry.coordinate.GeometryFactory: ...
	def createCompositeSurface(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.complex.CompositeSurface: ...
	@overload
	def createSurfaceBoundary(self, arg0: javawrappers.org.opengis.geometry.primitive.OrientableCurve, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	@overload
	def createSurfaceBoundary(self, arg0: javawrappers.org.opengis.geometry.coordinate.PointArray, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	@overload
	def createSurfaceBoundary(self, arg0: javawrappers.org.opengis.geometry.primitive.Ring, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	@overload
	def createSurfaceBoundary(self, arg0: javawrappers.org.opengis.geometry.primitive.Ring, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.primitive.SurfaceBoundary: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.opengis.geometry.primitive.SurfaceBoundary, ) -> javawrappers.org.opengis.geometry.coordinate.Polygon: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.opengis.geometry.primitive.SurfaceBoundary, arg1: javawrappers.org.opengis.geometry.primitive.Surface, ) -> javawrappers.org.opengis.geometry.coordinate.Polygon: ...
	@overload
	def createLineString(self, arg0: javawrappers.org.opengis.geometry.coordinate.PointArray, ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	@overload
	def createLineString(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.geometry.coordinate.LineString: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	def createEnvelope(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def createCompositePoint(self, arg0: javawrappers.org.opengis.geometry.primitive.Point, ) -> javawrappers.org.opengis.geometry.complex.CompositePoint: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getComplexFactory(self, ) -> javawrappers.org.opengis.geometry.complex.ComplexFactory: ...
	def createPositionList(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getPositionFactory(self, ) -> javawrappers.org.opengis.geometry.PositionFactory: ...


class DirectPosition1D:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ): ...
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setLocation(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.DirectPosition1D: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


