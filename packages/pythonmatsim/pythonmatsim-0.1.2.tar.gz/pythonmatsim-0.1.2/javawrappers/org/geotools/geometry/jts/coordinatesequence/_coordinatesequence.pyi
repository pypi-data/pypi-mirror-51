################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.geometry
import javawrappers.org.geotools.geometry.jts.coordinatesequence
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.geom.impl

from jpype.types import *
from typing import Union

from typing import overload

class InPlaceCoordinateSequenceTransformer:
	def __init__(self, ): ...
	class FlyWeightDirectPosition:
		def __init__(self, arg0: javawrappers.org.geotools.geometry.jts.coordinatesequence.InPlaceCoordinateSequenceTransformer, arg1: Union[int, JInt], ): ...
		def setSequence(self, arg0: javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence, ) -> None: ...
		def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
		def notifyAll(self, ) -> None: ...
		def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		def getCoordinates(self, ) -> JArray(Union[float, JDouble], 1): ...
		def notify(self, ) -> None: ...
		def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
		def getPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def setOffset(self, arg0: Union[int, JInt], ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def clone(self, ) -> javawrappers.org.geotools.geometry.jts.coordinatesequence.InPlaceCoordinateSequenceTransformer.FlyWeightDirectPosition: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def setSequence(self, arg0: javawrappers.org.locationtech.jts.geom.impl.PackedCoordinateSequence, ) -> None: ...
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getCoordinates(self, ) -> JArray(Union[float, JDouble], 1): ...
	def notify(self, ) -> None: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def getPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def setOffset(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.geometry.jts.coordinatesequence.InPlaceCoordinateSequenceTransformer.FlyWeightDirectPosition: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CoordinateSequences:
	def __init__(self, ): ...
	class CoordinateSequenceCollector:
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def find(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
		def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSequences(self, ) -> javawrappers.java.util.List: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDone(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class CoordinateSequenceFinder:
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getSeq(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def find(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDone(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def computeOrientation(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def minCoordinateIndex(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def minCoordinateIndex(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isEqual(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isRing(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def equalsND(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def find(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	@staticmethod
	def find(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSequences(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def copy(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def coordinateDimension(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def coordinateDimension(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JInt]: ...
	@staticmethod
	def indexOf(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> Union[int, JInt]: ...
	def getSeq(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@staticmethod
	def swap(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def scroll(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	@staticmethod
	def scroll(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def scroll(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@staticmethod
	def reverse(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> None: ...
	@overload
	def isDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isDone(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ensureValidRing(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequenceFactory, arg1: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@staticmethod
	def extend(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequenceFactory, arg1: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@staticmethod
	def copyCoord(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg3: Union[int, JInt], ) -> None: ...
	@staticmethod
	def isCCW(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def minCoordinate(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, ) -> javawrappers.java.lang.String: ...


class CSBuilderFactory:
	def __init__(self, ): ...
	@staticmethod
	def getDefaultBuilder() -> javawrappers.org.geotools.geometry.jts.coordinatesequence.CSBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def setDefaultBuilderClass(arg0: javawrappers.java.lang.Class, ) -> None: ...


class CSBuilder:
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	@overload
	def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...


class PackedCSBuilder:
	def __init__(self, ): ...
	class Float:
		def __init__(self, ): ...
		def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getSize(self, ) -> Union[int, JInt]: ...
		@overload
		def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
		@overload
		def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		def notify(self, ) -> None: ...


	class Double:
		def __init__(self, ): ...
		def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getSize(self, ) -> Union[int, JInt]: ...
		@overload
		def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
		@overload
		def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDimension(self, ) -> Union[int, JInt]: ...
		def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
		def notify(self, ) -> None: ...


	@overload
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	@overload
	def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	@overload
	def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	@overload
	def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DefaultCSBuilder:
	def __init__(self, ): ...
	def getOrdinate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	@overload
	def setOrdinate(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[float, JDouble], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setOrdinate(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def start(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def end(self, ) -> javawrappers.org.locationtech.jts.geom.CoordinateSequence: ...
	def notify(self, ) -> None: ...


