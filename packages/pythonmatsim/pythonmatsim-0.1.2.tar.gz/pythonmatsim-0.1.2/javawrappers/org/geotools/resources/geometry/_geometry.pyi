################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.awt.geom
import javawrappers.org.geotools.resources.geometry

from jpype.types import *
from typing import Union

from typing import overload

class ShapeUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toPrimitive(arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def fitCircle(arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, arg2: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Ellipse2D: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def fitParabol(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[int, JInt], ) -> javawrappers.java.awt.geom.QuadCurve2D: ...
	@overload
	@staticmethod
	def fitParabol(arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, arg2: javawrappers.java.awt.geom.Point2D, arg3: Union[int, JInt], ) -> javawrappers.java.awt.geom.QuadCurve2D: ...
	@overload
	@staticmethod
	def intersectionPoint(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	@staticmethod
	def intersectionPoint(arg0: javawrappers.java.awt.geom.Line2D, arg1: javawrappers.java.awt.geom.Line2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def getFlatness(arg0: javawrappers.java.awt.Shape, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def colinearPoint(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	@staticmethod
	def colinearPoint(arg0: javawrappers.java.awt.geom.Line2D, arg1: javawrappers.java.awt.geom.Point2D, arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	@staticmethod
	def nearestColinearPoint(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	@staticmethod
	def nearestColinearPoint(arg0: javawrappers.java.awt.geom.Line2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parabolicControlPoint(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[int, JInt], arg7: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def circleCentre(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Point2D: ...


class XDimension2D:
	class Double:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getHeight(self, ) -> Union[float, JDouble]: ...
		@overload
		def setSize(self, arg0: javawrappers.java.awt.geom.Dimension2D, ) -> None: ...
		@overload
		def setSize(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getWidth(self, ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	class Float:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getHeight(self, ) -> Union[float, JDouble]: ...
		@overload
		def setSize(self, arg0: javawrappers.java.awt.geom.Dimension2D, ) -> None: ...
		@overload
		def setSize(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getWidth(self, ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getHeight(self, ) -> Union[float, JDouble]: ...
	@overload
	def getHeight(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setSize(self, arg0: javawrappers.java.awt.geom.Dimension2D, ) -> None: ...
	@overload
	def setSize(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSize(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getWidth(self, ) -> Union[float, JDouble]: ...
	@overload
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class XRectangle2D:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def intersects(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def equalsEpsilon(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getFrame(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def setFrameFromCenter(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setFrameFromCenter(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def getHeight(self, ) -> Union[float, JDouble]: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def setFrame(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Dimension2D, ) -> None: ...
	@overload
	def setFrame(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def setFrame(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCenterY(self, ) -> Union[float, JDouble]: ...
	def getCenterX(self, ) -> Union[float, JDouble]: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def intersect(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	@staticmethod
	def intersectInclusive(arg0: javawrappers.java.awt.Shape, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def intersectInclusive(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	@overload
	def setRect(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def setRect(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def union(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> None: ...
	@overload
	def setFrameFromDiagonal(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setFrameFromDiagonal(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def intersectsLine(self, arg0: javawrappers.java.awt.geom.Line2D, ) -> Union[int, JBoolean]: ...
	@overload
	def intersectsLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def createUnion(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@staticmethod
	def containsInclusive(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def outcode(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[int, JInt]: ...
	@overload
	def outcode(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@staticmethod
	def createFromExtremums(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.org.geotools.resources.geometry.XRectangle2D: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getBounds2D(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createIntersection(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


