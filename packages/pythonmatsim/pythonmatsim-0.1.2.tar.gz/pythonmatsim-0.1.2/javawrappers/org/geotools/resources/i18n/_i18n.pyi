################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.geotools.resources.i18n
import javawrappers.org.opengis.util

from jpype.types import *
from typing import Union

from typing import overload

class Loggings_es:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Loggings: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class ErrorKeys:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Errors_el:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Vocabulary_el:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class LoggingKeys:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Vocabulary_pt:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class VocabularyKeys:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Vocabulary_es:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Errors_fr:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Descriptions:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Descriptions: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Vocabulary_fr:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Descriptions_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Descriptions: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Loggings_fr:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Loggings: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Vocabulary:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Errors_es:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Errors_de:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Errors_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Loggings:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Loggings: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Descriptions_fr:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Descriptions: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Errors:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Loggings_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Loggings: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Vocabulary_de:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class DescriptionKeys:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Locales:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getAvailableLanguages() -> JArray(javawrappers.java.util.Locale, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getAvailableLocales(arg0: javawrappers.java.util.Locale, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class Errors_pt:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Errors: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Vocabulary_pt_BR:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class Vocabulary_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	@staticmethod
	def formatInternational(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@staticmethod
	def getResources(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.resources.i18n.Vocabulary: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


