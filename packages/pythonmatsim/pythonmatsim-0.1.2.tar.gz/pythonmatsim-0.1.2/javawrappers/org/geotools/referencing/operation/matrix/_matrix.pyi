################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.awt.geom
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.geotools.referencing.operation.matrix

from jpype.types import *
from typing import Union

from typing import overload

class SingularMatrixException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.NoninvertibleTransformException, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class XAffineTransform:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.AffineTransform, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def concatenate(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	def preConcatenate(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	@staticmethod
	def getRotation(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def translate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setToQuadrantRotation(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setToQuadrantRotation(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	def getMatrix(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def quadrantRotate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def quadrantRotate(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def inverseTransform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def inverseTransform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def inverseTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getFlip(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[int, JInt]: ...
	def getDeterminant(self, ) -> Union[float, JDouble]: ...
	def invert(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentity(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def inverseDeltaTransform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.geom.Point2D, arg2: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def createInverse(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getScaleY(self, ) -> Union[float, JDouble]: ...
	def getShearX(self, ) -> Union[float, JDouble]: ...
	def getScaleX(self, ) -> Union[float, JDouble]: ...
	def getShearY(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getScale(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getScaleY0(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	def setToTranslation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def getShearInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def setToIdentity(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getSwapXY(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def scale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def getScaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getScaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def notify(self, ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.Shape, arg2: Union[int, JBoolean], ) -> javawrappers.java.awt.Shape: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(javawrappers.java.awt.geom.Point2D, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.java.awt.geom.Point2D, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def setTransform(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> None: ...
	@overload
	def setTransform(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setToShear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getTranslateY(self, ) -> Union[float, JDouble]: ...
	def getTranslateX(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getScaleX0(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	def shear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def getQuadrantRotateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getQuadrantRotateInstance(arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def getTranslateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@staticmethod
	def round(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> None: ...
	def setToScale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def deltaTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def deltaTransform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...


class Matrix2:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setColumn(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getColumn(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setRow(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def multiply(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def invert(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def isAffine(self, ) -> Union[int, JBoolean]: ...
	def determinate(self, ) -> Union[float, JDouble]: ...
	def getRow(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def negate(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def negate(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.Matrix2: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setZero(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setIdentity(self, ) -> None: ...
	@overload
	def transpose(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def transpose(self, ) -> None: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


class MatrixFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> javawrappers.org.geotools.referencing.operation.matrix.XMatrix: ...
	@overload
	@staticmethod
	def create(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.geotools.referencing.operation.matrix.XMatrix: ...
	@overload
	@staticmethod
	def create(arg0: Union[int, JInt], ) -> javawrappers.org.geotools.referencing.operation.matrix.XMatrix: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Matrix4:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def copySubMatrix(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix, ) -> None: ...
	def notify(self, ) -> None: ...
	def setColumn(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def toAffineTransform2D(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def setSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def load(arg0: javawrappers.java.io.File, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	@overload
	@staticmethod
	def load(arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getColumn(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setRow(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def multiply(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	def set(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def invert(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def isAffine(self, ) -> Union[int, JBoolean]: ...
	def determinate(self, ) -> Union[float, JDouble]: ...
	def getRow(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def negate(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def negate(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getElements(arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@overload
	def getElements(self, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.Matrix4: ...
	def setZero(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setIdentity(self, ) -> None: ...
	@overload
	def transpose(self, ) -> None: ...
	@overload
	def transpose(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


class XMatrix:
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def invert(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def isAffine(self, ) -> Union[int, JBoolean]: ...
	def determinate(self, ) -> Union[float, JDouble]: ...
	def getRow(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setColumn(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def negate(self, ) -> None: ...
	@overload
	def negate(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def equals(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getColumn(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setZero(self, ) -> None: ...
	def setRow(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def setIdentity(self, ) -> None: ...
	@overload
	def transpose(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def transpose(self, ) -> None: ...
	def multiply(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


class AffineTransform2D:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.AffineTransform, ): ...
	def setToIdentity(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def concatenate(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	def preConcatenate(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def scale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def getScaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def notify(self, ) -> None: ...
	def translate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setToQuadrantRotation(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setToQuadrantRotation(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(javawrappers.java.awt.geom.Point2D, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.java.awt.geom.Point2D, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getMatrix(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def quadrantRotate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def quadrantRotate(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setTransform(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	@overload
	def setTransform(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def inverseTransform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def inverseTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def setToShear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getTranslateY(self, ) -> Union[float, JDouble]: ...
	def getTranslateX(self, ) -> Union[float, JDouble]: ...
	def getDeterminant(self, ) -> Union[float, JDouble]: ...
	def shear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def invert(self, ) -> None: ...
	@overload
	@staticmethod
	def getQuadrantRotateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getQuadrantRotateInstance(arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def createInverse(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getScaleY(self, ) -> Union[float, JDouble]: ...
	def getShearX(self, ) -> Union[float, JDouble]: ...
	def getScaleX(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getTranslateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getShearY(self, ) -> Union[float, JDouble]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def setToScale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.AffineTransform2D: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setToTranslation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def deltaTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def deltaTransform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def getShearInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


class GeneralMatrix:
	@overload
	def __init__(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], *arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.Envelope, arg1: javawrappers.org.opengis.geometry.Envelope, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.referencing.cs.AxisDirection, 1), arg1: JArray(javawrappers.org.opengis.referencing.cs.AxisDirection, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.Envelope, arg1: JArray(javawrappers.org.opengis.referencing.cs.AxisDirection, 1), arg2: javawrappers.org.opengis.geometry.Envelope, arg3: JArray(javawrappers.org.opengis.referencing.cs.AxisDirection, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.AffineTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def copySubMatrix(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix, ) -> None: ...
	def notify(self, ) -> None: ...
	def setColumn(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def toAffineTransform2D(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def setSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def load(arg0: javawrappers.java.io.File, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	@overload
	@staticmethod
	def load(arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.util.Locale, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getColumn(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setRow(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def multiply(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	def set(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def invert(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def isAffine(self, ) -> Union[int, JBoolean]: ...
	def determinate(self, ) -> Union[float, JDouble]: ...
	def getRow(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def negate(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def negate(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getElements(arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@overload
	def getElements(self, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setZero(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setIdentity(self, ) -> None: ...
	@overload
	def transpose(self, ) -> None: ...
	@overload
	def transpose(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


class Matrix3:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.AffineTransform, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isNaN(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setColumn(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def toAffineTransform2D(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def equalsAffine(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getColumn(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setRow(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def setMatrix(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def multiply(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	def set(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def invert(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def isAffine(self, ) -> Union[int, JBoolean]: ...
	def determinate(self, ) -> Union[float, JDouble]: ...
	def getRow(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def negate(self, ) -> None: ...
	@overload
	def negate(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.Matrix3: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def setZero(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setIdentity(self, ) -> None: ...
	@overload
	def transpose(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def transpose(self, ) -> None: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


class Matrix1:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def sub(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def sub(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumRow(self, ) -> Union[int, JInt]: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], arg1: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def mul(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setColumn(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getColumn(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def setRow(self, arg0: Union[int, JInt], *arg1: Union[float, JDouble], ) -> None: ...
	def setElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def multiply(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.geotools.referencing.operation.matrix.XMatrix, ) -> None: ...
	@overload
	def invert(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def isAffine(self, ) -> Union[int, JBoolean]: ...
	def determinate(self, ) -> Union[float, JDouble]: ...
	def getRow(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getElement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def negate(self, ) -> None: ...
	@overload
	def negate(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.Matrix1: ...
	def setZero(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setIdentity(self, ) -> None: ...
	@overload
	def transpose(self, ) -> None: ...
	@overload
	def transpose(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def getNumCol(self, ) -> Union[int, JInt]: ...


