################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.awt.geom
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.geotools.factory
import javawrappers.au.com.objectix.jgridshift
import javawrappers.org.opengis.metadata.citation
import javawrappers.org.geotools.referencing.factory.gridshift

from jpype.types import *
from typing import Union

from typing import overload

class GridShiftLocator:
	def locateGrid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class DataUtilities:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def urlToFile(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.io.File: ...
	@staticmethod
	def fileToURL(arg0: javawrappers.java.io.File, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ClasspathGridShiftLocator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def locateGrid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def notify(self, ) -> None: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class NTv2GridShiftFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createNTv2Grid(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.au.com.objectix.jgridshift.GridShiftFile: ...
	def notify(self, ) -> None: ...
	def isNTv2Grid(self, arg0: javawrappers.java.net.URL, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class NADCONGridShiftFactory:
	def __init__(self, ): ...
	class NADCONKey:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def loadGridShift(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.referencing.factory.gridshift.NADConGridShift: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class NADConGridShift:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[int, JInt], arg7: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPolynomialTransform(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeSingularities(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	def isNaN(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def getDy(self, ) -> Union[float, JDouble]: ...
	def isMonotonic(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getDx(self, ) -> Union[float, JDouble]: ...
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def transform(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getAffineTransform(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getLocalizationPoint(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.geom.Point2D: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setLocalizationPoint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def setLocalizationPoint(self, arg0: javawrappers.java.awt.Point, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


