################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.filter.expression
import javawrappers.org.geotools.filter.function.color

from jpype.types import *
from typing import Union

from typing import overload

class LightenFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class HSLFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AbstractHSLFunction:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class Method:
		absolute: AbstractHSLFunction.Method = ...
		relative: AbstractHSLFunction.Method = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.function.color.AbstractHSLFunction.Method: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.filter.function.color.AbstractHSLFunction.Method, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.function.color.AbstractHSLFunction.Method: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.filter.function.color.AbstractHSLFunction.Method, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DarkenFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class SpinFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MixFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ConstrastFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class DesaturateFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class GrayscaleFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TintFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ShadeFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class SaturateFunction:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


