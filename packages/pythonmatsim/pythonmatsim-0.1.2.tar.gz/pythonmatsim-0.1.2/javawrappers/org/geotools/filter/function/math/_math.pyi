################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.filter.expression

from jpype.types import *
from typing import Union

from typing import overload

class FilterFunction_max:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_toRadians:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_sin:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_round:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_max_4:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_asin:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_atan2:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_abs_2:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_exp:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_random:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_abs:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_min:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_min_2:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_toDegrees:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_max_3:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_IEEEremainder:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_max_2:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_tan:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ModuloFunction:
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.filter.expression.Literal, ): ...
	@overload
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_cos:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_acos:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_sqrt:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_abs_4:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_log:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_atan:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_pow:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def getArgCount(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_rint:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_ceil:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_min_3:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PiFunction:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_round_2:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_abs_3:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_floor:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFunction_min_4:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


