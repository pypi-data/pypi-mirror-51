################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.filter.capability
import javawrappers.org.opengis.feature.type

from jpype.types import *
from typing import Union

from typing import overload

class IdCapabilitiesImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.IdCapabilities, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasEID(self, ) -> Union[int, JBoolean]: ...
	def hasFID(self, ) -> Union[int, JBoolean]: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.IdCapabilities, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEid(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setFID(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class OperatorImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.Operator, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SpatialCapabiltiesImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.filter.capability.SpatialOperators, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), arg1: javawrappers.org.opengis.filter.capability.SpatialOperators, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.SpatialCapabilities, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getSpatialOperators(self, ) -> javawrappers.org.geotools.filter.capability.SpatialOperatorsImpl: ...
	@overload
	def getSpatialOperators(self, ) -> javawrappers.org.opengis.filter.capability.SpatialOperators: ...
	def setSpatialOperators(self, arg0: javawrappers.org.geotools.filter.capability.SpatialOperatorsImpl, ) -> None: ...
	def getGeometryOperands(self, ) -> javawrappers.java.util.Collection: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.SpatialCapabilities, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setGeometryOperands(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class SpatialOperatorImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.SpatialOperator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getGeometryOperands(self, ) -> javawrappers.java.util.Collection: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.SpatialOperator, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setGeometryOperands(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class ScalarCapabilitiesImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, arg1: javawrappers.org.opengis.filter.capability.ArithmeticOperators, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.ScalarCapabilities, ): ...
	@overload
	def getComparisonOperators(self, ) -> javawrappers.org.geotools.filter.capability.ComparisonOperatorsImpl: ...
	@overload
	def getComparisonOperators(self, ) -> javawrappers.org.opengis.filter.capability.ComparisonOperators: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setArithmeticOperators(self, arg0: javawrappers.org.geotools.filter.capability.ArithmeticOperatorsImpl, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setComparisonOperators(self, arg0: javawrappers.org.geotools.filter.capability.ComparisonOperatorsImpl, ) -> None: ...
	@overload
	def getArithmeticOperators(self, ) -> javawrappers.org.opengis.filter.capability.ArithmeticOperators: ...
	@overload
	def getArithmeticOperators(self, ) -> javawrappers.org.geotools.filter.capability.ArithmeticOperatorsImpl: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.ScalarCapabilities, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def toComparisonOperatorsImpl(arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, ) -> javawrappers.org.geotools.filter.capability.ComparisonOperatorsImpl: ...
	def setLogicalOperators(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasLogicalOperators(self, ) -> Union[int, JBoolean]: ...


class TemporalCapabilitiesImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.TemporalCapabilities, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.TemporalOperators, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTemporalOperators(self, ) -> javawrappers.org.opengis.filter.capability.TemporalOperators: ...
	def notify(self, ) -> None: ...


class FunctionsImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.filter.capability.FunctionName, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.Functions, ): ...
	def getFunctionName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.Functions, ) -> None: ...
	def getFunctionNames(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setFunctionNames(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FunctionNameImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.parameter.Parameter, *arg2: javawrappers.org.opengis.parameter.Parameter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.parameter.Parameter, *arg2: javawrappers.org.opengis.parameter.Parameter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.org.opengis.parameter.Parameter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.parameter.Parameter, arg2: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.parameter.Parameter, arg2: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, *arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.org.opengis.parameter.Parameter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.FunctionName, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getReturn(self, ) -> javawrappers.org.opengis.parameter.Parameter: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getArgumentCount(self, ) -> Union[int, JInt]: ...
	def getArgumentNames(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def parameter(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.org.opengis.parameter.Parameter: ...
	@overload
	@staticmethod
	def parameter(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.Parameter: ...
	@overload
	@staticmethod
	def parameter(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.parameter.Parameter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getArguments(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TemporalOperatorImpl:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTemporalOperands(self, ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...


class ComparisonOperatorsImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.filter.capability.Operator, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setOperators(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getOperators(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getOperator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.Operator: ...


class ArithmeticOperatorsImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], arg1: javawrappers.org.opengis.filter.capability.Functions, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.ArithmeticOperators, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setSimpleArithmetic(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.ArithmeticOperators, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getFunctions(self, ) -> javawrappers.org.opengis.filter.capability.Functions: ...
	@overload
	def getFunctions(self, ) -> javawrappers.org.geotools.filter.capability.FunctionsImpl: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def hasSimpleArithmetic(self, ) -> Union[int, JBoolean]: ...


class FilterCapabilitiesImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.FilterCapabilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, arg4: javawrappers.org.opengis.filter.capability.TemporalCapabilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, ): ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTemporalCapabilities(self, ) -> javawrappers.org.opengis.filter.capability.TemporalCapabilities: ...
	def setScalar(self, arg0: javawrappers.org.opengis.filter.capability.ScalarCapabilities, ) -> None: ...
	def setVersion(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setTemporal(self, arg0: javawrappers.org.geotools.filter.capability.TemporalCapabilitiesImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.FilterCapabilities, ) -> None: ...
	@overload
	def getSpatialCapabilities(self, ) -> javawrappers.org.geotools.filter.capability.SpatialCapabiltiesImpl: ...
	@overload
	def getSpatialCapabilities(self, ) -> javawrappers.org.opengis.filter.capability.SpatialCapabilities: ...
	def setSpatial(self, arg0: javawrappers.org.opengis.filter.capability.SpatialCapabilities, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getScalarCapabilities(self, ) -> javawrappers.org.opengis.filter.capability.ScalarCapabilities: ...
	@overload
	def getScalarCapabilities(self, ) -> javawrappers.org.geotools.filter.capability.ScalarCapabilitiesImpl: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getIdCapabilities(self, ) -> javawrappers.org.geotools.filter.capability.IdCapabilitiesImpl: ...
	@overload
	def getIdCapabilities(self, ) -> javawrappers.org.opengis.filter.capability.IdCapabilities: ...
	def setId(self, arg0: javawrappers.org.opengis.filter.capability.IdCapabilities, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TemporalOperatorsImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getOperators(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getOperator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.TemporalOperator: ...


class SpatialOperatorsImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.filter.capability.SpatialOperator, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.SpatialOperators, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setOperators(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getOperators(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.SpatialOperators, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getOperator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.SpatialOperator: ...


