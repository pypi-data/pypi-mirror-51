################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.lang
import javawrappers.org.opengis.filter.expression

from jpype.types import *
from typing import Union

from typing import overload

class DuringImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BeforeImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TContainsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class EndsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TEqualsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class EndedByImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BinaryTemporalOperatorImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AfterImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AnyInteractsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class OverlappedByImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BegunByImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MeetsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BeginsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MetByImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TOverlapsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


