################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.java.lang
import javawrappers.org.matsim.utils.objectattributes
import javawrappers.java.net
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.java.io
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.xml.sax
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ActivityOption:
	def getOpeningTimes(self, ) -> javawrappers.java.util.SortedSet: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	def addOpeningTime(self, arg0: javawrappers.org.matsim.facilities.OpeningTime, ) -> None: ...
	def getCapacity(self, ) -> Union[float, JDouble]: ...


class ActivityFacilitiesFactory:
	def createActivityOption(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.facilities.ActivityOption: ...
	@overload
	def createActivityFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	@overload
	def createActivityFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	@overload
	def createActivityFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...


class ActivityFacilitiesFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createActivityOption(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.facilities.ActivityOption: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def createActivityFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	@overload
	def createActivityFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	@overload
	def createActivityFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	def notify(self, ) -> None: ...


class ActivityFacilities:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getFacilityAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.ObjectAttributes: ...
	def getFacilities(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.facilities.ActivityFacilitiesFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	def addActivityFacility(self, arg0: javawrappers.org.matsim.facilities.ActivityFacility, ) -> None: ...
	def getFacilitiesForActivityType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.TreeMap: ...


class MatsimFacilitiesReader:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def putAttributeConverters(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def putAttributeConverter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.matsim.utils.objectattributes.AttributeConverter, ) -> None: ...


class ActivityOptionImpl:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getOpeningTimes(self, ) -> javawrappers.java.util.SortedSet: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addOpeningTime(self, arg0: javawrappers.org.matsim.facilities.OpeningTime, ) -> None: ...
	def notify(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clearOpeningTimes(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	def setOpeningTimes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getCapacity(self, ) -> Union[float, JDouble]: ...


class FacilitiesFromPopulation:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setRemoveLinksAndCoordinates(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	def notify(self, ) -> None: ...
	def setAddEmptyActivityOptions(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setOneFacilityPerLink(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIdPrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def assignOpeningTimes(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup, ) -> None: ...
	def setAssignLinksToFacilitiesIfMissing(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...


class OpeningTimeImpl:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	class TimeRelation:
		START_AND_END_BEFORE: OpeningTimeImpl.TimeRelation = ...
		START_AND_END_AFTER: OpeningTimeImpl.TimeRelation = ...
		START_AND_END_WITHIN: OpeningTimeImpl.TimeRelation = ...
		START_BEFORE_END_WITHIN: OpeningTimeImpl.TimeRelation = ...
		START_WITHIN_END_AFTER: OpeningTimeImpl.TimeRelation = ...
		START_BEFORE_END_AFTER: OpeningTimeImpl.TimeRelation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.facilities.OpeningTimeImpl.TimeRelation: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.facilities.OpeningTimeImpl.TimeRelation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.facilities.OpeningTimeImpl.TimeRelation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.facilities.OpeningTimeImpl.TimeRelation, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.facilities.OpeningTime, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getEndTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setEndTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setStartTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getStartTime(self, ) -> Union[float, JDouble]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SearchableActivityFacilities:
	def getNearestFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	def getNearestFacilities(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...


class Facility:
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


class OpeningTime:
	def getEndTime(self, ) -> Union[float, JDouble]: ...
	def setEndTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def setStartTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getStartTime(self, ) -> Union[float, JDouble]: ...


class ActivityFacility:
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getActivityOptions(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def addActivityOption(self, arg0: javawrappers.org.matsim.facilities.ActivityOption, ) -> None: ...


class FacilitiesWriter:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg1: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeV1(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAttributeConverters(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def notify(self, ) -> None: ...
	def putAttributeConverter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.matsim.utils.objectattributes.AttributeConverter, ) -> None: ...


class ActivityFacilitiesImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def createAndAddFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.facilities.ActivityFacilityImpl: ...
	@overload
	def createAndAddFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.facilities.ActivityFacilityImpl: ...
	def getFacilities(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.facilities.ActivityFacilitiesFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	def notify(self, ) -> None: ...
	def getNearestFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.facilities.ActivityFacility: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFacilityAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.ObjectAttributes: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNearestFacilities(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...
	def addActivityFacility(self, arg0: javawrappers.org.matsim.facilities.ActivityFacility, ) -> None: ...
	def getFacilitiesForActivityType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.TreeMap: ...


class FacilitiesUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def decideOnLink(arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def wrapLink(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.facilities.Facility: ...
	@staticmethod
	def decideOnCoord(arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@staticmethod
	def setLinkID(arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getSortedFacilities(arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ) -> javawrappers.java.util.SortedMap: ...
	@overload
	@staticmethod
	def createActivityFacilities(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.facilities.ActivityFacilities: ...
	@overload
	@staticmethod
	def createActivityFacilities() -> javawrappers.org.matsim.facilities.ActivityFacilities: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def wrapActivity(arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.facilities.Facility: ...
	@staticmethod
	def toFacility(arg0: javawrappers.org.matsim.api.core.v01.population.Activity, arg1: javawrappers.org.matsim.facilities.ActivityFacilities, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ActivityFacilityImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def setLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getActivityOptions(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def createAndAddActivityOption(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.facilities.ActivityOptionImpl: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def addActivityOption(self, arg0: javawrappers.org.matsim.facilities.ActivityOption, ) -> None: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def calcDistance(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDesc(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDesc(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


