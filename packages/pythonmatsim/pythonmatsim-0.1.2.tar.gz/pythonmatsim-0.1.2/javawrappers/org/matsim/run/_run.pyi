################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.households
import javawrappers.org.matsim.lanes
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.vis.snapshotwriters
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class XY2Links:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class CreateFullConfig:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class ReleaseInfo:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class Events2Snapshot:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.matsim.core.config.Config, arg2: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	@overload
	def run(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def addExternalSnapshotWriter(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.SnapshotWriter, ) -> None: ...
	def notify(self, ) -> None: ...


class InitRoutes:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class CreateSelectedPlansTables:
	def __init__(self, ): ...
	class PseudoScenario:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.api.core.v01.population.Population, ): ...
		def getPopulation(self, ) -> javawrappers.org.matsim.api.core.v01.population.Population: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getHouseholds(self, ) -> javawrappers.org.matsim.households.Households: ...
		def getLanes(self, ) -> javawrappers.org.matsim.lanes.Lanes: ...
		def getActivityFacilities(self, ) -> javawrappers.org.matsim.facilities.ActivityFacilities: ...
		def notify(self, ) -> None: ...
		def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
		def getVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getTransitVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
		def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addScenarioElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def createCoord(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
		def getScenarioElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def getTransitSchedule(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...


	def getPopulation(self, ) -> javawrappers.org.matsim.api.core.v01.population.Population: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTwoPlans(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getHouseholds(self, ) -> javawrappers.org.matsim.households.Households: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getLanes(self, ) -> javawrappers.org.matsim.lanes.Lanes: ...
	def getActivityFacilities(self, ) -> javawrappers.org.matsim.facilities.ActivityFacilities: ...
	def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
	def notify(self, ) -> None: ...
	def getVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	def getTransitVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addScenarioElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def createCoord(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getScenarioElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getTransitSchedule(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...


class ConvertOldPlanCalcScoreConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class Controler:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setOverwriteFiles(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getScenario(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class TeleAtlas2Network:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def convert() -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def notify(self, ) -> None: ...


class NetworkCleaner:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


