################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.vis.snapshotwriters
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.org.matsim.core.utils.geometry
import javawrappers.org.matsim.lanes
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.core.utils.collections
import javawrappers.org.matsim.api.core.v01
import javawrappers.javax.xml.bind

from jpype.types import *
from typing import Union

from typing import overload

class LanesConsistencyChecker:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.lanes.Lanes, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isRemoveMalformed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def checkConsistency(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setRemoveMalformed(self, arg0: Union[int, JBoolean], ) -> None: ...


class VisLane:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setAlignment(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addSignal(self, arg0: javawrappers.org.matsim.lanes.VisSignal, ) -> None: ...
	def getStartCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def getEuklideanDistance(self, ) -> Union[float, JDouble]: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def setEndPosition(self, arg0: Union[float, JDouble], ) -> None: ...
	def getSignals(self, ) -> javawrappers.java.util.Map: ...
	def setSignalGroupState(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSignalGroupState(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState: ...
	def getAlignment(self, ) -> Union[int, JInt]: ...
	def addToLane(self, arg0: javawrappers.org.matsim.lanes.VisLane, ) -> None: ...
	def getToLinks(self, ) -> javawrappers.java.util.List: ...
	def getDrivingLaneStartEndCoord(self, arg0: Union[int, JInt], ) -> javawrappers.org.matsim.core.utils.collections.Tuple: ...
	def getStartPoint(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def addToLinkId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	def getEndPosition(self, ) -> Union[float, JDouble]: ...
	def addDrivingLane(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.geom.Point2D.Double, arg2: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def getStartPosition(self, ) -> Union[float, JDouble]: ...
	def getToLanes(self, ) -> javawrappers.java.util.List: ...
	def setStartPosition(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEndPoint(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def getToLinkIds(self, ) -> javawrappers.java.util.List: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEndCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def setStartEndPoint(self, arg0: javawrappers.java.awt.geom.Point2D.Double, arg1: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addToLink(self, arg0: javawrappers.org.matsim.lanes.VisLinkWLanes, ) -> None: ...


class LanesFactory:
	def createLane(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.lanes.Lane: ...
	def createLanesToLinkAssignment(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.lanes.LanesToLinkAssignment: ...


class VisLinkWLanes:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addSignal(self, arg0: javawrappers.org.matsim.lanes.VisSignal, ) -> None: ...
	def getMaximalAlignment(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getEuklideanDistance(self, ) -> Union[float, JDouble]: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def getLinkWidth(self, ) -> Union[float, JDouble]: ...
	def setLinkWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def getSignals(self, ) -> javawrappers.java.util.Map: ...
	def getLinkStartCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getLinkEnd(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def setMaximalAlignment(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLaneData(self, ) -> javawrappers.java.util.Map: ...
	def setLinkStartCenterPoint(self, arg0: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def getLinkEndCenterPoint(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def setLinkOrthogonalVector(self, arg0: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def setLinkStartEndPoint(self, arg0: javawrappers.java.awt.geom.Point2D.Double, arg1: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def getLinkStart(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def getToLinks(self, ) -> javawrappers.java.util.List: ...
	def setLinkEndCenterPoint(self, arg0: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def addToLinkId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	def getLinkEndCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def setNormalizedLinkVector(self, arg0: javawrappers.java.awt.geom.Point2D.Double, ) -> None: ...
	def getNormalizedLinkVector(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def getLinkStartCenterPoint(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...
	def getToLinkIds(self, ) -> javawrappers.java.util.List: ...
	def getLinkId(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addLaneData(self, arg0: javawrappers.org.matsim.lanes.VisLane, ) -> None: ...
	def addToLink(self, arg0: javawrappers.org.matsim.lanes.VisLinkWLanes, ) -> None: ...
	def getLinkOrthogonalVector(self, ) -> javawrappers.java.awt.geom.Point2D.Double: ...


class VisSignal:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSignalSystemId(self, ) -> javawrappers.java.lang.String: ...
	def getTurningMoveRestrictions(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addTurningMoveRestriction(self, arg0: javawrappers.org.matsim.lanes.VisLinkWLanes, ) -> None: ...
	def setState(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def getSignalGroupState(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState: ...
	def notify(self, ) -> None: ...


class LanesToLinkAssignment:
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def addLane(self, arg0: javawrappers.org.matsim.lanes.Lane, ) -> None: ...
	def getLanes(self, ) -> javawrappers.java.util.SortedMap: ...


class LanesWriter:
	def __init__(self, arg0: javawrappers.org.matsim.lanes.Lanes, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setMarshallerProperties(arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.xml.bind.Marshaller, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class VisLaneModelBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def recalculatePositions(self, arg0: javawrappers.org.matsim.lanes.VisLinkWLanes, arg1: javawrappers.org.matsim.vis.snapshotwriters.SnapshotLinkWidthCalculator, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createVisLinkLanes(self, arg0: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg1: javawrappers.org.matsim.vis.snapshotwriters.VisLink, arg2: Union[float, JDouble], arg3: javawrappers.java.util.List, ) -> javawrappers.org.matsim.lanes.VisLinkWLanes: ...
	def notify(self, ) -> None: ...
	def connect(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def calcPoint(self, arg0: javawrappers.java.awt.geom.Point2D.Double, arg1: javawrappers.java.awt.geom.Point2D.Double, arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Point2D.Double: ...


class ModelLane:
	def getToLanes(self, ) -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLaneData(self, ) -> javawrappers.org.matsim.lanes.Lane: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Lanes:
	def addLanesToLinkAssignment(self, arg0: javawrappers.org.matsim.lanes.LanesToLinkAssignment, ) -> None: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.lanes.LanesFactory: ...
	def getLanesToLinkAssignments(self, ) -> javawrappers.java.util.SortedMap: ...


class LanesReader:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def notify(self, ) -> None: ...


class LanesUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overwriteLaneCapacitiesByNetworkCapacities(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.lanes.Lanes, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def createLanes(arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.lanes.LanesToLinkAssignment, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def createAndAddLane(arg0: javawrappers.org.matsim.lanes.LanesToLinkAssignment, arg1: javawrappers.org.matsim.lanes.LanesFactory, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.util.List, arg8: javawrappers.java.util.List, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def calculateMissingCapacitiesForLanes20(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def calculateAndSetCapacity(arg0: javawrappers.org.matsim.lanes.Lane, arg1: Union[int, JBoolean], arg2: javawrappers.org.matsim.api.core.v01.network.Link, arg3: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createOriginalLanesAndSetLaneCapacities(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.lanes.Lanes, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createLanesContainer() -> javawrappers.org.matsim.lanes.Lanes: ...


class Lane:
	def getAlignment(self, ) -> Union[int, JInt]: ...
	def setAlignment(self, arg0: Union[int, JInt], ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def addToLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def addToLaneId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setStartsAtMeterFromLinkEnd(self, arg0: Union[float, JDouble], ) -> None: ...
	def getToLaneIds(self, ) -> javawrappers.java.util.List: ...
	def getToLinkIds(self, ) -> javawrappers.java.util.List: ...
	def getCapacityVehiclesPerHour(self, ) -> Union[float, JDouble]: ...
	def getStartsAtMeterFromLinkEnd(self, ) -> Union[float, JDouble]: ...
	def setNumberOfRepresentedLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def setCapacityVehiclesPerHour(self, arg0: Union[float, JDouble], ) -> None: ...
	def getNumberOfRepresentedLanes(self, ) -> Union[float, JDouble]: ...


