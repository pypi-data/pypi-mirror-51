################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.jaxb.lanedefinitions20
import javawrappers.java.math
import javawrappers.javax.xml.bind

from jpype.types import *
from typing import Union

from typing import overload

class ObjectFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createXMLMatsimTimeAttributeType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLMatsimTimeAttributeType: ...
	def notifyAll(self, ) -> None: ...
	def createXMLFacilityId(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLFacilityId: ...
	def createXMLLaneTypeXMLLeadsTo(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLLeadsTo: ...
	def notify(self, ) -> None: ...
	def createXMLLanesToLinkAssignmentType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLanesToLinkAssignmentType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createXMLLaneTypeXMLRepresentedLanes(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLRepresentedLanes: ...
	def createXMLLaneType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType: ...
	def createXMLCoordinateType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLCoordinateType: ...
	def createXMLLaneDefinitions(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneDefinitions: ...
	def createXMLMatsimObjectType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLMatsimObjectType: ...
	def createXMLActLocationType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLActLocationType: ...
	def createXMLMatsimParameterType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLMatsimParameterType: ...
	def createXMLAttributeType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLAttributeType: ...
	def createXMLLaneTypeXMLCapacity(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLCapacity: ...
	def createXMLLaneTypeXMLAttributes(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLAttributes: ...
	def createXMLLinkId(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLinkId: ...
	def createXMLLocation(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLocation: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createXMLIdRefType(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLIdRefType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createCoordinate(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLCoordinateType, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	def createXMLLaneTypeXMLStartsAt(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLStartsAt: ...


class XMLMatsimTimeAttributeType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSeconds(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setSeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMLFacilityId:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRefId(self, ) -> javawrappers.java.lang.String: ...
	def setRefId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class XMLLaneDefinitions:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLanesToLinkAssignment(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMLCoordinateType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getXCoord(self, ) -> javawrappers.java.math.BigDecimal: ...
	def setYCoord(self, arg0: javawrappers.java.math.BigDecimal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getYCoord(self, ) -> javawrappers.java.math.BigDecimal: ...
	def setXCoord(self, arg0: javawrappers.java.math.BigDecimal, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMLLanesToLinkAssignmentType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLane(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLinkIdRef(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setLinkIdRef(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class XMLLinkId:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRefId(self, ) -> javawrappers.java.lang.String: ...
	def setRefId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class XMLAttributeType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.java.lang.String: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	def getClazz(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setClazz(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class XMLMatsimParameterType:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMLLaneType:
	def __init__(self, ): ...
	class XMLAttributes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getAttributeList(self, ) -> javawrappers.java.util.List: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class XMLStartsAt:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getMeterFromLinkEnd(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setMeterFromLinkEnd(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
		def notify(self, ) -> None: ...


	class XMLRepresentedLanes:
		def __init__(self, ): ...
		def getNumber(self, ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def setNumber(self, arg0: javawrappers.java.lang.Double, ) -> None: ...


	class XMLLeadsTo:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getToLink(self, ) -> javawrappers.java.util.List: ...
		def getToLane(self, ) -> javawrappers.java.util.List: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class XMLCapacity:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getVehiclesPerHour(self, ) -> Union[float, JDouble]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setVehiclesPerHour(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getVehiclesPerHour(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setAlignment(self, arg0: Union[int, JInt], ) -> None: ...
	def getToLink(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMeterFromLinkEnd(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def setAttributes(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLAttributes, ) -> None: ...
	def setRepresentedLanes(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLRepresentedLanes, ) -> None: ...
	def getStartsAt(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLStartsAt: ...
	def notify(self, ) -> None: ...
	def setLeadsTo(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLLeadsTo, ) -> None: ...
	def getNumber(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributeList(self, ) -> javawrappers.java.util.List: ...
	def setId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAlignment(self, ) -> Union[int, JInt]: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLAttributes: ...
	def setVehiclesPerHour(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def getRepresentedLanes(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLRepresentedLanes: ...
	def setStartsAt(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLStartsAt, ) -> None: ...
	def setMeterFromLinkEnd(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setNumber(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def getLeadsTo(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLLeadsTo: ...
	def getToLane(self, ) -> javawrappers.java.util.List: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLCapacity, ) -> None: ...
	def getCapacity(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLaneType.XMLCapacity: ...


class XMLLocation:
	def __init__(self, ): ...
	def getActLocation(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLActLocationType: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLCoordinateType: ...
	def setActLocation(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLActLocationType, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCoordinate(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLCoordinateType, ) -> None: ...
	def notify(self, ) -> None: ...


class XMLActLocationType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFacilityId(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLFacilityId, ) -> None: ...
	def setLinkId(self, arg0: javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLinkId, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLLinkId: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFacilityId(self, ) -> javawrappers.org.matsim.jaxb.lanedefinitions20.XMLFacilityId: ...
	def notify(self, ) -> None: ...


class XMLMatsimObjectType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMLIdRefType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRefId(self, ) -> javawrappers.java.lang.String: ...
	def setRefId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


