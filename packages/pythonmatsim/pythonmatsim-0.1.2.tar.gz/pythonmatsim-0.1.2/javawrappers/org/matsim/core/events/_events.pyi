################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.api.core.v01.events
import javawrappers.java.util
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.java.lang
import javawrappers.org.matsim.utils.eventsfilecomparison
import javawrappers.com.google.inject
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.xml.sax
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.core.events.handler
import javawrappers.org.matsim.core.events

from jpype.types import *
from typing import Union

from typing import overload

class ParallelEventsManager:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], ): ...
	class ExceptionHandler:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	class ProcessedEventsChecker:
		def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg1: javawrappers.java.util.Queue, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def allEventsProcessed(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def setTime(self, arg0: Union[float, JDouble], ) -> None: ...


	class ProcessEventsRunnable:
		def __init__(self, arg0: javawrappers.org.matsim.core.events.ParallelEventsManager, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg2: javawrappers.org.matsim.core.events.ParallelEventsManager.ProcessedEventsChecker, arg3: javawrappers.java.util.concurrent.Phaser, arg4: javawrappers.java.util.concurrent.Phaser, arg5: javawrappers.java.util.concurrent.Phaser, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class Distributor:
		def __init__(self, arg0: javawrappers.org.matsim.core.events.ParallelEventsManager, arg1: JArray(javawrappers.org.matsim.core.events.ParallelEventsManager.ProcessEventsRunnable, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def processEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def processEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	@overload
	def processEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	def removeHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	def notify(self, ) -> None: ...
	def afterSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def resetHandlers(self, arg0: Union[int, JInt], ) -> None: ...
	def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def allEventsProcessed(self, ) -> Union[int, JBoolean]: ...
	def initProcessing(self, ) -> None: ...
	def setTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def finishProcessing(self, ) -> None: ...


class SingleHandlerEventsManager:
	def __init__(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ): ...
	class HandlerInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEventHandlerClassName(self, ) -> javawrappers.java.lang.String: ...
	def getEventHandler(self, ) -> javawrappers.org.matsim.core.events.handler.EventHandler: ...
	def notifyAll(self, ) -> None: ...
	def processEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def removeHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	def notify(self, ) -> None: ...
	def deactivate(self, ) -> None: ...
	def afterSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def resetHandlers(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def initProcessing(self, ) -> None: ...
	def finishProcessing(self, ) -> None: ...


class ParallelEventsManagerImpl:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class ExceptionHandler:
		def __init__(self, arg0: javawrappers.java.util.concurrent.atomic.AtomicBoolean, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def processEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def removeHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	def notify(self, ) -> None: ...
	def afterSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def resetHandlers(self, arg0: Union[int, JInt], ) -> None: ...
	def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def initProcessing(self, ) -> None: ...
	def finishProcessing(self, ) -> None: ...


class EventsManagerImpl:
	def __init__(self, ): ...
	class HandlerInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class HandlerData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def processEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def removeHandler(self, arg0: javawrappers.org.matsim.core.events.handler.EventHandler, ) -> None: ...
	def notify(self, ) -> None: ...
	def afterSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def resetHandlers(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def initProcessing(self, ) -> None: ...
	def printEventHandlers(self, ) -> None: ...
	def finishProcessing(self, ) -> None: ...


class LastEventOfIteration:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getEventType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class EventsReaderTXT:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def runEventsFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MatsimEventsReader:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	class XmlEventsReader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
		def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
		def notify(self, ) -> None: ...
		def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
		def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
		def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
		def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
		def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
		def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
		def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
		def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
		@overload
		def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
		@overload
		def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
		@overload
		def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
		def endDocument(self, ) -> None: ...
		def startDocument(self, ) -> None: ...
		def getDoctype(self, ) -> javawrappers.java.lang.String: ...
		def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def readStream(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	@overload
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def addCustomEventMapper(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.events.EventsReaderXMLv1.CustomEventMapper, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class EventsReaderXMLv1:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	class CustomEventMapper:
		def apply(self, arg0: javawrappers.org.matsim.api.core.v01.events.GenericEvent, ) -> javawrappers.org.matsim.api.core.v01.events.Event: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def apply(self, arg0: javawrappers.org.matsim.api.core.v01.events.GenericEvent, ) -> javawrappers.org.matsim.api.core.v01.events.Event: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def addCustomEventMapper(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.events.EventsReaderXMLv1.CustomEventMapper, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class EventsUtils:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def createEventsManager(arg0: javawrappers.org.matsim.core.config.Config, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	@overload
	@staticmethod
	def createEventsManager() -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def compareEventsFiles(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.utils.eventsfilecomparison.EventsFileComparator.Result: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getParallelFeedableInstance(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def readEvents(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class EventsConverterXML:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class EventsManagerModule:
	def __init__(self, ): ...
	class EventHandlerRegistrator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class LastEventOfSimStep:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getEventType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


