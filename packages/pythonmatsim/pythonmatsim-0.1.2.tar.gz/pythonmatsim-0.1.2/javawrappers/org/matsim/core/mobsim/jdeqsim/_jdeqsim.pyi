################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01
import javawrappers.org.matsim.core.mobsim.jdeqsim

from jpype.types import *
from typing import Union

from typing import overload

class EventLog:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def compare(arg0: javawrappers.java.util.ArrayList, arg1: javawrappers.java.util.ArrayList, ) -> Union[int, JBoolean]: ...
	def getLegNo(self, ) -> Union[int, JInt]: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def setToNodeId(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def absAverageLinkDiff(arg0: javawrappers.java.util.ArrayList, arg1: javawrappers.java.util.ArrayList, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getToNodeId(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setVehicleId(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getTravelTime(arg0: javawrappers.java.util.ArrayList, arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getVehicleId(self, ) -> Union[int, JInt]: ...
	def setTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLegNo(self, arg0: Union[int, JInt], ) -> None: ...
	def setLinkId(self, arg0: Union[int, JInt], ) -> None: ...
	def setType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def filterEvents(arg0: Union[int, JInt], arg1: javawrappers.java.util.ArrayList, arg2: javawrappers.java.util.ArrayList, ) -> None: ...
	def getFromNodeId(self, ) -> Union[int, JInt]: ...
	@overload
	def print_(self, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.util.ArrayList, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def getLinkId(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.EventLog, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.EventLog, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setFromNodeId(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getSumTravelTime(arg0: javawrappers.java.util.ArrayList, ) -> Union[float, JDouble]: ...


class EndRoadMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class JDEQSimConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getStorageCapacityFactor(self, ) -> Union[float, JDouble]: ...
	def setCarSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def getSqueezeTime(self, ) -> Union[float, JDouble]: ...
	def getSimulationEndTimeAsString(self, ) -> javawrappers.java.lang.String: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@staticmethod
	def isGC_MESSAGES() -> Union[int, JBoolean]: ...
	def setFlowCapacityFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def setGC_MESSAGES(arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setSimulationEndTime(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSimulationEndTime(self, ) -> Union[float, JDouble]: ...
	def getGapTravelSpeed(self, ) -> Union[float, JDouble]: ...
	def setStorageCapacityFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def setGapTravelSpeed(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getFlowCapacityFactor(self, ) -> Union[float, JDouble]: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setSqueezeTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMinimumInFlowCapacity(self, ) -> Union[float, JDouble]: ...
	def getCarSize(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def setMinimumInFlowCapacity(self, arg0: Union[float, JDouble], ) -> None: ...


class Road:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.api.core.v01.network.Link, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeFirstDeadlockPreventionMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.DeadlockPreventionMessage, ) -> None: ...
	def setTimeOfLastEnteringVehicle(self, arg0: Union[float, JDouble], ) -> None: ...
	def enterRoad(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, arg1: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def sendMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, arg2: Union[float, JDouble], ) -> None: ...
	def giveBackPromisedSpaceToRoad(self, ) -> None: ...
	def incrementPromisedToEnterRoad(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def setConfig(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.JDEQSimConfigGroup, ) -> None: ...
	@staticmethod
	def getRoad(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.Road: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def leaveRoad(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def enterRequest(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def getAllRoads() -> javawrappers.java.util.HashMap: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getScheduler(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler: ...
	def removeFromInterestedInEnteringRoad(self, ) -> None: ...
	@staticmethod
	def setAllRoads(arg0: javawrappers.java.util.HashMap, ) -> None: ...


class Vehicle:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.api.core.v01.population.Person, arg2: javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setLinkIndex(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOwnerPerson(self, ) -> javawrappers.org.matsim.api.core.v01.population.Person: ...
	def setLegIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getNextActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def setCurrentLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def initiateEndingLegMode(self, ) -> None: ...
	def getCurrentLeg(self, ) -> javawrappers.org.matsim.api.core.v01.population.Leg: ...
	def scheduleEndLegMessage(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Road, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def scheduleLeavePreviousRoadMessage(self, arg0: Union[float, JDouble], ) -> None: ...
	def getScheduler(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler: ...
	def moveToFirstLinkInNextLeg(self, ) -> None: ...
	def isEndingLegMode(self, ) -> Union[int, JBoolean]: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def scheduleEndRoadMessage(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Road, ) -> None: ...
	def getLinkIndex(self, ) -> Union[int, JInt]: ...
	def getPreviousActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def moveToNextLinkInLeg(self, ) -> None: ...
	def sendMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, arg2: Union[float, JDouble], ) -> None: ...
	def setCurrentLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def getLegIndex(self, ) -> Union[int, JInt]: ...
	def getActivityEndTimeInterpretation(self, ) -> javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation: ...
	def scheduleStartingLegMessage(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Road, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def initialize(self, ) -> None: ...
	def scheduleDeadlockPreventionMessage(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Road, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.DeadlockPreventionMessage: ...
	def scheduleEnterRoadMessage(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Road, ) -> None: ...
	def isCurrentLegFinished(self, ) -> Union[int, JBoolean]: ...
	def scheduleLeaveRoadMessage(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Road, ) -> None: ...


class MessageQueue:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getQueueSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNextMessage(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.Message: ...
	def putMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> None: ...
	def notify(self, ) -> None: ...
	def removeMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> None: ...


class SimUnit:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def sendMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, arg2: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getScheduler(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler: ...
	def notify(self, ) -> None: ...


class JDEQSimulation:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.JDEQSimConfigGroup, arg1: javawrappers.org.matsim.api.core.v01.Scenario, arg2: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	def notify(self, ) -> None: ...


class Scheduler:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.MessageQueue, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.MessageQueue, arg1: Union[float, JDouble], ): ...
	def getSimTime(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def schedule(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def startSimulation(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def unschedule(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> None: ...


class EventMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class EnterRoadMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class EndLegMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class MessageFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getEndRoadMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.EndRoadMessage: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getEndLegMessageQueue() -> javawrappers.java.util.LinkedList: ...
	@staticmethod
	def disposeStartingLegMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.StartingLegMessage, ) -> None: ...
	@staticmethod
	def disposeDeadlockPreventionMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.DeadlockPreventionMessage, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getStartingLegMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.StartingLegMessage: ...
	@staticmethod
	def getEndLegMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.EndLegMessage: ...
	@staticmethod
	def getEnterRoadMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.EnterRoadMessage: ...
	@staticmethod
	def GC_ALL_MESSAGES() -> None: ...
	@staticmethod
	def getLeaveRoadMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.LeaveRoadMessage: ...
	@staticmethod
	def disposeLeaveRoadMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.LeaveRoadMessage, ) -> None: ...
	@staticmethod
	def getEnterRoadMessageQueue() -> javawrappers.java.util.LinkedList: ...
	@staticmethod
	def getEndRoadMessageQueue() -> javawrappers.java.util.LinkedList: ...
	@staticmethod
	def getDeadlockPreventionMessageQueue() -> javawrappers.java.util.LinkedList: ...
	@staticmethod
	def getDeadlockPreventionMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.DeadlockPreventionMessage: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getLeaveRoadMessageQueue() -> javawrappers.java.util.LinkedList: ...
	@staticmethod
	def getStartingLegMessageQueue() -> javawrappers.java.util.LinkedList: ...
	@staticmethod
	def disposeEndLegMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.EndLegMessage, ) -> None: ...
	@staticmethod
	def disposeEndRoadMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.EndRoadMessage, ) -> None: ...
	@staticmethod
	def disposeEnterRoadMessage(arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.EnterRoadMessage, ) -> None: ...


class Message:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class DeadlockPreventionMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class StartingLegMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


class LeaveRoadMessage:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setReceivingUnit(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReceivingUnit(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.SimUnit: ...
	def notifyAll(self, ) -> None: ...
	def resetMessage(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Scheduler, arg1: javawrappers.org.matsim.core.mobsim.jdeqsim.Vehicle, ) -> None: ...
	def handleMessage(self, ) -> None: ...
	def processEvent(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.core.mobsim.jdeqsim.Message, ) -> Union[int, JInt]: ...
	def reviveMessage(self, ) -> None: ...
	@staticmethod
	def setEventsManager(arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> None: ...
	def notify(self, ) -> None: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setMessageArrivalTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMessageArrivalTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def killMessage(self, ) -> None: ...


