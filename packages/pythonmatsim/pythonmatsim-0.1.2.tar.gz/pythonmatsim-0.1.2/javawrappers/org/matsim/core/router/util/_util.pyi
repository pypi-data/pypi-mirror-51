################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.core.router.util
import javawrappers.java.util.function
import javawrappers.org.matsim.core.network
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TravelTime:
	def getLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...


class AbstractRoutingNetworkLink:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def getFreespeed(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFreespeed(self, ) -> Union[float, JDouble]: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFromNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def setFreespeed(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getFlowCapacityPerSec(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFlowCapacityPerSec(self, ) -> Union[float, JDouble]: ...
	def setToNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def getAllowedModes(self, ) -> javawrappers.java.util.Set: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	@overload
	def getNumberOfLanes(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def setAllowedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@overload
	def getCapacity(self, ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class NodeData:
	def isVisited(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getPrevLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def visit(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JInt], ) -> None: ...
	def getCost(self, ) -> Union[float, JDouble]: ...
	def resetVisited(self, ) -> None: ...


class RoutingNetwork:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getLinks(self, ) -> javawrappers.java.util.Map: ...
	def addNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> None: ...
	def getNodes(self, ) -> javawrappers.java.util.Map: ...
	def setEffectiveLaneWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getEffectiveCellSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.api.core.v01.network.NetworkFactory: ...
	def getCapacityPeriod(self, ) -> Union[float, JDouble]: ...
	def setCapacityPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEffectiveLaneWidth(self, ) -> Union[float, JDouble]: ...
	def initialize(self, ) -> None: ...
	def setEffectiveCellSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def addLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...


class ArrayRoutingNetworkFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def createRoutingNetworkNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def createRoutingNetworkNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.core.router.util.ArrayRoutingNetworkNode: ...
	def setLinkFactory(self, arg0: javawrappers.org.matsim.core.network.LinkFactory, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def createRoutingNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.router.util.RoutingNetwork: ...
	@overload
	def createRoutingNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.router.util.ArrayRoutingNetwork: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def createNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def createNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def createRoutingNetworkLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, arg2: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkLink: ...
	@overload
	def createRoutingNetworkLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, arg2: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, ) -> javawrappers.org.matsim.core.router.util.ArrayRoutingNetworkLink: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class TravelDisutilityUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createFreespeedTravelTimeAndDisutility(arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Landmarker:
	def identifyLandmarks(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> JArray(javawrappers.org.matsim.api.core.v01.network.Node, 1): ...


class AStarNodeData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isVisited(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getPrevLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getExpectedCost(self, ) -> Union[float, JDouble]: ...
	def setExpectedRemainingCost(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpectedRemainingCost(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JInt], ) -> None: ...
	def getCost(self, ) -> Union[float, JDouble]: ...
	def resetVisited(self, ) -> None: ...


class AbstractRoutingNetworkFactory:
	def __init__(self, ): ...
	def setLinkFactory(self, arg0: javawrappers.org.matsim.core.network.LinkFactory, ) -> None: ...
	def createRoutingNetworkNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createRoutingNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.router.util.RoutingNetwork: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def createNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def createNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	def createRoutingNetworkLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, arg2: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkLink: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class ArrayRoutingNetworkNode:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getDeadEndData(self, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	def notifyAll(self, ) -> None: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDeadEndData(self, arg0: javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData, ) -> None: ...
	def getArrayIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...
	def setOutLinksArray(self, arg0: JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def getOutLinksArray(self, ) -> JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1): ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


class DijkstraNodeDataFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createNodeData(self, ) -> javawrappers.org.matsim.core.router.util.NodeData: ...


class DijkstraNodeData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isVisited(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getPrevLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JInt], ) -> None: ...
	def getCost(self, ) -> Union[float, JDouble]: ...
	def resetVisited(self, ) -> None: ...
	def notify(self, ) -> None: ...


class PieSlicesLandmarker:
	def __init__(self, arg0: javawrappers.java.awt.geom.Rectangle2D.Double, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def identifyLandmarks(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> JArray(javawrappers.org.matsim.api.core.v01.network.Node, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractRoutingNetwork:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getLinks(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def addNode(self, arg0: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, ) -> None: ...
	@overload
	def addNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> None: ...
	def getNodes(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setEffectiveLaneWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getEffectiveCellSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.api.core.v01.network.NetworkFactory: ...
	def getCapacityPeriod(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def setCapacityPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def initialize(self, ) -> None: ...
	def getEffectiveLaneWidth(self, ) -> Union[float, JDouble]: ...
	def setEffectiveCellSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def addLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	@overload
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...


class ArrayRoutingNetworkLink:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, arg2: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def getFreespeed(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFreespeed(self, ) -> Union[float, JDouble]: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFromNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def setFreespeed(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getFlowCapacityPerSec(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFlowCapacityPerSec(self, ) -> Union[float, JDouble]: ...
	def setToNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def getAllowedModes(self, ) -> javawrappers.java.util.Set: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	@overload
	def getNumberOfLanes(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getArrayIndex(self, ) -> Union[int, JInt]: ...
	def setAllowedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@overload
	def getCapacity(self, ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class RoutingNetworkLink:
	def setToNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def getAllowedModes(self, ) -> javawrappers.java.util.Set: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getNumberOfLanes(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFreespeed(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFreespeed(self, ) -> Union[float, JDouble]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAllowedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setFromNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	def setFreespeed(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getFlowCapacityPerSec(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFlowCapacityPerSec(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class NodeDataFactory:
	def createNodeData(self, ) -> javawrappers.org.matsim.core.router.util.NodeData: ...


class ArrayRoutingNetwork:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getLinks(self, ) -> javawrappers.java.util.Map: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def addNode(self, arg0: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, ) -> None: ...
	@overload
	def addNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> None: ...
	def getNodes(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def setEffectiveLaneWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getEffectiveCellSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.api.core.v01.network.NetworkFactory: ...
	def getCapacityPeriod(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def setCapacityPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEffectiveLaneWidth(self, ) -> Union[float, JDouble]: ...
	def initialize(self, ) -> None: ...
	def setEffectiveCellSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def addLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	@overload
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	@overload
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...


class TravelTimeUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createFreeSpeedTravelTime() -> javawrappers.org.matsim.core.router.util.TravelTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PreProcessDijkstra:
	def __init__(self, ): ...
	class DeadEndData:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDeadEndEntryNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNodeData(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	def getDeadEndEntryNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def notify(self, ) -> None: ...
	def containsData(self, ) -> Union[int, JBoolean]: ...


class AStarNodeDataFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createNodeData(self, ) -> javawrappers.org.matsim.core.router.util.NodeData: ...


class RoutingNetworkFactory:
	def setLinkFactory(self, arg0: javawrappers.org.matsim.core.network.LinkFactory, ) -> None: ...
	def createRoutingNetworkNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkNode: ...
	def createRoutingNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.router.util.RoutingNetwork: ...
	def createNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def createRoutingNetworkLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, arg2: javawrappers.org.matsim.core.router.util.RoutingNetworkNode, ) -> javawrappers.org.matsim.core.router.util.RoutingNetworkLink: ...
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class LinkToLinkTravelTime:
	def getLinkToLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.api.core.v01.network.Link, arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class AbstractRoutingNetworkNode:
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getDeadEndData(self, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def notifyAll(self, ) -> None: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDeadEndData(self, arg0: javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData, ) -> None: ...
	def notify(self, ) -> None: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...
	def setOutLinksArray(self, arg0: JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def getOutLinksArray(self, ) -> JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1): ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


class RoutingNetworkNode:
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getDeadEndData(self, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDeadEndData(self, arg0: javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData, ) -> None: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...
	def setOutLinksArray(self, arg0: JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1), ) -> None: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def getOutLinksArray(self, ) -> JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1): ...


class LeastCostPathCalculator:
	class Path:
		def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PreProcessEuclidean:
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNodeData(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCostFunction(self, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinTravelCostPerLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsData(self, ) -> Union[int, JBoolean]: ...


class LeastCostPathCalculatorFactory:
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...


class TravelDisutility:
	def getLinkMinimumTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def getLinkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...


class PreProcessLandmarks:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, arg1: javawrappers.org.matsim.core.router.util.Landmarker, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, arg1: javawrappers.java.awt.geom.Rectangle2D.Double, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, arg1: javawrappers.java.awt.geom.Rectangle2D.Double, arg2: Union[int, JInt], ): ...
	class LandmarksFromTravelTimeComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class LandmarksToTravelTimeComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class LandmarksData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getMaxLandmarkTravelTime(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getMinLandmarkTravelTime(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		def getDeadEndEntryNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
		def notify(self, ) -> None: ...


	class Calculator:
		def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.java.util.Map, arg3: javawrappers.org.matsim.core.router.util.TravelDisutility, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getNodeData(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	@overload
	def getNodeData(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.router.util.PreProcessLandmarks.LandmarksData: ...
	def setNumberOfThreads(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def getCostFunction(self, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def getMaxLandmarkTravelTime(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def getMinTravelCostPerLength(self, ) -> Union[float, JDouble]: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	def getMinLandmarkTravelTime(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLandmarks(self, ) -> JArray(javawrappers.org.matsim.api.core.v01.network.Node, 1): ...
	def getDeadEndEntryNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def containsData(self, ) -> Union[int, JBoolean]: ...


