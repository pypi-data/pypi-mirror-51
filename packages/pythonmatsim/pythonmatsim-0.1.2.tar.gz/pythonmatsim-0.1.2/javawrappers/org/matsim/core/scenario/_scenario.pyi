################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.households
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.core.scenario
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.lanes
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ZZEverythingInPackageIsPackageFinalOrEmpty:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ProjectionUtils:
	@staticmethod
	def putCRS(arg0: javawrappers.org.matsim.core.api.internal.MatsimToplevelContainer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getCRS(arg0: javawrappers.org.matsim.core.api.internal.MatsimToplevelContainer, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CustomizableUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createCustomizable() -> javawrappers.org.matsim.api.core.v01.Customizable: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ScenarioByInstanceModule:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	class TransitVehiclesProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TransitScheduleProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class Lockable:
	def setLocked(self, ) -> None: ...


class MutableScenario:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setActivityFacilities(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ) -> None: ...
	def setPopulation(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	def setTransitSchedule(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ) -> None: ...
	def getHouseholds(self, ) -> javawrappers.org.matsim.households.Households: ...
	def notify(self, ) -> None: ...
	def setLanes(self, arg0: javawrappers.org.matsim.lanes.Lanes, ) -> None: ...
	def setTransitVehicles(self, arg0: javawrappers.org.matsim.vehicles.Vehicles, ) -> None: ...
	def getVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTransitVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def addScenarioElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def removeScenarioElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getPopulation(self, ) -> javawrappers.org.matsim.api.core.v01.population.Population: ...
	def getLanes(self, ) -> javawrappers.org.matsim.lanes.Lanes: ...
	def getActivityFacilities(self, ) -> javawrappers.org.matsim.facilities.ActivityFacilities: ...
	def setLocked(self, ) -> None: ...
	def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
	def setHouseholds(self, arg0: javawrappers.org.matsim.households.Households, ) -> None: ...
	def setNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getScenarioElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getTransitSchedule(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...


class ScenarioUtils:
	class ScenarioBuilder:
		def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def setActivityFacilities(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def setPopulation(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def setVehicles(self, arg0: javawrappers.org.matsim.vehicles.Vehicles, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def setTransitSchedule(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def notify(self, ) -> None: ...
		def setLanes(self, arg0: javawrappers.org.matsim.lanes.Lanes, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def setHouseholds(self, arg0: javawrappers.org.matsim.households.Households, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def setNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
		def build(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addScenarioElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setActivityFacilities(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def notifyAll(self, ) -> None: ...
	def setPopulation(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def setVehicles(self, arg0: javawrappers.org.matsim.vehicles.Vehicles, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def setTransitSchedule(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def setLanes(self, arg0: javawrappers.org.matsim.lanes.Lanes, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createScenario(arg0: javawrappers.org.matsim.core.config.Config, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def setHouseholds(self, arg0: javawrappers.org.matsim.households.Households, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def setNetwork(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...
	def build(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	@staticmethod
	def createMutableScenario(arg0: javawrappers.org.matsim.core.config.Config, ) -> javawrappers.org.matsim.core.scenario.MutableScenario: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def loadScenario(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> None: ...
	@overload
	@staticmethod
	def loadScenario(arg0: javawrappers.org.matsim.core.config.Config, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def addScenarioElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.matsim.core.scenario.ScenarioUtils.ScenarioBuilder: ...


class ScenarioByConfigModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


