################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.core.replanning.modules
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.replanning
import javawrappers.org.matsim.core.population.algorithms

from jpype.types import *
from typing import Union

from typing import overload

class ExternalModule:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy, arg3: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	class UpdatePlansAlgo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
		@overload
		def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
		def notify(self, ) -> None: ...


	class ExeRunnerDelegate:
		def invoke(self, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	def invoke(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class TripTimeAllocationMutator:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.javax.inject.Provider, arg2: Union[float, JDouble], arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.javax.inject.Provider, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ModeAndRouteConsistencyChecker:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ChangeSingleLegMode:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, arg1: javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class KeepLastExecuted:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.org.matsim.withinday.controller.ExecutedPlansService, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ReRoute:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.javax.inject.Provider, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, arg1: javawrappers.javax.inject.Provider, arg2: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ChangeLegMode:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, arg1: javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class SubtourModeChoice:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.java.lang.String, 1), arg2: JArray(javawrappers.java.lang.String, 1), arg3: Union[int, JBoolean], arg4: Union[float, JDouble], arg5: javawrappers.javax.inject.Provider, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.inject.Provider, arg1: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, arg2: javawrappers.org.matsim.core.config.groups.SubtourModeChoiceConfigGroup, ): ...
	class Behavior:
		fromAllModesToSpecifiedModes: SubtourModeChoice.Behavior = ...
		fromSpecifiedModesToSpecifiedModes: SubtourModeChoice.Behavior = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def setBehavior(self, arg0: javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def setPermissibleModesCalculator(self, arg0: javawrappers.org.matsim.core.population.algorithms.PermissibleModesCalculator, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class TripsToLegsModule:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, arg1: javawrappers.javax.inject.Provider, arg2: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.inject.Provider, arg1: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractMultithreadedModule:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, ): ...
	class PlanAlgoThread:
		def __init__(self, arg0: javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm, arg1: javawrappers.org.matsim.core.utils.misc.Counter, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addPlanToThread(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class ExceptionHandler:
		def __init__(self, arg0: javawrappers.java.util.concurrent.atomic.AtomicReference, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addPlanToThread(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def finishReplanning(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPlanAlgoInstance(self, ) -> javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm: ...
	def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...


class GenericPlanStrategyModule:
	def handlePlan(self, arg0: javawrappers.org.matsim.api.core.v01.population.BasicPlan, ) -> None: ...
	def prepareReplanning(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def finishReplanning(self, ) -> None: ...


