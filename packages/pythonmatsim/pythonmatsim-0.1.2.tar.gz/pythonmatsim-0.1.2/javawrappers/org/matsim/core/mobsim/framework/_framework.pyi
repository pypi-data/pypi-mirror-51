################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.core.mobsim.framework.listeners
import javawrappers.java.util.concurrent
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.core.mobsim.framework.events
import javawrappers.java.lang
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.com.google.inject
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class MobsimPassengerAgent:
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class MobsimFactory:
	def createMobsim(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> javawrappers.org.matsim.core.mobsim.framework.Mobsim: ...


class MobsimAgent:
	class State:
		ACTIVITY: MobsimAgent.State = ...
		LEG: MobsimAgent.State = ...
		ABORT: MobsimAgent.State = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State, 1): ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PlayPauseSimulationControl:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.framework.ObservableMobsim, ): ...
	class PlayPauseMobsimListener:
		def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def notifyMobsimBeforeCleanup(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeCleanupEvent, ) -> None: ...
		def notifyMobsimBeforeSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeSimStepEvent, ) -> None: ...


	class Status:
		PAUSE: PlayPauseSimulationControl.Status = ...
		PLAY: PlayPauseSimulationControl.Status = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.framework.PlayPauseSimulationControl.Status: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.mobsim.framework.PlayPauseSimulationControl.Status, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def play(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAccess(self, ) -> javawrappers.java.util.concurrent.Semaphore: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.framework.PlayPauseSimulationControl.Status: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.mobsim.framework.PlayPauseSimulationControl.Status, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def isFinished(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def pause(self, ) -> None: ...
	def notifyMobsimBeforeSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeSimStepEvent, ) -> None: ...
	def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLocalTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notifyMobsimBeforeCleanup(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeCleanupEvent, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def doStep(self, arg0: Union[int, JInt], ) -> None: ...


class AbstractMobsimModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class AgentSource:
	def insertAgentsIntoMobsim(self, ) -> None: ...


class MobsimDriverAgent:
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class DriverAgent:
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class MobsimAgentMarkerInterface:


class MobsimTimer:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def incrementTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSimStartTime(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTimeOfDay(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSimStartTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getSimTimestepSize(self, ) -> Union[float, JDouble]: ...
	def setTime(self, arg0: Union[float, JDouble], ) -> None: ...


class Mobsim:
	def run(self, ) -> None: ...


class PassengerAgent:
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class Steppable:
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...


class NetworkAgent:
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class VehicleUsingAgent:
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...


class PlayPauseSimulationControlI:
	def play(self, ) -> None: ...
	def pause(self, ) -> None: ...
	def doStep(self, arg0: Union[int, JInt], ) -> None: ...


class ObservableMobsim:
	def run(self, ) -> None: ...
	def addQueueSimulationListeners(self, arg0: javawrappers.org.matsim.core.mobsim.framework.listeners.MobsimListener, ) -> None: ...


class HasPerson:
	def getPerson(self, ) -> javawrappers.org.matsim.api.core.v01.population.Person: ...


class PlanAgent:
	def getCurrentPlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def getNextPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getCurrentPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getPreviousPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...


