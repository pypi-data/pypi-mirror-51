################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.scoring
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.google.inject
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.org.matsim.core.router
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class PersonExperiencedLeg:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.population.Leg, ): ...
	def getLeg(self, ) -> javawrappers.org.matsim.api.core.v01.population.Leg: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAgentId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExperiencedPlansService:
	def finishIteration(self, ) -> None: ...
	def writeExperiencedPlans(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getExperiencedPlans(self, ) -> javawrappers.java.util.Map: ...


class ExperiencedPlansModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class ScoringFunctionFactory:
	def createNewScoringFunction(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.scoring.ScoringFunction: ...


class ScoringFunction:
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	def finish(self, ) -> None: ...
	def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...


class EventsToActivities:
	def __init__(self, ): ...
	class ActivityHandler:
		def handleActivity(self, arg0: javawrappers.org.matsim.core.scoring.PersonExperiencedActivity, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityEndEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityStartEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.core.scoring.PersonExperiencedActivity, ) -> None: ...
	def addActivityHandler(self, arg0: javawrappers.org.matsim.core.scoring.EventsToActivities.ActivityHandler, ) -> None: ...
	def notify(self, ) -> None: ...


class EventsToLegs:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	class LegHandler:
		def handleLeg(self, arg0: javawrappers.org.matsim.core.scoring.PersonExperiencedLeg, ) -> None: ...


	class LineAndRoute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class PendingTransitTravel:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleLeg(self, arg0: javawrappers.org.matsim.core.scoring.PersonExperiencedLeg, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.TeleportationArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.TransitDriverStartsEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleLeavesTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonDepartureEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonEntersVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkLeaveEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkEnterEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addLegHandler(self, arg0: javawrappers.org.matsim.core.scoring.EventsToLegs.LegHandler, ) -> None: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def setTransitSchedule(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PlansScoringModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class EventsToScore:
	class NoopNewScoreAssignerImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def assignNewScores(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.core.scoring.ScoringFunctionsForPopulation, arg2: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def createWithoutScoreUpdating(arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.scoring.ScoringFunctionFactory, arg2: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> javawrappers.org.matsim.core.scoring.EventsToScore: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createWithScoreUpdating(arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.scoring.ScoringFunctionFactory, arg2: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> javawrappers.org.matsim.core.scoring.EventsToScore: ...
	def getAgentScore(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.lang.Double: ...
	def beginIteration(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def assignNewScores(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.core.scoring.ScoringFunctionsForPopulation, arg2: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...


class SumScoringFunction:
	def __init__(self, ): ...
	class ArbitraryEventScoring:
		def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class AgentStuckScoring:
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...
		def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...


	class MoneyScoring:
		def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class TripScoring:
		def finish(self, ) -> None: ...
		def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class LegScoring:
		def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class ActivityScoring:
		def handleFirstActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
		def finish(self, ) -> None: ...
		def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...
		def handleLastActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...


	class BasicScoring:
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	def handleFirstActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	@overload
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addScoringFunction(self, arg0: javawrappers.org.matsim.core.scoring.SumScoringFunction.BasicScoring, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def finish(self, ) -> None: ...
	@overload
	def finish(self, ) -> None: ...
	@overload
	def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
	@overload
	def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
	@overload
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def handleLastActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def getScore(self, ) -> Union[float, JDouble]: ...
	@overload
	def getScore(self, ) -> Union[float, JDouble]: ...


class EventsToLegsAndActivities:
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.EventsToLegs, arg1: javawrappers.org.matsim.core.scoring.EventsToActivities, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonDepartureEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.TransitDriverStartsEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleLeavesTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.TeleportationArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonEntersVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityEndEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityStartEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkEnterEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkLeaveEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExperiencedPlanElementsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class PersonExperiencedActivity:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def getAgentId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


