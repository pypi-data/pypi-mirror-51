################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.triangulate.quadedge
import javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers
import javawrappers.java.util.function
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class HullEdge:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.LineSegment, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.LineSegment, arg2: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullNode, arg3: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullNode, arg4: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addTriangles(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def setDestinationNode(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullNode, ) -> None: ...
	def getId(self, ) -> Union[int, JInt]: ...
	def getGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.LineSegment: ...
	def notify(self, ) -> None: ...
	def addIncidentEdges(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def isBorder(self, ) -> Union[int, JBoolean]: ...
	def removeTriangle(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullTriangle, ) -> Union[int, JBoolean]: ...
	def removeTriangles(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def getOriginNode(self, ) -> javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullNode: ...
	def setTriangles(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setOriginNode(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullNode, ) -> None: ...
	def setId(self, arg0: Union[int, JInt], ) -> None: ...
	def removeIncidentEdge(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullEdge, ) -> Union[int, JBoolean]: ...
	def getTriangles(self, ) -> javawrappers.java.util.List: ...
	def getIncidentEdges(self, ) -> javawrappers.java.util.List: ...
	def setIncidentEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getDestinationNode(self, ) -> javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullNode: ...
	def removeAllIncidentEdges(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def addIncidentEdge(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullEdge, ) -> Union[int, JBoolean]: ...
	def setGeometry(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	def setBorder(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addTriangle(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullTriangle, ) -> Union[int, JBoolean]: ...


class ConcaveHull:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryCollection, arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryCollection, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getConcaveHull(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def getConcaveHull(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getClusterCoords(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getInputPoints(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class HullNode:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setBorder(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setId(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getId(self, ) -> Union[int, JInt]: ...
	def setCoordinate(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def notify(self, ) -> None: ...
	def isBorder(self, ) -> Union[int, JBoolean]: ...


class HullTriangle:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addNeighbour(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullTriangle, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> Union[int, JInt]: ...
	def removeNeighbour(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullTriangle, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getNeighbours(self, ) -> javawrappers.java.util.List: ...
	def removeEdge(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullEdge, ) -> Union[int, JBoolean]: ...
	def addEdges(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def removeNeighbours(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addNeighbours(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def removeEdges(self, arg0: javawrappers.java.util.List, ) -> Union[int, JBoolean]: ...
	def setNeighbours(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def setId(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def addEdge(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.HullEdge, ) -> Union[int, JBoolean]: ...
	def setEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...


class ClusterActivity:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.Cluster, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCluster(self, arg0: javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.Cluster, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getCluster(self, ) -> javawrappers.org.matsim.core.network.algorithms.intersectionSimplifier.containers.Cluster: ...
	def notify(self, ) -> None: ...


class Cluster:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getConcaveHull(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setClusterId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def notify(self, ) -> None: ...
	def setConcaveHull(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getCenterOfGravity(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def setCenterOfGravity(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPoints(self, ) -> javawrappers.java.util.List: ...


class QuadEdgeComparator:
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def notify(self, ) -> None: ...


