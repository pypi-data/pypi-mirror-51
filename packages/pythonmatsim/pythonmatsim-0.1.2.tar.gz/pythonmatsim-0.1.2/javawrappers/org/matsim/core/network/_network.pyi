################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.core.config
import javawrappers.java.util.function
import javawrappers.org.matsim.core.network
import javawrappers.org.matsim.core.utils.collections
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class VariableIntervalTimeVariantLinkFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Network, arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class NetworkChangeEvent:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	class StartTimeComparator:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, arg1: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class ChangeValue:
		def __init__(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType, arg1: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[float, JDouble]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getType(self, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ChangeType:
		ABSOLUTE_IN_SI_UNITS: NetworkChangeEvent.ChangeType = ...
		FACTOR: NetworkChangeEvent.ChangeType = ...
		OFFSET_IN_SI_UNITS: NetworkChangeEvent.ChangeType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compare(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, arg1: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def getLinks(self, ) -> javawrappers.java.util.Collection: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getFreespeedChange(self, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue: ...
	def getFlowCapacityChange(self, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getStartTime(self, ) -> Union[float, JDouble]: ...
	def addLinks(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def setFreespeedChange(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue, ) -> None: ...
	def setLanesChange(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue, ) -> None: ...
	def removeLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def getLanesChange(self, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def getType(self, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeType: ...
	def setFlowCapacityChange(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class NetworkUtils:
	def __init__(self, ): ...
	@staticmethod
	def getSortedLinks(arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> JArray(javawrappers.org.matsim.api.core.v01.network.Link, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def getLinks(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLinks(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def getIncidentLinks(arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getFreespeedTravelTime(arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getFreespeedTravelTime(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def createNode(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	@staticmethod
	def createNode(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	@staticmethod
	def createNode(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@staticmethod
	def getNumberOfLanesAsInt(arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JInt]: ...
	@staticmethod
	def createAndAddNode(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	@staticmethod
	def getOrigId(arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getOrigId(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getBoundingBox(arg0: javawrappers.java.util.Collection, ) -> JArray(Union[float, JDouble], 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createLink(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Network, arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@overload
	@staticmethod
	def getEuclideanDistance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getEuclideanDistance(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def setOrigId(arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def setOrigId(arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def getNearestRightEntryLink(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def setNetworkChangeEvents(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.util.List, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def addNetworkChangeEvent(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> None: ...
	@overload
	@staticmethod
	def createNetwork() -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	@overload
	@staticmethod
	def createNetwork(arg0: javawrappers.org.matsim.core.config.Config, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	@overload
	@staticmethod
	def createNetwork(arg0: javawrappers.org.matsim.core.config.groups.NetworkConfigGroup, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	@staticmethod
	def runNetworkSimplifier(arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	@staticmethod
	def getSortedNodes(arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> JArray(javawrappers.org.matsim.api.core.v01.network.Node, 1): ...
	@staticmethod
	def getOutNodes(arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getOutLinksSortedClockwiseByAngle(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.java.util.TreeMap: ...
	@staticmethod
	def getNearestLink(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def getNetworkChangeEvents(arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.java.util.Queue: ...
	@staticmethod
	def getNearestLinkExactly(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def getNodes(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def getNearestNode(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@staticmethod
	def getLeftmostTurnExcludingU(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@overload
	@staticmethod
	def setType(arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def setType(arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def findLinkInOppositeDirection(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def getNearestNodes(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def runNetworkCleaner(arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> None: ...
	@staticmethod
	def writeNetwork(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def getLinkIds(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLinkIds(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCloserNodeOnLink(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	@staticmethod
	def readNetwork(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def readNetwork(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	@staticmethod
	def createLinkFactory() -> javawrappers.org.matsim.core.network.LinkFactoryImpl: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isMultimodal(arg0: javawrappers.org.matsim.api.core.v01.network.Network, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getInNodes(arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getConnectingLink(arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def getIncidentNodes(arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def createAndAddLink(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Node, arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@overload
	@staticmethod
	def createAndAddLink(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Node, arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: javawrappers.java.lang.String, arg9: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class FixedIntervalTimeVariantLinkFactory:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Network, arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class SearchableNetwork:
	def getNearestLinkExactly(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getNodeQuadTree(self, ) -> javawrappers.org.matsim.core.utils.collections.QuadTree: ...
	def getLinkQuadTree(self, ) -> javawrappers.org.matsim.core.network.LinkQuadTree: ...
	def getNearestNode(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def getNearestNodes(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...


class LinkFactory:
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Network, arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class TimeVariantAttribute:
	class ChangeValueGetter:
		def getChangeValue(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue: ...


	def getValue(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def incChangeEvents(self, ) -> None: ...
	def clearEvents(self, ) -> None: ...
	def isRecalcRequired(self, ) -> Union[int, JBoolean]: ...
	def getChangeValue(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> javawrappers.org.matsim.core.network.NetworkChangeEvent.ChangeValue: ...
	def recalc(self, arg0: javawrappers.java.util.TreeMap, arg1: javawrappers.org.matsim.core.network.TimeVariantAttribute.ChangeValueGetter, arg2: Union[float, JDouble], ) -> None: ...


class LinkQuadTree:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	class MutableDouble:
		def __init__(self, arg0: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LinkWrapper:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class QuadTreeNode:
		def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
		class ChildPosition:
			CHILD_NW: LinkQuadTree.QuadTreeNode.ChildPosition = ...
			CHILD_NE: LinkQuadTree.QuadTreeNode.ChildPosition = ...
			CHILD_SE: LinkQuadTree.QuadTreeNode.ChildPosition = ...
			CHILD_SW: LinkQuadTree.QuadTreeNode.ChildPosition = ...
			NO_CHILD: LinkQuadTree.QuadTreeNode.ChildPosition = ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.network.LinkQuadTree.QuadTreeNode.ChildPosition: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@staticmethod
			def values() -> JArray(javawrappers.org.matsim.core.network.LinkQuadTree.QuadTreeNode.ChildPosition, 1): ...
			def name(self, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
			def notify(self, ) -> None: ...
			def ordinal(self, ) -> Union[int, JInt]: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.network.LinkQuadTree.QuadTreeNode.ChildPosition: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.network.LinkQuadTree.QuadTreeNode.ChildPosition, 1): ...
		def notifyAll(self, ) -> None: ...
		def getNearest(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.core.network.LinkQuadTree.MutableDouble, ) -> javawrappers.org.matsim.core.network.LinkQuadTree.LinkWrapper: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def put(self, arg0: javawrappers.org.matsim.core.network.LinkQuadTree.LinkWrapper, ) -> None: ...
		def remove(self, arg0: javawrappers.org.matsim.core.network.LinkQuadTree.LinkWrapper, ) -> Union[int, JBoolean]: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaxNorthing(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.network.LinkQuadTree.QuadTreeNode.ChildPosition: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.network.LinkQuadTree.QuadTreeNode.ChildPosition, 1): ...
	def notifyAll(self, ) -> None: ...
	def getMaxEasting(self, ) -> Union[float, JDouble]: ...
	@overload
	def getNearest(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@overload
	def getNearest(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.core.network.LinkQuadTree.MutableDouble, ) -> javawrappers.org.matsim.core.network.LinkQuadTree.LinkWrapper: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.org.matsim.core.network.LinkQuadTree.LinkWrapper, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.matsim.core.network.LinkQuadTree.LinkWrapper, ) -> Union[int, JBoolean]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinNorthing(self, ) -> Union[float, JDouble]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMinEasting(self, ) -> Union[float, JDouble]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class LinkIdComparator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def notify(self, ) -> None: ...


class TimeDependentNetwork:
	def setNetworkChangeEvents(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getNetworkChangeEvents(self, ) -> javawrappers.java.util.Queue: ...
	def addNetworkChangeEvent(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> None: ...


class ZZEverythingInPackageIsPackageOrFinal:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


