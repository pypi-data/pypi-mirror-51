################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.scoring
import javawrappers.java.lang
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.router
import javawrappers.org.matsim.core.scoring.functions
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.controler

from jpype.types import *
from typing import Union

from typing import overload

class CharyparNagelAgentStuckScoring:
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class ModeUtilityParameters:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	class Builder:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setDailyMoneyConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
		def setMarginalUtilityOfDistance_m(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
		def setMonetaryDistanceRate(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
		def setMarginalUtilityOfTraveling_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
		def build(self, ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def setDailyUtilityConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setDailyMoneyConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
	def notify(self, ) -> None: ...
	def setMarginalUtilityOfDistance_m(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
	def setMonetaryDistanceRate(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
	def setMarginalUtilityOfTraveling_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
	def build(self, ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters: ...
	def setDailyUtilityConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...


class OnlyTravelTimeDependentScoringFunction:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...


class ScoringParameters:
	class Builder:
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.api.core.v01.population.Person, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup, arg1: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ScoringParameterSet, arg2: javawrappers.org.matsim.core.config.groups.ScenarioConfigGroup, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setMarginalUtilityOfPerforming_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def setAbortedPlanScore(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def notifyAll(self, ) -> None: ...
		def setMarginalUtilityOfWaiting_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def setActivityParameters(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def getActivityParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def setScoreActs(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def notify(self, ) -> None: ...
		def setMarginalUtilityOfMoney(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def setMarginalUtilityOfWaitingPt_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def build(self, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setMarginalUtilityOfEarlyDeparture_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def setModeParameters(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def getModeParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
		def setUsingOldScoringBelowZeroUtilityDuration(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def setUtilityOfLineSwitch(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
		def setMarginalUtilityOfLateArrival_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMarginalUtilityOfPerforming_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def setAbortedPlanScore(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def notifyAll(self, ) -> None: ...
	def setMarginalUtilityOfWaiting_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def setActivityParameters(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def getActivityParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def setScoreActs(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def setMarginalUtilityOfMoney(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def notify(self, ) -> None: ...
	def setMarginalUtilityOfWaitingPt_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def build(self, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setMarginalUtilityOfEarlyDeparture_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def setModeParameters(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModeParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.scoring.functions.ModeUtilityParameters.Builder: ...
	def setUsingOldScoringBelowZeroUtilityDuration(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def setUtilityOfLineSwitch(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...
	def setMarginalUtilityOfLateArrival_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters.Builder: ...


class ActivityTypeOpeningIntervalCalculator:
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpeningInterval(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> JArray(Union[float, JDouble], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CharyparNagelOpenTimesScoringFunctionFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParametersForPerson, arg1: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createNewScoringFunction(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.scoring.ScoringFunction: ...


class CharyparNagelMoneyScoring:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class CharyparNagelScoringFunctionFactory:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createNewScoringFunction(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.scoring.ScoringFunction: ...


class ScoringParametersForPerson:
	def getScoringParameters(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters: ...


class CharyparNagelScoringFunctionModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class OnlyTravelTimeDependentScoringFunctionFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createNewScoringFunction(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.scoring.ScoringFunction: ...


class OpeningIntervalCalculator:
	def getOpeningInterval(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> JArray(Union[float, JDouble], 1): ...


class CharyparNagelActivityScoring:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, arg1: javawrappers.org.matsim.core.scoring.functions.OpeningIntervalCalculator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def handleFirstActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def handleLastActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class CharyparNagelLegScoring:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, arg1: javawrappers.org.matsim.api.core.v01.network.Network, arg2: javawrappers.java.util.Set, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class ActivityUtilityParameters:
	class Builder:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams, ): ...
		def setZeroUtilityComputation(self, arg0: javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.ZeroUtilityComputation, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setMinimalDuration(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def setEarliestEndTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def notifyAll(self, ) -> None: ...
		def setType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def setTypicalDuration_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def notify(self, ) -> None: ...
		def setClosingTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def build(self, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters: ...
		def setLatestStartTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setScoreAtAll(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def setPriority(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
		def setOpeningTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...


	class SameRelativeScore:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def computeZeroUtilityDuration_s(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SameAbsoluteScore:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def computeZeroUtilityDuration_s(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ZeroUtilityComputation:
		def computeZeroUtilityDuration_s(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...


	def setZeroUtilityComputation(self, arg0: javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.ZeroUtilityComputation, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def getEarliestEndTime(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setClosingTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def setLatestStartTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getOpeningTime(self, ) -> Union[float, JDouble]: ...
	def getTypicalDuration(self, ) -> Union[float, JDouble]: ...
	def setScoreAtAll(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def getClosingTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def computeZeroUtilityDuration_s(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def computeZeroUtilityDuration_s(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def computeZeroUtilityDuration_s(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getZeroUtilityDuration_h(self, ) -> Union[float, JDouble]: ...
	def setMinimalDuration(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def setEarliestEndTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def setType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def setTypicalDuration_s(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def isScoreAtAll(self, ) -> Union[int, JBoolean]: ...
	def getLatestStartTime(self, ) -> Union[float, JDouble]: ...
	def build(self, ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def setOpeningTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.scoring.functions.ActivityUtilityParameters.Builder: ...
	def getMinimalDuration(self, ) -> Union[float, JDouble]: ...


class SubpopulationScoringParameters:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getScoringParameters(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.scoring.functions.ScoringParameters: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FacilityOpeningIntervalCalculator:
	def __init__(self, arg0: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpeningInterval(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> JArray(Union[float, JDouble], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


