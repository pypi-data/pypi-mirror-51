################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.vis.snapshotwriters
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.vehicle_handler
import javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.vehicleq
import javawrappers.org.matsim.core.mobsim.qsim
import javawrappers.org.matsim.api.core.v01
import javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.linkspeedcalculator

from jpype.types import *
from typing import Union

from typing import overload

class QLaneI:
	class VisData:
		def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, arg1: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...


	def changeEffectiveNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def initBeforeSimStep(self, ) -> None: ...
	def getSimulatedFlowCapacityPerTimeStep(self, ) -> Union[float, JDouble]: ...
	def getVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def addTransitSlightlyUpstreamOfStop(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def addFromUpstream(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def isActive(self, ) -> Union[int, JBoolean]: ...
	def getFirstVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def isNotOfferingVehicle(self, ) -> Union[int, JBoolean]: ...
	def recalcTimeVariantAttributes(self, ) -> None: ...
	def doSimStep(self, ) -> Union[int, JBoolean]: ...
	def getAllVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def getLastMovementTimeOfFirstVehicle(self, ) -> Union[float, JDouble]: ...
	def getLoadIndicator(self, ) -> Union[float, JDouble]: ...
	def clearVehicles(self, ) -> None: ...
	def getVisData(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI.VisData: ...
	def isAcceptingFromUpstream(self, ) -> Union[int, JBoolean]: ...
	def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, arg1: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...
	def addFromWait(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def isAcceptingFromWait(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> Union[int, JBoolean]: ...
	def popFirstVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def changeUnscaledFlowCapacityPerSecond(self, arg0: Union[float, JDouble], ) -> None: ...
	def getStorageCapacity(self, ) -> Union[float, JDouble]: ...


class NetsimEngine:
	def getNetsimNetwork(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimNetwork: ...
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def unregisterAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def registerAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...


class QVehicle:
	def setDriver(self, arg0: javawrappers.org.matsim.core.mobsim.framework.DriverAgent, ) -> None: ...
	def getMaximumVelocity(self, ) -> Union[float, JDouble]: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getFlowCapacityConsumptionInEquivalents(self, ) -> Union[float, JDouble]: ...
	def getDriver(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	def addPassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def setEarliestLinkExitTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEarliestLinkExitTime(self, ) -> Union[float, JDouble]: ...
	def getPassengerCapacity(self, ) -> Union[int, JInt]: ...
	def getPassengers(self, ) -> javawrappers.java.util.Collection: ...
	def getCurrentLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def setLinkEnterTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def removePassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def getLinkEnterTime(self, ) -> Union[float, JDouble]: ...
	def getSizeInEquivalents(self, ) -> Union[float, JDouble]: ...
	def setCurrentLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...


class QVehicleFactory:
	def createQVehicle(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...


class QLinkLanesImpl:
	class VisDataImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
		def notify(self, ) -> None: ...


	class Builder:
		def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.NetsimEngineContext, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setLinkSpeedCalculator(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.linkspeedcalculator.LinkSpeedCalculator, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getAgentsWaitingForCar(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.util.Set: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def registerPassengerAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getAdditionalAgentsOnLink(self, ) -> javawrappers.java.util.Collection: ...
	def getOfferingQLanes(self, ) -> javawrappers.java.util.List: ...
	def getVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def notifyAll(self, ) -> None: ...
	def unregisterDriverAgentWaitingForPassengers(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def notify(self, ) -> None: ...
	def recalcTimeVariantAttributes(self, ) -> None: ...
	def registerDriverAgentWaitingForPassengers(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent, ) -> None: ...
	def setLinkSpeedCalculator(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.linkspeedcalculator.LinkSpeedCalculator, ) -> None: ...
	def getAllVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def getQueueLanes(self, ) -> javawrappers.java.util.LinkedHashMap: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getToNode(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def registerAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def registerDriverAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent, ) -> None: ...
	def getAllNonParkedVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def insertPassengerIntoVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def isNotOfferingVehicle(self, ) -> Union[int, JBoolean]: ...
	def doSimStep(self, ) -> Union[int, JBoolean]: ...
	def getParkedVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def letVehicleDepart(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getInternalInterface(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.AbstractQLink.QLinkInternalInterface: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def unregisterPassengerAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	@overload
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def clearVehicles(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAcceptingQLane(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI: ...
	def getVisData(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...
	def unregisterAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def removeParkedVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...


class RunFlexibleQNetworkFactoryExample:
	def __init__(self, ): ...
	class MyQNetworkFactory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def createNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
		def initializeFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg2: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def createNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def initializeFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg2: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ) -> None: ...
	def notify(self, ) -> None: ...


class DefaultSignalizeableItem:
	def __init__(self, arg0: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasGreenForAllToLinks(self, ) -> Union[int, JBoolean]: ...
	def setSignalStateForTurningMove(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSignalStateAllTurningMoves(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasGreenForToLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setSignalized(self, arg0: Union[int, JBoolean], ) -> None: ...


class RunConfigurableQNetworkFactoryExample:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class QNetsimEngineModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class QNetworkFactory:
	def createNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...
	def createNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def initializeFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg2: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ) -> None: ...


class QLinkI:
	def getAgentsWaitingForCar(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.util.Set: ...
	def registerPassengerAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getAdditionalAgentsOnLink(self, ) -> javawrappers.java.util.Collection: ...
	def getOfferingQLanes(self, ) -> javawrappers.java.util.List: ...
	def getVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def unregisterDriverAgentWaitingForPassengers(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def recalcTimeVariantAttributes(self, ) -> None: ...
	def registerDriverAgentWaitingForPassengers(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent, ) -> None: ...
	def getAllVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def getToNode(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def registerAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def registerDriverAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent, ) -> None: ...
	def getAllNonParkedVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def insertPassengerIntoVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def isNotOfferingVehicle(self, ) -> Union[int, JBoolean]: ...
	def doSimStep(self, ) -> Union[int, JBoolean]: ...
	def getParkedVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def letVehicleDepart(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def unregisterPassengerAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def clearVehicles(self, ) -> None: ...
	def getVisData(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...
	def getAcceptingQLane(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI: ...
	def unregisterAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def removeParkedVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...


class DefaultTurnAcceptanceLogic:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isAcceptingTurn(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, arg4: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetwork, arg5: Union[float, JDouble], ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic.AcceptTurn: ...


class QLanesNetworkFactory:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg1: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def initializeFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg2: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ) -> None: ...
	def notify(self, ) -> None: ...


class QVehicleImpl:
	def __init__(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setDriver(self, arg0: javawrappers.org.matsim.core.mobsim.framework.DriverAgent, ) -> None: ...
	def getMaximumVelocity(self, ) -> Union[float, JDouble]: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getFlowCapacityConsumptionInEquivalents(self, ) -> Union[float, JDouble]: ...
	def getDriver(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	def notify(self, ) -> None: ...
	def addPassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def setEarliestLinkExitTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEarliestLinkExitTime(self, ) -> Union[float, JDouble]: ...
	def getPassengerCapacity(self, ) -> Union[int, JInt]: ...
	def getPassengers(self, ) -> javawrappers.java.util.Collection: ...
	def getCurrentLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLinkEnterTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLinkEnterTime(self, ) -> Union[float, JDouble]: ...
	def removePassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def getSizeInEquivalents(self, ) -> Union[float, JDouble]: ...
	def setCurrentLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...


class QNetwork:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimNode: ...
	def getNetsimLinks(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getNetsimNodes(self, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def initialize(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg2: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, ) -> None: ...
	def getVisLinks(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimLink: ...
	@overload
	def getNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...


class DefaultQNetworkFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def initializeFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg2: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ) -> None: ...
	def notify(self, ) -> None: ...


class TurnAcceptanceLogic:
	class AcceptTurn:
		GO: TurnAcceptanceLogic.AcceptTurn = ...
		WAIT: TurnAcceptanceLogic.AcceptTurn = ...
		ABORT: TurnAcceptanceLogic.AcceptTurn = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic.AcceptTurn: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic.AcceptTurn, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic.AcceptTurn: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic.AcceptTurn, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def isAcceptingTurn(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, arg4: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetwork, arg5: Union[float, JDouble], ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic.AcceptTurn: ...


class NetsimEngineContext:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg3: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.AbstractAgentSnapshotInfoBuilder, arg4: javawrappers.org.matsim.core.config.groups.QSimConfigGroup, arg5: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg6: javawrappers.org.matsim.vis.snapshotwriters.SnapshotLinkWidthCalculator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class QNetsimEngine:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetworkFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, ): ...
	class NamedThreadFactory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NetsimInternalInterface:
		def getNetsimNetwork(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetwork: ...
		def letVehicleArrive(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
		def arrangeNextAgentState(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumberOfSimulatedLinks(self, ) -> Union[int, JInt]: ...
	def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	def letVehicleArrive(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def arrangeNextAgentState(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	def getNumberOfSimulatedNodes(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getNetsimNetwork(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetwork: ...
	@overload
	def getNetsimNetwork(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimNetwork: ...
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def getVehicles(self, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def printEngineRunTimes(self, ) -> None: ...
	def unregisterAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def registerAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def getDepartureHandler(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.VehicularDepartureHandler: ...
	def afterSim(self, ) -> None: ...


class QLinkImpl:
	class VisDataImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
		def notify(self, ) -> None: ...


	class LaneFactory:
		def createLane(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.AbstractQLink, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI: ...


	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setLinkSpeedCalculator(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.linkspeedcalculator.LinkSpeedCalculator, ) -> None: ...
		def setVehicleHandler(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.vehicle_handler.VehicleHandler, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getAgentsWaitingForCar(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.util.Set: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def registerPassengerAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getAdditionalAgentsOnLink(self, ) -> javawrappers.java.util.Collection: ...
	def getOfferingQLanes(self, ) -> javawrappers.java.util.List: ...
	def getVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def notifyAll(self, ) -> None: ...
	def setSignalStateAllTurningMoves(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, ) -> None: ...
	def unregisterDriverAgentWaitingForPassengers(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def notify(self, ) -> None: ...
	def recalcTimeVariantAttributes(self, ) -> None: ...
	def registerDriverAgentWaitingForPassengers(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent, ) -> None: ...
	def createLane(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.AbstractQLink, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI: ...
	def setLinkSpeedCalculator(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.linkspeedcalculator.LinkSpeedCalculator, ) -> None: ...
	def setVehicleHandler(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.vehicle_handler.VehicleHandler, ) -> None: ...
	def getAllVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def setSignalStateForTurningMove(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getToNode(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...
	def setSignalized(self, arg0: Union[int, JBoolean], ) -> None: ...
	def registerAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def registerDriverAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent, ) -> None: ...
	def getAllNonParkedVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def insertPassengerIntoVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def isNotOfferingVehicle(self, ) -> Union[int, JBoolean]: ...
	def doSimStep(self, ) -> Union[int, JBoolean]: ...
	def getParkedVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...
	def letVehicleDepart(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle, ) -> None: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def hasGreenForAllToLinks(self, ) -> Union[int, JBoolean]: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getInternalInterface(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.AbstractQLink.QLinkInternalInterface: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def unregisterPassengerAgentWaitingForCar(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	@overload
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def clearVehicles(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAcceptingQLane(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLaneI: ...
	def getVisData(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...
	def unregisterAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def hasGreenForToLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def removeParkedVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QVehicle: ...


class ConfigurableQNetworkFactory:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg1: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def setVehicleQFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.vehicleq.VehicleQ.Factory, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTurnAcceptanceLogic(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.TurnAcceptanceLogic, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def initializeFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, arg2: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNetsimEngine.NetsimInternalInterface, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLinkSpeedCalculator(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.linkspeedcalculator.LinkSpeedCalculator, ) -> None: ...
	def setVehicleHandler(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.vehicle_handler.VehicleHandler, ) -> None: ...
	def createNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QLinkI: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.core.mobsim.qsim.qnetsimengine.QNodeI: ...


