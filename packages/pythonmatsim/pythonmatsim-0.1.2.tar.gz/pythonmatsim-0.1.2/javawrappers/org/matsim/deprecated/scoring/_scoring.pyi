################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.java.util
import javawrappers.org.matsim.core.router
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.deprecated.scoring

from jpype.types import *
from typing import Union

from typing import overload

class ScoringFunctionAdapter:
	def __init__(self, ): ...
	def endActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def endLeg(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def startActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def startLeg(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def finish(self, ) -> None: ...
	def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...


class ScoringFunctionAccumulator:
	def __init__(self, ): ...
	class ArbitraryEventScoring:
		def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
		def reset(self, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class AgentStuckScoring:
		def reset(self, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...
		def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...


	class MoneyScoring:
		def reset(self, ) -> None: ...
		def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class LegScoring:
		def startLeg(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
		def endLeg(self, arg0: Union[float, JDouble], ) -> None: ...
		def reset(self, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	class ActivityScoring:
		def endActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
		def reset(self, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...
		def startActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...


	class BasicScoring:
		def reset(self, ) -> None: ...
		def finish(self, ) -> None: ...
		def getScore(self, ) -> Union[float, JDouble]: ...


	@overload
	def endActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def endActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	@overload
	def endLeg(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def endLeg(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def startActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def startActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def startLeg(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	@overload
	def startLeg(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def handleLeg(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addScoringFunction(self, arg0: javawrappers.org.matsim.deprecated.scoring.ScoringFunctionAccumulator.BasicScoring, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def finish(self, ) -> None: ...
	@overload
	def finish(self, ) -> None: ...
	def handleTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def getScore(self, ) -> Union[float, JDouble]: ...
	@overload
	def getScore(self, ) -> Union[float, JDouble]: ...
	def getActivityScoringFunctions(self, ) -> javawrappers.java.util.ArrayList: ...


