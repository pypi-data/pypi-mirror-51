################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.mobsim.framework.events
import javawrappers.org.matsim.core.mobsim.framework.listeners
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.vis.snapshotwriters
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class VisMobsim:
	def getNonNetworkAgentSnapshots(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...
	def getVisNetwork(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisNetwork: ...
	def run(self, ) -> None: ...
	def addQueueSimulationListeners(self, arg0: javawrappers.org.matsim.core.mobsim.framework.listeners.MobsimListener, ) -> None: ...
	def getAgents(self, ) -> javawrappers.java.util.Map: ...


class SnapshotWriter:
	def beginSnapshot(self, arg0: Union[float, JDouble], ) -> None: ...
	def endSnapshot(self, ) -> None: ...
	def finish(self, ) -> None: ...
	def addAgent(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo, ) -> None: ...


class VisLink:
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getAllVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def getVisData(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...


class KmlSnapshotWriter:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def beginSnapshot(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def endSnapshot(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addAgent(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo, ) -> None: ...


class SnapshotLinkWidthCalculator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def calculateLinkWidth(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getLaneWidth(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLinkWidthForVis(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLaneWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class TransimsSnapshotWriter:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class Labels:
		TIME: TransimsSnapshotWriter.Labels = ...
		VEHICLE: TransimsSnapshotWriter.Labels = ...
		EASTING: TransimsSnapshotWriter.Labels = ...
		NORTHING: TransimsSnapshotWriter.Labels = ...
		VELOCITY: TransimsSnapshotWriter.Labels = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vis.snapshotwriters.TransimsSnapshotWriter.Labels: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.vis.snapshotwriters.TransimsSnapshotWriter.Labels, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vis.snapshotwriters.TransimsSnapshotWriter.Labels: ...
	def endSnapshot(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.vis.snapshotwriters.TransimsSnapshotWriter.Labels, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addAgent(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def beginSnapshot(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SnapshotWritersModule:
	def __init__(self, ): ...
	class SnapshotWriterManagerProvider:
		class NoopMobsimListener:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.core.mobsim.framework.listeners.MobsimListener: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.mobsim.framework.listeners.MobsimListener: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class VisNetwork:
	def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def getVisLinks(self, ) -> javawrappers.java.util.Map: ...


class TeleportationVisData:
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.Coord, arg3: javawrappers.org.matsim.api.core.v01.Coord, arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def updatePosition(self, arg0: Union[float, JDouble], ) -> None: ...
	def getAzimuth(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getUserDefined(self, ) -> Union[int, JInt]: ...
	def getColorValueBetweenZeroAndOne(self, ) -> Union[float, JDouble]: ...
	def setUserDefined(self, arg0: Union[int, JInt], ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def setAgentState(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNorthing(self, ) -> Union[float, JDouble]: ...
	def getAgentState(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setColorValueBetweenZeroAndOne(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEasting(self, ) -> Union[float, JDouble]: ...


class AgentSnapshotInfo:
	class AgentState:
		PERSON_AT_ACTIVITY: AgentSnapshotInfo.AgentState = ...
		PERSON_DRIVING_CAR: AgentSnapshotInfo.AgentState = ...
		PERSON_OTHER_MODE: AgentSnapshotInfo.AgentState = ...
		TRANSIT_DRIVER: AgentSnapshotInfo.AgentState = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAzimuth(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState, 1): ...
	def getUserDefined(self, ) -> Union[int, JInt]: ...
	def getColorValueBetweenZeroAndOne(self, ) -> Union[float, JDouble]: ...
	def setUserDefined(self, arg0: Union[int, JInt], ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def setAgentState(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getNorthing(self, ) -> Union[float, JDouble]: ...
	def getAgentState(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setColorValueBetweenZeroAndOne(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEasting(self, ) -> Union[float, JDouble]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class VisData:
	def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...


class SnapshotWriterManager:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addSnapshotWriter(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.SnapshotWriter, ) -> None: ...
	def notifyMobsimInitialized(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimInitializedEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def notifyMobsimBeforeCleanup(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeCleanupEvent, ) -> None: ...


class VisVehicle:
	def getVehicle(self, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDriver(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	def getSizeInEquivalents(self, ) -> Union[float, JDouble]: ...


class AgentSnapshotInfoFactory:
	def __init__(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.SnapshotLinkWidthCalculator, ): ...
	class PositionInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAzimuth(self, ) -> Union[float, JDouble]: ...
		def setLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def setEasting(self, arg0: Union[float, JDouble], ) -> None: ...
		def getUserDefined(self, ) -> Union[int, JInt]: ...
		def getColorValueBetweenZeroAndOne(self, ) -> Union[float, JDouble]: ...
		def setUserDefined(self, arg0: Union[int, JInt], ) -> None: ...
		def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def notify(self, ) -> None: ...
		def setAzimuth(self, arg0: Union[float, JDouble], ) -> None: ...
		def setAgentState(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getNorthing(self, ) -> Union[float, JDouble]: ...
		def getAgentState(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState: ...
		def setId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setColorValueBetweenZeroAndOne(self, arg0: Union[float, JDouble], ) -> None: ...
		def setNorthing(self, arg0: Union[float, JDouble], ) -> None: ...
		def getEasting(self, ) -> Union[float, JDouble]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAzimuth(self, ) -> Union[float, JDouble]: ...
	def setLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def setEasting(self, arg0: Union[float, JDouble], ) -> None: ...
	def getUserDefined(self, ) -> Union[int, JInt]: ...
	def getColorValueBetweenZeroAndOne(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def setUserDefined(self, arg0: Union[int, JInt], ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def createAgentSnapshotInfo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Link, arg2: Union[float, JDouble], arg3: Union[int, JInt], ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo: ...
	@overload
	def createAgentSnapshotInfo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo: ...
	@overload
	def createAgentSnapshotInfo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, arg3: Union[float, JDouble], arg4: javawrappers.java.lang.Integer, arg5: Union[float, JDouble], ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo: ...
	def notify(self, ) -> None: ...
	def setAzimuth(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAgentState(self, arg0: javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState, ) -> None: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNorthing(self, ) -> Union[float, JDouble]: ...
	def getAgentState(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.AgentSnapshotInfo.AgentState: ...
	def setId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def setColorValueBetweenZeroAndOne(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNorthing(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEasting(self, ) -> Union[float, JDouble]: ...


