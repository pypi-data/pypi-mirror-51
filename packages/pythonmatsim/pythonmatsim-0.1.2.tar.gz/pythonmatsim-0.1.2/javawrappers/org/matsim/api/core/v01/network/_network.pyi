################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.utils.objectattributes
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.java.io
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.core.network
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class Network:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getLinks(self, ) -> javawrappers.java.util.Map: ...
	def addNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> None: ...
	def getNodes(self, ) -> javawrappers.java.util.Map: ...
	def setEffectiveLaneWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getEffectiveCellSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.api.core.v01.network.NetworkFactory: ...
	def getCapacityPeriod(self, ) -> Union[float, JDouble]: ...
	def setCapacityPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEffectiveLaneWidth(self, ) -> Union[float, JDouble]: ...
	def setEffectiveCellSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def addLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...


class NetworkWriter:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	@overload
	def writeV2(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeV2(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeV1(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAttributeConverters(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def notify(self, ) -> None: ...
	def putAttributeConverter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.matsim.utils.objectattributes.AttributeConverter, ) -> None: ...


class NetworkFactory:
	def setLinkFactory(self, arg0: javawrappers.org.matsim.core.network.LinkFactory, ) -> None: ...
	def createNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def createLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...


class Link:
	def setToNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def getAllowedModes(self, ) -> javawrappers.java.util.Set: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getNumberOfLanes(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def getFreespeed(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFreespeed(self, ) -> Union[float, JDouble]: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAllowedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setFromNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def setFreespeed(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getFlowCapacityPerSec(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFlowCapacityPerSec(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class Node:
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...


