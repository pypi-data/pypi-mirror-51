################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.households
import javawrappers.org.matsim.lanes
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TransportMode:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Id:
	def __init__(self, ): ...
	class IdImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def createVehicleId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createVehicleId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createVehicleId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def createLinkId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createLinkId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createLinkId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createPersonId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createPersonId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createPersonId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def createNodeId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createNodeId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def createNodeId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def writeId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def create(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def create(arg0: Union[long, JLong], arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		@staticmethod
		def create(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def createVehicleId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createVehicleId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createVehicleId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def createLinkId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createLinkId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createLinkId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def createPersonId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createPersonId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createPersonId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createNodeId(arg0: Union[long, JLong], ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createNodeId(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def createNodeId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def writeId(arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def create(arg0: Union[long, JLong], arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Identifiable:
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class BasicLocation:
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


class Customizable:
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...


class Scenario:
	def getPopulation(self, ) -> javawrappers.org.matsim.api.core.v01.population.Population: ...
	def getVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	def getTransitVehicles(self, ) -> javawrappers.org.matsim.vehicles.Vehicles: ...
	def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def getHouseholds(self, ) -> javawrappers.org.matsim.households.Households: ...
	def getLanes(self, ) -> javawrappers.org.matsim.lanes.Lanes: ...
	def getActivityFacilities(self, ) -> javawrappers.org.matsim.facilities.ActivityFacilities: ...
	def addScenarioElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
	def getScenarioElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getTransitSchedule(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...


class DefaultActivityTypes:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Coord:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	def hasZ(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def getZ(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


