################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.com.google.inject
import javawrappers.org.matsim.counts.algorithms.graphs.helper
import javawrappers.org.matsim.pt.counts
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.core.controler.events
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class PtCountControlerListener:
	class CountType:
		Boarding: PtCountControlerListener.CountType = ...
		Alighting: PtCountControlerListener.CountType = ...
		Occupancy: PtCountControlerListener.CountType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.counts.PtCountControlerListener.CountType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.pt.counts.PtCountControlerListener.CountType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def notifyIterationEnds(self, arg0: javawrappers.org.matsim.core.controler.events.IterationEndsEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyBeforeMobsim(self, arg0: javawrappers.org.matsim.core.controler.events.BeforeMobsimEvent, ) -> None: ...
	def notifyAfterMobsim(self, arg0: javawrappers.org.matsim.core.controler.events.AfterMobsimEvent, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.counts.PtCountControlerListener.CountType: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.pt.counts.PtCountControlerListener.CountType, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notifyStartup(self, arg0: javawrappers.org.matsim.core.controler.events.StartupEvent, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class OccupancyAnalyzer:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ): ...
	def setOccupancies(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getBoardStopIds(self, ) -> javawrappers.java.util.Set: ...
	def getAlightVolumesForStop(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAlights(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleDepartsAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.TransitDriverStartsEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonEntersVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonLeavesVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	def getAlightStopIds(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def getOccupancyStopIds(self, ) -> javawrappers.java.util.Set: ...
	def getOccupancyVolumesForStop(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...
	def getBoardVolumesForStop(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[int, JInt], 1): ...
	def getAllStopIds(self, ) -> javawrappers.java.util.Set: ...
	def getTimeSlotIndex(self, arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setBoards(self, arg0: javawrappers.java.util.Map, ) -> None: ...


class SimpleWriter:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def writeln(self, ) -> None: ...
	@overload
	def writeln(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def writeln(self, arg0: javawrappers.java.lang.StringBuffer, ) -> None: ...
	@overload
	def writeln(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[string, JString], ) -> None: ...
	def notify(self, ) -> None: ...


class PtCountSimComparisonTableWriter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class PtCountsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class PtCountsLoadCurveGraphCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


