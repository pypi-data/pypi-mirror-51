################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.utils.objectattributes
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.vehicles
import javawrappers.org.xml.sax
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class VehiclesFactory:
	def createVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.vehicles.VehicleType, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def createVehicleType(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.vehicles.VehicleType: ...
	def createFreigthCapacity(self, ) -> javawrappers.org.matsim.vehicles.FreightCapacity: ...
	def createVehicleCapacity(self, ) -> javawrappers.org.matsim.vehicles.VehicleCapacity: ...
	def createEngineInformation(self, arg0: javawrappers.org.matsim.vehicles.EngineInformation.FuelType, arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.vehicles.EngineInformation: ...


class VehicleTypeImpl:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ): ...
	def setAccessTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEgressTime(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMaximumVelocity(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getPcuEquivalents(self, ) -> Union[float, JDouble]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setEngineInformation(self, arg0: javawrappers.org.matsim.vehicles.EngineInformation, ) -> None: ...
	def setEgressTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEngineInformation(self, ) -> javawrappers.org.matsim.vehicles.EngineInformation: ...
	def setPcuEquivalents(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMaximumVelocity(self, ) -> Union[float, JDouble]: ...
	def setFlowEfficiencyFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFlowEfficiencyFactor(self, ) -> Union[float, JDouble]: ...
	def getAccessTime(self, ) -> Union[float, JDouble]: ...
	def getDoorOperationMode(self, ) -> javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode: ...
	def setWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def setDoorOperationMode(self, arg0: javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: javawrappers.org.matsim.vehicles.VehicleCapacity, ) -> None: ...
	def getCapacity(self, ) -> javawrappers.org.matsim.vehicles.VehicleCapacity: ...


class VehicleReaderV1:
	def __init__(self, arg0: javawrappers.org.matsim.vehicles.Vehicles, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class VehicleType:
	class DoorOperationMode:
		serial: VehicleType.DoorOperationMode = ...
		parallel: VehicleType.DoorOperationMode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def setAccessTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEgressTime(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMaximumVelocity(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode, 1): ...
	def getPcuEquivalents(self, ) -> Union[float, JDouble]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setEngineInformation(self, arg0: javawrappers.org.matsim.vehicles.EngineInformation, ) -> None: ...
	def setEgressTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEngineInformation(self, ) -> javawrappers.org.matsim.vehicles.EngineInformation: ...
	def setPcuEquivalents(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMaximumVelocity(self, ) -> Union[float, JDouble]: ...
	def setFlowEfficiencyFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFlowEfficiencyFactor(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def getAccessTime(self, ) -> Union[float, JDouble]: ...
	def getDoorOperationMode(self, ) -> javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode: ...
	def setWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	def setDoorOperationMode(self, arg0: javawrappers.org.matsim.vehicles.VehicleType.DoorOperationMode, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCapacity(self, arg0: javawrappers.org.matsim.vehicles.VehicleCapacity, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def getCapacity(self, ) -> javawrappers.org.matsim.vehicles.VehicleCapacity: ...


class EngineInformation:
	class FuelType:
		diesel: EngineInformation.FuelType = ...
		gasoline: EngineInformation.FuelType = ...
		electricity: EngineInformation.FuelType = ...
		biodiesel: EngineInformation.FuelType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vehicles.EngineInformation.FuelType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.vehicles.EngineInformation.FuelType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFuelType(self, arg0: javawrappers.org.matsim.vehicles.EngineInformation.FuelType, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.vehicles.EngineInformation.FuelType: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.vehicles.EngineInformation.FuelType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getFuelType(self, ) -> javawrappers.org.matsim.vehicles.EngineInformation.FuelType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getGasConsumption(self, ) -> Union[float, JDouble]: ...
	def setGasConsumption(self, arg0: Union[float, JDouble], ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class VehicleWriterV1:
	def __init__(self, arg0: javawrappers.org.matsim.vehicles.Vehicles, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPrettyPrint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIndentationString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def useCompression(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class FreightCapacityImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getVolume(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setVolume(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class Vehicle:
	def getType(self, ) -> javawrappers.org.matsim.vehicles.VehicleType: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class VehicleCapacity:
	def setSeats(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def setStandingRoom(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def setFreightCapacity(self, arg0: javawrappers.org.matsim.vehicles.FreightCapacity, ) -> None: ...
	def getSeats(self, ) -> javawrappers.java.lang.Integer: ...
	def getStandingRoom(self, ) -> javawrappers.java.lang.Integer: ...
	def getFreightCapacity(self, ) -> javawrappers.org.matsim.vehicles.FreightCapacity: ...


class VehicleSchemaV1Names:


class FreightCapacity:
	def getVolume(self, ) -> Union[float, JDouble]: ...
	def setVolume(self, arg0: Union[float, JDouble], ) -> None: ...


class VehicleUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createVehicleId(arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createVehiclesContainer() -> javawrappers.org.matsim.vehicles.Vehicles: ...
	@staticmethod
	def getDefaultVehicleType() -> javawrappers.org.matsim.vehicles.VehicleType: ...
	@staticmethod
	def getVehicleId(arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getFactory() -> javawrappers.org.matsim.vehicles.VehiclesFactory: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def insertVehicleIdIntoAttributes(arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...


class EngineInformationImpl:
	def __init__(self, arg0: javawrappers.org.matsim.vehicles.EngineInformation.FuelType, arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFuelType(self, arg0: javawrappers.org.matsim.vehicles.EngineInformation.FuelType, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFuelType(self, ) -> javawrappers.org.matsim.vehicles.EngineInformation.FuelType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getGasConsumption(self, ) -> Union[float, JDouble]: ...
	def setGasConsumption(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class VehicleCapacityImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setSeats(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setStandingRoom(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	def setFreightCapacity(self, arg0: javawrappers.org.matsim.vehicles.FreightCapacity, ) -> None: ...
	def getSeats(self, ) -> javawrappers.java.lang.Integer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStandingRoom(self, ) -> javawrappers.java.lang.Integer: ...
	def getFreightCapacity(self, ) -> javawrappers.org.matsim.vehicles.FreightCapacity: ...
	def notify(self, ) -> None: ...


class Vehicles:
	def getVehicleAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.ObjectAttributes: ...
	def getVehicles(self, ) -> javawrappers.java.util.Map: ...
	def removeVehicleType(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def addVehicle(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ) -> None: ...
	def addVehicleType(self, arg0: javawrappers.org.matsim.vehicles.VehicleType, ) -> None: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.vehicles.VehiclesFactory: ...
	def removeVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getVehicleTypes(self, ) -> javawrappers.java.util.Map: ...


class VehicleImpl:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.vehicles.VehicleType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.matsim.vehicles.VehicleType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


