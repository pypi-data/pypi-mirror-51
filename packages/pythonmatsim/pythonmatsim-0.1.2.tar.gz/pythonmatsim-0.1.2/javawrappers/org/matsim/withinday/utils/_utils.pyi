################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.java.util
import javawrappers.org.matsim.core.router
import javawrappers.java.io
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ReplanningException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class EditRoutes:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.LeastCostPathCalculator, arg2: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, ): ...
	def relocateCurrentLegRoute(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, arg1: javawrappers.org.matsim.api.core.v01.population.Person, arg2: Union[int, JInt], arg3: javawrappers.org.matsim.api.core.v01.Id, arg4: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def replanCurrentLeg(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], ) -> None: ...
	def replanCurrentLegRoute(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, arg1: javawrappers.org.matsim.api.core.v01.population.Person, arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def relocateFutureLegRoute(arg0: javawrappers.org.matsim.api.core.v01.population.Leg, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.api.core.v01.network.Network, arg5: javawrappers.org.matsim.core.router.TripRouter, ) -> Union[int, JBoolean]: ...
	@overload
	def relocateFutureLegRoute(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def replanFutureLegRoute(self, arg0: javawrappers.org.matsim.api.core.v01.population.Leg, arg1: javawrappers.org.matsim.api.core.v01.population.Person, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getPathCalculator(self, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...


class EditPlans:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, arg1: javawrappers.org.matsim.core.router.TripRouter, arg2: javawrappers.org.matsim.withinday.utils.EditTrips, arg3: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, arg1: javawrappers.org.matsim.core.router.TripRouter, arg2: javawrappers.org.matsim.withinday.utils.EditTrips, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, arg1: javawrappers.org.matsim.core.router.TripRouter, arg2: javawrappers.org.matsim.withinday.utils.EditTrips, arg3: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, ): ...
	def rescheduleCurrentActivityEndtime(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def findIndexOfRealActAfter(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def insertActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def insertActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.api.core.v01.population.Activity, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getCurrentPlanElementIndex(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.java.lang.Integer: ...
	def isAtRealActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> Union[int, JBoolean]: ...
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getModeOfCurrentOrNextTrip(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.java.lang.String: ...
	def addActivityAtEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, arg2: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def replaceActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.api.core.v01.population.Activity, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	@overload
	def replaceActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def notify(self, ) -> None: ...
	def flushEverythingBeyondCurrent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	@overload
	def removeActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	@overload
	def removeActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createFinalActivity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def findRealActAfter(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def rescheduleActivityEndtime(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def isRealActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.PlanElement, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findRealActBefore(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...


class EditTrips:
	def __init__(self, arg0: javawrappers.org.matsim.core.router.TripRouter, arg1: javawrappers.org.matsim.api.core.v01.Scenario, arg2: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def replanFutureTrip(arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.java.lang.String, arg3: Union[float, JDouble], arg4: javawrappers.org.matsim.core.router.TripRouter, arg5: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.java.util.List: ...
	@overload
	def replanFutureTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	def replanFutureTrip(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.java.lang.String, arg3: Union[float, JDouble], ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def relocateFutureTrip(arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.java.lang.String, arg3: Union[float, JDouble], arg4: javawrappers.org.matsim.core.router.TripRouter, arg5: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def findTripAfterActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...
	def getStageActivities(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def notify(self, ) -> None: ...
	def findCurrentTrip(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...
	@overload
	@staticmethod
	def insertEmptyTrip(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, arg2: javawrappers.org.matsim.api.core.v01.population.Activity, arg3: javawrappers.java.lang.String, arg4: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, ) -> Union[int, JBoolean]: ...
	@overload
	def insertEmptyTrip(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, arg2: javawrappers.org.matsim.api.core.v01.population.Activity, arg3: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def findTripAtPlanElementIndex(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replanCurrentTrip(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], arg2: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findTripAtPlanElement(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.population.PlanElement, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...


