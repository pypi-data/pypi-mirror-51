################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.core.mobsim.framework.listeners
import javawrappers.org.matsim.core.router.costcalculators
import javawrappers.org.matsim.withinday.trafficmonitoring
import javawrappers.org.matsim.withinday.controller
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.java.net
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.core.controler.events
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class ExecutedPlansService:
	def writeExecutedPlans(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getExecutedPlans(self, ) -> javawrappers.java.util.Map: ...


class WithinDayConfigGroup:
	def __init__(self, ): ...
	class ShortTermPredictionMethod:
		currentSpeeds: WithinDayConfigGroup.ShortTermPredictionMethod = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.withinday.controller.WithinDayConfigGroup.ShortTermPredictionMethod: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.withinday.controller.WithinDayConfigGroup.ShortTermPredictionMethod, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.withinday.controller.WithinDayConfigGroup.ShortTermPredictionMethod, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.withinday.controller.WithinDayConfigGroup.ShortTermPredictionMethod: ...
	def getPredictionMethod(self, ) -> javawrappers.org.matsim.withinday.controller.WithinDayConfigGroup.ShortTermPredictionMethod: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def setPredictionMethod(self, arg0: javawrappers.org.matsim.withinday.controller.WithinDayConfigGroup.ShortTermPredictionMethod, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class WithinDayControlerListener:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setTransitRouterFactory(self, arg0: javawrappers.javax.inject.Provider, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setNumberOfReplanningThreads(self, arg0: Union[int, JInt], ) -> None: ...
	def setTravelDisutilityFactory(self, arg0: javawrappers.org.matsim.core.router.costcalculators.TravelDisutilityFactory, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getWithinDayTravelTime(self, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime: ...
	def addMultiModalTravelTimes(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def notify(self, ) -> None: ...
	def setWithinDayTripRouterFactory(self, arg0: javawrappers.javax.inject.Provider, ) -> None: ...
	def setLeastCostPathCalculatorFactory(self, arg0: javawrappers.org.matsim.core.router.util.LeastCostPathCalculatorFactory, ) -> None: ...
	def getMultiModalTravelTimes(self, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addMultiModalTravelTime(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.router.util.TravelTime, ) -> None: ...
	def getFixedOrderSimulationListener(self, ) -> javawrappers.org.matsim.core.mobsim.framework.listeners.FixedOrderSimulationListener: ...
	def getEarliestLinkExitTimeProvider(self, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.EarliestLinkExitTimeProvider: ...
	def notifyStartup(self, arg0: javawrappers.org.matsim.core.controler.events.StartupEvent, ) -> None: ...
	def setModesAnalyzedByWithinDayTravelTime(self, arg0: javawrappers.java.util.Set, ) -> None: ...


class WithinDayModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class ExampleWithinDayController:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def notifyStartup(self, arg0: javawrappers.org.matsim.core.controler.events.StartupEvent, ) -> None: ...


class ExecutedPlansServiceImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAfterMobsim(self, arg0: javawrappers.org.matsim.core.controler.events.AfterMobsimEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeExecutedPlans(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExecutedPlans(self, ) -> javawrappers.java.util.Map: ...


