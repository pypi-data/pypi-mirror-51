################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.mobsim.framework.events
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.org.matsim.withinday.events
import javawrappers.org.matsim.withinday.replanning.identifiers.tools

from jpype.types import *
from typing import Union

from typing import overload

class LinkReplanningMap:
	def __init__(self, arg0: javawrappers.org.matsim.withinday.trafficmonitoring.EarliestLinkExitTimeProvider, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	class TimeFilterMode:
		EXACT: LinkReplanningMap.TimeFilterMode = ...
		RESTRICTED: LinkReplanningMap.TimeFilterMode = ...
		UNRESTRICTED: LinkReplanningMap.TimeFilterMode = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.withinday.replanning.identifiers.tools.LinkReplanningMap.TimeFilterMode: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.withinday.replanning.identifiers.tools.LinkReplanningMap.TimeFilterMode, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLegStartedAgents(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityEndEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityStartEvent, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.withinday.replanning.identifiers.tools.LinkReplanningMap.TimeFilterMode: ...
	def getUnrestrictedReplanningAgents(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.withinday.replanning.identifiers.tools.LinkReplanningMap.TimeFilterMode, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getRestrictedReplanningAgents(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLegPerformingAgents(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getReplanningAgents(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.Set: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ActivityReplanningMap:
	def __init__(self, arg0: javawrappers.org.matsim.withinday.mobsim.MobsimDataProvider, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityEndEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.withinday.events.ReplanningEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityStartEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyMobsimInitialized(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimInitializedEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getActivityPerformingAgents(self, ) -> javawrappers.java.util.Set: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActivityEndingAgents(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...


