################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jvnet.jaxb2_commons.locator
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jvnet.jaxb2_commons.lang
import javawrappers.javax.xml.bind

from jpype.types import *
from typing import Union

from typing import overload

class JAXBHashCodeStrategy:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JBoolean], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JShort], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[long, JLong], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[string, JString], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JByte, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DefaultHashCodeStrategy:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JByte, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JBoolean], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JShort], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[long, JLong], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[string, JString], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Validate:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def isTrue(arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def notNull(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def noNullElements(arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def notEmpty(arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...


class HashCodeStrategy:
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JBoolean], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JByte, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JShort], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[long, JLong], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[string, JString], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class CopyStrategy:
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JByte, ) -> JByte: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class JAXBMergeCollectionsStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> JByte: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class EnumValue:
	def enumValue(self, ) -> javawrappers.java.lang.Object: ...


class DefaultCopyStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JByte, ) -> JByte: ...
	def notify(self, ) -> None: ...


class DefaultMergeStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> JByte: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JAXBMergeStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> JByte: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MergeStrategy:
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> JByte: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def merge(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JShort]: ...


class MergeFrom:
	def createNewInstance(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def mergeFrom(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def mergeFrom(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.org.jvnet.jaxb2_commons.lang.MergeStrategy, ) -> None: ...


class ContextUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.javax.xml.bind.JAXBContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getContextPath(*arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CopyTo:
	@overload
	def copyTo(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def copyTo(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.jvnet.jaxb2_commons.lang.CopyStrategy, ) -> javawrappers.java.lang.Object: ...
	def createNewInstance(self, ) -> javawrappers.java.lang.Object: ...


class DefaultToStringStrategy:
	def __init__(self, ): ...
	def appendEnd(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def appendStart(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isUseIdentityHashCode(self, ) -> Union[int, JBoolean]: ...
	def isFullDetail(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JShort], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[float, JFloat], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[float, JDouble], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[long, JLong], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[float, JFloat], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JShort], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JByte, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(JByte, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[long, JLong], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[string, JString], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[float, JDouble], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[string, JString], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JByte, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[float, JDouble], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JBoolean], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(JByte, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[float, JFloat], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JShort], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JShort], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[float, JFloat], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[float, JDouble], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[long, JLong], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[long, JLong], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...


class JAXBToStringStrategy:
	def __init__(self, ): ...
	def appendEnd(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def appendStart(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isUseIdentityHashCode(self, ) -> Union[int, JBoolean]: ...
	def isFullDetail(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JShort], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[float, JFloat], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(JByte, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[float, JDouble], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[long, JLong], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[long, JLong], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[float, JFloat], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JShort], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JByte, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[string, JString], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[float, JDouble], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[string, JString], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JByte, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[float, JDouble], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JBoolean], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JShort], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(JByte, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JShort], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[float, JFloat], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[float, JDouble], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[long, JLong], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[long, JLong], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[float, JFloat], 1), ) -> javawrappers.java.lang.StringBuilder: ...


class EqualsStrategy:
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...


class HashCode:
	def hashCode(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.lang.HashCodeStrategy, ) -> Union[int, JInt]: ...


class ToStringStrategy:
	def appendEnd(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def appendStart(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[float, JFloat], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[long, JLong], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JShort], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[long, JLong], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JByte, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[float, JDouble], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[string, JString], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: Union[float, JDouble], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JShort], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(JByte, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[float, JFloat], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[float, JDouble], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[float, JFloat], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[long, JLong], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JShort], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(JByte, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[int, JBoolean], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JInt], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JBoolean], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JByte, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: Union[string, JString], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[long, JLong], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[float, JDouble], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[float, JFloat], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[int, JShort], 1), ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def appendField(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.StringBuilder, arg4: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.StringBuilder: ...


class JAXBCopyStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def copy(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: JByte, ) -> JByte: ...
	def notify(self, ) -> None: ...


class ClassUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getShortClassName(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getShortClassName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JAXBEqualsStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ToString:
	def appendFields(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.org.jvnet.jaxb2_commons.lang.ToStringStrategy, ) -> javawrappers.java.lang.StringBuilder: ...
	def append(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.java.lang.StringBuilder, arg2: javawrappers.org.jvnet.jaxb2_commons.lang.ToStringStrategy, ) -> javawrappers.java.lang.StringBuilder: ...


class Equals:
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.org.jvnet.jaxb2_commons.lang.EqualsStrategy, ) -> Union[int, JBoolean]: ...


class StringUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def split(arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isEmpty(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def join(arg0: javawrappers.java.util.Iterator, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DefaultEqualsStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JBoolean], 1), arg3: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JFloat], 1), arg3: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[string, JString], 1), arg3: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(JByte, 1), arg3: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JShort], arg3: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JShort], 1), arg3: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JByte, arg3: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: JArray(Union[long, JLong], 1), arg3: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg1: javawrappers.org.jvnet.jaxb2_commons.locator.ObjectLocator, arg2: Union[string, JString], arg3: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


