################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.media.jai.util
import javawrappers.java.lang
import javawrappers.java.io

from jpype.types import *
from typing import Union

from typing import overload

class ImagingListener:
	def errorOccurred(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Object, arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...


class Range:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.Comparable, arg4: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def intersect(self, arg0: javawrappers.javax.media.jai.util.Range, ) -> javawrappers.javax.media.jai.util.Range: ...
	def intersects(self, arg0: javawrappers.javax.media.jai.util.Range, ) -> Union[int, JBoolean]: ...
	def getMaxValue(self, ) -> javawrappers.java.lang.Comparable: ...
	def notifyAll(self, ) -> None: ...
	def subtract(self, arg0: javawrappers.javax.media.jai.util.Range, ) -> JArray(javawrappers.javax.media.jai.util.Range, 1): ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getElementClass(self, ) -> javawrappers.java.lang.Class: ...
	def union(self, arg0: javawrappers.javax.media.jai.util.Range, ) -> javawrappers.javax.media.jai.util.Range: ...
	def notify(self, ) -> None: ...
	def isMaxIncluded(self, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.javax.media.jai.util.Range, ) -> Union[int, JBoolean]: ...
	def getMinValue(self, ) -> javawrappers.java.lang.Comparable: ...
	def isMinIncluded(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ImagingException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRootCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CaselessStringKey:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


