################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.javax.validation.constraints

from jpype.types import *
from typing import Union

from typing import overload

class AssertFalse:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.AssertFalse, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.AssertFalse, 1): ...


class AssertTrue:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.AssertTrue, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.AssertTrue, 1): ...


class Negative:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Negative, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Negative, 1): ...


class PositiveOrZero:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.PositiveOrZero, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.PositiveOrZero, 1): ...


class NotEmpty:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NotEmpty, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NotEmpty, 1): ...


class PastOrPresent:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.PastOrPresent, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.PastOrPresent, 1): ...


class DecimalMin:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.DecimalMin, 1): ...


	def inclusive(self, ) -> Union[int, JBoolean]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.DecimalMin, 1): ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...


class Null:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Null, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Null, 1): ...


class FutureOrPresent:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.FutureOrPresent, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.FutureOrPresent, 1): ...


class NotBlank:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NotBlank, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NotBlank, 1): ...


class NotNull:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NotNull, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NotNull, 1): ...


class Email:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Email, 1): ...


	def regexp(self, ) -> javawrappers.java.lang.String: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def flags(self, ) -> JArray(javawrappers.javax.validation.constraints.Pattern.Flag, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Email, 1): ...


class DecimalMax:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.DecimalMax, 1): ...


	def inclusive(self, ) -> Union[int, JBoolean]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.DecimalMax, 1): ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...


class Digits:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Digits, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def integer(self, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Digits, 1): ...
	def fraction(self, ) -> Union[int, JInt]: ...


class Size:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Size, 1): ...


	def min(self, ) -> Union[int, JInt]: ...
	def max(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Size, 1): ...


class Min:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Min, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Min, 1): ...
	@overload
	def value(self, ) -> Union[long, JLong]: ...


class Positive:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Positive, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Positive, 1): ...


class Pattern:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Pattern, 1): ...


	class Flag:
		UNIX_LINES: Pattern.Flag = ...
		CASE_INSENSITIVE: Pattern.Flag = ...
		COMMENTS: Pattern.Flag = ...
		MULTILINE: Pattern.Flag = ...
		DOTALL: Pattern.Flag = ...
		UNICODE_CASE: Pattern.Flag = ...
		CANON_EQ: Pattern.Flag = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.validation.constraints.Pattern.Flag: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.javax.validation.constraints.Pattern.Flag, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def regexp(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.validation.constraints.Pattern.Flag: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.javax.validation.constraints.Pattern.Flag, 1): ...
	def flags(self, ) -> JArray(javawrappers.javax.validation.constraints.Pattern.Flag, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Pattern, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Past:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Past, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Past, 1): ...


class Future:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Future, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Future, 1): ...


class Max:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Max, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> Union[long, JLong]: ...
	@overload
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.Max, 1): ...


class NegativeOrZero:
	class List:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NegativeOrZero, 1): ...


	def payload(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def groups(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def message(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> JArray(javawrappers.javax.validation.constraints.NegativeOrZero, 1): ...


