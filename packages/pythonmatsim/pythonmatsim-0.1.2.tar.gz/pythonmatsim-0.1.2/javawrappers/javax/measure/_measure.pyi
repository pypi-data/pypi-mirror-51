################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io

from jpype.types import *
from typing import Union

from typing import overload

class MeasurementException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class UnitConverter:
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class Unit:
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class Quantity:
	def add(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def inverse(self, ) -> javawrappers.javax.measure.Quantity: ...
	def subtract(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def divide(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.javax.measure.Quantity: ...
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def multiply(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Quantity: ...


class UnconvertibleException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class IncommensurableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Dimension:
	def getBaseDimensions(self, ) -> javawrappers.java.util.Map: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Dimension: ...
	def divide(self, arg0: javawrappers.javax.measure.Dimension, ) -> javawrappers.javax.measure.Dimension: ...
	def multiply(self, arg0: javawrappers.javax.measure.Dimension, ) -> javawrappers.javax.measure.Dimension: ...


