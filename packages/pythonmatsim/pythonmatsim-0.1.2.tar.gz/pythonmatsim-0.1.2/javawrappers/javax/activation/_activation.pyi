################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.awt.datatransfer
import javawrappers.javax.activation

from jpype.types import *
from typing import Union

from typing import overload

class FileDataSource:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def setFileTypeMap(self, arg0: javawrappers.javax.activation.FileTypeMap, ) -> None: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getFile(self, ) -> javawrappers.java.io.File: ...
	def notify(self, ) -> None: ...


class MimeTypeParameterList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNames(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class CommandMap:
	def __init__(self, ): ...
	@overload
	def getPreferredCommands(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	@overload
	def getPreferredCommands(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataSource, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getCommand(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.activation.DataSource, ) -> javawrappers.javax.activation.CommandInfo: ...
	@overload
	def getCommand(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.CommandInfo: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getDefaultCommandMap() -> javawrappers.javax.activation.CommandMap: ...
	def getMimeTypes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def createDataContentHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.DataContentHandler: ...
	@overload
	def createDataContentHandler(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataSource, ) -> javawrappers.javax.activation.DataContentHandler: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getAllCommands(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	@overload
	def getAllCommands(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataSource, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	@staticmethod
	def setDefaultCommandMap(arg0: javawrappers.javax.activation.CommandMap, ) -> None: ...


class MailcapCommandMap:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def getPreferredCommands(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataSource, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	@overload
	def getPreferredCommands(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getCommand(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.CommandInfo: ...
	@overload
	def getCommand(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.activation.DataSource, ) -> javawrappers.javax.activation.CommandInfo: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getDefaultCommandMap() -> javawrappers.javax.activation.CommandMap: ...
	def getMimeTypes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notify(self, ) -> None: ...
	def getNativeCommands(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def createDataContentHandler(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataSource, ) -> javawrappers.javax.activation.DataContentHandler: ...
	@overload
	def createDataContentHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.DataContentHandler: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setDefaultCommandMap(arg0: javawrappers.javax.activation.CommandMap, ) -> None: ...
	@overload
	def getAllCommands(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	@overload
	def getAllCommands(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataSource, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	def addMailcap(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class MimeTypeParseException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CommandObject:
	def setCommandContext(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.activation.DataHandler, ) -> None: ...


class MimeType:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrimaryType(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setSubType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def match(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def match(self, arg0: javawrappers.javax.activation.MimeType, ) -> Union[int, JBoolean]: ...
	def getSubType(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.javax.activation.MimeTypeParameterList: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeParameter(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setPrimaryType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getBaseType(self, ) -> javawrappers.java.lang.String: ...
	def getParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class UnsupportedDataTypeException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CommandInfo:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	class Beans:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCommandName(self, ) -> javawrappers.java.lang.String: ...
	def getCommandClass(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getCommandObject(self, arg0: javawrappers.javax.activation.DataHandler, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.Object: ...


class DataContentHandlerFactory:
	def createDataContentHandler(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.DataContentHandler: ...


class URLDataSource:
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class DataSource:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...


class FileTypeMap:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getDefaultFileTypeMap() -> javawrappers.javax.activation.FileTypeMap: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getContentType(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.lang.String: ...
	@overload
	def getContentType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setDefaultFileTypeMap(arg0: javawrappers.javax.activation.FileTypeMap, ) -> None: ...
	def notify(self, ) -> None: ...


class MimetypesFileTypeMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getDefaultFileTypeMap() -> javawrappers.javax.activation.FileTypeMap: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getContentType(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.lang.String: ...
	@overload
	def getContentType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addMimeTypes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def setDefaultFileTypeMap(arg0: javawrappers.javax.activation.FileTypeMap, ) -> None: ...
	def notify(self, ) -> None: ...


class DataHandler:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.activation.DataSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ): ...
	def getPreferredCommands(self, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDataSource(self, ) -> javawrappers.javax.activation.DataSource: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getCommand(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.CommandInfo: ...
	def notifyAll(self, ) -> None: ...
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def setDataContentHandlerFactory(arg0: javawrappers.javax.activation.DataContentHandlerFactory, ) -> None: ...
	def getTransferData(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> javawrappers.java.lang.Object: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def setCommandMap(self, arg0: javawrappers.javax.activation.CommandMap, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def isDataFlavorSupported(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getAllCommands(self, ) -> JArray(javawrappers.javax.activation.CommandInfo, 1): ...
	def getBean(self, arg0: javawrappers.javax.activation.CommandInfo, ) -> javawrappers.java.lang.Object: ...
	def getTransferDataFlavors(self, ) -> JArray(javawrappers.java.awt.datatransfer.DataFlavor, 1): ...


class DataContentHandler:
	def writeTo(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.OutputStream, ) -> None: ...
	def getContent(self, arg0: javawrappers.javax.activation.DataSource, ) -> javawrappers.java.lang.Object: ...
	def getTransferData(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, arg1: javawrappers.javax.activation.DataSource, ) -> javawrappers.java.lang.Object: ...
	def getTransferDataFlavors(self, ) -> JArray(javawrappers.java.awt.datatransfer.DataFlavor, 1): ...


class ActivationDataFlavor:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def isFlavorJavaFileListType(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getTextPlainUnicodeFlavor() -> javawrappers.java.awt.datatransfer.DataFlavor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultRepresentationClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPrimaryType(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getSubType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def isMimeTypeEqual(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isMimeTypeEqual(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isRepresentationClassSerializable(self, ) -> Union[int, JBoolean]: ...
	def isRepresentationClassCharBuffer(self, ) -> Union[int, JBoolean]: ...
	def getDefaultRepresentationClassAsString(self, ) -> javawrappers.java.lang.String: ...
	def isRepresentationClassByteBuffer(self, ) -> Union[int, JBoolean]: ...
	def getParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def selectBestTextFlavor(arg0: JArray(javawrappers.java.awt.datatransfer.DataFlavor, 1), ) -> javawrappers.java.awt.datatransfer.DataFlavor: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def setHumanPresentableName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMimeTypeSerializedObject(self, ) -> Union[int, JBoolean]: ...
	def getMimeType(self, ) -> javawrappers.java.lang.String: ...
	def getReaderForText(self, arg0: javawrappers.java.awt.datatransfer.Transferable, ) -> javawrappers.java.io.Reader: ...
	def match(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> Union[int, JBoolean]: ...
	def isFlavorTextType(self, ) -> Union[int, JBoolean]: ...
	def isFlavorSerializedObjectType(self, ) -> Union[int, JBoolean]: ...
	def getHumanPresentableName(self, ) -> javawrappers.java.lang.String: ...
	def getRepresentationClass(self, ) -> javawrappers.java.lang.Class: ...
	def isRepresentationClassInputStream(self, ) -> Union[int, JBoolean]: ...
	def isFlavorRemoteObjectType(self, ) -> Union[int, JBoolean]: ...
	def isRepresentationClassReader(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.awt.datatransfer.DataFlavor, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRepresentationClassRemote(self, ) -> Union[int, JBoolean]: ...


