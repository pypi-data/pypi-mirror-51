################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.util.concurrent
import javawrappers.java.beans
import javawrappers.java.util.function
import javawrappers.javax.el

from jpype.types import *
from typing import Union

from typing import overload

class ResourceBundleELResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ELManager:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getELContext(self, ) -> javawrappers.javax.el.StandardELContext: ...
	def addEvaluationListener(self, arg0: javawrappers.javax.el.EvaluationListener, ) -> None: ...
	def importStatic(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def importPackage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ValueExpression, ) -> None: ...
	def setELContext(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.ELContext: ...
	def notify(self, ) -> None: ...
	def addELResolver(self, arg0: javawrappers.javax.el.ELResolver, ) -> None: ...
	def defineBean(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def importClass(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def addBeanNameResolver(self, arg0: javawrappers.javax.el.BeanNameResolver, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mapFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
	@staticmethod
	def getExpressionFactory() -> javawrappers.javax.el.ExpressionFactory: ...


class StaticFieldELResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ELContextListener:
	def contextCreated(self, arg0: javawrappers.javax.el.ELContextEvent, ) -> None: ...


class TypeConverter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Expression:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ValueReference:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBase(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class ELContextEvent:
	def __init__(self, arg0: javawrappers.javax.el.ELContext, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getELContext(self, ) -> javawrappers.javax.el.ELContext: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StandardELContext:
	@overload
	def __init__(self, arg0: javawrappers.javax.el.ExpressionFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.el.ELContext, ): ...
	class LocalBeanNameResolver:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isReadOnly(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setBeanValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def canCreateBean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getBean(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def isNameResolved(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	class DefaultVariableMapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def resolveVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.ValueExpression: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ValueExpression, ) -> javawrappers.javax.el.ValueExpression: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DefaultFunctionMapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def resolveFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def mapFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
		def notify(self, ) -> None: ...


	def putContext(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def notifyAfterEvaluation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getImportHandler(self, ) -> javawrappers.javax.el.ImportHandler: ...
	def resolveVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.ValueExpression: ...
	def addEvaluationListener(self, arg0: javawrappers.javax.el.EvaluationListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def exitLambdaScope(self, ) -> None: ...
	@overload
	def setPropertyResolved(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setPropertyResolved(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def isPropertyResolved(self, ) -> Union[int, JBoolean]: ...
	def getEvaluationListeners(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def isNameResolved(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def addELResolver(self, arg0: javawrappers.javax.el.ELResolver, ) -> None: ...
	def isReadOnly(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyPropertyResolved(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getFunctionMapper(self, ) -> javawrappers.javax.el.FunctionMapper: ...
	def canCreateBean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def mapFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
	def getBean(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def notifyBeforeEvaluation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isLambdaArgument(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ValueExpression, ) -> javawrappers.javax.el.ValueExpression: ...
	def getLambdaArgument(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getELResolver(self, ) -> javawrappers.javax.el.ELResolver: ...
	def enterLambdaScope(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def resolveFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setBeanValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getContext(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def getVariableMapper(self, ) -> javawrappers.javax.el.VariableMapper: ...


class ArrayELResolver:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ValueExpression:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getValueReference(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.ValueReference: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpectedType(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, ) -> Union[int, JBoolean]: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...


class MethodNotFoundException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ELContext:
	def __init__(self, ): ...
	def putContext(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def notifyAfterEvaluation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getImportHandler(self, ) -> javawrappers.javax.el.ImportHandler: ...
	def addEvaluationListener(self, arg0: javawrappers.javax.el.EvaluationListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def exitLambdaScope(self, ) -> None: ...
	@overload
	def setPropertyResolved(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setPropertyResolved(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def isPropertyResolved(self, ) -> Union[int, JBoolean]: ...
	def getEvaluationListeners(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyPropertyResolved(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getFunctionMapper(self, ) -> javawrappers.javax.el.FunctionMapper: ...
	def notifyBeforeEvaluation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isLambdaArgument(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getLambdaArgument(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getELResolver(self, ) -> javawrappers.javax.el.ELResolver: ...
	def enterLambdaScope(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getContext(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def getVariableMapper(self, ) -> javawrappers.javax.el.VariableMapper: ...


class VariableMapper:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resolveVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.ValueExpression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ValueExpression, ) -> javawrappers.javax.el.ValueExpression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ELResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MapELResolver:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class BeanNameELResolver:
	def __init__(self, arg0: javawrappers.javax.el.BeanNameResolver, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LambdaExpression:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.javax.el.ValueExpression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def invoke(self, *arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def invoke(self, arg0: javawrappers.javax.el.ELContext, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setELContext(self, arg0: javawrappers.javax.el.ELContext, ) -> None: ...
	def notify(self, ) -> None: ...


class PropertyNotWritableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ELClass:
	def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getKlass(self, ) -> javawrappers.java.lang.Class: ...


class BeanELResolver:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	class BeanProperties:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getBeanProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.BeanELResolver.BeanProperty: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BeanProperty:
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.beans.PropertyDescriptor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isReadOnly(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getWriteMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getReadMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
		def notify(self, ) -> None: ...
		def getPropertyType(self, ) -> javawrappers.java.lang.Class: ...


	class SoftConcurrentHashMap:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def reduceToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntBiFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.el.BeanELResolver.BeanProperties, ) -> javawrappers.javax.el.BeanELResolver.BeanProperties: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def reduceEntriesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def searchKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def reduce(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def mappingCount(self, ) -> Union[long, JLong]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reduceEntriesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		@overload
		def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.util.Map.Entry: ...
		def size(self, ) -> Union[int, JInt]: ...
		def reduceValuesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		@staticmethod
		def newKeySet(arg0: Union[int, JInt], ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		@overload
		@staticmethod
		def newKeySet() -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		def keys(self, ) -> javawrappers.java.util.Enumeration: ...
		def notifyAll(self, ) -> None: ...
		def reduceKeysToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def searchEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def search(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def reduceToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongBiFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		def searchValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.el.BeanELResolver.BeanProperties: ...
		@overload
		def keySet(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		@overload
		def keySet(self, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		@overload
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def reduceKeysToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		def reduceKeysToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		@overload
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		@overload
		def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def reduceEntriesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def reduceToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleBiFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		def reduceValuesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		@overload
		def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def elements(self, ) -> javawrappers.java.util.Enumeration: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reduceValuesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		@overload
		def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def putIfAbsent(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.el.BeanELResolver.BeanProperties, ) -> javawrappers.javax.el.BeanELResolver.BeanProperties: ...
		@overload
		def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...


	class BPSoftReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def reduceToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntBiFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBeanProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.BeanELResolver.BeanProperty: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.el.BeanELResolver.BeanProperties, ) -> javawrappers.javax.el.BeanELResolver.BeanProperties: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def reduceEntriesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getWriteMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def searchKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def reduce(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def mappingCount(self, ) -> Union[long, JLong]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reduceEntriesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.util.Map.Entry: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def reduceValuesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	@overload
	def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def newKeySet(arg0: Union[int, JInt], ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	@overload
	@staticmethod
	def newKeySet() -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def reduceKeysToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def getPropertyType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def searchEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def search(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def reduceToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongBiFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def searchValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.el.BeanELResolver.BeanProperties: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def keySet(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	@overload
	def keySet(self, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	@overload
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def reduceKeysToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def reduceKeysToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	@overload
	def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def reduceEntriesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def reduceToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleBiFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	def getReadMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def reduceValuesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def reduceValuesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def putIfAbsent(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.el.BeanELResolver.BeanProperties, ) -> javawrappers.javax.el.BeanELResolver.BeanProperties: ...
	@overload
	def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...


class ELProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def defineBean(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def defineFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
	@overload
	def defineFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def eval(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getELManager(self, ) -> javawrappers.javax.el.ELManager: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PropertyNotFoundException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FunctionMapper:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resolveFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mapFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
	def notify(self, ) -> None: ...


class CompositeELResolver:
	def __init__(self, ): ...
	class CompositeIterator:
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.beans.FeatureDescriptor: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.beans.FeatureDescriptor: ...
	def add(self, arg0: javawrappers.javax.el.ELResolver, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


class ExpressionFactory:
	def __init__(self, ): ...
	def getInitFunctionMap(self, ) -> javawrappers.java.util.Map: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def coerceToType(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def createMethodExpression(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.javax.el.MethodExpression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def createValueExpression(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.el.ValueExpression: ...
	@overload
	def createValueExpression(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.javax.el.ValueExpression: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def newInstance() -> javawrappers.javax.el.ExpressionFactory: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.util.Properties, ) -> javawrappers.javax.el.ExpressionFactory: ...
	def getStreamELResolver(self, ) -> javawrappers.javax.el.ELResolver: ...
	def notify(self, ) -> None: ...


class MethodExpression:
	def __init__(self, ): ...
	def isParmetersProvided(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMethodInfo(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.MethodInfo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isParametersProvided(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ImportHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def importClass(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def importStatic(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def resolveClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def importPackage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def resolveStatic(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...


class EvaluationListener:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def beforeEvaluation(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def afterEvaluation(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def propertyResolved(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...


class ELException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MethodInfo:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: JArray(javawrappers.java.lang.Class, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getReturnType(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParamTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BeanNameResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isReadOnly(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBeanValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def canCreateBean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBean(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def isNameResolved(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class ListELResolver:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


