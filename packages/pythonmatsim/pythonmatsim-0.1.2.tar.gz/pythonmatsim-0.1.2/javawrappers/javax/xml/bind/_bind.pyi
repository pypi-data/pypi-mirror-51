################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.util
import javawrappers.javax.xml.validation
import javawrappers.org.w3c.dom
import javawrappers.javax.xml.stream
import javawrappers.javax.xml.transform
import javawrappers.javax.xml.bind.annotation.adapters
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.javax.xml.namespace
import javawrappers.org.xml.sax
import javawrappers.java.math
import javawrappers.javax.xml.bind.attachment
import javawrappers.javax.xml.bind

from jpype.types import *
from typing import Union

from typing import overload

class MarshalException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PropertyException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class DatatypeConverterInterface:
	def parseFloat(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	def parseAnySimpleType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def parseDateTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def parseBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def printBoolean(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def printByte(self, arg0: JByte, ) -> javawrappers.java.lang.String: ...
	def printFloat(self, arg0: Union[float, JFloat], ) -> javawrappers.java.lang.String: ...
	def parseDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	def parseDecimal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigDecimal: ...
	def parseUnsignedInt(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def printUnsignedShort(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def parseHexBinary(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def parseShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	def printShort(self, arg0: Union[int, JShort], ) -> javawrappers.java.lang.String: ...
	def printDouble(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def printInteger(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.lang.String: ...
	def parseQName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.javax.xml.namespace.QName: ...
	def parseInteger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigInteger: ...
	def parseTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def printQName(self, arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.java.lang.String: ...
	def printDecimal(self, arg0: javawrappers.java.math.BigDecimal, ) -> javawrappers.java.lang.String: ...
	def printDate(self, arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def printAnySimpleType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printHexBinary(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	def printLong(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	def printDateTime(self, arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def parseBase64Binary(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def parseByte(self, arg0: javawrappers.java.lang.String, ) -> JByte: ...
	def parseInt(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def parseDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def parseLong(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def parseString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printUnsignedInt(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	def printInt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def parseUnsignedShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def printString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printBase64Binary(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	def printTime(self, arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...


class Validator:
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def validateRoot(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def validate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class JAXBContext:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createMarshaller(self, ) -> javawrappers.javax.xml.bind.Marshaller: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createUnmarshaller(self, ) -> javawrappers.javax.xml.bind.Unmarshaller: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, arg2: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(*arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	def createBinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.Binder: ...
	@overload
	def createBinder(self, ) -> javawrappers.javax.xml.bind.Binder: ...
	def notify(self, ) -> None: ...
	def createValidator(self, ) -> javawrappers.javax.xml.bind.Validator: ...
	def generateSchema(self, arg0: javawrappers.javax.xml.bind.SchemaOutputResolver, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createJAXBIntrospector(self, ) -> javawrappers.javax.xml.bind.JAXBIntrospector: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class JAXBPermission:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class Unmarshaller:
	class Listener:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def afterUnmarshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def beforeUnmarshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def setAttachmentUnmarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> None: ...
	def afterUnmarshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	@overload
	def setAdapter(self, arg0: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	def notifyAll(self, ) -> None: ...
	def beforeUnmarshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.javax.xml.validation.Schema, ) -> None: ...
	def getSchema(self, ) -> javawrappers.javax.xml.validation.Schema: ...
	def isValidating(self, ) -> Union[int, JBoolean]: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLEventReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.Source, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.Source, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLEventReader, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.w3c.dom.Node, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getAttachmentUnmarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller: ...
	def getUnmarshallerHandler(self, ) -> javawrappers.javax.xml.bind.UnmarshallerHandler: ...
	def setListener(self, arg0: javawrappers.javax.xml.bind.Unmarshaller.Listener, ) -> None: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def getListener(self, ) -> javawrappers.javax.xml.bind.Unmarshaller.Listener: ...


class SchemaOutputResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createOutput(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.xml.transform.Result: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ValidationException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TypeConstraintException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class JAXB:
	class Cache:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.java.net.URI, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.javax.xml.transform.Source, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.java.io.Reader, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def unmarshal(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.net.URL, ) -> None: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.net.URI, ) -> None: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	@staticmethod
	def marshal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.File, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Element:


class Marshaller:
	class Listener:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def beforeMarshal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def afterMarshal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setAdapter(self, arg0: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	@overload
	def setAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.javax.xml.validation.Schema, ) -> None: ...
	def getSchema(self, ) -> javawrappers.javax.xml.validation.Schema: ...
	def getAttachmentMarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentMarshaller: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def beforeMarshal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.w3c.dom.Node, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.stream.XMLEventWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.File, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	def setAttachmentMarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	def setListener(self, arg0: javawrappers.javax.xml.bind.Marshaller.Listener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.w3c.dom.Node: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def afterMarshal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getListener(self, ) -> javawrappers.javax.xml.bind.Marshaller.Listener: ...


class ValidationEventLocator:
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def getColumnNumber(self, ) -> Union[int, JInt]: ...
	def getNode(self, ) -> javawrappers.org.w3c.dom.Node: ...


class PrintConversionEvent:
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	def getSeverity(self, ) -> Union[int, JInt]: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getLocator(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...


class ParseConversionEvent:
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	def getSeverity(self, ) -> Union[int, JInt]: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getLocator(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...


class JAXBContextFactory:
	@overload
	def createContext(self, arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	def createContext(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, arg2: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...


class JAXBException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class DataBindingException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class JAXBIntrospector:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getValue(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getElementName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...


class UnmarshallerHandler:
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startDocument(self, ) -> None: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class JAXBElement:
	@overload
	def __init__(self, arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Object, ): ...
	class GlobalScope:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def notifyAll(self, ) -> None: ...
	def setNil(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getDeclaredType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNil(self, ) -> Union[int, JBoolean]: ...
	def isGlobalScope(self, ) -> Union[int, JBoolean]: ...
	def getScope(self, ) -> javawrappers.java.lang.Class: ...
	def isTypeSubstituted(self, ) -> Union[int, JBoolean]: ...


class UnmarshalException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NotIdentifiableEvent:
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	def getSeverity(self, ) -> Union[int, JInt]: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getLocator(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...


class DatatypeConverter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def parseFloat(arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def parseAnySimpleType(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseDateTime(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def parseBoolean(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def printBoolean(arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printByte(arg0: JByte, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printFloat(arg0: Union[float, JFloat], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setDatatypeConverter(arg0: javawrappers.javax.xml.bind.DatatypeConverterInterface, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def parseDouble(arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	@staticmethod
	def parseDecimal(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigDecimal: ...
	@staticmethod
	def parseUnsignedInt(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@staticmethod
	def printUnsignedShort(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseHexBinary(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def parseShort(arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	@staticmethod
	def printShort(arg0: Union[int, JShort], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printDouble(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printInteger(arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseQName(arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.javax.xml.namespace.QName: ...
	@staticmethod
	def parseInteger(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigInteger: ...
	@staticmethod
	def parseTime(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	@staticmethod
	def printQName(arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printDecimal(arg0: javawrappers.java.math.BigDecimal, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printDate(arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printAnySimpleType(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printHexBinary(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printLong(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printDateTime(arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseBase64Binary(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def parseByte(arg0: javawrappers.java.lang.String, ) -> JByte: ...
	@staticmethod
	def parseInt(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def parseDate(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	@staticmethod
	def parseLong(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	@staticmethod
	def parseString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def printUnsignedInt(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printInt(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseUnsignedShort(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def printString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printBase64Binary(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printTime(arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...


class ValidationEventHandler:
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> Union[int, JBoolean]: ...


class ValidationEvent:
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	def getSeverity(self, ) -> Union[int, JInt]: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getLocator(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...


class Binder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getJAXBNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.javax.xml.validation.Schema, ) -> None: ...
	def getSchema(self, ) -> javawrappers.javax.xml.validation.Schema: ...
	def getXMLNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def updateJAXB(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def updateXML(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def updateXML(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


