################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################


from jpype.types import *
from typing import Union

from typing import overload

class TByteStack:
	def pop(self, ) -> JByte: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: JByte, ) -> None: ...
	def peek(self, ) -> JByte: ...


class TFloatStack:
	def pop(self, ) -> Union[float, JFloat]: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: Union[float, JFloat], ) -> None: ...
	def peek(self, ) -> Union[float, JFloat]: ...


class TDoubleStack:
	def pop(self, ) -> Union[float, JDouble]: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: Union[float, JDouble], ) -> None: ...
	def peek(self, ) -> Union[float, JDouble]: ...


class TShortStack:
	def pop(self, ) -> Union[int, JShort]: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: Union[int, JShort], ) -> None: ...
	def peek(self, ) -> Union[int, JShort]: ...


class TLongStack:
	def pop(self, ) -> Union[long, JLong]: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: Union[long, JLong], ) -> None: ...
	def peek(self, ) -> Union[long, JLong]: ...


class TIntStack:
	def pop(self, ) -> Union[int, JInt]: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: Union[int, JInt], ) -> None: ...
	def peek(self, ) -> Union[int, JInt]: ...


class TCharStack:
	def pop(self, ) -> Union[string, JString]: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def clear(self, ) -> None: ...
	def push(self, arg0: Union[string, JString], ) -> None: ...
	def peek(self, ) -> Union[string, JString]: ...


