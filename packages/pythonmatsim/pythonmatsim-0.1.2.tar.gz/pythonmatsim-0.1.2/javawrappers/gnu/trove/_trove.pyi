################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.gnu.trove.list
import javawrappers.gnu.trove.set
import javawrappers.gnu.trove.procedure
import javawrappers.gnu.trove
import javawrappers.gnu.trove.map
import javawrappers.gnu.trove.iterator

from jpype.types import *
from typing import Union

from typing import overload

class TDoubleCollection:
	def add(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TDoubleIterator: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...


class TLongCollection:
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TLongIterator: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...


class TCharCollection:
	def add(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TCharIterator: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...


class TIntCollection:
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TIntIterator: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...


class TDecorators:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TDoubleSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TShortSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TLongSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TByteSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TLongList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TCharSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TIntSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TFloatList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.set.TFloatSet, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TByteList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TDoubleList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TDoubleDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TObjectByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatCharMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortByteMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteIntMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TIntList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongFloatMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TByteObjectMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TCharList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.list.TShortList, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TIntDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TFloatShortMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TLongDoubleMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TShortLongMap, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.gnu.trove.map.TCharDoubleMap, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...


class TShortCollection:
	def add(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TShortIterator: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...


class TByteCollection:
	def add(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TByteIterator: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...


class TCollections:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortShortMap, ) -> javawrappers.gnu.trove.map.TShortShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharDoubleMap, ) -> javawrappers.gnu.trove.map.TCharDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleObjectMap, ) -> javawrappers.gnu.trove.map.TDoubleObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongLongMap, ) -> javawrappers.gnu.trove.map.TLongLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteDoubleMap, ) -> javawrappers.gnu.trove.map.TByteDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatByteMap, ) -> javawrappers.gnu.trove.map.TFloatByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleByteMap, ) -> javawrappers.gnu.trove.map.TDoubleByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectIntMap, ) -> javawrappers.gnu.trove.map.TObjectIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongByteMap, ) -> javawrappers.gnu.trove.map.TLongByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongIntMap, ) -> javawrappers.gnu.trove.map.TLongIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatDoubleMap, ) -> javawrappers.gnu.trove.map.TFloatDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortCharMap, ) -> javawrappers.gnu.trove.map.TShortCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortByteMap, ) -> javawrappers.gnu.trove.map.TShortByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntDoubleMap, ) -> javawrappers.gnu.trove.map.TIntDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteIntMap, ) -> javawrappers.gnu.trove.map.TByteIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleLongMap, ) -> javawrappers.gnu.trove.map.TDoubleLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleIntMap, ) -> javawrappers.gnu.trove.map.TDoubleIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatObjectMap, ) -> javawrappers.gnu.trove.map.TFloatObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteLongMap, ) -> javawrappers.gnu.trove.map.TByteLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectFloatMap, ) -> javawrappers.gnu.trove.map.TObjectFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteFloatMap, ) -> javawrappers.gnu.trove.map.TByteFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharObjectMap, ) -> javawrappers.gnu.trove.map.TCharObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntObjectMap, ) -> javawrappers.gnu.trove.map.TIntObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharByteMap, ) -> javawrappers.gnu.trove.map.TCharByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharLongMap, ) -> javawrappers.gnu.trove.map.TCharLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongObjectMap, ) -> javawrappers.gnu.trove.map.TLongObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntIntMap, ) -> javawrappers.gnu.trove.map.TIntIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleDoubleMap, ) -> javawrappers.gnu.trove.map.TDoubleDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleShortMap, ) -> javawrappers.gnu.trove.map.TDoubleShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharShortMap, ) -> javawrappers.gnu.trove.map.TCharShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatCharMap, ) -> javawrappers.gnu.trove.map.TFloatCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharIntMap, ) -> javawrappers.gnu.trove.map.TCharIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortLongMap, ) -> javawrappers.gnu.trove.map.TShortLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortDoubleMap, ) -> javawrappers.gnu.trove.map.TShortDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatShortMap, ) -> javawrappers.gnu.trove.map.TFloatShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectDoubleMap, ) -> javawrappers.gnu.trove.map.TObjectDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharCharMap, ) -> javawrappers.gnu.trove.map.TCharCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatIntMap, ) -> javawrappers.gnu.trove.map.TFloatIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleCharMap, ) -> javawrappers.gnu.trove.map.TDoubleCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongCharMap, ) -> javawrappers.gnu.trove.map.TLongCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TDoubleFloatMap, ) -> javawrappers.gnu.trove.map.TDoubleFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectShortMap, ) -> javawrappers.gnu.trove.map.TObjectShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TCharFloatMap, ) -> javawrappers.gnu.trove.map.TCharFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortFloatMap, ) -> javawrappers.gnu.trove.map.TShortFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectByteMap, ) -> javawrappers.gnu.trove.map.TObjectByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntFloatMap, ) -> javawrappers.gnu.trove.map.TIntFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongShortMap, ) -> javawrappers.gnu.trove.map.TLongShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatFloatMap, ) -> javawrappers.gnu.trove.map.TFloatFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectCharMap, ) -> javawrappers.gnu.trove.map.TObjectCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteCharMap, ) -> javawrappers.gnu.trove.map.TByteCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteShortMap, ) -> javawrappers.gnu.trove.map.TByteShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TFloatLongMap, ) -> javawrappers.gnu.trove.map.TFloatLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntCharMap, ) -> javawrappers.gnu.trove.map.TIntCharMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortObjectMap, ) -> javawrappers.gnu.trove.map.TShortObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteObjectMap, ) -> javawrappers.gnu.trove.map.TByteObjectMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntLongMap, ) -> javawrappers.gnu.trove.map.TIntLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntShortMap, ) -> javawrappers.gnu.trove.map.TIntShortMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TShortIntMap, ) -> javawrappers.gnu.trove.map.TShortIntMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TObjectLongMap, ) -> javawrappers.gnu.trove.map.TObjectLongMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongFloatMap, ) -> javawrappers.gnu.trove.map.TLongFloatMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TIntByteMap, ) -> javawrappers.gnu.trove.map.TIntByteMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TLongDoubleMap, ) -> javawrappers.gnu.trove.map.TLongDoubleMap: ...
	@overload
	@staticmethod
	def synchronizedMap(arg0: javawrappers.gnu.trove.map.TByteByteMap, ) -> javawrappers.gnu.trove.map.TByteByteMap: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TFloatSet, ) -> javawrappers.gnu.trove.set.TFloatSet: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TDoubleSet, ) -> javawrappers.gnu.trove.set.TDoubleSet: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TLongSet, ) -> javawrappers.gnu.trove.set.TLongSet: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TIntSet, ) -> javawrappers.gnu.trove.set.TIntSet: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TShortSet, ) -> javawrappers.gnu.trove.set.TShortSet: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TCharSet, ) -> javawrappers.gnu.trove.set.TCharSet: ...
	@overload
	@staticmethod
	def synchronizedSet(arg0: javawrappers.gnu.trove.set.TByteSet, ) -> javawrappers.gnu.trove.set.TByteSet: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TIntCollection, ) -> javawrappers.gnu.trove.TIntCollection: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TLongCollection, ) -> javawrappers.gnu.trove.TLongCollection: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TFloatCollection, ) -> javawrappers.gnu.trove.TFloatCollection: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> javawrappers.gnu.trove.TDoubleCollection: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TShortCollection, ) -> javawrappers.gnu.trove.TShortCollection: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TCharCollection, ) -> javawrappers.gnu.trove.TCharCollection: ...
	@overload
	@staticmethod
	def synchronizedCollection(arg0: javawrappers.gnu.trove.TByteCollection, ) -> javawrappers.gnu.trove.TByteCollection: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatLongMap, ) -> javawrappers.gnu.trove.map.TFloatLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectCharMap, ) -> javawrappers.gnu.trove.map.TObjectCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectShortMap, ) -> javawrappers.gnu.trove.map.TObjectShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectByteMap, ) -> javawrappers.gnu.trove.map.TObjectByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharCharMap, ) -> javawrappers.gnu.trove.map.TCharCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortByteMap, ) -> javawrappers.gnu.trove.map.TShortByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongByteMap, ) -> javawrappers.gnu.trove.map.TLongByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleIntMap, ) -> javawrappers.gnu.trove.map.TDoubleIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleCharMap, ) -> javawrappers.gnu.trove.map.TDoubleCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongIntMap, ) -> javawrappers.gnu.trove.map.TLongIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntByteMap, ) -> javawrappers.gnu.trove.map.TIntByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongFloatMap, ) -> javawrappers.gnu.trove.map.TLongFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongShortMap, ) -> javawrappers.gnu.trove.map.TLongShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteByteMap, ) -> javawrappers.gnu.trove.map.TByteByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteDoubleMap, ) -> javawrappers.gnu.trove.map.TByteDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectLongMap, ) -> javawrappers.gnu.trove.map.TObjectLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectIntMap, ) -> javawrappers.gnu.trove.map.TObjectIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortCharMap, ) -> javawrappers.gnu.trove.map.TShortCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleObjectMap, ) -> javawrappers.gnu.trove.map.TDoubleObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleByteMap, ) -> javawrappers.gnu.trove.map.TDoubleByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharShortMap, ) -> javawrappers.gnu.trove.map.TCharShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharIntMap, ) -> javawrappers.gnu.trove.map.TCharIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatCharMap, ) -> javawrappers.gnu.trove.map.TFloatCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectDoubleMap, ) -> javawrappers.gnu.trove.map.TObjectDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntShortMap, ) -> javawrappers.gnu.trove.map.TIntShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntCharMap, ) -> javawrappers.gnu.trove.map.TIntCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatShortMap, ) -> javawrappers.gnu.trove.map.TFloatShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleShortMap, ) -> javawrappers.gnu.trove.map.TDoubleShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TObjectFloatMap, ) -> javawrappers.gnu.trove.map.TObjectFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatIntMap, ) -> javawrappers.gnu.trove.map.TFloatIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongDoubleMap, ) -> javawrappers.gnu.trove.map.TLongDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatObjectMap, ) -> javawrappers.gnu.trove.map.TFloatObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleFloatMap, ) -> javawrappers.gnu.trove.map.TDoubleFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteCharMap, ) -> javawrappers.gnu.trove.map.TByteCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntDoubleMap, ) -> javawrappers.gnu.trove.map.TIntDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongObjectMap, ) -> javawrappers.gnu.trove.map.TLongObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharFloatMap, ) -> javawrappers.gnu.trove.map.TCharFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteObjectMap, ) -> javawrappers.gnu.trove.map.TByteObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortObjectMap, ) -> javawrappers.gnu.trove.map.TShortObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatByteMap, ) -> javawrappers.gnu.trove.map.TFloatByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongLongMap, ) -> javawrappers.gnu.trove.map.TLongLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteFloatMap, ) -> javawrappers.gnu.trove.map.TByteFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteShortMap, ) -> javawrappers.gnu.trove.map.TByteShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortFloatMap, ) -> javawrappers.gnu.trove.map.TShortFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortShortMap, ) -> javawrappers.gnu.trove.map.TShortShortMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntFloatMap, ) -> javawrappers.gnu.trove.map.TIntFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharDoubleMap, ) -> javawrappers.gnu.trove.map.TCharDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatFloatMap, ) -> javawrappers.gnu.trove.map.TFloatFloatMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharObjectMap, ) -> javawrappers.gnu.trove.map.TCharObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleLongMap, ) -> javawrappers.gnu.trove.map.TDoubleLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteLongMap, ) -> javawrappers.gnu.trove.map.TByteLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortDoubleMap, ) -> javawrappers.gnu.trove.map.TShortDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntIntMap, ) -> javawrappers.gnu.trove.map.TIntIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharByteMap, ) -> javawrappers.gnu.trove.map.TCharByteMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortLongMap, ) -> javawrappers.gnu.trove.map.TShortLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TLongCharMap, ) -> javawrappers.gnu.trove.map.TLongCharMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntObjectMap, ) -> javawrappers.gnu.trove.map.TIntObjectMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TDoubleDoubleMap, ) -> javawrappers.gnu.trove.map.TDoubleDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TIntLongMap, ) -> javawrappers.gnu.trove.map.TIntLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TCharLongMap, ) -> javawrappers.gnu.trove.map.TCharLongMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TFloatDoubleMap, ) -> javawrappers.gnu.trove.map.TFloatDoubleMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TShortIntMap, ) -> javawrappers.gnu.trove.map.TShortIntMap: ...
	@overload
	@staticmethod
	def unmodifiableMap(arg0: javawrappers.gnu.trove.map.TByteIntMap, ) -> javawrappers.gnu.trove.map.TByteIntMap: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> javawrappers.gnu.trove.TDoubleCollection: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TFloatCollection, ) -> javawrappers.gnu.trove.TFloatCollection: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TIntCollection, ) -> javawrappers.gnu.trove.TIntCollection: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TLongCollection, ) -> javawrappers.gnu.trove.TLongCollection: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TCharCollection, ) -> javawrappers.gnu.trove.TCharCollection: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TShortCollection, ) -> javawrappers.gnu.trove.TShortCollection: ...
	@overload
	@staticmethod
	def unmodifiableCollection(arg0: javawrappers.gnu.trove.TByteCollection, ) -> javawrappers.gnu.trove.TByteCollection: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TLongList, ) -> javawrappers.gnu.trove.list.TLongList: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TIntList, ) -> javawrappers.gnu.trove.list.TIntList: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TFloatList, ) -> javawrappers.gnu.trove.list.TFloatList: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TDoubleList, ) -> javawrappers.gnu.trove.list.TDoubleList: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TCharList, ) -> javawrappers.gnu.trove.list.TCharList: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TShortList, ) -> javawrappers.gnu.trove.list.TShortList: ...
	@overload
	@staticmethod
	def unmodifiableList(arg0: javawrappers.gnu.trove.list.TByteList, ) -> javawrappers.gnu.trove.list.TByteList: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TIntSet, ) -> javawrappers.gnu.trove.set.TIntSet: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TFloatSet, ) -> javawrappers.gnu.trove.set.TFloatSet: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TDoubleSet, ) -> javawrappers.gnu.trove.set.TDoubleSet: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TCharSet, ) -> javawrappers.gnu.trove.set.TCharSet: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TLongSet, ) -> javawrappers.gnu.trove.set.TLongSet: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TByteSet, ) -> javawrappers.gnu.trove.set.TByteSet: ...
	@overload
	@staticmethod
	def unmodifiableSet(arg0: javawrappers.gnu.trove.set.TShortSet, ) -> javawrappers.gnu.trove.set.TShortSet: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TShortList, ) -> javawrappers.gnu.trove.list.TShortList: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TByteList, ) -> javawrappers.gnu.trove.list.TByteList: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TCharList, ) -> javawrappers.gnu.trove.list.TCharList: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TFloatList, ) -> javawrappers.gnu.trove.list.TFloatList: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TDoubleList, ) -> javawrappers.gnu.trove.list.TDoubleList: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TLongList, ) -> javawrappers.gnu.trove.list.TLongList: ...
	@overload
	@staticmethod
	def synchronizedList(arg0: javawrappers.gnu.trove.list.TIntList, ) -> javawrappers.gnu.trove.list.TIntList: ...


class Version:
	def __init__(self, ): ...
	@staticmethod
	def getVersion() -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class TFloatCollection:
	def add(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TFloatIterator: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...


