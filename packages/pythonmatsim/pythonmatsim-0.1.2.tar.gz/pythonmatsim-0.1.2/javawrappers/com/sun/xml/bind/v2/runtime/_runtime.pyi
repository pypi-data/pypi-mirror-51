################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.com.sun.xml.bind.v2.model.runtime
import javawrappers.javax.xml.bind.annotation
import javawrappers.com.sun.xml.bind.v2.runtime.property
import javawrappers.java.util
import javawrappers.javax.xml.validation
import javawrappers.org.w3c.dom
import javawrappers.javax.xml.transform.sax
import javawrappers.javax.xml.stream
import javawrappers.com.sun.xml.bind.marshaller
import javawrappers.com.sun.xml.bind.v2.runtime
import javawrappers.javax.xml.transform
import javawrappers.javax.xml.bind.annotation.adapters
import javawrappers.java.lang
import javawrappers.javax.xml.namespace
import javawrappers.java.io
import javawrappers.com.sun.xml.bind.api
import javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller
import javawrappers.org.xml.sax
import javawrappers.javax.xml.bind.attachment
import javawrappers.com.sun.xml.bind.v2.runtime.output
import javawrappers.com.sun.xml.bind.v2.model.annotation
import javawrappers.javax.xml.bind
import javawrappers.javax.activation

from jpype.types import *
from typing import Union

from typing import overload

class CompositeStructureBeanInfo:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ): ...
	def hasElementOnlyContentModel(self, ) -> Union[int, JBoolean]: ...
	@overload
	def serializeBody(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeBody(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def wrapUp(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasAfterMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getId(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.java.lang.String: ...
	@overload
	def getId(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.java.lang.String: ...
	@overload
	def getElementLocalName(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, ) -> javawrappers.java.lang.String: ...
	@overload
	def getElementLocalName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def serializeRoot(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeRoot(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def notify(self, ) -> None: ...
	def isNilIncluded(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getElementNamespaceURI(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getElementNamespaceURI(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, ) -> javawrappers.java.lang.String: ...
	def getTypeNames(self, ) -> javawrappers.java.util.Collection: ...
	def isImmutable(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLifecycleMethods(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.LifecycleMethods: ...
	def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def invokeBeforeUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> javawrappers.java.lang.Object: ...
	@overload
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> javawrappers.com.sun.xml.bind.api.CompositeStructure: ...
	def getLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	def invokeAfterUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def serializeURIs(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeURIs(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeAttributes(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeAttributes(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def hasAfterUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> Union[int, JBoolean]: ...
	@overload
	def reset(self, arg0: javawrappers.com.sun.xml.bind.api.CompositeStructure, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lookForLifecycleMethods(self, ) -> Union[int, JBoolean]: ...


class IllegalAnnotationsException:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	class Builder:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def check(self, ) -> None: ...
		def error(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.IllegalAnnotationException, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def check(self, ) -> None: ...
	def error(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.IllegalAnnotationException, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getErrors(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Location:
	def toString(self, ) -> javawrappers.java.lang.String: ...


class NameBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def createAttributeName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Name: ...
	@overload
	def createAttributeName(self, arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Name: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def conclude(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.NameList: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def createElementName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Name: ...
	@overload
	def createElementName(self, arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Name: ...
	def notify(self, ) -> None: ...


class Transducer:
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...


class Coordinator:
	def __init__(self, ): ...
	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def _getInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.Coordinator: ...
	def putAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def containsAdapter(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...


class SchemaTypeTransducer:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, arg1: javawrappers.javax.xml.namespace.QName, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class IllegalAnnotationException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.annotation.Annotation, arg2: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.annotation.Annotation, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, arg2: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.annotation.Annotation, arg2: javawrappers.java.lang.annotation.Annotation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkedException(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setLinkedException(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getSourcePos(self, ) -> javawrappers.java.util.List: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getErrorCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NameList:
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(Union[int, JBoolean], 1), arg2: JArray(javawrappers.java.lang.String, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SwaRefAdapter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.DataHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.activation.DataHandler, ) -> javawrappers.java.lang.String: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MarshallerImpl:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.AssociationMap, ): ...
	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> Union[int, JBoolean]: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	@overload
	def setAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	@overload
	def setAdapter(self, arg0: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.javax.xml.validation.Schema, ) -> None: ...
	def getSchema(self, ) -> javawrappers.javax.xml.validation.Schema: ...
	def getAttachmentMarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentMarshaller: ...
	@overload
	def createWriter(self, arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput: ...
	@overload
	def createWriter(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput: ...
	@overload
	def createWriter(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput: ...
	@overload
	def createWriter(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.stream.XMLEventWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, arg2: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.w3c.dom.Node, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.File, ) -> None: ...
	def setAttachmentMarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	def setListener(self, arg0: javawrappers.javax.xml.bind.Marshaller.Listener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.w3c.dom.Node: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl: ...
	def getListener(self, ) -> javawrappers.javax.xml.bind.Marshaller.Listener: ...


class BinderImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getJAXBNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.javax.xml.validation.Schema, ) -> None: ...
	def getSchema(self, ) -> javawrappers.javax.xml.validation.Schema: ...
	def getXMLNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def updateJAXB(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def updateXML(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def updateXML(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterTransducer:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class InlineBinaryTransducer:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class NamespaceContext2:
	def getPrefix(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getPrefixes(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	def force(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...


class JaxBeanInfo:
	def hasElementOnlyContentModel(self, ) -> Union[int, JBoolean]: ...
	def serializeBody(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def wrapUp(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasAfterMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.java.lang.String: ...
	def getElementLocalName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def serializeRoot(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def notify(self, ) -> None: ...
	def isNilIncluded(self, ) -> Union[int, JBoolean]: ...
	def getElementNamespaceURI(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getTypeNames(self, ) -> javawrappers.java.util.Collection: ...
	def isImmutable(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLifecycleMethods(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.LifecycleMethods: ...
	def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def invokeBeforeUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> javawrappers.java.lang.Object: ...
	def getLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	def invokeAfterUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def serializeURIs(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def serializeAttributes(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def hasAfterUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lookForLifecycleMethods(self, ) -> Union[int, JBoolean]: ...


class Name:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def toQName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class BridgeContextImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAttachmentMarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentMarshaller: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAttachmentUnmarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAttachmentUnmarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller: ...
	def setErrorHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def setAttachmentMarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JAXBContextImpl:
	class JAXBContextBuilder:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setDefaultNsUri(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setImprovedXsiTypeHandling(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setAnnotationReader(self, arg0: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setAllNillable(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def notifyAll(self, ) -> None: ...
		def setRetainPropertyInfo(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setXmlAccessorFactorySupport(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setC14NSupport(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def notify(self, ) -> None: ...
		def setSubclassReplacements(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setDisableSecurityProcessing(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def build(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl: ...
		def setBackupWithParentNamespace(self, arg0: javawrappers.java.lang.Boolean, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setClasses(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setTypeRefs(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
		def setSupressAccessorWarnings(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...


	def getNearestTypeName(self, arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setImprovedXsiTypeHandling(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def getXMIMEContentType(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def setRetainPropertyInfo(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def setXmlAccessorFactorySupport(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def createBridgeContext(self, ) -> javawrappers.com.sun.xml.bind.api.BridgeContext: ...
	@overload
	def getElementName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	@overload
	def getElementName(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.namespace.QName: ...
	def setSubclassReplacements(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def getNumberOfLocalNames(self, ) -> Union[int, JInt]: ...
	def setBackupWithParentNamespace(self, arg0: javawrappers.java.lang.Boolean, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def createJAXBIntrospector(self, ) -> javawrappers.javax.xml.bind.JAXBIntrospector: ...
	def generateEpisode(self, arg0: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@staticmethod
	def getBaseType(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Type: ...
	def setDefaultNsUri(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def getUTF8NameTable(self, ) -> JArray(javawrappers.com.sun.xml.bind.v2.runtime.output.Encoded, 1): ...
	def getRuntimeTypeInfoSet(self, ) -> javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet: ...
	def getTypeInfoSet(self, ) -> javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet: ...
	@overload
	def createUnmarshaller(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl: ...
	@overload
	def createUnmarshaller(self, ) -> javawrappers.javax.xml.bind.Unmarshaller: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, arg2: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(*arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], arg5: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], arg5: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	def getNumberOfElementNames(self, ) -> Union[int, JInt]: ...
	@overload
	def createBinder(self, ) -> javawrappers.javax.xml.bind.Binder: ...
	@overload
	def createBinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.Binder: ...
	def createValidator(self, ) -> javawrappers.javax.xml.bind.Validator: ...
	def generateSchema(self, arg0: javawrappers.javax.xml.bind.SchemaOutputResolver, ) -> None: ...
	def createAugmented(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createBridge(self, arg0: javawrappers.com.sun.xml.bind.api.TypeReference, ) -> javawrappers.com.sun.xml.bind.api.Bridge: ...
	@staticmethod
	def mangleNameToVariableName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createTransformerHandler(arg0: Union[int, JBoolean], ) -> javawrappers.javax.xml.transform.sax.TransformerHandler: ...
	def getXmlNsSet(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def setC14NSupport(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def notify(self, ) -> None: ...
	def setDisableSecurityProcessing(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def getValidRootNames(self, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTypeName(self, arg0: javawrappers.com.sun.xml.bind.api.TypeReference, ) -> javawrappers.javax.xml.namespace.QName: ...
	def setTypeRefs(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def setSupressAccessorWarnings(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	@overload
	def createMarshaller(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.MarshallerImpl: ...
	@overload
	def createMarshaller(self, ) -> javawrappers.javax.xml.bind.Marshaller: ...
	def getGlobalType(self, arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	def getBuildId(self, ) -> javawrappers.java.lang.String: ...
	def getKnownNamespaceURIs(self, ) -> javawrappers.java.util.List: ...
	def setAnnotationReader(self, arg0: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	@staticmethod
	def mangleNameToPropertyName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def mangleNameToClassName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setAllNillable(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	@overload
	def getBeanInfo(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	@overload
	def getBeanInfo(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	@overload
	def getBeanInfo(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	@overload
	def getBeanInfo(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	def build(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl: ...
	def getNumberOfAttributeNames(self, ) -> Union[int, JInt]: ...
	def getElement(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hasSwaRef(self, ) -> Union[int, JBoolean]: ...
	def getOrCreate(self, arg0: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfo, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setClasses(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder: ...
	def selectRootLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
	def getElementPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.api.RawAccessor: ...


class AssociationMap:
	def __init__(self, ): ...
	class Entry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def outer(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def inner(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def element(self, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def outer(self, ) -> javawrappers.java.lang.Object: ...
	def addInner(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def inner(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def addOuter(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def byPeer(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.runtime.AssociationMap.Entry: ...
	def getInnerPeer(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def addUsed(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def byElement(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.runtime.AssociationMap.Entry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOuterPeer(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def element(self, ) -> javawrappers.java.lang.Object: ...


class SwaRefAdapterMarker:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.activation.DataHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.activation.DataHandler, ) -> javawrappers.java.lang.String: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ClassBeanInfoImpl:
	def hasElementOnlyContentModel(self, ) -> Union[int, JBoolean]: ...
	def serializeBody(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def wrapUp(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hasAfterMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.java.lang.String: ...
	def getElementLocalName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def serializeRoot(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def notify(self, ) -> None: ...
	def isNilIncluded(self, ) -> Union[int, JBoolean]: ...
	def getElementNamespaceURI(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getTypeNames(self, ) -> javawrappers.java.util.Collection: ...
	def isImmutable(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLifecycleMethods(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.LifecycleMethods: ...
	def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def invokeBeforeUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> javawrappers.java.lang.Object: ...
	def getLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	def invokeAfterUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def serializeURIs(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def serializeAttributes(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def hasAfterUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lookForLifecycleMethods(self, ) -> Union[int, JBoolean]: ...


class AttributeAccessor:
	def isNilIncluded(self, ) -> Union[int, JBoolean]: ...


class MimeTypedTransducer:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, arg1: javawrappers.javax.activation.MimeType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class RuntimeUtil:
	def __init__(self, ): ...
	class ToStringAdapter:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def unmarshal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XMLSerializer:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getXMIMEContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def leafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def leafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def leafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	def addInscopeBinding(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def onID(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _getInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.Coordinator: ...
	def errorMissingId(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def writeDom(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.bind.annotation.DomHandler, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def getObjectIdentityCycleDetection(self, ) -> Union[int, JBoolean]: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def getCurrentLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endNamespaceDecls(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def setInlineBinaryFlag(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def endDocument(self, ) -> None: ...
	def writeXsiNilTrue(self, ) -> None: ...
	def getCachedBase64DataInstance(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: ...
	def setObjectIdentityCycleDetection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def attWildcardAsAttributes(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setPrefixMapper(self, arg0: javawrappers.com.sun.xml.bind.marshaller.NamespacePrefixMapper, ) -> None: ...
	def setExpectedMimeType(self, arg0: javawrappers.javax.activation.MimeType, ) -> javawrappers.javax.activation.MimeType: ...
	def getCurrentProperty(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.property.Property: ...
	def childAsXsiType(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, arg3: Union[int, JBoolean], ) -> None: ...
	def startElementForce(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def childAsSoleContent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def endAttributes(self, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def endElement(self, ) -> None: ...
	def onIDREF(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def putAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def setSchemaType(self, arg0: javawrappers.javax.xml.namespace.QName, ) -> javawrappers.javax.xml.namespace.QName: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def handleError(self, arg0: javawrappers.java.lang.Exception, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def handleError(self, arg0: javawrappers.java.lang.Exception, ) -> Union[int, JBoolean]: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	def childAsRoot(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getInlineBinaryFlag(self, ) -> Union[int, JBoolean]: ...
	def attWildcardAsURIs(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def clearCurrentProperty(self, ) -> None: ...
	@overload
	def reportError(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def reportError(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, arg1: Union[int, JBoolean], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def getIdentityTransformer(self, ) -> javawrappers.javax.xml.transform.Transformer: ...
	def getSchemaType(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def containsAdapter(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer: ...
	def getNamespaceContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.NamespaceContext2: ...


class ElementBeanInfoImpl:
	class IntercepterLoader:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.ElementBeanInfoImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
		def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def expectText(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
		@staticmethod
		def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
		def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def intercept(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


	def hasElementOnlyContentModel(self, ) -> Union[int, JBoolean]: ...
	@overload
	def serializeBody(self, arg0: javawrappers.javax.xml.bind.JAXBElement, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeBody(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def wrapUp(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def hasAfterMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def createInstanceFromValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def link(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> None: ...
	@overload
	def getId(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.java.lang.String: ...
	@overload
	def getId(self, arg0: javawrappers.javax.xml.bind.JAXBElement, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.java.lang.String: ...
	@overload
	def getElementLocalName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getElementLocalName(self, arg0: javawrappers.javax.xml.bind.JAXBElement, ) -> javawrappers.java.lang.String: ...
	@overload
	def serializeRoot(self, arg0: javawrappers.javax.xml.bind.JAXBElement, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeRoot(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def notify(self, ) -> None: ...
	def isNilIncluded(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getElementNamespaceURI(self, arg0: javawrappers.javax.xml.bind.JAXBElement, ) -> javawrappers.java.lang.String: ...
	@overload
	def getElementNamespaceURI(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getTypeNames(self, ) -> javawrappers.java.util.Collection: ...
	def isImmutable(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def getLifecycleMethods(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.LifecycleMethods: ...
	def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def invokeBeforeUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> javawrappers.java.lang.Object: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	def invokeAfterUnmarshalMethod(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	@overload
	def serializeURIs(self, arg0: javawrappers.javax.xml.bind.JAXBElement, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeURIs(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeAttributes(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def serializeAttributes(self, arg0: javawrappers.javax.xml.bind.JAXBElement, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def hasAfterUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeUnmarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def hasBeforeMarshalMethod(self, ) -> Union[int, JBoolean]: ...
	def intercept(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	@overload
	def reset(self, arg0: javawrappers.javax.xml.bind.JAXBElement, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> Union[int, JBoolean]: ...
	@overload
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lookForLifecycleMethods(self, ) -> Union[int, JBoolean]: ...


