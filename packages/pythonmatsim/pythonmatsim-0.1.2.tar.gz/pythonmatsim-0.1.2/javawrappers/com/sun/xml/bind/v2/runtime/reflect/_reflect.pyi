################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.sun.xml.bind.v2.model.runtime
import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.util.stream
import javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller
import javawrappers.com.sun.xml.bind.v2.runtime
import javawrappers.com.sun.xml.bind.v2.runtime.reflect
import javawrappers.java.util.function
import javawrappers.com.sun.xml.bind.v2.model.core

from jpype.types import *
from typing import Union

from typing import overload

class DefaultTransducedAccessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class Accessor:
	class SetterOnlyReflection:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Method, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def isAdapted(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
		def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def getValueType(self, ) -> javawrappers.java.lang.Class: ...


	class GetterOnlyReflection:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Method, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def isAdapted(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
		def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def getValueType(self, ) -> javawrappers.java.lang.Class: ...


	class GetterSetterReflection:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.reflect.Method, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def isAdapted(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
		def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def getValueType(self, ) -> javawrappers.java.lang.Class: ...


	class ReadOnlyFieldReflection:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Field, arg1: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Field, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def isAdapted(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
		def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def getValueType(self, ) -> javawrappers.java.lang.Class: ...


	class FieldReflection:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Field, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Field, arg1: Union[int, JBoolean], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		@overload
		def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def isAdapted(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
		def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def getValueType(self, ) -> javawrappers.java.lang.Class: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class ListTransducedAccessorImpl:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor:
	def __init__(self, ): ...
	class IDREFTransducedAccessorImpl:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
		def notify(self, ) -> None: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


	class CompositeTransducedAccessorImpl:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
		def notify(self, ) -> None: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


	class CompositeContextDependentTransducedAccessorImpl:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
		def notify(self, ) -> None: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	@overload
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	@overload
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class NullSafeAccessor:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class Lister:
	class IDREFSIterator:
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def last(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class IDREFS:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister, arg1: javawrappers.java.lang.Class, ): ...
		class Pack:
			def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ): ...
			def add(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def run(self, ) -> None: ...
			def notify(self, ) -> None: ...


		def add(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS.Pack: ...
		def notifyAll(self, ) -> None: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def create(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.com.sun.xml.bind.v2.model.core.ID, arg2: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
		def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		@overload
		def endPacking(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS.Pack, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		@overload
		def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def addToPack(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS.Pack, arg1: javawrappers.java.lang.String, ) -> None: ...


	class CollectionLister:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.util.Collection: ...
		@overload
		def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
		@overload
		def iterator(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def create(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.com.sun.xml.bind.v2.model.core.ID, arg2: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
		def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def endPacking(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		@overload
		def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		@overload
		def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def addToPack(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.Object, ) -> None: ...


	class Pack:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
		def trimToSize(self, ) -> None: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def build(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
		@overload
		def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class ArrayLister:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.Pack: ...
		@overload
		def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
		@overload
		def iterator(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def create(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.com.sun.xml.bind.v2.model.core.ID, arg2: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
		def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def endPacking(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.Pack, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		@overload
		def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
		@overload
		def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def addToPack(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.Pack, arg1: javawrappers.java.lang.Object, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS.Pack: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.Pack: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.util.Collection: ...
	@overload
	def startPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
	@overload
	def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
	@overload
	def iterator(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
	@overload
	def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
	@overload
	def iterator(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
	@overload
	def iterator(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.ListIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.com.sun.xml.bind.v2.model.core.ID, arg2: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addToPack(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addToPack(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS.Pack, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addToPack(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addToPack(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.Pack, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def trimToSize(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def last(self, ) -> javawrappers.java.lang.Object: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def build(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def reset(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def endPacking(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def endPacking(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.IDREFS.Pack, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def endPacking(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister.Pack, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def endPacking(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class ListIterator:
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...


