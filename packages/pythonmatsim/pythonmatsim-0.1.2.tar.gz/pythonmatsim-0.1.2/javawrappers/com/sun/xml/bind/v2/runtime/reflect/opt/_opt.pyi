################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.sun.xml.bind.v2.model.runtime
import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller
import javawrappers.com.sun.xml.bind.v2.runtime
import javawrappers.com.sun.xml.bind.v2.runtime.reflect
import javawrappers.com.sun.xml.bind.v2.model.core

from jpype.types import *
from typing import Union

from typing import overload

class FieldAccessor_Byte:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class Const:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FieldAccessor_Short:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class FieldAccessor_Double:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class MethodAccessor_Float:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class FieldAccessor_Character:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class TransducedAccessor_method_Byte:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_field_Byte:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_field_Short:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class MethodAccessor_Ref:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class TransducedAccessor_method_Double:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_method_Boolean:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_field_Integer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class MethodAccessor_Byte:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class MethodAccessor_Short:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class TransducedAccessor_method_Float:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_method_Long:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class FieldAccessor_Float:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class TransducedAccessor_method_Integer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class FieldAccessor_Long:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class MethodAccessor_Character:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class TransducedAccessor_field_Boolean:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_field_Float:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_method_Short:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class FieldAccessor_Integer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class OptimizedTransducedAccessorFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimePropertyInfo, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MethodAccessor_Boolean:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class OptimizedAccessorFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FieldAccessor_Boolean:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class MethodAccessor_Integer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class FieldAccessor_Ref:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class MethodAccessor_Long:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


class TransducedAccessor_field_Long:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class TransducedAccessor_field_Double:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def hasValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parse(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	def notify(self, ) -> None: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


class MethodAccessor_Double:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def getErrorInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def adapt(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Adapter, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def adapt(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def isAdapted(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getUnadapted(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setUnadapted(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def optimize(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isValueTypeAbstractable(self, ) -> Union[int, JBoolean]: ...
	def isAbstractable(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getValueType(self, ) -> javawrappers.java.lang.Class: ...


