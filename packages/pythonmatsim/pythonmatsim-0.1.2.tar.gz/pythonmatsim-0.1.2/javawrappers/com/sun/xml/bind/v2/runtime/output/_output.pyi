################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.javax.xml.stream
import javawrappers.com.sun.xml.bind.marshaller
import javawrappers.java.util.stream
import javawrappers.com.sun.xml.bind.v2.runtime
import javawrappers.com.sun.xml.bind.v2.runtime.output

from jpype.types import *
from typing import Union

from typing import overload

class Pcdata:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def writeTo(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def subSequence(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	def chars(self, ) -> javawrappers.java.util.stream.IntStream: ...
	def charAt(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def notify(self, ) -> None: ...
	def codePoints(self, ) -> javawrappers.java.util.stream.IntStream: ...


class IndentingUTF8XmlOutput:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.com.sun.xml.bind.v2.runtime.output.Encoded, 1), arg3: javawrappers.com.sun.xml.bind.marshaller.CharacterEscapeHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setHeader(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def text(self, arg0: Union[int, JInt], ) -> None: ...
	def write(self, arg0: Union[int, JInt], ) -> None: ...


class XMLStreamWriterOutput:
	class XmlStreamOutWriterAdapter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def writeEntityRef(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@staticmethod
		def nullWriter() -> javawrappers.java.io.Writer: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


	class NewLineEscapeHandler:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def escape(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: javawrappers.java.io.Writer, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def writeEntityRef(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	@staticmethod
	def create(arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg2: javawrappers.com.sun.xml.bind.marshaller.CharacterEscapeHandler, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def escape(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class DOMOutput:
	def __init__(self, arg0: javawrappers.org.w3c.dom.Node, arg1: javawrappers.com.sun.xml.bind.v2.runtime.AssociationMap, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...


class ForkXmlOutput:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, arg1: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...


class StAXExStreamWriterOutput:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.javax.xml.stream.XMLStreamWriter, arg1: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg2: javawrappers.com.sun.xml.bind.marshaller.CharacterEscapeHandler, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...


class Encoded:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def compact(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEscape(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def write(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput, ) -> None: ...
	def notify(self, ) -> None: ...
	def append(self, arg0: Union[string, JString], ) -> None: ...
	def ensureSize(self, arg0: Union[int, JInt], ) -> None: ...


class SAXOutput:
	def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...


class XmlOutput:
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...


class NamespaceContextImpl:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ): ...
	class Element:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getParent(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...
		def getPrefix(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def setTagName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def setTagName(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def isRootElement(self, ) -> Union[int, JBoolean]: ...
		def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def count(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def push(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...
		def getNsUri(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def pop(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...
		def getInnerPeer(self, ) -> javawrappers.java.lang.Object: ...
		def endElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getBase(self, ) -> Union[int, JInt]: ...
		def getOuterPeer(self, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isRootElement(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def declareNsUri(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getNsUri(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def pop(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...
	def getInnerPeer(self, ) -> javawrappers.java.lang.Object: ...
	def getPrefixMapper(self, ) -> javawrappers.com.sun.xml.bind.marshaller.NamespacePrefixMapper: ...
	def endElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPrefixIndex(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getOuterPeer(self, ) -> javawrappers.java.lang.Object: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def getParent(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...
	@overload
	def getPrefix(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getPrefix(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getPrefix(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def setTagName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setTagName(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def count(self, ) -> Union[int, JInt]: ...
	@overload
	def count(self, ) -> Union[int, JInt]: ...
	def push(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...
	def setPrefixMapper(self, arg0: javawrappers.com.sun.xml.bind.marshaller.NamespacePrefixMapper, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def getBase(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getNamespaceURI(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getPrefixes(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	def force(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getCurrent(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl.Element: ...


class MTOMXmlOutput:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.XmlOutput, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...


class UTF8XmlOutput:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(javawrappers.com.sun.xml.bind.v2.runtime.output.Encoded, 1), arg2: javawrappers.com.sun.xml.bind.marshaller.CharacterEscapeHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def setHeader(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: Union[int, JInt], ) -> None: ...
	def write(self, arg0: Union[int, JInt], ) -> None: ...


class C14nXmlOutput:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: JArray(javawrappers.com.sun.xml.bind.v2.runtime.output.Encoded, 1), arg2: Union[int, JBoolean], arg3: javawrappers.com.sun.xml.bind.marshaller.CharacterEscapeHandler, ): ...
	class DynamicAttribute:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.C14nXmlOutput, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.C14nXmlOutput.DynamicAttribute, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class StaticAttribute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.C14nXmlOutput.StaticAttribute, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.C14nXmlOutput.StaticAttribute, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.C14nXmlOutput.DynamicAttribute, ) -> Union[int, JInt]: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def setHeader(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def text(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	def write(self, arg0: Union[int, JInt], ) -> None: ...


class XmlOutputAbstractImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...


class XMLEventWriterOutput:
	def __init__(self, arg0: javawrappers.javax.xml.stream.XMLEventWriter, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def beginStartTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def beginStartTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endStartTag(self, ) -> None: ...
	@overload
	def endTag(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> None: ...
	@overload
	def endTag(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def endDocument(self, arg0: Union[int, JBoolean], ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: Union[int, JBoolean], arg2: JArray(Union[int, JInt], 1), arg3: javawrappers.com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def attribute(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def attribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...


