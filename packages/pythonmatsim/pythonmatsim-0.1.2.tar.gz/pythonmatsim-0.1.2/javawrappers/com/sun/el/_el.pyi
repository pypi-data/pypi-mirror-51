################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.com.sun.el
import javawrappers.javax.el

from jpype.types import *
from typing import Union

from typing import overload

class ValueExpressionImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.el.parser.Node, arg2: javawrappers.javax.el.FunctionMapper, arg3: javawrappers.javax.el.VariableMapper, arg4: javawrappers.java.lang.Class, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getValueReference(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.ValueReference: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpectedType(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, ) -> Union[int, JBoolean]: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...


class MethodExpressionLiteral:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: JArray(javawrappers.java.lang.Class, 1), ): ...
	@overload
	def __init__(self, ): ...
	def isParmetersProvided(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getMethodInfo(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.MethodInfo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def isParametersProvided(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...


class ExpressionFactoryImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Properties, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def coerceToType(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def createMethodExpression(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.javax.el.MethodExpression: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def newInstance() -> javawrappers.javax.el.ExpressionFactory: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.util.Properties, ) -> javawrappers.javax.el.ExpressionFactory: ...
	def getStreamELResolver(self, ) -> javawrappers.javax.el.ELResolver: ...
	def notify(self, ) -> None: ...
	def getInitFunctionMap(self, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def createValueExpression(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.el.ValueExpression: ...
	@overload
	def createValueExpression(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.javax.el.ValueExpression: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ValueExpressionLiteral:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getValueReference(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.ValueReference: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpectedType(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, ) -> Union[int, JBoolean]: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.com.sun.el.ValueExpressionLiteral, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...


class MethodExpressionImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.el.parser.Node, arg2: javawrappers.javax.el.FunctionMapper, arg3: javawrappers.javax.el.VariableMapper, arg4: javawrappers.java.lang.Class, arg5: JArray(javawrappers.java.lang.Class, 1), ): ...
	def isParmetersProvided(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getMethodInfo(self, arg0: javawrappers.javax.el.ELContext, ) -> javawrappers.javax.el.MethodInfo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpressionString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isParametersProvided(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLiteralText(self, ) -> Union[int, JBoolean]: ...


