################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.com.sun.el.parser
import javawrappers.java.util.concurrent
import javawrappers.java.util.function
import javawrappers.javax.el

from jpype.types import *
from typing import Union

from typing import overload

class VariableMapperImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resolveVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.ValueExpression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ValueExpression, ) -> javawrappers.javax.el.ValueExpression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExpressionBuilder:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ELContext, ): ...
	class SoftConcurrentHashMap:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def reduceToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntBiFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.el.parser.Node, ) -> javawrappers.com.sun.el.parser.Node: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def reduceEntriesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def searchKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def reduce(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def mappingCount(self, ) -> Union[long, JLong]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reduceEntriesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		@overload
		def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.util.Map.Entry: ...
		def size(self, ) -> Union[int, JInt]: ...
		def reduceValuesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		@staticmethod
		def newKeySet(arg0: Union[int, JInt], ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		@overload
		@staticmethod
		def newKeySet() -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		def keys(self, ) -> javawrappers.java.util.Enumeration: ...
		def notifyAll(self, ) -> None: ...
		def reduceKeysToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def searchEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def search(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def reduceToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongBiFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		def searchValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.el.parser.Node: ...
		@overload
		def keySet(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		@overload
		def keySet(self, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
		@overload
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def reduceKeysToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		def reduceKeysToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		@overload
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		@overload
		def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def reduceEntriesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def reduceToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleBiFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
		def reduceValuesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
		@overload
		def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def elements(self, ) -> javawrappers.java.util.Enumeration: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reduceValuesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
		@overload
		def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def putIfAbsent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.el.parser.Node, ) -> javawrappers.com.sun.el.parser.Node: ...
		@overload
		def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...


	class NodeSoftReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def reduceToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntBiFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	@staticmethod
	def createNode(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.el.parser.Node: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.el.parser.Node, ) -> javawrappers.com.sun.el.parser.Node: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def reduceEntriesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def searchKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def reduce(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduceValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def mappingCount(self, ) -> Union[long, JLong]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reduceEntriesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduceEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.util.Map.Entry: ...
	def size(self, ) -> Union[int, JInt]: ...
	def createValueExpression(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.el.ValueExpression: ...
	def reduceValuesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	@overload
	def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEachEntry(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def newKeySet(arg0: Union[int, JInt], ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	@overload
	@staticmethod
	def newKeySet() -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	def createMethodExpression(self, arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.javax.el.MethodExpression: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def reduceKeysToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def searchEntries(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def search(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def reduceToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongBiFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	def searchValues(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.el.parser.Node: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def keySet(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	@overload
	def keySet(self, ) -> javawrappers.java.util.concurrent.ConcurrentHashMap.KeySetView: ...
	@overload
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def reduceKeysToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def reduceKeysToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	@overload
	def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def reduceEntriesToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def reduceToDouble(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToDoubleBiFunction, arg2: Union[float, JDouble], arg3: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	def reduceValuesToInt(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToIntFunction, arg2: Union[int, JInt], arg3: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEachValue(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reduceValuesToLong(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.ToLongFunction, arg2: Union[long, JLong], arg3: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEachKey(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visit(self, arg0: javawrappers.com.sun.el.parser.Node, ) -> None: ...
	@overload
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def putIfAbsent(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.sun.el.parser.Node, ) -> javawrappers.com.sun.el.parser.Node: ...
	@overload
	def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduceKeys(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...


class EvaluationContext:
	def __init__(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.javax.el.FunctionMapper, arg2: javawrappers.javax.el.VariableMapper, ): ...
	def putContext(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def notifyAfterEvaluation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getImportHandler(self, ) -> javawrappers.javax.el.ImportHandler: ...
	def getELContext(self, ) -> javawrappers.javax.el.ELContext: ...
	def addEvaluationListener(self, arg0: javawrappers.javax.el.EvaluationListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def exitLambdaScope(self, ) -> None: ...
	@overload
	def setPropertyResolved(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setPropertyResolved(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def isPropertyResolved(self, ) -> Union[int, JBoolean]: ...
	def getEvaluationListeners(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyPropertyResolved(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getFunctionMapper(self, ) -> javawrappers.javax.el.FunctionMapper: ...
	def notifyBeforeEvaluation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isLambdaArgument(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getLambdaArgument(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getELResolver(self, ) -> javawrappers.javax.el.ELResolver: ...
	def enterLambdaScope(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getContext(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def getVariableMapper(self, ) -> javawrappers.javax.el.VariableMapper: ...


class VariableMapperFactory:
	def __init__(self, arg0: javawrappers.javax.el.VariableMapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resolveVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.el.ValueExpression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.javax.el.VariableMapper: ...
	def setVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.el.ValueExpression, ) -> javawrappers.javax.el.ValueExpression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ELSupport:
	def __init__(self, ): ...
	@staticmethod
	def checkType(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def compare(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def coerceToNumber(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def coerceToNumber(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def isDoubleStringOp(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isDoubleOp(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def coerceToCharacter(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Character: ...
	@overload
	@staticmethod
	def coerceToType(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def coerceToType(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def toFloat(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def isStringFloat(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isLongOp(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isBigIntegerOp(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def coerceToBoolean(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Boolean: ...
	@staticmethod
	def throwUnhandled(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def containsNulls(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def coerceToEnum(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def isBigDecimalOp(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toNumber(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def coerceToString(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...


class FunctionMapperImpl:
	def __init__(self, ): ...
	class Function:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
		def matches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def matches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def resolveFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mapFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...


class ELArithmetic:
	class LongDelegate:
		def __init__(self, ): ...
		@staticmethod
		def add(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mod(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def isNumberType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def subtract(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def isNumber(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def divide(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def multiply(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...


	class DoubleDelegate:
		def __init__(self, ): ...
		@staticmethod
		def add(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mod(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def isNumberType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def subtract(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def isNumber(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def divide(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def multiply(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...


	class BigIntegerDelegate:
		def __init__(self, ): ...
		@staticmethod
		def add(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mod(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def isNumberType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def subtract(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def isNumber(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def divide(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def multiply(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...


	class BigDecimalDelegate:
		def __init__(self, ): ...
		@staticmethod
		def add(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mod(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def isNumberType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def subtract(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def isNumber(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def divide(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
		@staticmethod
		def multiply(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...


	@staticmethod
	def add(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def mod(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def isNumberType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def subtract(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isNumber(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def divide(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def multiply(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Number: ...


class FunctionMapperFactory:
	def __init__(self, arg0: javawrappers.javax.el.FunctionMapper, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resolveFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.javax.el.FunctionMapper: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mapFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.reflect.Method, ) -> None: ...
	def notify(self, ) -> None: ...


