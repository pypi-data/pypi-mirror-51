################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.javax.media.jai
import javawrappers.java.lang
import javawrappers.java.awt.image
import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.java.beans
import javawrappers.java.awt.image.renderable

from jpype.types import *
from typing import Union

from typing import overload

class MlibAffineBilinearOpImage:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.javax.media.jai.BorderExtender, arg2: javawrappers.java.util.Map, arg3: javawrappers.javax.media.jai.ImageLayout, arg4: javawrappers.java.awt.geom.AffineTransform, arg5: javawrappers.javax.media.jai.Interpolation, arg6: JArray(Union[float, JDouble], 1), ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getBorderExtender(self, ) -> javawrappers.javax.media.jai.BorderExtender: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def getOperationComputeType(self, ) -> Union[int, JInt]: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def computesUniqueTiles(self, ) -> Union[int, JBoolean]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@staticmethod
	def getExpandedNumBands(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JInt]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def hasExtender(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getInterpolation(self, ) -> javawrappers.javax.media.jai.Interpolation: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def getTileDependencies(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getTileRecycler(self, ) -> javawrappers.javax.media.jai.TileRecycler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class MlibCompositeRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMeanRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibConvolveRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAffineNearestOpImage:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.javax.media.jai.BorderExtender, arg2: javawrappers.java.util.Map, arg3: javawrappers.javax.media.jai.ImageLayout, arg4: javawrappers.java.awt.geom.AffineTransform, arg5: javawrappers.javax.media.jai.Interpolation, arg6: JArray(Union[float, JDouble], 1), ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getBorderExtender(self, ) -> javawrappers.javax.media.jai.BorderExtender: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def getOperationComputeType(self, ) -> Union[int, JInt]: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def computesUniqueTiles(self, ) -> Union[int, JBoolean]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@staticmethod
	def getExpandedNumBands(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JInt]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def hasExtender(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getInterpolation(self, ) -> javawrappers.javax.media.jai.Interpolation: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def getTileDependencies(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getTileRecycler(self, ) -> javawrappers.javax.media.jai.TileRecycler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class MlibDCTRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibSubtractRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibOrConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibIDFTRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAndRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMinFilterRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibHistogramRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibDilateRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibRotateRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibXorRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FCTmediaLib:
	def __init__(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLength(self, arg0: Union[int, JInt], ) -> None: ...
	def transform(self, ) -> None: ...
	def setData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...


class MlibMinRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibBandSelectRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAffineTableOpImage:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.javax.media.jai.BorderExtender, arg2: javawrappers.java.util.Map, arg3: javawrappers.javax.media.jai.ImageLayout, arg4: javawrappers.java.awt.geom.AffineTransform, arg5: javawrappers.javax.media.jai.Interpolation, arg6: JArray(Union[float, JDouble], 1), ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getBorderExtender(self, ) -> javawrappers.javax.media.jai.BorderExtender: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def getOperationComputeType(self, ) -> Union[int, JInt]: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def computesUniqueTiles(self, ) -> Union[int, JBoolean]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@staticmethod
	def getExpandedNumBands(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JInt]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def hasExtender(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getInterpolation(self, ) -> javawrappers.javax.media.jai.Interpolation: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def getTileDependencies(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getTileRecycler(self, ) -> javawrappers.javax.media.jai.TileRecycler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class MlibDivideByConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMultiplyRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibSubtractFromConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibBoxFilterRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibScaleRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAddConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibSubtractConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMedianFilterRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibExtremaRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FFTmediaLib:
	def __init__(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.Integer, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setIFCTData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def getIFCTData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setFCTData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def setLength(self, arg0: Union[int, JInt], ) -> None: ...
	def transform(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFCTData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...


class MlibAbsoluteRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibOrRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibTranslateRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAndConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMaxFilterRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibDivideRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibLogRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibErodeRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibThresholdRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMosaicRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMultiplyConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibSubsampleBinaryToGrayRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibLookupRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibSubsampleAverageOpImage:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.javax.media.jai.ImageLayout, arg2: javawrappers.java.util.Map, arg3: Union[float, JDouble], arg4: Union[float, JDouble], ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getBorderExtender(self, ) -> javawrappers.javax.media.jai.BorderExtender: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def getOperationComputeType(self, ) -> Union[int, JInt]: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def computesUniqueTiles(self, ) -> Union[int, JBoolean]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@staticmethod
	def getExpandedNumBands(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JInt]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def hasExtender(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getInterpolation(self, ) -> javawrappers.javax.media.jai.Interpolation: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def getTileDependencies(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getTileRecycler(self, ) -> javawrappers.javax.media.jai.TileRecycler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class MlibSubsampleAverageRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibWarpRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibUnsharpMaskRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibIDCTRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibNotRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibMaxRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAffineRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibXorConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibBandCombineRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MediaLibAccessor:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ): ...


class MlibDivideIntoConstRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAddRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibShearRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibAffineBicubicOpImage:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.javax.media.jai.BorderExtender, arg2: javawrappers.java.util.Map, arg3: javawrappers.javax.media.jai.ImageLayout, arg4: javawrappers.java.awt.geom.AffineTransform, arg5: javawrappers.javax.media.jai.Interpolation, arg6: JArray(Union[float, JDouble], 1), ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getBorderExtender(self, ) -> javawrappers.javax.media.jai.BorderExtender: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def getOperationComputeType(self, ) -> Union[int, JInt]: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def computesUniqueTiles(self, ) -> Union[int, JBoolean]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@staticmethod
	def getExpandedNumBands(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JInt]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def hasExtender(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getInterpolation(self, ) -> javawrappers.javax.media.jai.Interpolation: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def getTileDependencies(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getTileRecycler(self, ) -> javawrappers.javax.media.jai.TileRecycler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class MlibRescaleRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibBinarizeRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibTransposeRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibExpRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibGradientRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibFilteredSubsampleRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibErrorDiffusionRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibInvertRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibOrderedDitherRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibClampRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MlibDFTRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


