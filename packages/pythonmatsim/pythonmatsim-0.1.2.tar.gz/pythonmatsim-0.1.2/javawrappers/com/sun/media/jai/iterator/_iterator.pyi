################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.awt.image

from jpype.types import *
from typing import Union

from typing import overload

class RandomIterCSMShort:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class RandomIterCSMFloat:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class WritableRandomIterFallback:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


class WritableRectIterFallback:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...


class WritableRookIterFallback:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def prevLine(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def prevBand(self, ) -> None: ...
	def finishedPixelsLeft(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def prevPixel(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	def endPixels(self, ) -> None: ...
	def prevBandDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	def prevLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def prevPixelDone(self, ) -> Union[int, JBoolean]: ...
	def endLines(self, ) -> None: ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def endBands(self, ) -> None: ...
	def finishedLinesTop(self, ) -> Union[int, JBoolean]: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...


class RectIterCSMByte:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def nextPixel(self, ) -> None: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBand(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...


class RandomIterCSMDouble:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class RectIterFallback:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...


class RectIterCSM:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...


class RookIterFallback:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def prevLine(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def prevBand(self, ) -> None: ...
	def finishedPixelsLeft(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def prevPixel(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	def endPixels(self, ) -> None: ...
	def prevBandDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	def prevLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def prevPixelDone(self, ) -> Union[int, JBoolean]: ...
	def endLines(self, ) -> None: ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def endBands(self, ) -> None: ...
	def finishedLinesTop(self, ) -> Union[int, JBoolean]: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...


class WritableRandomIterCSMInt:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


class RectIterCSMFloat:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def nextPixel(self, ) -> None: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBand(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...


class WritableRectIterCSMByte:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...


class WritableRectIterCSMFloat:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def startLines(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...


class RandomIterCSMUShort:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class WritableRandomIterCSMByte:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


class RandomIterFallback:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class RandomIterCSM:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class WritableRandomIterCSMShort:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


class RandomIterCSMInt:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class RandomIterCSMByte:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class WritableRandomIterCSMUShort:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


class WrapperRI:
	def __init__(self, arg0: javawrappers.java.awt.image.Raster, ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...


class WritableRandomIterCSMFloat:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


class WrapperWRI:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRaster, ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isTileWritable(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileObserver(self, arg0: javawrappers.java.awt.image.TileObserver, ) -> None: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getWritableTileIndices(self, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def getWritableTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.WritableRaster: ...
	def removeTileObserver(self, arg0: javawrappers.java.awt.image.TileObserver, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def setData(self, arg0: javawrappers.java.awt.image.Raster, ) -> None: ...
	def hasTileWriters(self, ) -> Union[int, JBoolean]: ...
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def releaseWritableTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...


class WritableRandomIterCSMDouble:
	def __init__(self, arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def done(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...


