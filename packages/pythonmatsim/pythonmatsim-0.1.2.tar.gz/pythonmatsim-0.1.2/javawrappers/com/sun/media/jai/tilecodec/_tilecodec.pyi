################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.media.jai.remote
import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.awt.image
import javawrappers.java.io
import javawrappers.javax.media.jai.tilecodec

from jpype.types import *
from typing import Union

from typing import overload

class JPEGTileEncoder:


class JPEGTileDecoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createDecoder(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ) -> javawrappers.javax.media.jai.tilecodec.TileDecoder: ...
	def getDecodeCapability(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...


class GZIPTileEncoder:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	def getEncodeParameterList(self, ) -> javawrappers.javax.media.jai.tilecodec.TileCodecParameterList: ...
	def encode(self, arg0: javawrappers.java.awt.image.Raster, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFormatName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def notify(self, ) -> None: ...


class JPEGTileEncoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEncodeCapability(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def createEncoder(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, arg2: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.javax.media.jai.tilecodec.TileEncoder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RawTileEncoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEncodeCapability(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def createEncoder(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, arg2: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.javax.media.jai.tilecodec.TileEncoder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TileCodecUtils:
	def __init__(self, ): ...
	@staticmethod
	def serializeSampleModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getTileCodecDescriptor(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.tilecodec.TileCodecDescriptor: ...
	@staticmethod
	def deserializeSampleModel(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.awt.image.SampleModel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def serializeRaster(arg0: javawrappers.java.awt.image.Raster, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def deserializeRaster(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.awt.image.Raster: ...


class GZIPTileDecoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createDecoder(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ) -> javawrappers.javax.media.jai.tilecodec.TileDecoder: ...
	def getDecodeCapability(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...


class RawTileEncoder:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	def getEncodeParameterList(self, ) -> javawrappers.javax.media.jai.tilecodec.TileCodecParameterList: ...
	def encode(self, arg0: javawrappers.java.awt.image.Raster, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFormatName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def notify(self, ) -> None: ...


class GZIPTileDecoder:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFormatName(self, ) -> javawrappers.java.lang.String: ...
	def getDecodeParameterList(self, ) -> javawrappers.javax.media.jai.tilecodec.TileCodecParameterList: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def decode(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def decode(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.image.Raster: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class JPEGTileDecoder:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFormatName(self, ) -> javawrappers.java.lang.String: ...
	def getDecodeParameterList(self, ) -> javawrappers.javax.media.jai.tilecodec.TileCodecParameterList: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def decode(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def decode(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.image.Raster: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class RawTileDecoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def createDecoder(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ) -> javawrappers.javax.media.jai.tilecodec.TileDecoder: ...
	def getDecodeCapability(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...


class GZIPTileEncoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEncodeCapability(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def createEncoder(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, arg2: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.javax.media.jai.tilecodec.TileEncoder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RawTileDecoder:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFormatName(self, ) -> javawrappers.java.lang.String: ...
	def getDecodeParameterList(self, ) -> javawrappers.javax.media.jai.tilecodec.TileCodecParameterList: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def decode(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def decode(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.image.Raster: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


