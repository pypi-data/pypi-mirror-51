################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.awt.image
import javawrappers.java.awt.geom
import javawrappers.java.util.stream
import javawrappers.java.beans
import javawrappers.java.awt.color
import javawrappers.java.awt
import javawrappers.javax.media.jai.util
import javawrappers.javax.media.jai
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.com.sun.media.jai.util
import javawrappers.java.awt.image.renderable

from jpype.types import *
from typing import Union

from typing import overload

class PolyWarpSolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getCoeffs(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def matmul_t(arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: JArray(JArray(Union[float, JDouble], 1), 1), ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	def notify(self, ) -> None: ...


class SimpleCMYKColorSpace:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def toCIEXYZ(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def fromCIEXYZ(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def toRGB(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def getNumComponents(self, ) -> Union[int, JInt]: ...
	def getMaxValue(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def fromRGB(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def getMinValue(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def isCS_sRGB(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.awt.color.ColorSpace: ...
	@overload
	@staticmethod
	def getInstance(arg0: Union[int, JInt], ) -> javawrappers.java.awt.color.ColorSpace: ...


class CaselessStringKeyHashtable:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.javax.media.jai.util.CaselessStringKey, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.javax.media.jai.util.CaselessStringKey, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.javax.media.jai.util.CaselessStringKey, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	@overload
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def containsKey(self, arg0: javawrappers.javax.media.jai.util.CaselessStringKey, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def elements(self, ) -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class RWLock:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	class :
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LockNotHeld:
		def __init__(self, arg0: javawrappers.com.sun.media.jai.util.RWLock, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class UpgradeNotAllowed:
		def __init__(self, arg0: javawrappers.com.sun.media.jai.util.RWLock, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class ReaderWriter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class WaitingList:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def offerFirst(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def poll(self, ) -> javawrappers.java.lang.Object: ...
		def getLast(self, ) -> javawrappers.java.lang.Object: ...
		def offer(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def getFirst(self, ) -> javawrappers.java.lang.Object: ...
		def removeFirst(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def element(self, ) -> javawrappers.java.lang.Object: ...
		def removeLastOccurrence(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def peekFirst(self, ) -> javawrappers.java.lang.Object: ...
		def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
		def peekLast(self, ) -> javawrappers.java.lang.Object: ...
		def push(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
		@overload
		def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
		def removeFirstOccurrence(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def pollFirst(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def descendingIterator(self, ) -> javawrappers.java.util.Iterator: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
		def pollLast(self, ) -> javawrappers.java.lang.Object: ...
		def removeLast(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def pop(self, ) -> javawrappers.java.lang.Object: ...
		def addLast(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def peek(self, ) -> javawrappers.java.lang.Object: ...
		def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def offerLast(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addFirst(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def release(self, ) -> None: ...
	def offerFirst(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def poll(self, ) -> javawrappers.java.lang.Object: ...
	def downgrade(self, ) -> Union[int, JBoolean]: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getLast(self, ) -> javawrappers.java.lang.Object: ...
	def offer(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getFirst(self, ) -> javawrappers.java.lang.Object: ...
	def removeFirst(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def element(self, ) -> javawrappers.java.lang.Object: ...
	def removeLastOccurrence(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def upgrade(self, ) -> Union[int, JBoolean]: ...
	@overload
	def upgrade(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def peekFirst(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def forWriting(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def forWriting(self, ) -> Union[int, JBoolean]: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def peekLast(self, ) -> javawrappers.java.lang.Object: ...
	def push(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	def removeFirstOccurrence(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def pollFirst(self, ) -> javawrappers.java.lang.Object: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def descendingIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	def pollLast(self, ) -> javawrappers.java.lang.Object: ...
	def removeLast(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def pop(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def forReading(self, ) -> Union[int, JBoolean]: ...
	@overload
	def forReading(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def addLast(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def offerLast(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addFirst(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class ImagingListenerImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.com.sun.media.jai.util.ImagingListenerImpl: ...
	def notify(self, ) -> None: ...
	def errorOccurred(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Object, arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...


class CaselessStringArrayTable:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.javax.media.jai.util.CaselessStringKey, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.javax.media.jai.util.CaselessStringKey, ) -> Union[int, JBoolean]: ...
	def getName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.util.CaselessStringKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def indexOf(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: javawrappers.javax.media.jai.util.CaselessStringKey, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class PlanarImageProducer:
	def __init__(self, arg0: javawrappers.javax.media.jai.PlanarImage, ): ...
	def isConsumer(self, arg0: javawrappers.java.awt.image.ImageConsumer, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addConsumer(self, arg0: javawrappers.java.awt.image.ImageConsumer, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def requestTopDownLeftRightResend(self, arg0: javawrappers.java.awt.image.ImageConsumer, ) -> None: ...
	def removeConsumer(self, arg0: javawrappers.java.awt.image.ImageConsumer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def startProduction(self, arg0: javawrappers.java.awt.image.ImageConsumer, ) -> None: ...
	def notify(self, ) -> None: ...


class AreaOpPropertyGenerator:
	def __init__(self, ): ...
	@overload
	def getClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def canGenerateProperties(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.media.jai.RenderedOp, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.media.jai.RenderableOp, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PropertyGeneratorImpl:
	@overload
	def getClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def canGenerateProperties(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.media.jai.RenderedOp, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.media.jai.RenderableOp, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Service:
	class :
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LazyIterator:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def installedProviders(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Iterator: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	@staticmethod
	def providers(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.Iterator: ...
	@overload
	@staticmethod
	def providers(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Iterator: ...


class PropertyUtil:
	def __init__(self, ): ...
	@staticmethod
	def getFileFromClasspath(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getPropertyNames(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MathJAI:
	def __init__(self, ): ...
	@staticmethod
	def isPositivePowerOf2(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def nextPositivePowerOf2(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JDKWorkarounds:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def areCompatibleDataModels(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def setRect(arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.java.awt.image.Raster, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def setRect(arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.java.awt.image.Raster, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InterpAverage:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def interpolateV(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolateV(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolateV(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolateV(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolateV(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolateV(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolateV(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolateV(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolateV(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolate(self, arg0: JArray(JArray(Union[float, JFloat], 1), 1), arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], arg10: Union[float, JDouble], arg11: Union[float, JDouble], arg12: Union[float, JDouble], arg13: Union[float, JDouble], arg14: Union[float, JDouble], arg15: Union[float, JDouble], arg16: Union[float, JFloat], arg17: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolate(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolate(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JFloat], arg7: Union[float, JFloat], arg8: Union[float, JFloat], arg9: Union[float, JFloat], arg10: Union[float, JFloat], arg11: Union[float, JFloat], arg12: Union[float, JFloat], arg13: Union[float, JFloat], arg14: Union[float, JFloat], arg15: Union[float, JFloat], arg16: Union[float, JFloat], arg17: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JFloat], arg5: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolate(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], arg5: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolate(self, arg0: JArray(JArray(Union[int, JInt], 1), 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], arg8: Union[int, JInt], arg9: Union[int, JInt], arg10: Union[int, JInt], arg11: Union[int, JInt], arg12: Union[int, JInt], arg13: Union[int, JInt], arg14: Union[int, JInt], arg15: Union[int, JInt], arg16: Union[int, JInt], arg17: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getRightPadding(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSubsampleBitsH(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def getTopPadding(self, ) -> Union[int, JInt]: ...
	def getLeftPadding(self, ) -> Union[int, JInt]: ...
	@overload
	def interpolateH(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolateH(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolateH(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def interpolateH(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolateH(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolateH(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolateH(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[float, JFloat], ) -> Union[float, JDouble]: ...
	@overload
	def interpolateH(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def interpolateH(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isSeparable(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getInstance(arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.Interpolation: ...
	def getBottomPadding(self, ) -> Union[int, JInt]: ...
	def getSubsampleBitsV(self, ) -> Union[int, JInt]: ...


class DataBufferUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def createDataBufferDouble(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferDouble(arg0: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferDouble(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferDouble(arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferDouble(arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferDouble(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def getDataDouble(arg0: javawrappers.java.awt.image.DataBuffer, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def getDataDouble(arg0: javawrappers.java.awt.image.DataBuffer, arg1: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getBankDataFloat(arg0: javawrappers.java.awt.image.DataBuffer, ) -> JArray(JArray(Union[float, JFloat], 1), 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def createDataBufferFloat(arg0: JArray(JArray(Union[float, JFloat], 1), 1), arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferFloat(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferFloat(arg0: JArray(JArray(Union[float, JFloat], 1), 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferFloat(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferFloat(arg0: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@overload
	@staticmethod
	def createDataBufferFloat(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.DataBuffer: ...
	@staticmethod
	def getBankDataDouble(arg0: javawrappers.java.awt.image.DataBuffer, ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@overload
	@staticmethod
	def getDataFloat(arg0: javawrappers.java.awt.image.DataBuffer, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	@staticmethod
	def getDataFloat(arg0: javawrappers.java.awt.image.DataBuffer, arg1: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	def notify(self, ) -> None: ...


class CacheDiagnostics:
	def getCacheMissCount(self, ) -> Union[long, JLong]: ...
	def getCacheMemoryUsed(self, ) -> Union[long, JLong]: ...
	def resetCounts(self, ) -> None: ...
	def getCacheHitCount(self, ) -> Union[long, JLong]: ...
	def getCacheTileCount(self, ) -> Union[long, JLong]: ...
	def enableDiagnostics(self, ) -> None: ...
	def disableDiagnostics(self, ) -> None: ...


class SunTileCache:
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def removeTiles(self, arg0: javawrappers.java.awt.image.RenderedImage, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def deleteObserver(self, arg0: javawrappers.java.util.Observer, ) -> None: ...
	def enableDiagnostics(self, ) -> None: ...
	def setMemoryCapacity(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def notifyObservers(self, ) -> None: ...
	@overload
	def notifyObservers(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getCacheMissCount(self, ) -> Union[long, JLong]: ...
	def addTiles(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: JArray(javawrappers.java.awt.Point, 1), arg2: JArray(javawrappers.java.awt.image.Raster, 1), arg3: javawrappers.java.lang.Object, ) -> None: ...
	def resetCounts(self, ) -> None: ...
	def getCacheHitCount(self, ) -> Union[long, JLong]: ...
	def getCacheTileCount(self, ) -> Union[long, JLong]: ...
	def flush(self, ) -> None: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTileComparator(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def setTileCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	def getCachedObject(self, ) -> javawrappers.java.lang.Object: ...
	def dump(self, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.Raster, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.Raster, ) -> None: ...
	def getTileComparator(self, ) -> javawrappers.java.util.Comparator: ...
	def getTile(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def addObserver(self, arg0: javawrappers.java.util.Observer, ) -> None: ...
	def countObservers(self, ) -> Union[int, JInt]: ...
	def deleteObservers(self, ) -> None: ...
	def getMemoryCapacity(self, ) -> Union[long, JLong]: ...
	def getCacheMemoryUsed(self, ) -> Union[long, JLong]: ...
	def memoryControl(self, ) -> None: ...
	def getMemoryThreshold(self, ) -> Union[float, JFloat]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileCapacity(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCachedTileActions() -> JArray(javawrappers.javax.media.jai.EnumeratedParameter, 1): ...
	def disableDiagnostics(self, ) -> None: ...
	@overload
	def getTiles(self, arg0: javawrappers.java.awt.image.RenderedImage, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	def setMemoryThreshold(self, arg0: Union[float, JFloat], ) -> None: ...


class Rational:
	@overload
	def __init__(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.com.sun.media.jai.util.Rational, ): ...
	@overload
	def add(self, arg0: javawrappers.com.sun.media.jai.util.Rational, ) -> None: ...
	@overload
	def add(self, arg0: Union[long, JLong], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def invert(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def approximate(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.sun.media.jai.util.Rational: ...
	@overload
	@staticmethod
	def approximate(arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> javawrappers.com.sun.media.jai.util.Rational: ...
	@overload
	def subtract(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def subtract(self, arg0: javawrappers.com.sun.media.jai.util.Rational, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def ceil(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createFromFrac(arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], ) -> javawrappers.com.sun.media.jai.util.Rational: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def multiply(self, arg0: javawrappers.com.sun.media.jai.util.Rational, ) -> None: ...
	@overload
	def multiply(self, arg0: Union[long, JLong], ) -> None: ...
	@staticmethod
	def floor(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...


class SunTileScheduler:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	def scheduleTile(self, arg0: javawrappers.javax.media.jai.OpImage, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPrefetchPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def setPrefetchParallelism(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def prefetchTiles(self, arg0: javawrappers.javax.media.jai.PlanarImage, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	def setParallelism(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def getPrefetchParallelism(self, ) -> Union[int, JInt]: ...
	@overload
	def scheduleTiles(self, arg0: javawrappers.javax.media.jai.OpImage, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def scheduleTiles(self, arg0: javawrappers.javax.media.jai.PlanarImage, arg1: JArray(javawrappers.java.awt.Point, 1), arg2: JArray(javawrappers.javax.media.jai.TileComputationListener, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def getPrefetchPriority(self, ) -> Union[int, JInt]: ...
	def getParallelism(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


class DisposableNullOpImage:
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.javax.media.jai.ImageLayout, arg2: javawrappers.java.util.Map, arg3: Union[int, JInt], ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def getOperationComputeType(self, ) -> Union[int, JInt]: ...
	def computesUniqueTiles(self, ) -> Union[int, JBoolean]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@staticmethod
	def getExpandedNumBands(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.ColorModel, ) -> Union[int, JInt]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def hasExtender(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def getTileDependencies(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getTileRecycler(self, ) -> javawrappers.javax.media.jai.TileRecycler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class ImageUtil:
	def __init__(self, ): ...
	@staticmethod
	def fillBordersWithBackgroundValues(arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.Rectangle, arg2: javawrappers.java.awt.image.WritableRaster, arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def clampShort(arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def clampRoundByte(arg0: Union[float, JFloat], ) -> JByte: ...
	@overload
	@staticmethod
	def clampRoundByte(arg0: Union[float, JDouble], ) -> JByte: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def clampBytePositive(arg0: Union[int, JInt], ) -> JByte: ...
	@staticmethod
	def clampUShortPositive(arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getPackedBinaryData(arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, ) -> JArray(JByte, 1): ...
	@staticmethod
	def getUnpackedBinaryData(arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def clampRoundInt(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def clampRoundInt(arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@staticmethod
	def getUnsharpMaskEquivalentKernel(arg0: javawrappers.javax.media.jai.KernelJAI, arg1: Union[float, JFloat], ) -> javawrappers.javax.media.jai.KernelJAI: ...
	@staticmethod
	def getStackTraceString(arg0: javawrappers.java.lang.Exception, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setUnpackedBinaryData(arg0: JArray(JByte, 1), arg1: javawrappers.java.awt.image.WritableRaster, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def clampInt(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def clampRoundShort(arg0: Union[float, JFloat], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def clampRoundShort(arg0: Union[float, JDouble], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def clampRoundUShort(arg0: Union[float, JFloat], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def clampRoundUShort(arg0: Union[float, JDouble], ) -> Union[int, JShort]: ...
	@staticmethod
	def clampByte(arg0: Union[int, JInt], ) -> JByte: ...
	@overload
	@staticmethod
	def getImagingListener(arg0: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.util.ImagingListener: ...
	@overload
	@staticmethod
	def getImagingListener(arg0: javawrappers.java.awt.image.renderable.RenderContext, ) -> javawrappers.javax.media.jai.util.ImagingListener: ...
	@staticmethod
	def clampUShort(arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@staticmethod
	def fillBackground(arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.java.awt.Rectangle, arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	@staticmethod
	def clampUShortNegative(arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@staticmethod
	def generateID(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def isBinary(arg0: javawrappers.java.awt.image.SampleModel, ) -> Union[int, JBoolean]: ...
	def areEqualSampleModels(self, arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.awt.image.SampleModel, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def clampFloat(arg0: Union[float, JDouble], ) -> Union[float, JFloat]: ...
	@staticmethod
	def setPackedBinaryData(arg0: JArray(JByte, 1), arg1: javawrappers.java.awt.image.WritableRaster, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	@staticmethod
	def getCompatibleColorModel(arg0: javawrappers.java.awt.image.SampleModel, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.awt.image.ColorModel: ...
	@staticmethod
	def copyRaster(arg0: javawrappers.javax.media.jai.RasterAccessor, arg1: javawrappers.javax.media.jai.RasterAccessor, ) -> None: ...
	@overload
	@staticmethod
	def evaluateParameters(arg0: javawrappers.java.util.Vector, ) -> javawrappers.java.util.Vector: ...
	@overload
	@staticmethod
	def evaluateParameters(arg0: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> javawrappers.java.awt.image.renderable.ParameterBlock: ...
	@staticmethod
	def clampByteNegative(arg0: Union[int, JInt], ) -> JByte: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getTileIndices(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


