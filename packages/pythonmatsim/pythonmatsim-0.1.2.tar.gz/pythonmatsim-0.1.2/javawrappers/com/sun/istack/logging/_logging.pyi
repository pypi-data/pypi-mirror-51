################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.java.lang
import javawrappers.com.sun.istack.logging

from jpype.types import *
from typing import Union

from typing import overload

class Logger:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isLoggable(self, arg0: javawrappers.java.util.logging.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def logException(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.util.logging.Level, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def logException(self, arg0: javawrappers.java.lang.Throwable, arg1: Union[int, JBoolean], arg2: javawrappers.java.util.logging.Level, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def logException(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.logging.Level, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def logSevereException(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def logSevereException(self, arg0: javawrappers.java.lang.Throwable, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def logSevereException(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isMethodCallLoggable(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.istack.logging.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.istack.logging.Logger: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: javawrappers.java.util.logging.Level, ) -> None: ...
	@overload
	def entering(self, ) -> None: ...
	@overload
	def entering(self, *arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def fine(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def exiting(self, ) -> None: ...
	@overload
	def exiting(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def config(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...


