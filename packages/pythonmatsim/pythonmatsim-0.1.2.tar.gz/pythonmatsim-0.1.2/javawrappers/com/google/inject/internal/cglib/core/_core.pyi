################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.google.inject.internal.cglib.core
import javawrappers.java.lang.reflect
import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.com.google.inject.internal.asm
import javawrappers.java.beans

from jpype.types import *
from typing import Union

from typing import overload

class $ClassNameReader:
	class EarlyExitException:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@staticmethod
	def getClassInfo(arg0: javawrappers.com.google.inject.internal.asm.$ClassReader, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getClassName(arg0: javawrappers.com.google.inject.internal.asm.$ClassReader, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class $ReflectUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getMethodInfo(arg0: javawrappers.java.lang.reflect.Member, arg1: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.cglib.core.$MethodInfo: ...
	@overload
	@staticmethod
	def getMethodInfo(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.com.google.inject.internal.cglib.core.$MethodInfo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def addAllMethods(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def getProtectionDomain(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.security.ProtectionDomain: ...
	@staticmethod
	def findPackageProtected(arg0: JArray(javawrappers.java.lang.Class, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def getClassInfo(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.cglib.core.$ClassInfo: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getNames(arg0: JArray(javawrappers.java.lang.Class, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def findConstructor(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.reflect.Constructor: ...
	@overload
	@staticmethod
	def findConstructor(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Constructor: ...
	@overload
	@staticmethod
	def findMethod(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Method: ...
	@overload
	@staticmethod
	def findMethod(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.reflect.Method: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getBeanGetters(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.beans.PropertyDescriptor, 1): ...
	@staticmethod
	def getBeanProperties(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.beans.PropertyDescriptor, 1): ...
	@staticmethod
	def getClasses(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@staticmethod
	def getPropertyMethods(arg0: JArray(javawrappers.java.beans.PropertyDescriptor, 1), arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.reflect.Method, 1): ...
	@staticmethod
	def findInterfaceMethod(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Method: ...
	@staticmethod
	def findDeclaredMethod(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.reflect.Method: ...
	@staticmethod
	def findNewInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Method: ...
	@staticmethod
	def addAllInterfaces(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def defineClass(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.security.ProtectionDomain, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def defineClass(arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getSignature(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.reflect.Constructor, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getConstructor(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.reflect.Constructor: ...
	@staticmethod
	def getBeanSetters(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.beans.PropertyDescriptor, 1): ...
	@staticmethod
	def getExceptionTypes(arg0: javawrappers.java.lang.reflect.Member, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@staticmethod
	def findMethods(arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.reflect.Method, 1), ) -> JArray(javawrappers.java.lang.reflect.Method, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class $Transformer:
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class $CollectionUtils:
	@staticmethod
	def filter(arg0: javawrappers.java.util.Collection, arg1: javawrappers.com.google.inject.internal.cglib.core.$Predicate, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def bucket(arg0: javawrappers.java.util.Collection, arg1: javawrappers.com.google.inject.internal.cglib.core.$Transformer, ) -> javawrappers.java.util.Map: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def transform(arg0: javawrappers.java.util.Collection, arg1: javawrappers.com.google.inject.internal.cglib.core.$Transformer, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reverse(arg0: javawrappers.java.util.Map, arg1: javawrappers.java.util.Map, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getIndexMap(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.Map: ...


class $TypeUtils:
	@staticmethod
	def upperFirst(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isStatic(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def escapeType(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isSynthetic(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isPrivate(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isBridge(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toInternalNames(arg0: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def isProtected(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getStackSize(arg0: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def isPublic(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isFinal(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isInterface(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def add(arg0: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), arg1: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@overload
	@staticmethod
	def add(arg0: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@staticmethod
	def NEWARRAY(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def parseConstructor(arg0: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	@overload
	@staticmethod
	def parseConstructor(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	@staticmethod
	def DCONST(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@staticmethod
	def parseSignature(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	@staticmethod
	def isAbstract(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def parseType(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@staticmethod
	def parseTypes(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@staticmethod
	def LCONST(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@staticmethod
	def getType(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@staticmethod
	def FCONST(arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isConstructor(arg0: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getComponentType(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@staticmethod
	def getUnboxedType(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@staticmethod
	def emulateClassGetName(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isArray(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getClassName(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getPackageName(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getPackageName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getTypes(arg0: JArray(javawrappers.java.lang.Class, 1), ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@staticmethod
	def fromInternalNames(arg0: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@staticmethod
	def isPrimitive(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ICONST(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getBoxedType(arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@staticmethod
	def fromInternalName(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...


class $DebuggingClassWriter:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def getSuperName(self, ) -> javawrappers.java.lang.String: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.com.google.inject.internal.asm.$MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.asm.$FieldVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class $CodeEmitter:
	def __init__(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, ): ...
	class State:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getExceptionTypes(self, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttribute(self, ) -> javawrappers.com.google.inject.internal.asm.$Attribute: ...
		def getClassInfo(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$ClassInfo: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSignature(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getModifiers(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	def make_label(self, ) -> javawrappers.com.google.inject.internal.asm.$Label: ...
	def getMethodInfo(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$MethodInfo: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.com.google.inject.internal.asm.$Label, *arg3: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	@overload
	def aaload(self, ) -> None: ...
	@overload
	def aaload(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def invoke(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, ) -> None: ...
	@overload
	def invoke(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def create_arg_array(self, ) -> None: ...
	def invoke_static(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	def super_putstatic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def super_getfield(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def invoke_virtual(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	@overload
	def super_invoke(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	@overload
	def super_invoke(self, ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.com.google.inject.internal.asm.$Label, arg4: javawrappers.com.google.inject.internal.asm.$Label, arg5: Union[int, JInt], ) -> None: ...
	@overload
	def process_switch(self, arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.com.google.inject.internal.cglib.core.$ProcessSwitchCallback, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def process_switch(self, arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.com.google.inject.internal.cglib.core.$ProcessSwitchCallback, ) -> None: ...
	def monitorenter(self, ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def push(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def push(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def push(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def push(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def push(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def push(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def pop2(self, ) -> None: ...
	@overload
	def putfield(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	@overload
	def putfield(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unbox(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def math(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def athrow(self, ) -> None: ...
	def dup2(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def return_value(self, ) -> None: ...
	def getClassInfo(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$ClassInfo: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def checkcast_this(self, ) -> None: ...
	def end_method(self, ) -> None: ...
	@overload
	def getfield(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getfield(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def aconst_null(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def pop(self, ) -> None: ...
	def zero_or_null(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def monitorexit(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def load_args(self, ) -> None: ...
	@overload
	def load_args(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def invoke_constructor(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	@overload
	def invoke_constructor(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	@overload
	def getSignature(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	@overload
	def getSignature(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), arg3: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def super_getstatic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def getReturnType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def ifnonnull(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def instance_of(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def arraylength(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def new_instance(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def load_arg(self, arg0: Union[int, JInt], ) -> None: ...
	def begin_block(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Block: ...
	def visitAnnotationDefault(self, ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def store_local(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Local, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def super_putfield(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def invoke_virtual_this(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	def load_this(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, arg1: javawrappers.com.google.inject.internal.asm.$Label, arg2: javawrappers.com.google.inject.internal.asm.$Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def newarray(self, ) -> None: ...
	@overload
	def newarray(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def aastore(self, ) -> None: ...
	def checkcast(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	@overload
	def invoke_constructor_this(self, ) -> None: ...
	@overload
	def invoke_constructor_this(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def cast_numeric(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	@overload
	def swap(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	@overload
	def swap(self, ) -> None: ...
	def instance_of_this(self, ) -> None: ...
	def catch_exception(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Block, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def isStaticHook(self, ) -> Union[int, JBoolean]: ...
	def getClassEmitter(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def super_invoke_constructor(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	@overload
	def super_invoke_constructor(self, ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def dup_x1(self, ) -> None: ...
	@overload
	def make_local(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.com.google.inject.internal.cglib.core.$Local: ...
	@overload
	def make_local(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Local: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def dup_x2(self, ) -> None: ...
	def goTo(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def array_load(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def dup2_x1(self, ) -> None: ...
	def dup2_x2(self, ) -> None: ...
	def invoke_static_this(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	def getstatic(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def new_instance_this(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def putstatic(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def box(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def not_(self, ) -> None: ...
	def if_cmp(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: Union[int, JInt], arg2: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def getAttribute(self, ) -> javawrappers.com.google.inject.internal.asm.$Attribute: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def unbox_or_zero(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def ifnull(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitCode(self, ) -> None: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def array_store(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def iinc(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Local, arg1: Union[int, JInt], ) -> None: ...
	def invoke_interface(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), ) -> None: ...
	def throw_exception(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, arg1: javawrappers.java.lang.String, ) -> None: ...
	def if_icmp(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def load_local(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Local, ) -> None: ...
	def if_jump(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def mark(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def dup(self, ) -> None: ...


class $ClassGenerator:
	def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...


class $Constants:


class $DefaultNamingPolicy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.com.google.inject.internal.cglib.core.$Predicate, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class $LocalVariablesSorter:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$MethodVisitor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$LocalVariablesSorter, ): ...
	class State:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, arg1: javawrappers.com.google.inject.internal.asm.$Label, arg2: javawrappers.com.google.inject.internal.asm.$Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.com.google.inject.internal.asm.$Label, *arg3: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.com.google.inject.internal.asm.$Label, arg4: javawrappers.com.google.inject.internal.asm.$Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), arg3: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class $ProcessArrayCallback:
	def processElement(self, arg0: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...


class $RejectModifierPredicate:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class $ProcessSwitchCallback:
	def processCase(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def processDefault(self, ) -> None: ...


class $EmitUtils:
	class ParameterTyper:
		def getParameterTypes(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...


	class ArrayDelimiters:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def push_object(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def null_constructor(arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter, ) -> None: ...
	def getParameterTypes(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def not_equals(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, arg2: javawrappers.com.google.inject.internal.asm.$Label, arg3: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> None: ...
	@staticmethod
	def hash_code(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, arg2: Union[int, JInt], arg3: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def add_properties(arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter, arg1: JArray(javawrappers.java.lang.String, 1), arg2: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ) -> None: ...
	@staticmethod
	def string_switch(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JInt], arg3: javawrappers.com.google.inject.internal.cglib.core.$ObjectSwitchCallback, ) -> None: ...
	@staticmethod
	def append_string(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, arg2: javawrappers.com.google.inject.internal.cglib.core.$EmitUtils.ArrayDelimiters, arg3: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> None: ...
	@staticmethod
	def process_arrays(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, arg2: javawrappers.com.google.inject.internal.cglib.core.$ProcessArrayCallback, ) -> None: ...
	@overload
	@staticmethod
	def begin_method(arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter, arg1: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, ) -> javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter: ...
	@overload
	@staticmethod
	def begin_method(arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter, arg1: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, arg2: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter: ...
	@staticmethod
	def load_class_this(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, ) -> None: ...
	@staticmethod
	def process_array(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, arg2: javawrappers.com.google.inject.internal.cglib.core.$ProcessArrayCallback, ) -> None: ...
	@staticmethod
	def push_array(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@staticmethod
	def load_class(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	@staticmethod
	def method_switch(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.java.util.List, arg2: javawrappers.com.google.inject.internal.cglib.core.$ObjectSwitchCallback, ) -> None: ...
	@staticmethod
	def load_method(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.cglib.core.$MethodInfo, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def constructor_switch(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.java.util.List, arg2: javawrappers.com.google.inject.internal.cglib.core.$ObjectSwitchCallback, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap_undeclared_throwable(arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.cglib.core.$Block, arg2: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), arg3: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...
	@staticmethod
	def add_property(arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, arg3: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def factory_method(arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassEmitter, arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> None: ...
	@staticmethod
	def wrap_throwable(arg0: javawrappers.com.google.inject.internal.cglib.core.$Block, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...


class $Signature:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.google.inject.internal.asm.$Type, arg2: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ): ...
	def getDescriptor(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getArgumentTypes(self, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getReturnType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class $MethodInfoTransformer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.com.google.inject.internal.cglib.core.$MethodInfoTransformer: ...
	def notify(self, ) -> None: ...


class $DefaultGeneratorStrategy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def generate(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassGenerator, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...


class $ClassInfo:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getInterfaces(self, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	def getSuperType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class $Customizer:
	def customize(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> None: ...


class $VisibilityPredicate:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class $MethodWrapper:
	class MethodWrapperKey:
		def newInstance(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.Object: ...
	def newInstance(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createSet(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class $Block:
	def __init__(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStart(self, ) -> javawrappers.com.google.inject.internal.asm.$Label: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCodeEmitter(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def end(self, ) -> None: ...
	def getEnd(self, ) -> javawrappers.com.google.inject.internal.asm.$Label: ...
	def notify(self, ) -> None: ...


class $ObjectSwitchCallback:
	def processCase(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def processDefault(self, ) -> None: ...


class $Local:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Type, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class $MethodInfo:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getClassInfo(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$ClassInfo: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSignature(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class $GeneratorStrategy:
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def generate(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$ClassGenerator, ) -> JArray(JByte, 1): ...


class $CodeGenerationException:
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class $DuplicatesPredicate:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class $ClassEmitter:
	@overload
	def __init__(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ): ...
	@overload
	def __init__(self, ): ...
	class FieldInfo:
		def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, arg3: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def declare_field(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Type, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getClassInfo(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$ClassInfo: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getClassType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def notifyAll(self, ) -> None: ...
	def getSuperType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def getStaticHook(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.asm.$FieldVisitor: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTarget(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
	def begin_static(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def getAccess(self, ) -> Union[int, JInt]: ...
	def end_class(self, ) -> None: ...
	def begin_method(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, arg2: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), ) -> javawrappers.com.google.inject.internal.cglib.core.$CodeEmitter: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.com.google.inject.internal.asm.$MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def begin_class(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.com.google.inject.internal.asm.$Type, arg4: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), arg5: javawrappers.java.lang.String, ) -> None: ...


class $KeyFactory:
	class Generator:
		def __init__(self, ): ...
		def getStrategy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setAttemptLoad(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setInterface(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setUseCache(self, arg0: Union[int, JBoolean], ) -> None: ...
		def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def getNamingPolicy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy: ...
		def setClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		def setHashMultiplier(self, arg0: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...
		def setHashConstant(self, arg0: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getAttemptLoad(self, ) -> Union[int, JBoolean]: ...
		def getUseCache(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setStrategy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy, ) -> None: ...
		def setNamingPolicy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy, ) -> None: ...
		def create(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$KeyFactory: ...
		def setCustomizer(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getCurrent() -> javawrappers.com.google.inject.internal.cglib.core.$AbstractClassGenerator: ...


	def getStrategy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy: ...
	def setAttemptLoad(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setInterface(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setUseCache(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def getNamingPolicy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy: ...
	def setClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def setHashMultiplier(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def setHashConstant(self, arg0: Union[int, JInt], ) -> None: ...
	def getAttemptLoad(self, ) -> Union[int, JBoolean]: ...
	def getUseCache(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setStrategy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNamingPolicy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy, ) -> None: ...
	def setCustomizer(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> None: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Class, arg2: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> javawrappers.com.google.inject.internal.cglib.core.$KeyFactory: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.cglib.core.$KeyFactory: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.internal.cglib.core.$Customizer, ) -> javawrappers.com.google.inject.internal.cglib.core.$KeyFactory: ...
	@overload
	def create(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$KeyFactory: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCurrent() -> javawrappers.com.google.inject.internal.cglib.core.$AbstractClassGenerator: ...


class $AbstractClassGenerator:
	class Source:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getStrategy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setAttemptLoad(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setUseCache(self, arg0: Union[int, JBoolean], ) -> None: ...
	def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def getNamingPolicy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy: ...
	def setClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttemptLoad(self, ) -> Union[int, JBoolean]: ...
	def getUseCache(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setStrategy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy, ) -> None: ...
	def setNamingPolicy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCurrent() -> javawrappers.com.google.inject.internal.cglib.core.$AbstractClassGenerator: ...


class $NamingPolicy:
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClassName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.com.google.inject.internal.cglib.core.$Predicate, ) -> javawrappers.java.lang.String: ...


class $Predicate:
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


