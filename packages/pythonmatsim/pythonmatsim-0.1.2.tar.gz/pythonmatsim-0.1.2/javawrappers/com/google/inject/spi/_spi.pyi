################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.google.inject
import javawrappers.com.google.inject.spi
import javawrappers.com.google.inject.matcher
import javawrappers.java.lang.annotation
import javawrappers.com.google.inject.binder
import javawrappers.org.aopalliance.intercept
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class ModuleAnnotatedMethodScanner:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def annotationClasses(self, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def prepareMethod(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.annotation.Annotation, arg2: javawrappers.com.google.inject.Key, arg3: javawrappers.com.google.inject.spi.InjectionPoint, ) -> javawrappers.com.google.inject.Key: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ProvidesMethodTargetVisitor:
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ExposedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.UntargettedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConstructorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConvertedConstantBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderKeyBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.LinkedKeyBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProvidesMethodBinding, ) -> javawrappers.java.lang.Object: ...


class ProviderKeyBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def getProviderKey(self, ) -> javawrappers.com.google.inject.Key: ...


class ElementVisitor:
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProvisionListenerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExplicitBindingsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.MembersInjectorLookup, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.TypeListenerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.PrivateElements, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.Binding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScannerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExactBindingAnnotationsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InterceptorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireAtInjectOnConstructorsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.DisableCircularProxiesOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.TypeConverterBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.StaticInjectionRequest, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderLookup, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ScopeBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InjectionRequest, ) -> javawrappers.java.lang.Object: ...


class ProviderBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvidedKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...


class MembersInjectorLookup:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.TypeLiteral, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def initializeDelegate(self, arg0: javawrappers.com.google.inject.MembersInjector, ) -> None: ...
	def getDelegate(self, ) -> javawrappers.com.google.inject.MembersInjector: ...
	def notify(self, ) -> None: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getType(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMembersInjector(self, ) -> javawrappers.com.google.inject.MembersInjector: ...


class TypeConverterBinding:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.matcher.Matcher, arg2: javawrappers.com.google.inject.spi.TypeConverter, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTypeConverter(self, ) -> javawrappers.com.google.inject.spi.TypeConverter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getTypeMatcher(self, ) -> javawrappers.com.google.inject.matcher.Matcher: ...


class ElementSource:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getModuleClassNames(self, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringSource(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModuleConfigurePositionsInStackTrace(self, ) -> javawrappers.java.util.List: ...
	def getOriginalElementSource(self, ) -> javawrappers.com.google.inject.spi.ElementSource: ...
	def notify(self, ) -> None: ...


class RequireExactBindingAnnotationsOption:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HasDependencies:
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...


class DefaultBindingScopingVisitor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def visitNoScoping(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitScope(self, arg0: javawrappers.com.google.inject.Scope, ) -> javawrappers.java.lang.Object: ...
	def visitScopeAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def visitEagerSingleton(self, ) -> javawrappers.java.lang.Object: ...


class DefaultElementVisitor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExplicitBindingsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.MembersInjectorLookup, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.TypeListenerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProvisionListenerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.PrivateElements, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScannerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExactBindingAnnotationsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.StaticInjectionRequest, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireAtInjectOnConstructorsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.DisableCircularProxiesOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ScopeBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InterceptorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.Binding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderLookup, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.TypeConverterBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InjectionRequest, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class Toolable:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TypeListenerBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getListener(self, ) -> javawrappers.com.google.inject.spi.TypeListener: ...
	def notify(self, ) -> None: ...
	def getTypeMatcher(self, ) -> javawrappers.com.google.inject.matcher.Matcher: ...


class ExposedBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getPrivateElements(self, ) -> javawrappers.com.google.inject.spi.PrivateElements: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...


class BindingTargetVisitor:
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ExposedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.UntargettedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConstructorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConvertedConstantBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderKeyBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.LinkedKeyBinding, ) -> javawrappers.java.lang.Object: ...


class InterceptorBinding:
	def getInterceptors(self, ) -> javawrappers.java.util.List: ...
	def getClassMatcher(self, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMethodMatcher(self, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InjectionListener:
	def afterInjection(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


class ProviderWithExtensionVisitor:
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...


class ProviderInstanceBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProviderInstance(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getInjectionPoints(self, ) -> javawrappers.java.util.Set: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def getUserSuppliedProvider(self, ) -> javawrappers.javax.inject.Provider: ...


class StaticInjectionRequest:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInjectionPoints(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class ProvisionListenerBinding:
	def getListeners(self, ) -> javawrappers.java.util.List: ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBindingMatcher(self, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def notify(self, ) -> None: ...


class ScopeBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getScope(self, ) -> javawrappers.com.google.inject.Scope: ...


class DependencyAndSource:
	def __init__(self, arg0: javawrappers.com.google.inject.spi.Dependency, arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getBindingSource(self, ) -> javawrappers.java.lang.String: ...
	def getDependency(self, ) -> javawrappers.com.google.inject.spi.Dependency: ...


class InstanceBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getInstance(self, ) -> javawrappers.java.lang.Object: ...
	def getInjectionPoints(self, ) -> javawrappers.java.util.Set: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...


class InjectionPoint:
	class Signature:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class OverrideIndex:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Position:
		TOP: InjectionPoint.Position = ...
		MIDDLE: InjectionPoint.Position = ...
		BOTTOM: InjectionPoint.Position = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.spi.InjectionPoint.Position: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.spi.InjectionPoint.Position, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class InjectableMembers:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class InjectableMethod:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isFinal(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class InjectableField:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class InjectableMember:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isToolable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.spi.InjectionPoint.Position: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def getDependencies(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.spi.InjectionPoint.Position, 1): ...
	def notifyAll(self, ) -> None: ...
	def getMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	@overload
	@staticmethod
	def forConstructorOf(arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...
	@overload
	@staticmethod
	def forConstructorOf(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def isOptional(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def forStaticMethodsAndFields(arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def forStaticMethodsAndFields(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringType(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	@staticmethod
	def forConstructor(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...
	@overload
	@staticmethod
	def forConstructor(arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def forInstanceMethodsAndFields(arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def forInstanceMethodsAndFields(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forMethod(arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ProvidesMethodBinding:
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def getEnclosingInstance(self, ) -> javawrappers.java.lang.Object: ...


class UntargettedBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...


class ProvisionListener:
	class ProvisionInvocation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def provision(self, ) -> javawrappers.java.lang.Object: ...
		def getBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDependencyChain(self, ) -> javawrappers.java.util.List: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def provision(self, ) -> javawrappers.java.lang.Object: ...
	def getBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDependencyChain(self, ) -> javawrappers.java.util.List: ...
	def onProvision(self, arg0: javawrappers.com.google.inject.spi.ProvisionListener.ProvisionInvocation, ) -> None: ...
	def notify(self, ) -> None: ...


class ProviderWithDependencies:
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...


class TypeListener:
	def hear(self, arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.com.google.inject.spi.TypeEncounter, ) -> None: ...


class InjectionRequest:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.Object, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInstance(self, ) -> javawrappers.java.lang.Object: ...
	def getInjectionPoints(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class RequireAtInjectOnConstructorsOption:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ProviderLookup:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.spi.Dependency, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.Key, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def initializeDelegate(self, arg0: javawrappers.com.google.inject.Provider, ) -> None: ...
	def getDelegate(self, ) -> javawrappers.com.google.inject.Provider: ...
	def notify(self, ) -> None: ...
	def getDependency(self, ) -> javawrappers.com.google.inject.spi.Dependency: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PrivateElements:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getExposedSource(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.java.lang.Object: ...
	def getExposedKeys(self, ) -> javawrappers.java.util.Set: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getElements(self, ) -> javawrappers.java.util.List: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.Injector: ...


class LinkedKeyBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getLinkedKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...


class Elements:
	def __init__(self, ): ...
	class RecordingBinder:
		@overload
		def addError(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def addError(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def addError(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def skipSources(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.google.inject.PrivateBinder: ...
		@overload
		def skipSources(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.google.inject.Binder: ...
		@overload
		def skipSources(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.spi.Elements.RecordingBinder: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def requestInjection(self, arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def requestInjection(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def bind(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
		@overload
		def bind(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
		@overload
		def bind(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
		@overload
		def bind(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
		def requireExactBindingAnnotations(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def convertToTypes(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeConverter, ) -> None: ...
		def requireExplicitBindings(self, ) -> None: ...
		@overload
		def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
		@overload
		def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
		@overload
		def getProvider(self, arg0: javawrappers.com.google.inject.spi.Dependency, ) -> javawrappers.com.google.inject.Provider: ...
		def disableCircularProxies(self, ) -> None: ...
		def bindConstant(self, ) -> javawrappers.com.google.inject.binder.AnnotatedConstantBindingBuilder: ...
		def currentStage(self, ) -> javawrappers.com.google.inject.Stage: ...
		def bindInterceptor(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.matcher.Matcher, *arg2: javawrappers.org.aopalliance.intercept.MethodInterceptor, ) -> None: ...
		@overload
		def expose(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedElementBuilder: ...
		@overload
		def expose(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedElementBuilder: ...
		@overload
		def expose(self, arg0: javawrappers.com.google.inject.Key, ) -> None: ...
		def requireAtInjectOnConstructors(self, ) -> None: ...
		def install(self, arg0: javawrappers.com.google.inject.Module, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def bindScope(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.Scope, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.Binder: ...
		@overload
		def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.spi.Elements.RecordingBinder: ...
		@overload
		def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.PrivateBinder: ...
		def requestStaticInjection(self, *arg0: javawrappers.java.lang.Class, ) -> None: ...
		@overload
		def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeListener, ) -> None: ...
		@overload
		def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, *arg1: javawrappers.com.google.inject.spi.ProvisionListener, ) -> None: ...
		@overload
		def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
		@overload
		def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...
		def scanModulesForAnnotatedMethods(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner, ) -> None: ...
		def newPrivateBinder(self, ) -> javawrappers.com.google.inject.PrivateBinder: ...


	class ModuleInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ElementsAsModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	@overload
	def addError(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> None: ...
	@staticmethod
	def getModule(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Module: ...
	@overload
	def skipSources(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.google.inject.PrivateBinder: ...
	@overload
	def skipSources(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.google.inject.Binder: ...
	@overload
	def skipSources(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.spi.Elements.RecordingBinder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def requestInjection(self, arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def requestInjection(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	def requireExactBindingAnnotations(self, ) -> None: ...
	def convertToTypes(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeConverter, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def requireExplicitBindings(self, ) -> None: ...
	@overload
	def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.spi.Dependency, ) -> javawrappers.com.google.inject.Provider: ...
	def disableCircularProxies(self, ) -> None: ...
	def bindConstant(self, ) -> javawrappers.com.google.inject.binder.AnnotatedConstantBindingBuilder: ...
	def currentStage(self, ) -> javawrappers.com.google.inject.Stage: ...
	def bindInterceptor(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.matcher.Matcher, *arg2: javawrappers.org.aopalliance.intercept.MethodInterceptor, ) -> None: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def expose(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedElementBuilder: ...
	@overload
	def expose(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedElementBuilder: ...
	@overload
	def expose(self, arg0: javawrappers.com.google.inject.Key, ) -> None: ...
	def requireAtInjectOnConstructors(self, ) -> None: ...
	def install(self, arg0: javawrappers.com.google.inject.Module, ) -> None: ...
	def bindScope(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.Scope, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getElements(arg0: javawrappers.com.google.inject.Stage, arg1: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getElements(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getElements(arg0: javawrappers.com.google.inject.Stage, *arg1: javawrappers.com.google.inject.Module, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getElements(*arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.java.util.List: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.Binder: ...
	@overload
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.spi.Elements.RecordingBinder: ...
	@overload
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.PrivateBinder: ...
	def requestStaticInjection(self, *arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeListener, ) -> None: ...
	@overload
	def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, *arg1: javawrappers.com.google.inject.spi.ProvisionListener, ) -> None: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...
	def scanModulesForAnnotatedMethods(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner, ) -> None: ...
	def newPrivateBinder(self, ) -> javawrappers.com.google.inject.PrivateBinder: ...


class Element:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...


class TypeEncounter:
	@overload
	def addError(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	def bindInterceptor(self, arg0: javawrappers.com.google.inject.matcher.Matcher, *arg1: javawrappers.org.aopalliance.intercept.MethodInterceptor, ) -> None: ...
	@overload
	def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def register(self, arg0: javawrappers.com.google.inject.MembersInjector, ) -> None: ...
	@overload
	def register(self, arg0: javawrappers.com.google.inject.spi.InjectionListener, ) -> None: ...


class DisableCircularProxiesOption:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BindingScopingVisitor:
	def visitNoScoping(self, ) -> javawrappers.java.lang.Object: ...
	def visitScope(self, arg0: javawrappers.com.google.inject.Scope, ) -> javawrappers.java.lang.Object: ...
	def visitScopeAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def visitEagerSingleton(self, ) -> javawrappers.java.lang.Object: ...


class Dependency:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getInjectionPoint(self, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...
	def getParameterIndex(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.spi.Dependency: ...
	def isNullable(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def forInjectionPoints(arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class DefaultBindingTargetVisitor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.UntargettedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ExposedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConstructorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConvertedConstantBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.LinkedKeyBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderKeyBinding, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class RequireExplicitBindingsOption:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ConvertedConstantBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getTypeConverterBinding(self, ) -> javawrappers.com.google.inject.spi.TypeConverterBinding: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSourceKey(self, ) -> javawrappers.com.google.inject.Key: ...


class ConstructorBinding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getMethodInterceptors(self, ) -> javawrappers.java.util.Map: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def getInjectableMembers(self, ) -> javawrappers.java.util.Set: ...
	def getConstructor(self, ) -> javawrappers.com.google.inject.spi.InjectionPoint: ...


class ModuleAnnotatedMethodScannerBinding:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getScanner(self, ) -> javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner: ...
	def notify(self, ) -> None: ...


class TypeConverter:
	def convert(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.java.lang.Object: ...


class Message:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getSource(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSources(self, ) -> javawrappers.java.util.List: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...


