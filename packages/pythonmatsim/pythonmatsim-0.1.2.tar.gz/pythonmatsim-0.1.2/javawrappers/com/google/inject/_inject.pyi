################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.com.google.inject.spi
import javawrappers.com.google.inject.matcher
import javawrappers.java.lang.annotation
import javawrappers.com.google.inject.binder
import javawrappers.org.aopalliance.intercept

from jpype.types import *
from typing import Union

from typing import overload

class OutOfScopeException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Key:
	class AnnotationTypeStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hasAttributes(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...


	class AnnotationInstanceStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hasAttributes(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...


	class NullAnnotationStrategy:
		INSTANCE: Key.NullAnnotationStrategy = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.Key.NullAnnotationStrategy: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.Key.NullAnnotationStrategy, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hasAttributes(self, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class AnnotationStrategy:
		def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
		def hasAttributes(self, ) -> Union[int, JBoolean]: ...
		def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.Key.NullAnnotationStrategy: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.Key.NullAnnotationStrategy, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getAnnotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...
	@overload
	def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...
	@overload
	def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...
	@overload
	def withoutAttributes(self, ) -> javawrappers.com.google.inject.Key.AnnotationStrategy: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def hasAttributes(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasAttributes(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasAttributes(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasAttributes(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasAttributes(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def ofType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def ofType(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def ofType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Key: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ProvisionException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Iterable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getErrorMessages(self, ) -> javawrappers.java.util.Collection: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TypeLiteral:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRawType(self, ) -> javawrappers.java.lang.Class: ...
	def notifyAll(self, ) -> None: ...
	def getFieldType(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def getParameterTypes(self, arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def getExceptionTypes(self, arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.util.List: ...
	def getReturnType(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSupertype(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.TypeLiteral: ...


class Exposed:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Module:
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...


class Stage:
	TOOL: Stage = ...
	DEVELOPMENT: Stage = ...
	PRODUCTION: Stage = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.Stage: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.Stage, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Binding:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...


class Injector:
	def getTypeConverterBindings(self, ) -> javawrappers.java.util.Set: ...
	def getScopeBindings(self, ) -> javawrappers.java.util.Map: ...
	def getParent(self, ) -> javawrappers.com.google.inject.Injector: ...
	def getAllBindings(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getBinding(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def getBinding(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Binding: ...
	def getBindings(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def createChildInjector(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	def createChildInjector(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	def getInstance(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def findBindingsByType(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.java.util.List: ...
	def injectMembers(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getExistingBinding(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...


class ProvidedBy:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Class: ...


class BindingAnnotation:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PrivateModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class Binder:
	@overload
	def addError(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> None: ...
	def currentStage(self, ) -> javawrappers.com.google.inject.Stage: ...
	def skipSources(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Binder: ...
	def bindInterceptor(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.matcher.Matcher, *arg2: javawrappers.org.aopalliance.intercept.MethodInterceptor, ) -> None: ...
	@overload
	def requestInjection(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def requestInjection(self, arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def requireAtInjectOnConstructors(self, ) -> None: ...
	@overload
	def bind(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	def requireExactBindingAnnotations(self, ) -> None: ...
	def install(self, arg0: javawrappers.com.google.inject.Module, ) -> None: ...
	def convertToTypes(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeConverter, ) -> None: ...
	def bindScope(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.Scope, ) -> None: ...
	def requireExplicitBindings(self, ) -> None: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.spi.Dependency, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
	def disableCircularProxies(self, ) -> None: ...
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.Binder: ...
	def requestStaticInjection(self, *arg0: javawrappers.java.lang.Class, ) -> None: ...
	def bindConstant(self, ) -> javawrappers.com.google.inject.binder.AnnotatedConstantBindingBuilder: ...
	@overload
	def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, *arg1: javawrappers.com.google.inject.spi.ProvisionListener, ) -> None: ...
	@overload
	def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeListener, ) -> None: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
	def scanModulesForAnnotatedMethods(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner, ) -> None: ...
	def newPrivateBinder(self, ) -> javawrappers.com.google.inject.PrivateBinder: ...


class Scopes:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isCircularProxy(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSingleton(arg0: javawrappers.com.google.inject.Binding, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isScoped(arg0: javawrappers.com.google.inject.Binding, arg1: javawrappers.com.google.inject.Scope, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class Provides:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Scope:
	def scope(self, arg0: javawrappers.com.google.inject.Key, arg1: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ConfigurationException:
	def __init__(self, arg0: javawrappers.java.lang.Iterable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def withPartialValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.ConfigurationException: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getPartialValue(self, ) -> javawrappers.java.lang.Object: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getErrorMessages(self, ) -> javawrappers.java.util.Collection: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Guice:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def createInjector(arg0: javawrappers.com.google.inject.Stage, *arg1: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	@staticmethod
	def createInjector(arg0: javawrappers.com.google.inject.Stage, arg1: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	@staticmethod
	def createInjector(*arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	@staticmethod
	def createInjector(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Injector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MembersInjector:
	def injectMembers(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


class ScopeAnnotation:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PrivateBinder:
	@overload
	def addError(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def addError(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> None: ...
	def currentStage(self, ) -> javawrappers.com.google.inject.Stage: ...
	@overload
	def skipSources(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.PrivateBinder: ...
	@overload
	def skipSources(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Binder: ...
	def bindInterceptor(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.matcher.Matcher, *arg2: javawrappers.org.aopalliance.intercept.MethodInterceptor, ) -> None: ...
	@overload
	def requestInjection(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def requestInjection(self, arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def requireAtInjectOnConstructors(self, ) -> None: ...
	@overload
	def expose(self, arg0: javawrappers.com.google.inject.Key, ) -> None: ...
	@overload
	def expose(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedElementBuilder: ...
	@overload
	def expose(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedElementBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def bind(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.AnnotatedBindingBuilder: ...
	def requireExactBindingAnnotations(self, ) -> None: ...
	def install(self, arg0: javawrappers.com.google.inject.Module, ) -> None: ...
	def convertToTypes(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeConverter, ) -> None: ...
	def bindScope(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.Scope, ) -> None: ...
	def requireExplicitBindings(self, ) -> None: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.spi.Dependency, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
	def disableCircularProxies(self, ) -> None: ...
	def requestStaticInjection(self, *arg0: javawrappers.java.lang.Class, ) -> None: ...
	def bindConstant(self, ) -> javawrappers.com.google.inject.binder.AnnotatedConstantBindingBuilder: ...
	@overload
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.PrivateBinder: ...
	@overload
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.Binder: ...
	@overload
	def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, *arg1: javawrappers.com.google.inject.spi.ProvisionListener, ) -> None: ...
	@overload
	def bindListener(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.spi.TypeListener, ) -> None: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
	def scanModulesForAnnotatedMethods(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner, ) -> None: ...
	def newPrivateBinder(self, ) -> javawrappers.com.google.inject.PrivateBinder: ...


class AbstractModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class Singleton:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ImplementedBy:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Class: ...


class CreationException:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getErrorMessages(self, ) -> javawrappers.java.util.Collection: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Provider:
	def get(self, ) -> javawrappers.java.lang.Object: ...


class Inject:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def optional(self, ) -> Union[int, JBoolean]: ...


