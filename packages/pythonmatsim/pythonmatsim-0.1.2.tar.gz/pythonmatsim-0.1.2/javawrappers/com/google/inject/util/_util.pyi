################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.java.util
import javawrappers.com.google.inject.spi
import javawrappers.com.google.inject.util
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class Types:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def newParameterizedType(arg0: javawrappers.java.lang.reflect.Type, *arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	@staticmethod
	def javaxProviderOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def supertypeOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.WildcardType: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def subtypeOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.WildcardType: ...
	@staticmethod
	def arrayOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.GenericArrayType: ...
	@staticmethod
	def newParameterizedTypeWithOwner(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.Type, *arg2: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def collectionOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	@staticmethod
	def providerOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def listOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	@staticmethod
	def setOf(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...
	@staticmethod
	def mapOf(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...


class Modules:
	class ModuleWriter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.MembersInjectorLookup, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.TypeListenerBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.StaticInjectionRequest, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.InjectionRequest, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.TypeConverterBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderLookup, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.ProvisionListenerBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.ScopeBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.PrivateElements, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScannerBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExactBindingAnnotationsOption, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.RequireAtInjectOnConstructorsOption, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExplicitBindingsOption, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.DisableCircularProxiesOption, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.spi.InterceptorBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.com.google.inject.Binding, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class OverrideModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def configure(self, ) -> None: ...
		@overload
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	class RealOverriddenModuleBuilder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def with(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Module: ...
		@overload
		def with(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Module: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class OverriddenModuleBuilder:
		@overload
		def with(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Module: ...
		@overload
		def with(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Module: ...


	class CombinedModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	class EmptyModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	@overload
	def with(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Module: ...
	@overload
	def with(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Module: ...
	@overload
	def with(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Module: ...
	@overload
	def with(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Module: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.PrivateElements, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.MembersInjectorLookup, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.TypeListenerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProvisionListenerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.TypeConverterBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScannerBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExactBindingAnnotationsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ScopeBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireAtInjectOnConstructorsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.RequireExplicitBindingsOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.DisableCircularProxiesOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderLookup, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.StaticInjectionRequest, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InterceptorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.Binding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InjectionRequest, ) -> javawrappers.java.lang.Object: ...
	@overload
	def configure(self, ) -> None: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.util.Modules.OverriddenModuleBuilder: ...
	@overload
	@staticmethod
	def override(*arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.util.Modules.OverriddenModuleBuilder: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def combine(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Module: ...
	@overload
	@staticmethod
	def combine(*arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Module: ...


class Providers:
	class GuicifiedProviderWithDependencies:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class GuicifiedProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ConstantProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guicify(arg0: javawrappers.javax.inject.Provider, ) -> javawrappers.com.google.inject.Provider: ...
	def notify(self, ) -> None: ...


