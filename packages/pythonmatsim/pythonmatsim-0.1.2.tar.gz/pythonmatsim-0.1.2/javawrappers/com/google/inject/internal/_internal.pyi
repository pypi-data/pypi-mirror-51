################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.util
import javawrappers.com.google.common.base
import javawrappers.java.util.stream
import javawrappers.com.google.inject.internal
import javawrappers.java.lang.annotation
import javawrappers.com.google.inject.internal.cglib.reflect
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.java.net
import javawrappers.com.google.inject.spi
import javawrappers.java.io
import javawrappers.com.google.inject.internal.cglib.proxy
import javawrappers.com.google.inject.binder
import javawrappers.java.util.function
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class FailableCache:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.internal.Errors, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BindingBuilder:
	def __init__(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.Object, arg3: javawrappers.com.google.inject.Key, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.com.google.inject.Scope, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def asEagerSingleton(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def toInstance(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def toConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.javax.inject.Provider, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.javax.inject.Provider, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.internal.BindingBuilder: ...


class Scoping:
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isNoScope(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEagerSingleton(self, arg0: javawrappers.com.google.inject.Stage, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forAnnotation(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Scoping: ...
	def notify(self, ) -> None: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.binder.ScopedBindingBuilder, ) -> None: ...
	def isExplicitlyScoped(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getScopeAnnotation(self, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getScopeInstance(self, ) -> javawrappers.com.google.inject.Scope: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def forInstance(arg0: javawrappers.com.google.inject.Scope, ) -> javawrappers.com.google.inject.internal.Scoping: ...


class ProviderMethodsModule:
	class Signature:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDelegateModule(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def forModule(arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Module: ...
	@overload
	@staticmethod
	def forModule(arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner, ) -> javawrappers.com.google.inject.Module: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def forObject(arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.Module: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getProviderMethods(self, arg0: javawrappers.com.google.inject.Binder, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class ProviderMethod:
	class Factory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.com.google.inject.internal.Errors, arg1: javawrappers.com.google.inject.internal.InternalContext, arg2: javawrappers.com.google.inject.spi.Dependency, arg3: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ProviderMethodProviderInstanceBindingImpl:
		def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
		def getScoping(self, ) -> javawrappers.com.google.inject.internal.Scoping: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def notifyAll(self, ) -> None: ...
		def getInjector(self, ) -> javawrappers.com.google.inject.internal.InjectorImpl: ...
		def getInjectionPoints(self, ) -> javawrappers.java.util.Set: ...
		def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def getInternalFactory(self, ) -> javawrappers.com.google.inject.internal.InternalFactory: ...
		def getUserSuppliedProvider(self, ) -> javawrappers.javax.inject.Provider: ...
		def isConstant(self, ) -> Union[int, JBoolean]: ...
		def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
		def getSource(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getProviderInstance(self, ) -> javawrappers.com.google.inject.Provider: ...
		def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def withScoping(self, arg0: javawrappers.com.google.inject.internal.Scoping, ) -> javawrappers.com.google.inject.internal.BindingImpl: ...
		def initialize(self, arg0: javawrappers.com.google.inject.internal.InjectorImpl, arg1: javawrappers.com.google.inject.internal.Errors, ) -> None: ...
		def withKey(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.BindingImpl: ...


	class ReflectionProviderMethod:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def notifyAll(self, ) -> None: ...
		def getMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...
		def getEnclosingInstance(self, ) -> javawrappers.java.lang.Object: ...
		def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getInstance(self, ) -> javawrappers.java.lang.Object: ...


	class FastClassProviderMethod:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def notifyAll(self, ) -> None: ...
		def doProvision(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
		def getMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...
		def getEnclosingInstance(self, ) -> javawrappers.java.lang.Object: ...
		def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getInstance(self, ) -> javawrappers.java.lang.Object: ...


	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def doProvision(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def getInjectionPoints(self, ) -> javawrappers.java.util.Set: ...
	def getMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def getInternalFactory(self, ) -> javawrappers.com.google.inject.internal.InternalFactory: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.com.google.inject.internal.Errors, arg1: javawrappers.com.google.inject.internal.InternalContext, arg2: javawrappers.com.google.inject.spi.Dependency, arg3: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def getProviderInstance(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getScoping(self, ) -> javawrappers.com.google.inject.internal.Scoping: ...
	@overload
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.internal.InjectorImpl: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getUserSuppliedProvider(self, ) -> javawrappers.javax.inject.Provider: ...
	def getEnclosingInstance(self, ) -> javawrappers.java.lang.Object: ...
	def isConstant(self, ) -> Union[int, JBoolean]: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def withScoping(self, arg0: javawrappers.com.google.inject.internal.Scoping, ) -> javawrappers.com.google.inject.internal.BindingImpl: ...
	def initialize(self, arg0: javawrappers.com.google.inject.internal.InjectorImpl, arg1: javawrappers.com.google.inject.internal.Errors, ) -> None: ...
	def getInstance(self, ) -> javawrappers.java.lang.Object: ...
	def withKey(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.BindingImpl: ...


class SingletonScope:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def scope(self, arg0: javawrappers.com.google.inject.Key, arg1: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Errors:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	class ThrowableEquivalence:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def equivalent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.BiPredicate, ) -> javawrappers.java.util.function.BiPredicate: ...
		def test(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def equivalentTo(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.base.Predicate: ...
		def onResultOf(self, arg0: javawrappers.com.google.common.base.Function, ) -> javawrappers.com.google.common.base.Equivalence: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def pairwise(self, ) -> javawrappers.com.google.common.base.Equivalence: ...
		def and(self, arg0: javawrappers.java.util.function.BiPredicate, ) -> javawrappers.java.util.function.BiPredicate: ...
		def negate(self, ) -> javawrappers.java.util.function.BiPredicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def identity() -> javawrappers.com.google.common.base.Equivalence: ...
		@overload
		@staticmethod
		def equals() -> javawrappers.com.google.common.base.Equivalence: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def wrap(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.base.Equivalence.Wrapper: ...
		def hash(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


	class Converter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def equivalent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def tooManyConstructors(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def throwIfNewErrors(self, arg0: Union[int, JInt], ) -> None: ...
	def staticInjectionOnInterface(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def misplacedBindingAnnotation(self, arg0: javawrappers.java.lang.reflect.Member, arg1: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def childBindingAlreadySet(self, arg0: javawrappers.com.google.inject.Key, arg1: javawrappers.java.util.Set, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.spi.ElementSource, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def voidProviderMethod(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def cannotInjectRawMembersInjector(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def getMessages(self, ) -> javawrappers.java.util.List: ...
	@overload
	def addMessage(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@overload
	def addMessage(self, arg0: javawrappers.com.google.inject.spi.Message, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def errorInUserCode(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@overload
	@staticmethod
	def formatSource(arg0: javawrappers.java.util.Formatter, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def formatSource(arg0: javawrappers.java.util.Formatter, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.spi.ElementSource, ) -> None: ...
	def errorCheckingDuplicateBinding(self, arg0: javawrappers.com.google.inject.Key, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def errorInjectingMethod(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def duplicateBindingAnnotations(self, arg0: javawrappers.java.lang.reflect.Member, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def ambiguousTypeConversion(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.com.google.inject.spi.TypeConverterBinding, arg4: javawrappers.com.google.inject.spi.TypeConverterBinding, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def pairwise(self, ) -> javawrappers.com.google.common.base.Equivalence: ...
	def cannotInjectNonVoidMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@overload
	def merge(self, arg0: javawrappers.com.google.inject.internal.Errors, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@overload
	def merge(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def test(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def cannotProxyClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def scopeNotFound(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def duplicateScopes(self, arg0: javawrappers.com.google.inject.spi.ScopeBinding, arg1: javawrappers.java.lang.Class, arg2: javawrappers.com.google.inject.Scope, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def throwCreationExceptionIfErrorsExist(self, ) -> None: ...
	def toException(self, ) -> javawrappers.com.google.inject.internal.ErrorsException: ...
	@staticmethod
	def getOnlyCause(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.Throwable: ...
	def size(self, ) -> Union[int, JInt]: ...
	def errorInjectingConstructor(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def recursiveBinding(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def optionalConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def atInjectRequired(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def cannotInjectRawProvider(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def checkForNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.spi.Dependency, ) -> javawrappers.java.lang.Object: ...
	def withSource(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def errorInProvider(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def hash(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def errorNotifyingInjectionListener(self, arg0: javawrappers.com.google.inject.spi.InjectionListener, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.RuntimeException, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def cannotInjectRawTypeLiteral(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def keyNotFullySpecified(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.internal.Errors: ...
	@staticmethod
	def formatInjectionPoint(arg0: javawrappers.java.util.Formatter, arg1: javawrappers.com.google.inject.spi.Dependency, arg2: javawrappers.com.google.inject.spi.InjectionPoint, arg3: javawrappers.com.google.inject.spi.ElementSource, ) -> None: ...
	def jitDisabledInParent(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def equivalentTo(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.base.Predicate: ...
	def onResultOf(self, arg0: javawrappers.com.google.common.base.Function, ) -> javawrappers.com.google.common.base.Equivalence: ...
	def cannotInjectTypeLiteralOf(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def jitBindingAlreadySet(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def notifyAll(self, ) -> None: ...
	def cannotBindToGuiceType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def getSources(self, ) -> javawrappers.java.util.List: ...
	def missingRuntimeRetention(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def notify(self, ) -> None: ...
	def subtypeNotProvided(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def errorInUserInjector(self, arg0: javawrappers.com.google.inject.MembersInjector, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.RuntimeException, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def conversionError(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.com.google.inject.spi.TypeConverterBinding, arg4: javawrappers.java.lang.RuntimeException, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def throwProvisionExceptionIfErrorsExist(self, ) -> None: ...
	def and(self, arg0: javawrappers.java.util.function.BiPredicate, ) -> javawrappers.java.util.function.BiPredicate: ...
	@staticmethod
	def identity() -> javawrappers.com.google.common.base.Equivalence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def errorEnhancingClass(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Throwable, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def exposedButNotBound(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def cannotInjectMethodWithTypeParameters(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def duplicateScopeAnnotations(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def missingConstantValues(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def constructorNotDefinedByType(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def converterReturnedNull(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.com.google.inject.spi.TypeConverterBinding, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def cannotInjectAbstractMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def or_(self, arg0: javawrappers.java.util.function.BiPredicate, ) -> javawrappers.java.util.function.BiPredicate: ...
	def conversionTypeError(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.com.google.inject.spi.TypeConverterBinding, arg4: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def hasErrors(self, ) -> Union[int, JBoolean]: ...
	def cannotInjectFinalField(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def jitDisabled(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def missingScopeAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def circularDependenciesDisabled(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def missingImplementation(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def throwConfigurationExceptionIfErrorsExist(self, ) -> None: ...
	def scopeAnnotationOnAbstractType(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def recursiveImplementationType(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def cannotInjectInnerClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def bindingToProvider(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def missingConstructor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def errorNotifyingTypeListener(self, arg0: javawrappers.com.google.inject.spi.TypeListenerBinding, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.Throwable, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def recursiveProviderType(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def bindingAlreadySet(self, arg0: javawrappers.com.google.inject.Key, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def negate(self, ) -> javawrappers.java.util.function.BiPredicate: ...
	@overload
	@staticmethod
	def equals() -> javawrappers.com.google.common.base.Equivalence: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getMessagesFromThrowable(arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.util.Collection: ...
	def wrap(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.base.Equivalence.Wrapper: ...
	def notASubtype(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.Errors: ...


class UniqueAnnotations:
	class Internal:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def create() -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class ExposureBuilder:
	def __init__(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.Key, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class InternalInjectorCreator:
	def __init__(self, ): ...
	class ToolStageInjector:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getParent(self, ) -> javawrappers.com.google.inject.Injector: ...
		def getAllBindings(self, ) -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		def getBindings(self, ) -> javawrappers.java.util.Map: ...
		def injectMembers(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...
		def getTypeConverterBindings(self, ) -> javawrappers.java.util.Set: ...
		def getScopeBindings(self, ) -> javawrappers.java.util.Map: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getBinding(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Binding: ...
		@overload
		def getBinding(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Binding: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
		@overload
		def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def createChildInjector(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Injector: ...
		@overload
		def createChildInjector(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Injector: ...
		@overload
		def getInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getInstance(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.java.lang.Object: ...
		def findBindingsByType(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.java.util.List: ...
		def getExistingBinding(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Binding: ...
		@overload
		def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
		@overload
		def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...


	def addModules(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.internal.InternalInjectorCreator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getParent(self, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAllBindings(self, ) -> javawrappers.java.util.Map: ...
	def getBindings(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def parentInjector(self, arg0: javawrappers.com.google.inject.internal.InjectorImpl, ) -> javawrappers.com.google.inject.internal.InternalInjectorCreator: ...
	def injectMembers(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	def getTypeConverterBindings(self, ) -> javawrappers.java.util.Set: ...
	def getScopeBindings(self, ) -> javawrappers.java.util.Map: ...
	def stage(self, arg0: javawrappers.com.google.inject.Stage, ) -> javawrappers.com.google.inject.internal.InternalInjectorCreator: ...
	def build(self, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	def getBinding(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def getBinding(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Binding: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def createChildInjector(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.inject.Injector: ...
	@overload
	def createChildInjector(self, *arg0: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Injector: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getInstance(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.java.lang.Object: ...
	def findBindingsByType(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.java.util.List: ...
	def getExistingBinding(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.MembersInjector: ...
	@overload
	def getMembersInjector(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.MembersInjector: ...


class Annotations:
	def __init__(self, ): ...
	class AnnotationChecker:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getKey(arg0: javawrappers.com.google.inject.TypeLiteral, arg1: javawrappers.java.lang.reflect.Member, arg2: JArray(javawrappers.java.lang.annotation.Annotation, 1), arg3: javawrappers.com.google.inject.internal.Errors, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def canonicalizeIfNamed(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def canonicalizeIfNamed(arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@staticmethod
	def isScopeAnnotation(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isBindingAnnotation(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def checkForMisplacedScopeAnnotations(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.internal.Errors, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isRetainedAtRuntime(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def findScopeAnnotation(arg0: javawrappers.com.google.inject.internal.Errors, arg1: JArray(javawrappers.java.lang.annotation.Annotation, 1), ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def findScopeAnnotation(arg0: javawrappers.com.google.inject.internal.Errors, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def findBindingAnnotation(arg0: javawrappers.com.google.inject.internal.Errors, arg1: javawrappers.java.lang.reflect.Member, arg2: JArray(javawrappers.java.lang.annotation.Annotation, 1), ) -> javawrappers.java.lang.annotation.Annotation: ...
	@staticmethod
	def isAllDefaultMethods(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def generateAnnotation(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@staticmethod
	def isMarker(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...


class BytecodeGen:
	def __init__(self, ): ...
	class BridgeClassLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def notify(self, ) -> None: ...
		def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
		def clearAssertionStatus(self, ) -> None: ...
		def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
		def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
		def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
		@staticmethod
		def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
		@staticmethod
		def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@staticmethod
		def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class Visibility:
		PUBLIC: BytecodeGen.Visibility = ...
		SAME_PACKAGE: BytecodeGen.Visibility = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.internal.BytecodeGen.Visibility, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def and(self, arg0: javawrappers.com.google.inject.internal.BytecodeGen.Visibility, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def forMember(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
		@staticmethod
		def forType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class SystemBridgeHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.internal.BytecodeGen.Visibility, 1): ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getClassLoader(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.ClassLoader: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def and(self, arg0: javawrappers.com.google.inject.internal.BytecodeGen.Visibility, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def forMember(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def newEnhancer(arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.internal.BytecodeGen.Visibility, ) -> javawrappers.com.google.inject.internal.cglib.proxy.$Enhancer: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def forType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.BytecodeGen.Visibility: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def newFastClassForMember(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Member, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastClass: ...
	@overload
	@staticmethod
	def newFastClassForMember(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastClass: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class InternalFlags:
	def __init__(self, ): ...
	class NullableProvidesOption:
		IGNORE: InternalFlags.NullableProvidesOption = ...
		WARN: InternalFlags.NullableProvidesOption = ...
		ERROR: InternalFlags.NullableProvidesOption = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.InternalFlags.NullableProvidesOption: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.internal.InternalFlags.NullableProvidesOption, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class CustomClassLoadingOption:
		OFF: InternalFlags.CustomClassLoadingOption = ...
		BRIDGE: InternalFlags.CustomClassLoadingOption = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.InternalFlags.CustomClassLoadingOption: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.internal.InternalFlags.CustomClassLoadingOption, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class IncludeStackTraceOption:
		OFF: InternalFlags.IncludeStackTraceOption = ...
		ONLY_FOR_DECLARING_SOURCE: InternalFlags.IncludeStackTraceOption = ...
		COMPLETE: InternalFlags.IncludeStackTraceOption = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.InternalFlags.IncludeStackTraceOption: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.internal.InternalFlags.IncludeStackTraceOption, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getCustomClassLoadingOption() -> javawrappers.com.google.inject.internal.InternalFlags.CustomClassLoadingOption: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.InternalFlags.NullableProvidesOption: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.InternalFlags.CustomClassLoadingOption: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.InternalFlags.IncludeStackTraceOption: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.internal.InternalFlags.CustomClassLoadingOption, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.internal.InternalFlags.NullableProvidesOption, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.internal.InternalFlags.IncludeStackTraceOption, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getIncludeStackTraceOption() -> javawrappers.com.google.inject.internal.InternalFlags.IncludeStackTraceOption: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getNullableProvidesOption() -> javawrappers.com.google.inject.internal.InternalFlags.NullableProvidesOption: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ExposedBindingImpl:
	def __init__(self, arg0: javawrappers.com.google.inject.internal.InjectorImpl, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.inject.Key, arg3: javawrappers.com.google.inject.internal.InternalFactory, arg4: javawrappers.com.google.inject.spi.PrivateElements, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getScoping(self, ) -> javawrappers.com.google.inject.internal.Scoping: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.internal.InjectorImpl: ...
	def getPrivateElements(self, ) -> javawrappers.com.google.inject.spi.PrivateElements: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getInternalFactory(self, ) -> javawrappers.com.google.inject.internal.InternalFactory: ...
	def isConstant(self, ) -> Union[int, JBoolean]: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Nullability:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def allowsNull(arg0: JArray(javawrappers.java.lang.annotation.Annotation, 1), ) -> Union[int, JBoolean]: ...


class CircularDependencyProxy:


class ErrorsException:
	def __init__(self, arg0: javawrappers.com.google.inject.internal.Errors, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getErrors(self, ) -> javawrappers.com.google.inject.internal.Errors: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LinkedBindingImpl:
	@overload
	def __init__(self, arg0: javawrappers.com.google.inject.internal.InjectorImpl, arg1: javawrappers.com.google.inject.Key, arg2: javawrappers.java.lang.Object, arg3: javawrappers.com.google.inject.internal.InternalFactory, arg4: javawrappers.com.google.inject.internal.Scoping, arg5: javawrappers.com.google.inject.Key, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.inject.Key, arg2: javawrappers.com.google.inject.internal.Scoping, arg3: javawrappers.com.google.inject.Key, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getScoping(self, ) -> javawrappers.com.google.inject.internal.Scoping: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.internal.InjectorImpl: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getInternalFactory(self, ) -> javawrappers.com.google.inject.internal.InternalFactory: ...
	def isConstant(self, ) -> Union[int, JBoolean]: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def getLinkedKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def withScoping(self, arg0: javawrappers.com.google.inject.internal.Scoping, ) -> javawrappers.com.google.inject.internal.BindingImpl: ...
	def withKey(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.internal.BindingImpl: ...


class PrivateElementsImpl:
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def initInjector(self, arg0: javawrappers.com.google.inject.Injector, ) -> None: ...
	def getExposedKeys(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.Injector: ...
	def notify(self, ) -> None: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def getExposedSource(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addExposureBuilder(self, arg0: javawrappers.com.google.inject.internal.ExposureBuilder, ) -> None: ...
	def getElementsMutable(self, ) -> javawrappers.java.util.List: ...


class MoreTypes:
	class CompositeType:
		def isFullySpecified(self, ) -> Union[int, JBoolean]: ...


	class WildcardTypeImpl:
		def __init__(self, arg0: JArray(javawrappers.java.lang.reflect.Type, 1), arg1: JArray(javawrappers.java.lang.reflect.Type, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTypeName(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
		def isFullySpecified(self, ) -> Union[int, JBoolean]: ...


	class GenericArrayTypeImpl:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Type, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getGenericComponentType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTypeName(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def isFullySpecified(self, ) -> Union[int, JBoolean]: ...


	class ParameterizedTypeImpl:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.Type, *arg2: javawrappers.java.lang.reflect.Type, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getRawType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def getActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTypeName(self, ) -> javawrappers.java.lang.String: ...
		def getOwnerType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def notify(self, ) -> None: ...
		def isFullySpecified(self, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getRawType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	@staticmethod
	def getRawType(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.Class: ...
	def getActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	@staticmethod
	def canonicalizeForKey(arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@staticmethod
	def getGenericSupertype(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Type: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def canonicalizeKey(arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.Key: ...
	def getLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getOwnerType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def notify(self, ) -> None: ...
	@overload
	def isFullySpecified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isFullySpecified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isFullySpecified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isFullySpecified(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def typeToString(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.String: ...
	def getGenericComponentType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equals(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def canonicalize(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def resolveTypeVariable(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.java.lang.reflect.Type: ...
	def getUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...


class BindingImpl:
	def __init__(self, arg0: javawrappers.com.google.inject.internal.InjectorImpl, arg1: javawrappers.com.google.inject.Key, arg2: javawrappers.java.lang.Object, arg3: javawrappers.com.google.inject.internal.InternalFactory, arg4: javawrappers.com.google.inject.internal.Scoping, ): ...
	def acceptVisitor(self, arg0: javawrappers.com.google.inject.spi.ElementVisitor, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getScoping(self, ) -> javawrappers.com.google.inject.internal.Scoping: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.internal.InjectorImpl: ...
	def acceptTargetVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getInternalFactory(self, ) -> javawrappers.com.google.inject.internal.InternalFactory: ...
	def applyTo(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def isConstant(self, ) -> Union[int, JBoolean]: ...
	def acceptScopingVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingScopingVisitor, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AbstractBindingBuilder:
	def __init__(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.Object, arg3: javawrappers.com.google.inject.Key, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.com.google.inject.Scope, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def asEagerSingleton(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ConstantBindingBuilderImpl:
	def __init__(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.com.google.inject.Scope, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def to(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def to(self, arg0: JByte, ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Enum, ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def to(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def to(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def to(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def to(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def to(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def to(self, arg0: Union[int, JShort], ) -> None: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.binder.ConstantBindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ConstantBindingBuilder: ...
	def asEagerSingleton(self, ) -> None: ...
	def notify(self, ) -> None: ...


