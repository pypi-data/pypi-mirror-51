################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.google.inject.internal.util
import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util

from jpype.types import *
from typing import Union

from typing import overload

class StackTraceElements:
	def __init__(self, ): ...
	class InMemoryStackTraceElement:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def convertToInMemoryStackTraceElement(arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> JArray(javawrappers.com.google.inject.internal.util.StackTraceElements.InMemoryStackTraceElement, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forMember(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def forType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def convertToStackTraceElement(arg0: JArray(javawrappers.com.google.inject.internal.util.StackTraceElements.InMemoryStackTraceElement, 1), ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def clearCache() -> None: ...
	def notify(self, ) -> None: ...


class SourceProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFromClassNames(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> javawrappers.java.lang.StackTraceElement: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def plusSkippedClasses(self, *arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.util.SourceProvider: ...


class Stopwatch:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def resetAndLog(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class Classes:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isConcrete(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def memberType(arg0: javawrappers.java.lang.reflect.Member, ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isInnerClass(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...


