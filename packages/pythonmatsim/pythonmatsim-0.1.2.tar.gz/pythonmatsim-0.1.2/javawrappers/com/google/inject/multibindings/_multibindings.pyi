################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.java.util
import javawrappers.com.google.inject.spi
import javawrappers.com.google.inject.multibindings
import javawrappers.com.google.common.base
import javawrappers.java.lang.annotation
import javawrappers.com.google.inject.binder

from jpype.types import *
from typing import Union

from typing import overload

class StringMapKey:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.String: ...


class MapBinder:
	class RealMapBinder:
		class RealMapBinderProviderWithDependencies:
			def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class RealMapWithExtensionProvider:
			def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def notify(self, ) -> None: ...
			def getEntries(self, ) -> javawrappers.java.util.List: ...
			def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
			def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...
			def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...


		class ProviderMapEntry:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getKey(self, ) -> javawrappers.java.lang.Object: ...
			@overload
			def getValue(self, ) -> javawrappers.com.google.inject.Provider: ...
			@overload
			def getValue(self, ) -> javawrappers.java.lang.Object: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			@overload
			def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
			@overload
			def setValue(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.Provider: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def get(self, ) -> javawrappers.java.util.Map.Entry: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def getValueKey(self, ) -> javawrappers.com.google.inject.Key: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class ValueProvider:
			def getValueBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class MultimapBinder:
			def __init__(self, arg0: javawrappers.com.google.inject.Key, arg1: javawrappers.com.google.inject.Key, arg2: javawrappers.com.google.inject.Key, arg3: javawrappers.com.google.inject.Key, arg4: javawrappers.com.google.inject.Key, arg5: javawrappers.com.google.inject.Key, ): ...
			class RealMultimapProvider:
				def getClass(self, ) -> javawrappers.java.lang.Class: ...
				@overload
				def wait(self, arg0: Union[long, JLong], ) -> None: ...
				@overload
				def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
				@overload
				def wait(self, ) -> None: ...
				def hashCode(self, ) -> Union[int, JInt]: ...
				def getDependencies(self, ) -> javawrappers.java.util.Set: ...
				def notifyAll(self, ) -> None: ...
				def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
				@overload
				def get(self, ) -> javawrappers.java.util.Map: ...
				@overload
				def get(self, ) -> javawrappers.java.lang.Object: ...
				def toString(self, ) -> javawrappers.java.lang.String: ...
				def notify(self, ) -> None: ...


			class RealProviderMultimapProvider:
				def getClass(self, ) -> javawrappers.java.lang.Class: ...
				@overload
				def wait(self, arg0: Union[long, JLong], ) -> None: ...
				@overload
				def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
				@overload
				def wait(self, ) -> None: ...
				def hashCode(self, ) -> Union[int, JInt]: ...
				def getDependencies(self, ) -> javawrappers.java.util.Set: ...
				def notifyAll(self, ) -> None: ...
				def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
				@overload
				def get(self, ) -> javawrappers.java.util.Map: ...
				@overload
				def get(self, ) -> javawrappers.java.lang.Object: ...
				def toString(self, ) -> javawrappers.java.lang.String: ...
				def notify(self, ) -> None: ...


			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			@overload
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			@overload
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			@overload
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			def get(self, ) -> javawrappers.java.util.Map: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			@overload
			def get(self, ) -> javawrappers.java.util.Map: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def notifyAll(self, ) -> None: ...
			@overload
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
			def notify(self, ) -> None: ...


		class RealMapProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def notify(self, ) -> None: ...
			def getEntries(self, ) -> javawrappers.java.util.List: ...
			def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def get(self, ) -> javawrappers.java.util.Map: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
			def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...
			def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...


		class RealProviderMapProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def get(self, ) -> javawrappers.java.util.Map: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		@overload
		@staticmethod
		def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		@overload
		@staticmethod
		def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		@overload
		@staticmethod
		def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		@overload
		@staticmethod
		def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		@overload
		@staticmethod
		def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		def notify(self, ) -> None: ...
		def getValueBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
		@overload
		def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
		@overload
		def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Map: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Map: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Map: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Map.Entry: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Map: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
		@overload
		def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
		def getKey(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def getValueKey(self, ) -> javawrappers.com.google.inject.Key: ...
		def permitDuplicates(self, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
		@overload
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		@overload
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def addBinding(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
		@overload
		def getValue(self, ) -> javawrappers.com.google.inject.Provider: ...
		@overload
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getEntries(self, ) -> javawrappers.java.util.List: ...
		@overload
		def getEntries(self, ) -> javawrappers.java.util.List: ...
		@overload
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def setValue(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.Provider: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
		@overload
		def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
		@overload
		def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
		@overload
		def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...
		@overload
		def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	@staticmethod
	def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	@staticmethod
	def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	@staticmethod
	def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	@staticmethod
	def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	@staticmethod
	def newMapBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.com.google.inject.TypeLiteral, arg3: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	def notify(self, ) -> None: ...
	def getValueBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
	@overload
	def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Map.Entry: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
	def getKey(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def getValueKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def permitDuplicates(self, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	def permitDuplicates(self, ) -> javawrappers.com.google.inject.multibindings.MapBinder: ...
	@overload
	def addBinding(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def addBinding(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def getValue(self, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getEntries(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getEntries(self, ) -> javawrappers.java.util.List: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setValue(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.Provider: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...


class OptionalBinder:
	class BaseAnnotation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ActualImpl:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DefaultImpl:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class RealOptionalBinder:
		class RealOptionalBinderProviderWithDependencies:
			def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class RealOptionalKeyProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
			def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def notify(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def get(self, ) -> javawrappers.com.google.common.base.Optional: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
			def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...


		class RealOptionalProviderProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def get(self, ) -> javawrappers.com.google.common.base.Optional: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class RealDirectTypeProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class JavaOptionalProviderProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class JavaOptionalProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
			def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def notify(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, ) -> javawrappers.java.lang.Object: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
			def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...


		@overload
		def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
		@overload
		def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
		@overload
		def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def notifyAll(self, ) -> None: ...
		def setBinding(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		@overload
		@staticmethod
		def newOptionalBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder: ...
		@overload
		@staticmethod
		def newOptionalBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder: ...
		@overload
		@staticmethod
		def newOptionalBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder: ...
		def setDefault(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
		def notify(self, ) -> None: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.com.google.common.base.Optional: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.com.google.common.base.Optional: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
		@overload
		def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
		@overload
		def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
		@overload
		def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...


	class Actual:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...


	class Default:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...


	class Source:
		DEFAULT: OptionalBinder.Source = ...
		ACTUAL: OptionalBinder.Source = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder.Source: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.multibindings.OptionalBinder.Source, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.multibindings.OptionalBinder.Source, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setBinding(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def setBinding(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def newOptionalBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder: ...
	@overload
	@staticmethod
	def newOptionalBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder: ...
	@overload
	@staticmethod
	def newOptionalBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.multibindings.OptionalBinder.Source: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def setDefault(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def setDefault(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	@overload
	def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Multibinder:
	class PermitDuplicatesModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	class RealMultibinder:
		class RealMultibinderCollectionOfProvidersProvider:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def getDependencies(self, ) -> javawrappers.java.util.Set: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def get(self, ) -> javawrappers.java.lang.Object: ...
			@overload
			def get(self, ) -> javawrappers.java.util.Collection: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getDependencies(self, ) -> javawrappers.java.util.Set: ...
		def notifyAll(self, ) -> None: ...
		def getSetKey(self, ) -> javawrappers.com.google.inject.Key: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		@overload
		@staticmethod
		def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		def permitDuplicates(self, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...
		def addBinding(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
		def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
		def getElementTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, ) -> javawrappers.java.util.Collection: ...
		def getElements(self, ) -> javawrappers.java.util.List: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def acceptExtensionVisitor(self, arg0: javawrappers.com.google.inject.spi.BindingTargetVisitor, arg1: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getDependencies(self, ) -> javawrappers.java.util.Set: ...
	def notifyAll(self, ) -> None: ...
	def getSetKey(self, ) -> javawrappers.com.google.inject.Key: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def permitDuplicates(self, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	def permitDuplicates(self, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.com.google.inject.TypeLiteral, arg2: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	@overload
	@staticmethod
	def newSetBinder(arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.multibindings.Multibinder: ...
	def notify(self, ) -> None: ...
	@overload
	def addBinding(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def addBinding(self, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
	def getElementTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.util.Collection: ...
	def getElements(self, ) -> javawrappers.java.util.List: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...


class MultibinderBinding:
	def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
	def getElementTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def getElements(self, ) -> javawrappers.java.util.List: ...
	def getSetKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...


class OptionalBinderBinding:
	def getKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def getDefaultBinding(self, ) -> javawrappers.com.google.inject.Binding: ...
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...
	def getActualBinding(self, ) -> javawrappers.com.google.inject.Binding: ...


class ProvidesIntoSet:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MultibindingsTargetVisitor:
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.multibindings.MultibinderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.multibindings.MapBinderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.multibindings.OptionalBinderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ExposedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.UntargettedBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConstructorBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ConvertedConstantBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.InstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderInstanceBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.ProviderKeyBinding, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.com.google.inject.spi.LinkedKeyBinding, ) -> javawrappers.java.lang.Object: ...


class MapKey:
	def unwrapValue(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ProvidesIntoMap:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MapBinderBinding:
	def getEntries(self, ) -> javawrappers.java.util.List: ...
	def permitsDuplicates(self, ) -> Union[int, JBoolean]: ...
	def getValueTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def getKeyTypeLiteral(self, ) -> javawrappers.com.google.inject.TypeLiteral: ...
	def getMapKey(self, ) -> javawrappers.com.google.inject.Key: ...
	def containsElement(self, arg0: javawrappers.com.google.inject.spi.Element, ) -> Union[int, JBoolean]: ...


class MultibindingsScanner:
	class TypeAndValue:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AnnotationOrError:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Scanner:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def annotationClasses(self, ) -> javawrappers.java.util.Set: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def prepareMethod(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.annotation.Annotation, arg2: javawrappers.com.google.inject.Key, arg3: javawrappers.com.google.inject.spi.InjectionPoint, ) -> javawrappers.com.google.inject.Key: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def asModule() -> javawrappers.com.google.inject.Module: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def annotationClasses(self, ) -> javawrappers.java.util.Set: ...
	def prepareMethod(self, arg0: javawrappers.com.google.inject.Binder, arg1: javawrappers.java.lang.annotation.Annotation, arg2: javawrappers.com.google.inject.Key, arg3: javawrappers.com.google.inject.spi.InjectionPoint, ) -> javawrappers.com.google.inject.Key: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def scanner() -> javawrappers.com.google.inject.spi.ModuleAnnotatedMethodScanner: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ProvidesIntoOptional:
	class Type:
		ACTUAL: ProvidesIntoOptional.Type = ...
		DEFAULT: ProvidesIntoOptional.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.multibindings.ProvidesIntoOptional.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.inject.multibindings.ProvidesIntoOptional.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.multibindings.ProvidesIntoOptional.Type: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.inject.multibindings.ProvidesIntoOptional.Type, 1): ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.com.google.inject.multibindings.ProvidesIntoOptional.Type: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ClassMapKey:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Class: ...


