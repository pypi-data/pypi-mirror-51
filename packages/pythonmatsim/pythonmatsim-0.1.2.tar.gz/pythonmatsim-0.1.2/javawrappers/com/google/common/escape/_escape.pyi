################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.google.common.base
import javawrappers.com.google.common.escape

from jpype.types import *
from typing import Union

from typing import overload

class UnicodeEscaper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Escaper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ArrayBasedUnicodeEscaper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CharEscaperBuilder:
	def __init__(self, ): ...
	class CharArrayDecorator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addEscapes(self, arg0: JArray(Union[string, JString], 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.escape.CharEscaperBuilder: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEscaper(self, ) -> javawrappers.com.google.common.escape.Escaper: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addEscape(self, arg0: Union[string, JString], arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.escape.CharEscaperBuilder: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toArray(self, ) -> JArray(JArray(Union[string, JString], 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class Escapers:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setUnsafeReplacement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.escape.Escapers.Builder: ...
		def build(self, ) -> javawrappers.com.google.common.escape.Escaper: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addEscape(self, arg0: Union[string, JString], arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.escape.Escapers.Builder: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setSafeRange(self, arg0: Union[string, JString], arg1: Union[string, JString], ) -> javawrappers.com.google.common.escape.Escapers.Builder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def computeReplacement(arg0: javawrappers.com.google.common.escape.UnicodeEscaper, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def computeReplacement(arg0: javawrappers.com.google.common.escape.CharEscaper, arg1: Union[string, JString], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setUnsafeReplacement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.escape.Escapers.Builder: ...
	def build(self, ) -> javawrappers.com.google.common.escape.Escaper: ...
	@staticmethod
	def nullEscaper() -> javawrappers.com.google.common.escape.Escaper: ...
	def addEscape(self, arg0: Union[string, JString], arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.escape.Escapers.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def builder() -> javawrappers.com.google.common.escape.Escapers.Builder: ...
	def setSafeRange(self, arg0: Union[string, JString], arg1: Union[string, JString], ) -> javawrappers.com.google.common.escape.Escapers.Builder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ArrayBasedCharEscaper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CharEscaper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ArrayBasedEscaperMap:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, ) -> javawrappers.com.google.common.escape.ArrayBasedEscaperMap: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


