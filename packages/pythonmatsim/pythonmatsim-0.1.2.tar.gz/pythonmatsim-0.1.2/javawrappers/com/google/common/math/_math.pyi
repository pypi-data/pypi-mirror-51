################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.math
import javawrappers.com.google.common.math

from jpype.types import *
from typing import Union

from typing import overload

class IntMath:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def floorPowerOfTwo(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def mod(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def log10(arg0: Union[int, JInt], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def factorial(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def gcd(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def sqrt(arg0: Union[int, JInt], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def checkedPow(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def ceilingPowerOfTwo(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def pow(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def divide(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	@staticmethod
	def checkedMultiply(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def log2(arg0: Union[int, JInt], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	@staticmethod
	def checkedAdd(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def saturatedSubtract(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def checkedSubtract(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def binomial(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def isPowerOfTwo(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def mean(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def saturatedPow(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def saturatedMultiply(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def saturatedAdd(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isPrime(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class Quantiles:
	def __init__(self, ): ...
	class ScaleAndIndexes:
		@overload
		def compute(self, *arg0: Union[long, JLong], ) -> javawrappers.java.util.Map: ...
		@overload
		def compute(self, *arg0: Union[int, JInt], ) -> javawrappers.java.util.Map: ...
		@overload
		def compute(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Map: ...
		@overload
		def compute(self, *arg0: Union[float, JDouble], ) -> javawrappers.java.util.Map: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def computeInPlace(self, *arg0: Union[float, JDouble], ) -> javawrappers.java.util.Map: ...


	class ScaleAndIndex:
		@overload
		def compute(self, *arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...
		@overload
		def compute(self, *arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
		@overload
		def compute(self, arg0: javawrappers.java.util.Collection, ) -> Union[float, JDouble]: ...
		@overload
		def compute(self, *arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def computeInPlace(self, *arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


	class Scale:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def indexes(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndexes: ...
		@overload
		def indexes(self, *arg0: Union[int, JInt], ) -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndexes: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def index(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndex: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def percentiles() -> javawrappers.com.google.common.math.Quantiles.Scale: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def quartiles() -> javawrappers.com.google.common.math.Quantiles.Scale: ...
	def index(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndex: ...
	@staticmethod
	def scale(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.math.Quantiles.Scale: ...
	@overload
	def computeInPlace(self, *arg0: Union[float, JDouble], ) -> javawrappers.java.util.Map: ...
	@overload
	def computeInPlace(self, *arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def compute(self, *arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...
	@overload
	def compute(self, *arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def compute(self, arg0: javawrappers.java.util.Collection, ) -> Union[float, JDouble]: ...
	@overload
	def compute(self, *arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def compute(self, *arg0: Union[long, JLong], ) -> javawrappers.java.util.Map: ...
	@overload
	def compute(self, *arg0: Union[int, JInt], ) -> javawrappers.java.util.Map: ...
	@overload
	def compute(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Map: ...
	@overload
	def compute(self, *arg0: Union[float, JDouble], ) -> javawrappers.java.util.Map: ...
	@overload
	def indexes(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndexes: ...
	@overload
	def indexes(self, *arg0: Union[int, JInt], ) -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndexes: ...
	@staticmethod
	def median() -> javawrappers.com.google.common.math.Quantiles.ScaleAndIndex: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PairedStatsAccumulator:
	def __init__(self, ): ...
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def yStats(self, ) -> javawrappers.com.google.common.math.Stats: ...
	def sampleCovariance(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def count(self, ) -> Union[long, JLong]: ...
	def populationCovariance(self, ) -> Union[float, JDouble]: ...
	def xStats(self, ) -> javawrappers.com.google.common.math.Stats: ...
	def notify(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.com.google.common.math.PairedStats, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leastSquaresFit(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	def pearsonsCorrelationCoefficient(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def snapshot(self, ) -> javawrappers.com.google.common.math.PairedStats: ...


class LinearTransformation:
	def __init__(self, ): ...
	class NaNLinearTransformation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mapping(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation.LinearTransformationBuilder: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def vertical(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def slope(self, ) -> Union[float, JDouble]: ...
		@staticmethod
		def forNaN() -> javawrappers.com.google.common.math.LinearTransformation: ...
		def notify(self, ) -> None: ...
		def isHorizontal(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def horizontal(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def isVertical(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class VerticalLinearTransformation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mapping(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation.LinearTransformationBuilder: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def vertical(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def slope(self, ) -> Union[float, JDouble]: ...
		@staticmethod
		def forNaN() -> javawrappers.com.google.common.math.LinearTransformation: ...
		def notify(self, ) -> None: ...
		def isHorizontal(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def horizontal(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def isVertical(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class RegularLinearTransformation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def mapping(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation.LinearTransformationBuilder: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def vertical(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def slope(self, ) -> Union[float, JDouble]: ...
		@staticmethod
		def forNaN() -> javawrappers.com.google.common.math.LinearTransformation: ...
		def notify(self, ) -> None: ...
		def isHorizontal(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def horizontal(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def isVertical(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class LinearTransformationBuilder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def and(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def withSlope(self, arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	@overload
	def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	@overload
	def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	@overload
	def inverse(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def mapping(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation.LinearTransformationBuilder: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def vertical(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	@overload
	def slope(self, ) -> Union[float, JDouble]: ...
	@overload
	def slope(self, ) -> Union[float, JDouble]: ...
	@overload
	def slope(self, ) -> Union[float, JDouble]: ...
	@overload
	def slope(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def forNaN() -> javawrappers.com.google.common.math.LinearTransformation: ...
	def notify(self, ) -> None: ...
	@overload
	def isHorizontal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isHorizontal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isHorizontal(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isHorizontal(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def horizontal(arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def isVertical(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVertical(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVertical(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVertical(self, ) -> Union[int, JBoolean]: ...
	def and(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def withSlope(self, arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.LinearTransformation: ...


class LongMath:
	class MillerRabinTester:
		SMALL: LongMath.MillerRabinTester = ...
		LARGE: LongMath.MillerRabinTester = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.math.LongMath.MillerRabinTester: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.math.LongMath.MillerRabinTester, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def floorPowerOfTwo(arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def mod(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def mod(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def log10(arg0: Union[long, JLong], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.math.LongMath.MillerRabinTester, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def factorial(arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def gcd(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def sqrt(arg0: Union[long, JLong], arg1: javawrappers.java.math.RoundingMode, ) -> Union[long, JLong]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def checkedPow(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def ceilingPowerOfTwo(arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def pow(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def divide(arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: javawrappers.java.math.RoundingMode, ) -> Union[long, JLong]: ...
	@staticmethod
	def checkedMultiply(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def log2(arg0: Union[long, JLong], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	@staticmethod
	def checkedAdd(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def saturatedSubtract(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.math.LongMath.MillerRabinTester: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def checkedSubtract(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def binomial(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def isPowerOfTwo(arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def mean(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def saturatedPow(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def saturatedMultiply(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def saturatedAdd(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isPrime(arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DoubleMath:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fuzzyCompare(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@staticmethod
	def roundToBigInteger(arg0: Union[float, JDouble], arg1: javawrappers.java.math.RoundingMode, ) -> javawrappers.java.math.BigInteger: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def factorial(arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def isMathematicalInteger(arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def roundToInt(arg0: Union[float, JDouble], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isPowerOfTwo(arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fuzzyEquals(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mean(arg0: javawrappers.java.lang.Iterable, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def mean(*arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def mean(arg0: javawrappers.java.util.Iterator, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def mean(*arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def mean(*arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def roundToLong(arg0: Union[float, JDouble], arg1: javawrappers.java.math.RoundingMode, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def log2(arg0: Union[float, JDouble], arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def log2(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class BigIntegerMath:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def floorPowerOfTwo(arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def log10(arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def factorial(arg0: Union[int, JInt], ) -> javawrappers.java.math.BigInteger: ...
	@staticmethod
	def binomial(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.math.BigInteger: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isPowerOfTwo(arg0: javawrappers.java.math.BigInteger, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def sqrt(arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.RoundingMode, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ceilingPowerOfTwo(arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.math.BigInteger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def divide(arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, arg2: javawrappers.java.math.RoundingMode, ) -> javawrappers.java.math.BigInteger: ...
	@staticmethod
	def log2(arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.RoundingMode, ) -> Union[int, JInt]: ...


class StatsAccumulator:
	def __init__(self, ): ...
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def max(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def count(self, ) -> Union[long, JLong]: ...
	def sampleVariance(self, ) -> Union[float, JDouble]: ...
	def sum(self, ) -> Union[float, JDouble]: ...
	def sampleStandardDeviation(self, ) -> Union[float, JDouble]: ...
	def populationVariance(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def min(self, ) -> Union[float, JDouble]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.com.google.common.math.Stats, ) -> None: ...
	@overload
	def addAll(self, *arg0: Union[long, JLong], ) -> None: ...
	@overload
	def addAll(self, *arg0: Union[int, JInt], ) -> None: ...
	@overload
	def addAll(self, *arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def populationStandardDeviation(self, ) -> Union[float, JDouble]: ...
	def mean(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def snapshot(self, ) -> javawrappers.com.google.common.math.Stats: ...


class Stats:
	@staticmethod
	def fromByteArray(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.math.Stats: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def meanOf(*arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def meanOf(*arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def meanOf(arg0: javawrappers.java.util.Iterator, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def meanOf(*arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def meanOf(arg0: javawrappers.java.lang.Iterable, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def max(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def count(self, ) -> Union[long, JLong]: ...
	def sampleVariance(self, ) -> Union[float, JDouble]: ...
	def sum(self, ) -> Union[float, JDouble]: ...
	def sampleStandardDeviation(self, ) -> Union[float, JDouble]: ...
	def populationVariance(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def min(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def populationStandardDeviation(self, ) -> Union[float, JDouble]: ...
	def mean(self, ) -> Union[float, JDouble]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def of(*arg0: Union[long, JLong], ) -> javawrappers.com.google.common.math.Stats: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.math.Stats: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.math.Stats: ...
	@overload
	@staticmethod
	def of(*arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.math.Stats: ...
	@overload
	@staticmethod
	def of(*arg0: Union[int, JInt], ) -> javawrappers.com.google.common.math.Stats: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PairedStats:
	@staticmethod
	def fromByteArray(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.math.PairedStats: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def yStats(self, ) -> javawrappers.com.google.common.math.Stats: ...
	def sampleCovariance(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def count(self, ) -> Union[long, JLong]: ...
	def populationCovariance(self, ) -> Union[float, JDouble]: ...
	def xStats(self, ) -> javawrappers.com.google.common.math.Stats: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leastSquaresFit(self, ) -> javawrappers.com.google.common.math.LinearTransformation: ...
	def pearsonsCorrelationCoefficient(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


