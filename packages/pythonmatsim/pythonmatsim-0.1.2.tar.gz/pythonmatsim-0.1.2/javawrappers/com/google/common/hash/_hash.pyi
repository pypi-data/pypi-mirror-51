################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.com.google.common.hash
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.java.util.function
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class Funnels:
	class SinkAsStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		def notify(self, ) -> None: ...


	class LongFunnel:
		INSTANCE: Funnels.LongFunnel = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.LongFunnel: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.hash.Funnels.LongFunnel, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class SequentialFunnel:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class IntegerFunnel:
		INSTANCE: Funnels.IntegerFunnel = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Integer, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.IntegerFunnel: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.hash.Funnels.IntegerFunnel, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class StringCharsetFunnel:
		class SerializedForm:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class UnencodedCharsFunnel:
		INSTANCE: Funnels.UnencodedCharsFunnel = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.UnencodedCharsFunnel: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.hash.Funnels.UnencodedCharsFunnel, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class ByteArrayFunnel:
		INSTANCE: Funnels.ByteArrayFunnel = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def funnel(self, arg0: JArray(JByte, 1), arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.ByteArrayFunnel: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.hash.Funnels.ByteArrayFunnel, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: JArray(JByte, 1), arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Integer, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@overload
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...
	@staticmethod
	def byteArrayFunnel() -> javawrappers.com.google.common.hash.Funnel: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.hash.Funnels.UnencodedCharsFunnel, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.hash.Funnels.LongFunnel, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.hash.Funnels.ByteArrayFunnel, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.hash.Funnels.IntegerFunnel, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def stringFunnel(arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.Funnel: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@staticmethod
	def sequentialFunnel(arg0: javawrappers.com.google.common.hash.Funnel, ) -> javawrappers.com.google.common.hash.Funnel: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def flush(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def asOutputStream(arg0: javawrappers.com.google.common.hash.PrimitiveSink, ) -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.UnencodedCharsFunnel: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.LongFunnel: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.ByteArrayFunnel: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Funnels.IntegerFunnel: ...
	@staticmethod
	def longFunnel() -> javawrappers.com.google.common.hash.Funnel: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def unencodedCharsFunnel() -> javawrappers.com.google.common.hash.Funnel: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def integerFunnel() -> javawrappers.com.google.common.hash.Funnel: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Hashing:
	class LinearCongruentialGenerator:
		def __init__(self, arg0: Union[long, JLong], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def nextDouble(self, ) -> Union[float, JDouble]: ...


	class ConcatenatedHashFunction:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def hashBytes(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.com.google.common.hash.HashCode: ...
		@overload
		def hashBytes(self, arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
		@overload
		def hashBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
		def notifyAll(self, ) -> None: ...
		def bits(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def hashUnencodedChars(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.hash.HashCode: ...
		def hashInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
		def hashString(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.HashCode: ...
		def hashObject(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, ) -> javawrappers.com.google.common.hash.HashCode: ...
		@overload
		def newHasher(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.Hasher: ...
		@overload
		def newHasher(self, ) -> javawrappers.com.google.common.hash.Hasher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hashLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...


	class ChecksumType:
		CRC_32: Hashing.ChecksumType = ...
		ADLER_32: Hashing.ChecksumType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Hashing.ChecksumType: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.hash.Hashing.ChecksumType, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Sha512Holder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Sha384Holder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Sha256Holder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Sha1Holder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Md5Holder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def sha256() -> javawrappers.com.google.common.hash.HashFunction: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.hash.Hashing.ChecksumType, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def combineOrdered(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@staticmethod
	def sha512() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashUnencodedChars(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.hash.HashCode: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
	def hashString(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def newHasher(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def newHasher(self, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def concatenating(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def concatenating(arg0: javawrappers.com.google.common.hash.HashFunction, arg1: javawrappers.com.google.common.hash.HashFunction, *arg2: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacMd5(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacMd5(arg0: javawrappers.java.security.Key, ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def consistentHash(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def consistentHash(arg0: javawrappers.com.google.common.hash.HashCode, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def crc32() -> javawrappers.com.google.common.hash.HashFunction: ...
	@staticmethod
	def sha384() -> javawrappers.com.google.common.hash.HashFunction: ...
	@staticmethod
	def goodFastHash(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@staticmethod
	def farmHashFingerprint64() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	def hashBytes(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def hashBytes(self, arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def hashBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.Hashing.ChecksumType: ...
	def bits(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hmacSha512(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacSha512(arg0: javawrappers.java.security.Key, ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacSha1(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacSha1(arg0: javawrappers.java.security.Key, ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def murmur3_128() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def murmur3_128(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashFunction: ...
	def nextDouble(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def combineUnordered(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@staticmethod
	def sha1() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacSha256(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def hmacSha256(arg0: javawrappers.java.security.Key, ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@staticmethod
	def crc32c() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def murmur3_32() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def murmur3_32(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashFunction: ...
	def hashObject(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	@staticmethod
	def sipHash24(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	@staticmethod
	def sipHash24() -> javawrappers.com.google.common.hash.HashFunction: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def adler32() -> javawrappers.com.google.common.hash.HashFunction: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hashLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def md5() -> javawrappers.com.google.common.hash.HashFunction: ...


class HashingInputStream:
	def __init__(self, arg0: javawrappers.com.google.common.hash.HashFunction, arg1: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def hash(self, ) -> javawrappers.com.google.common.hash.HashCode: ...


class Hasher:
	@overload
	def putUnencodedChars(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putUnencodedChars(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putString(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putString(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putDouble(self, arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putDouble(self, arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putFloat(self, arg0: Union[float, JFloat], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putFloat(self, arg0: Union[float, JFloat], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putByte(self, arg0: JByte, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putByte(self, arg0: JByte, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putBytes(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBytes(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putBytes(self, arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBytes(self, arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.Hasher: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putShort(self, arg0: Union[int, JShort], ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putShort(self, arg0: Union[int, JShort], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putObject(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def putBoolean(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBoolean(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.hash.Hasher: ...
	def hash(self, ) -> javawrappers.com.google.common.hash.HashCode: ...


class HashingOutputStream:
	def __init__(self, arg0: javawrappers.com.google.common.hash.HashFunction, arg1: javawrappers.java.io.OutputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def hash(self, ) -> javawrappers.com.google.common.hash.HashCode: ...


class BloomFilter:
	class SerialForm:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Strategy:
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, arg2: Union[int, JInt], arg3: javawrappers.com.google.common.hash.BloomFilterStrategies.LockFreeBitArray, ) -> Union[int, JBoolean]: ...
		def ordinal(self, ) -> Union[int, JInt]: ...
		def mightContain(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, arg2: Union[int, JInt], arg3: javawrappers.com.google.common.hash.BloomFilterStrategies.LockFreeBitArray, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def readFrom(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.com.google.common.hash.Funnel, ) -> javawrappers.com.google.common.hash.BloomFilter: ...
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def expectedFpp(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, arg2: Union[int, JInt], arg3: javawrappers.com.google.common.hash.BloomFilterStrategies.LockFreeBitArray, ) -> Union[int, JBoolean]: ...
	def isCompatible(self, arg0: javawrappers.com.google.common.hash.BloomFilter, ) -> Union[int, JBoolean]: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.com.google.common.hash.BloomFilter, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.com.google.common.hash.Funnel, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> javawrappers.com.google.common.hash.BloomFilter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.com.google.common.hash.Funnel, arg1: Union[long, JLong], ) -> javawrappers.com.google.common.hash.BloomFilter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.com.google.common.hash.Funnel, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> javawrappers.com.google.common.hash.BloomFilter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.com.google.common.hash.Funnel, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.hash.BloomFilter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toBloomFilter(arg0: javawrappers.com.google.common.hash.Funnel, arg1: Union[long, JLong], ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def toBloomFilter(arg0: javawrappers.com.google.common.hash.Funnel, arg1: Union[long, JLong], arg2: Union[float, JDouble], ) -> javawrappers.java.util.stream.Collector: ...
	def copy(self, ) -> javawrappers.com.google.common.hash.BloomFilter: ...
	def approximateElementCount(self, ) -> Union[long, JLong]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	@overload
	def mightContain(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def mightContain(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, arg2: Union[int, JInt], arg3: javawrappers.com.google.common.hash.BloomFilterStrategies.LockFreeBitArray, ) -> Union[int, JBoolean]: ...


class HashFunction:
	def hashInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
	def hashString(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def hashBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def hashBytes(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def hashBytes(self, arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
	def hashObject(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.Funnel, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def newHasher(self, ) -> javawrappers.com.google.common.hash.Hasher: ...
	@overload
	def newHasher(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.Hasher: ...
	def bits(self, ) -> Union[int, JInt]: ...
	def hashLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...
	def hashUnencodedChars(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.hash.HashCode: ...


class Funnel:
	def funnel(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.google.common.hash.PrimitiveSink, ) -> None: ...


class PrimitiveSink:
	def putFloat(self, arg0: Union[float, JFloat], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putUnencodedChars(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putByte(self, arg0: JByte, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBytes(self, arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	@overload
	def putBytes(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putString(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putDouble(self, arg0: Union[float, JDouble], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putShort(self, arg0: Union[int, JShort], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...
	def putBoolean(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.hash.PrimitiveSink: ...


class HashCode:
	class BytesHashCode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def padToLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def bits(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def fromLong(arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...
		def writeBytesTo(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def asBytes(self, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		def asLong(self, ) -> Union[long, JLong]: ...
		def asInt(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def fromInt(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
		@staticmethod
		def fromBytes(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.HashCode: ...


	class LongHashCode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def padToLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def bits(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def fromLong(arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...
		def writeBytesTo(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def asBytes(self, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		def asLong(self, ) -> Union[long, JLong]: ...
		def asInt(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def fromInt(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
		@staticmethod
		def fromBytes(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.HashCode: ...


	class IntHashCode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def padToLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def bits(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def fromLong(arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...
		def writeBytesTo(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def asBytes(self, ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		def asLong(self, ) -> Union[long, JLong]: ...
		def asInt(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def fromInt(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
		@staticmethod
		def fromBytes(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.HashCode: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def padToLong(self, ) -> Union[long, JLong]: ...
	@overload
	def padToLong(self, ) -> Union[long, JLong]: ...
	@overload
	def padToLong(self, ) -> Union[long, JLong]: ...
	@overload
	def padToLong(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def bits(self, ) -> Union[int, JInt]: ...
	@overload
	def bits(self, ) -> Union[int, JInt]: ...
	@overload
	def bits(self, ) -> Union[int, JInt]: ...
	@overload
	def bits(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def fromLong(arg0: Union[long, JLong], ) -> javawrappers.com.google.common.hash.HashCode: ...
	def writeBytesTo(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def asBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def asBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def asBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def asBytes(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	@overload
	def asLong(self, ) -> Union[long, JLong]: ...
	@overload
	def asLong(self, ) -> Union[long, JLong]: ...
	@overload
	def asLong(self, ) -> Union[long, JLong]: ...
	@overload
	def asLong(self, ) -> Union[long, JLong]: ...
	@overload
	def asInt(self, ) -> Union[int, JInt]: ...
	@overload
	def asInt(self, ) -> Union[int, JInt]: ...
	@overload
	def asInt(self, ) -> Union[int, JInt]: ...
	@overload
	def asInt(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fromInt(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.hash.HashCode: ...
	@staticmethod
	def fromBytes(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.hash.HashCode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.hash.HashCode: ...


