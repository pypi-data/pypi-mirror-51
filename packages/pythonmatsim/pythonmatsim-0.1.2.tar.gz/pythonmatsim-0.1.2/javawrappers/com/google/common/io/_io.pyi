################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.com.google.common.base
import javawrappers.com.google.common.hash
import javawrappers.com.google.common.graph
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.java.nio.file
import javawrappers.java.nio.charset
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.com.google.common.io
import javawrappers.com.google.common.collect
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class CharSink:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.util.stream.Stream, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.util.stream.Stream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def openBufferedStream(self, ) -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.lang.CharSequence, ) -> None: ...
	def openStream(self, ) -> javawrappers.java.io.Writer: ...
	def notify(self, ) -> None: ...
	def writeFrom(self, arg0: javawrappers.java.lang.Readable, ) -> Union[long, JLong]: ...


class FileWriteMode:
	APPEND: FileWriteMode = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.io.FileWriteMode: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.io.FileWriteMode, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ByteArrayDataOutput:
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


class BaseEncoding:
	class SeparatedBaseEncoding:
		@overload
		def encode(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		@overload
		def encode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
		def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
		def notifyAll(self, ) -> None: ...
		def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base64() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def decode(self, arg0: javawrappers.java.lang.CharSequence, ) -> JArray(JByte, 1): ...
		def decodingSource(self, arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def base16() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def base32() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32Hex() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
		@staticmethod
		def base64Url() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def encodingSink(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> javawrappers.com.google.common.io.ByteSink: ...


	class Base64Encoding:
		@overload
		def encode(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		@overload
		def encode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
		def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
		def notifyAll(self, ) -> None: ...
		def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base64() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def decode(self, arg0: javawrappers.java.lang.CharSequence, ) -> JArray(JByte, 1): ...
		def decodingSource(self, arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def base16() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32Hex() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
		@staticmethod
		def base64Url() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def encodingSink(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> javawrappers.com.google.common.io.ByteSink: ...


	class Base16Encoding:
		@overload
		def encode(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		@overload
		def encode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
		def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
		def notifyAll(self, ) -> None: ...
		def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base64() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def decode(self, arg0: javawrappers.java.lang.CharSequence, ) -> JArray(JByte, 1): ...
		def decodingSource(self, arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def base16() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32Hex() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
		@staticmethod
		def base64Url() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def encodingSink(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> javawrappers.com.google.common.io.ByteSink: ...


	class StandardBaseEncoding:
		@overload
		def encode(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
		@overload
		def encode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
		def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
		def notifyAll(self, ) -> None: ...
		def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base64() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def decode(self, arg0: javawrappers.java.lang.CharSequence, ) -> JArray(JByte, 1): ...
		def decodingSource(self, arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def base16() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
		@staticmethod
		def base32Hex() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
		@staticmethod
		def base64Url() -> javawrappers.com.google.common.io.BaseEncoding: ...
		def encodingSink(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> javawrappers.com.google.common.io.ByteSink: ...


	class Alphabet:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class DecodingException:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	@overload
	def encode(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	def encode(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def decodingStream(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.io.InputStream: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def base64() -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def withSeparator(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	def decode(self, arg0: javawrappers.java.lang.CharSequence, ) -> JArray(JByte, 1): ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def lowerCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def encodingSink(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> javawrappers.com.google.common.io.ByteSink: ...
	@overload
	def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
	@overload
	def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
	@overload
	def canDecode(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def withPadChar(self, arg0: Union[string, JString], ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def decodingSource(self, arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def matches(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def base16() -> javawrappers.com.google.common.io.BaseEncoding: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def upperCase(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def base32() -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def omitPadding(self, ) -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def base32Hex() -> javawrappers.com.google.common.io.BaseEncoding: ...
	@overload
	def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def encodingStream(self, arg0: javawrappers.java.io.Writer, ) -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def base64Url() -> javawrappers.com.google.common.io.BaseEncoding: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CharSource:
	class ConcatenatedCharSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def length(self, ) -> Union[long, JLong]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
		def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
		def openStream(self, ) -> javawrappers.java.io.Reader: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
		def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		@overload
		def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
		@staticmethod
		def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...


	class EmptyCharSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def length(self, ) -> Union[long, JLong]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
		def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
		def openStream(self, ) -> javawrappers.java.io.Reader: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
		def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
		@staticmethod
		def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...


	class StringCharSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def length(self, ) -> Union[long, JLong]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
		def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
		def openStream(self, ) -> javawrappers.java.io.Reader: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
		def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
		@staticmethod
		def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...


	class CharSequenceCharSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def length(self, ) -> Union[long, JLong]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
		def openStream(self, ) -> javawrappers.java.io.Reader: ...
		def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
		def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
		@staticmethod
		def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...


	class AsByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
	@overload
	def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	@overload
	def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	@overload
	def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def read(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def read(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def length(self, ) -> Union[long, JLong]: ...
	@overload
	def length(self, ) -> Union[long, JLong]: ...
	@overload
	def length(self, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
	def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def size(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...
	def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


class Resources:
	class UrlByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def getResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def getResource(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def readLines(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def readLines(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.nio.charset.Charset, arg2: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def copy(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@staticmethod
	def asByteSource(arg0: javawrappers.java.net.URL, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def size(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toByteArray(arg0: javawrappers.java.net.URL, ) -> JArray(JByte, 1): ...
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def asCharSource(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@staticmethod
	def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
	def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


class Flushables:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def flush(arg0: javawrappers.java.io.Flushable, arg1: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def flushQuietly(arg0: javawrappers.java.io.Flushable, ) -> None: ...


class RecursiveDeleteOption:
	ALLOW_INSECURE: RecursiveDeleteOption = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.io.RecursiveDeleteOption: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.io.RecursiveDeleteOption, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class CountingOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getCount(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...


class CharStreams:
	class NullWriter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def nullWriter() -> javawrappers.java.io.Writer: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
		@overload
		def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
		@overload
		def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def exhaust(arg0: javawrappers.java.lang.Readable, ) -> Union[long, JLong]: ...
	@staticmethod
	def asWriter(arg0: javawrappers.java.lang.Appendable, ) -> javawrappers.java.io.Writer: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def skipFully(arg0: javawrappers.java.io.Reader, arg1: Union[long, JLong], ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	@overload
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	@overload
	@staticmethod
	def readLines(arg0: javawrappers.java.lang.Readable, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def readLines(arg0: javawrappers.java.lang.Readable, arg1: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.lang.Readable, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def copy(arg0: javawrappers.java.lang.Readable, arg1: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...


class InsecureRecursiveDeleteException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getReason(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOtherFile(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ByteSource:
	class ConcatenatedByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	class EmptyByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	class ByteArrayByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	class SlicedByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	class AsCharSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def length(self, ) -> Union[long, JLong]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
		def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
		def openStream(self, ) -> javawrappers.java.io.Reader: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.CharSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
		def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		@overload
		def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
		@staticmethod
		def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.lang.Appendable, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.CharSink, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
	def lengthIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	def forEachLine(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readLines(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	@overload
	def readLines(self, arg0: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
	def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	@overload
	def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	@overload
	def read(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[long, JLong]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.CharSource, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def readFirstLine(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.Reader: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	def asByteSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def size(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.BufferedReader: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def wrap(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


class LineReader:
	def __init__(self, arg0: javawrappers.java.lang.Readable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ByteSink:
	class AsCharSink:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def writeLines(self, arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def writeLines(self, arg0: javawrappers.java.util.stream.Stream, ) -> None: ...
		@overload
		def writeLines(self, arg0: javawrappers.java.util.stream.Stream, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def writeLines(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.Writer: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: javawrappers.java.lang.CharSequence, ) -> None: ...
		def openStream(self, ) -> javawrappers.java.io.Writer: ...
		def notify(self, ) -> None: ...
		def writeFrom(self, arg0: javawrappers.java.lang.Readable, ) -> Union[long, JLong]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.util.stream.Stream, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.util.stream.Stream, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLines(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def asCharSink(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSink: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.Writer: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def notify(self, ) -> None: ...
	@overload
	def writeFrom(self, arg0: javawrappers.java.lang.Readable, ) -> Union[long, JLong]: ...
	@overload
	def writeFrom(self, arg0: javawrappers.java.io.InputStream, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.Writer: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.CharSequence, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...


class LittleEndianDataOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def notify(self, ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


class FileBackedOutputStream:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class MemoryOutput:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
		def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
		def flush(self, ) -> None: ...
		def size(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toByteArray(self, ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		@overload
		def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def asByteSource(self, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def flush(self, ) -> None: ...
	@overload
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...


class ByteProcessor:
	def processBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getResult(self, ) -> javawrappers.java.lang.Object: ...


class Closer:
	class SuppressingSuppressor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def suppress(self, arg0: javawrappers.java.io.Closeable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	class LoggingSuppressor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def suppress(self, arg0: javawrappers.java.io.Closeable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	class Suppressor:
		def suppress(self, arg0: javawrappers.java.io.Closeable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Throwable, ) -> None: ...


	@overload
	def rethrow(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.RuntimeException: ...
	@overload
	def rethrow(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.RuntimeException: ...
	@overload
	def rethrow(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.RuntimeException: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create() -> javawrappers.com.google.common.io.Closer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def suppress(self, arg0: javawrappers.java.io.Closeable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def suppress(self, arg0: javawrappers.java.io.Closeable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def suppress(self, arg0: javawrappers.java.io.Closeable, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def register(self, arg0: javawrappers.java.io.Closeable, ) -> javawrappers.java.io.Closeable: ...


class MoreFiles:
	class PathByteSink:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def asCharSink(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSink: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.OutputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		def openStream(self, ) -> javawrappers.java.io.OutputStream: ...
		def notify(self, ) -> None: ...
		def writeFrom(self, arg0: javawrappers.java.io.InputStream, ) -> Union[long, JLong]: ...


	class PathByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeFrom(self, arg0: javawrappers.java.io.InputStream, ) -> Union[long, JLong]: ...
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def asByteSink(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.com.google.common.io.ByteSink: ...
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@staticmethod
	def listFiles(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	@staticmethod
	def deleteRecursively(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.com.google.common.io.RecursiveDeleteOption, ) -> None: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	@overload
	def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def deleteDirectoryContents(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.com.google.common.io.RecursiveDeleteOption, ) -> None: ...
	@staticmethod
	def createParentDirectories(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.attribute.FileAttribute, ) -> None: ...
	def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def asCharSink(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, *arg2: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.com.google.common.io.CharSink: ...
	@overload
	def asCharSink(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSink: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isRegularFile(*arg0: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.com.google.common.base.Predicate: ...
	@staticmethod
	def touch(arg0: javawrappers.java.nio.file.Path, ) -> None: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@staticmethod
	def getNameWithoutExtension(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.String: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def equal(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def asByteSource(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def size(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getFileExtension(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.String: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def fileTraverser() -> javawrappers.com.google.common.graph.Traverser: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def asCharSource(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.charset.Charset, *arg2: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.com.google.common.io.CharSource: ...
	@staticmethod
	def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
	def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@staticmethod
	def isDirectory(*arg0: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.com.google.common.base.Predicate: ...


class LittleEndianDataInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class PatternFilenameFilter:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.regex.Pattern, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class Files:
	class FilePredicate:
		IS_DIRECTORY: Files.FilePredicate = ...
		IS_FILE: Files.FilePredicate = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def apply(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.io.Files.FilePredicate: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.io.Files.FilePredicate, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class FileByteSink:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def asCharSink(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSink: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.OutputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def openStream(self, ) -> javawrappers.java.io.FileOutputStream: ...
		@overload
		def openStream(self, ) -> javawrappers.java.io.OutputStream: ...
		def notify(self, ) -> None: ...
		def writeFrom(self, arg0: javawrappers.java.io.InputStream, ) -> Union[long, JLong]: ...


	class FileByteSource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, ) -> JArray(JByte, 1): ...
		@overload
		def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		@staticmethod
		def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def openStream(self, ) -> javawrappers.java.io.InputStream: ...
		@overload
		def openStream(self, ) -> javawrappers.java.io.FileInputStream: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def empty() -> javawrappers.com.google.common.io.ByteSource: ...
		@overload
		def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		@overload
		def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
		@staticmethod
		def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def newWriter(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.io.BufferedWriter: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def writeFrom(self, arg0: javawrappers.java.io.InputStream, ) -> Union[long, JLong]: ...
	@staticmethod
	def empty() -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def copyTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	def copyTo(self, arg0: javawrappers.com.google.common.io.ByteSink, ) -> Union[long, JLong]: ...
	def slice(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.google.common.io.ByteSource: ...
	@staticmethod
	def asByteSink(arg0: javawrappers.java.io.File, *arg1: javawrappers.com.google.common.io.FileWriteMode, ) -> javawrappers.com.google.common.io.ByteSink: ...
	@overload
	@staticmethod
	def readLines(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, arg2: javawrappers.com.google.common.io.LineProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def readLines(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def write(arg0: JArray(JByte, 1), arg1: javawrappers.java.io.File, ) -> None: ...
	@overload
	@staticmethod
	def write(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.io.File, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def read(self, ) -> JArray(JByte, 1): ...
	@overload
	def read(self, arg0: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def asCharSink(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, *arg2: javawrappers.com.google.common.io.FileWriteMode, ) -> javawrappers.com.google.common.io.CharSink: ...
	@overload
	def asCharSink(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSink: ...
	@staticmethod
	def touch(arg0: javawrappers.java.io.File, ) -> None: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(arg0: javawrappers.java.util.Iterator, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	@staticmethod
	def concat(*arg0: javawrappers.com.google.common.io.ByteSource, ) -> javawrappers.com.google.common.io.ByteSource: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.FileOutputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openStream(self, ) -> javawrappers.java.io.FileInputStream: ...
	@staticmethod
	def asByteSource(arg0: javawrappers.java.io.File, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def size(self, ) -> Union[long, JLong]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getFileExtension(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fileTraverser() -> javawrappers.com.google.common.graph.Traverser: ...
	@staticmethod
	def createTempDir() -> javawrappers.java.io.File: ...
	def sizeIfKnown(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	@staticmethod
	def asCharSource(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
	@overload
	def hash(self, arg0: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@overload
	@staticmethod
	def hash(arg0: javawrappers.java.io.File, arg1: javawrappers.com.google.common.hash.HashFunction, ) -> javawrappers.com.google.common.hash.HashCode: ...
	@staticmethod
	def isDirectory() -> javawrappers.com.google.common.base.Predicate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.io.Files.FilePredicate, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def simplifyPath(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.File, arg1: javawrappers.java.io.File, ) -> None: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.File, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, arg2: javawrappers.java.lang.Appendable, ) -> None: ...
	@overload
	@staticmethod
	def map(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.channels.FileChannel.MapMode, ) -> javawrappers.java.nio.MappedByteBuffer: ...
	@overload
	@staticmethod
	def map(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.channels.FileChannel.MapMode, arg2: Union[long, JLong], ) -> javawrappers.java.nio.MappedByteBuffer: ...
	@overload
	@staticmethod
	def map(arg0: javawrappers.java.io.File, ) -> javawrappers.java.nio.MappedByteBuffer: ...
	@staticmethod
	def createParentDirs(arg0: javawrappers.java.io.File, ) -> None: ...
	@staticmethod
	def move(arg0: javawrappers.java.io.File, arg1: javawrappers.java.io.File, ) -> None: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	@staticmethod
	def isFile() -> javawrappers.com.google.common.base.Predicate: ...
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.io.Files.FilePredicate: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def contentEquals(self, arg0: javawrappers.com.google.common.io.ByteSource, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getNameWithoutExtension(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def newReader(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.io.BufferedReader: ...
	@staticmethod
	def readFirstLine(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def equal(arg0: javawrappers.java.io.File, arg1: javawrappers.java.io.File, ) -> Union[int, JBoolean]: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toByteArray(arg0: javawrappers.java.io.File, ) -> JArray(JByte, 1): ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openBufferedStream(self, ) -> javawrappers.java.io.OutputStream: ...
	@staticmethod
	def readBytes(arg0: javawrappers.java.io.File, arg1: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteSource: ...
	@staticmethod
	def append(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.io.File, arg2: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Closeables:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def closeQuietly(arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	@staticmethod
	def closeQuietly(arg0: javawrappers.java.io.Reader, ) -> None: ...
	@staticmethod
	def close(arg0: javawrappers.java.io.Closeable, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class ByteStreams:
	class LimitedInputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	class ByteArrayDataOutputStream:
		def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
		def notify(self, ) -> None: ...
		def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
		def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
		def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toByteArray(self, ) -> JArray(JByte, 1): ...
		def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
		def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
		def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


	class ByteArrayDataInputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def readLine(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def readChar(self, ) -> Union[string, JString]: ...
		def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		def readUTF(self, ) -> javawrappers.java.lang.String: ...
		def readLong(self, ) -> Union[long, JLong]: ...
		def readShort(self, ) -> Union[int, JShort]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def readDouble(self, ) -> Union[float, JDouble]: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readFloat(self, ) -> Union[float, JFloat]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def readBoolean(self, ) -> Union[int, JBoolean]: ...
		def readInt(self, ) -> Union[int, JInt]: ...
		def readByte(self, ) -> JByte: ...
		def readUnsignedByte(self, ) -> Union[int, JInt]: ...
		def readUnsignedShort(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def available(self, ) -> Union[int, JInt]: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	@staticmethod
	def readFully(arg0: javawrappers.java.io.InputStream, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def readFully(arg0: javawrappers.java.io.InputStream, arg1: JArray(JByte, 1), ) -> None: ...
	@staticmethod
	def limit(arg0: javawrappers.java.io.InputStream, arg1: Union[long, JLong], ) -> javawrappers.java.io.InputStream: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.io.InputStream, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def exhaust(arg0: javawrappers.java.io.InputStream, ) -> Union[long, JLong]: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def newDataInput(arg0: JArray(JByte, 1), ) -> javawrappers.com.google.common.io.ByteArrayDataInput: ...
	@overload
	@staticmethod
	def newDataInput(arg0: javawrappers.java.io.ByteArrayInputStream, ) -> javawrappers.com.google.common.io.ByteArrayDataInput: ...
	@overload
	@staticmethod
	def newDataInput(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> javawrappers.com.google.common.io.ByteArrayDataInput: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def notify(self, ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def newDataOutput() -> javawrappers.com.google.common.io.ByteArrayDataOutput: ...
	@overload
	@staticmethod
	def newDataOutput(arg0: javawrappers.java.io.ByteArrayOutputStream, ) -> javawrappers.com.google.common.io.ByteArrayDataOutput: ...
	@overload
	@staticmethod
	def newDataOutput(arg0: Union[int, JInt], ) -> javawrappers.com.google.common.io.ByteArrayDataOutput: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.java.nio.channels.WritableByteChannel, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def skipFully(arg0: javawrappers.java.io.InputStream, arg1: Union[long, JLong], ) -> None: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def toByteArray(arg0: javawrappers.java.io.InputStream, ) -> JArray(JByte, 1): ...
	@staticmethod
	def readBytes(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.com.google.common.io.ByteProcessor, ) -> javawrappers.java.lang.Object: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class CountingInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def getCount(self, ) -> Union[long, JLong]: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class ByteArrayDataInput:
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class LineProcessor:
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def processLine(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


