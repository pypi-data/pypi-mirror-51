################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.fasterxml.classmate.types
import javawrappers.com.fasterxml.classmate.members
import javawrappers.com.fasterxml.classmate
import javawrappers.java.lang.annotation
import javawrappers.com.fasterxml.classmate.util
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class ResolvedType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def appendSignature(self, arg0: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def findSupertype(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def notify(self, ) -> None: ...
	def getTypeBindings(self, ) -> javawrappers.com.fasterxml.classmate.TypeBindings: ...
	def getStaticMethods(self, ) -> javawrappers.java.util.List: ...
	def appendBriefDescription(self, arg0: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def getConstructors(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTypeParameters(self, ) -> javawrappers.java.util.List: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def isInterface(self, ) -> Union[int, JBoolean]: ...
	def typeParametersFor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.List: ...
	def canCreateSubtype(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getMemberFields(self, ) -> javawrappers.java.util.List: ...
	def getErasedSignature(self, ) -> javawrappers.java.lang.String: ...
	def appendErasedSignature(self, arg0: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def getSignature(self, ) -> javawrappers.java.lang.String: ...
	def getSelfReferencedType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getBriefDescription(self, ) -> javawrappers.java.lang.String: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getMemberMethods(self, ) -> javawrappers.java.util.List: ...
	def getParentClass(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def isConcrete(self, ) -> Union[int, JBoolean]: ...
	def appendFullDescription(self, arg0: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	def getFullDescription(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInstanceOf(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getStaticFields(self, ) -> javawrappers.java.util.List: ...
	def isArray(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getArrayElementType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getErasedType(self, ) -> javawrappers.java.lang.Class: ...
	def isPrimitive(self, ) -> Union[int, JBoolean]: ...
	def canCreateSubtypes(self, ) -> Union[int, JBoolean]: ...
	def getImplementedInterfaces(self, ) -> javawrappers.java.util.List: ...


class ResolvedTypeWithMembers:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.TypeResolver, arg1: javawrappers.com.fasterxml.classmate.AnnotationConfiguration, arg2: javawrappers.com.fasterxml.classmate.members.HierarchicType, arg3: JArray(javawrappers.com.fasterxml.classmate.members.HierarchicType, 1), arg4: javawrappers.com.fasterxml.classmate.Filter, arg5: javawrappers.com.fasterxml.classmate.Filter, arg6: javawrappers.com.fasterxml.classmate.Filter, ): ...
	class AnnotationHandler:
		def __init__(self, arg0: javawrappers.com.fasterxml.classmate.AnnotationConfiguration, ): ...
		def includeConstructorAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def parameterInclusion(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def methodInclusion(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def includeMethodAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
		def includeParameterAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def includeFieldAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...


	def includeConstructorAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def parameterInclusion(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def getMemberFields(self, ) -> JArray(javawrappers.com.fasterxml.classmate.members.ResolvedField, 1): ...
	def notifyAll(self, ) -> None: ...
	def mainTypeAndOverrides(self, ) -> javawrappers.java.util.List: ...
	def methodInclusion(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def overridesOnly(self, ) -> javawrappers.java.util.List: ...
	def getMemberMethods(self, ) -> JArray(javawrappers.com.fasterxml.classmate.members.ResolvedMethod, 1): ...
	def includeFieldAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getStaticMethods(self, ) -> JArray(javawrappers.com.fasterxml.classmate.members.ResolvedMethod, 1): ...
	def size(self, ) -> Union[int, JInt]: ...
	def getConstructors(self, ) -> JArray(javawrappers.com.fasterxml.classmate.members.ResolvedConstructor, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStaticFields(self, ) -> JArray(javawrappers.com.fasterxml.classmate.members.ResolvedField, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def includeMethodAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
	def includeParameterAnnotation(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> Union[int, JBoolean]: ...
	def allTypesAndOverrides(self, ) -> javawrappers.java.util.List: ...


class AnnotationOverrides:
	def __init__(self, ): ...
	class StdImpl:
		def __init__(self, arg0: javawrappers.java.util.HashMap, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def builder() -> javawrappers.com.fasterxml.classmate.AnnotationOverrides.StdBuilder: ...
		@overload
		def mixInsFor(self, arg0: javawrappers.com.fasterxml.classmate.util.ClassKey, ) -> javawrappers.java.util.List: ...
		@overload
		def mixInsFor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.List: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class StdBuilder:
		def __init__(self, ): ...
		@overload
		def add(self, arg0: javawrappers.com.fasterxml.classmate.util.ClassKey, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationOverrides.StdBuilder: ...
		@overload
		def add(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationOverrides.StdBuilder: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.com.fasterxml.classmate.AnnotationOverrides: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def add(self, arg0: javawrappers.com.fasterxml.classmate.util.ClassKey, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationOverrides.StdBuilder: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationOverrides.StdBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def build(self, ) -> javawrappers.com.fasterxml.classmate.AnnotationOverrides: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def builder() -> javawrappers.com.fasterxml.classmate.AnnotationOverrides.StdBuilder: ...
	@overload
	def mixInsFor(self, arg0: javawrappers.com.fasterxml.classmate.util.ClassKey, ) -> javawrappers.java.util.List: ...
	@overload
	def mixInsFor(self, arg0: javawrappers.com.fasterxml.classmate.util.ClassKey, ) -> javawrappers.java.util.List: ...
	@overload
	def mixInsFor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Filter:
	def include(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class TypeResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def arrayType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.fasterxml.classmate.types.ResolvedArrayType: ...
	@overload
	def resolve(self, arg0: javawrappers.com.fasterxml.classmate.TypeBindings, arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	@overload
	def resolve(self, arg0: javawrappers.java.lang.reflect.Type, *arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSelfReference(arg0: javawrappers.com.fasterxml.classmate.ResolvedType, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def resolveSubtype(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...


class MemberResolver:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.TypeResolver, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setConstructorFilter(self, arg0: javawrappers.com.fasterxml.classmate.Filter, ) -> javawrappers.com.fasterxml.classmate.MemberResolver: ...
	def resolve(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.com.fasterxml.classmate.AnnotationConfiguration, arg2: javawrappers.com.fasterxml.classmate.AnnotationOverrides, ) -> javawrappers.com.fasterxml.classmate.ResolvedTypeWithMembers: ...
	def setFieldFilter(self, arg0: javawrappers.com.fasterxml.classmate.Filter, ) -> javawrappers.com.fasterxml.classmate.MemberResolver: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMethodFilter(self, arg0: javawrappers.com.fasterxml.classmate.Filter, ) -> javawrappers.com.fasterxml.classmate.MemberResolver: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIncludeLangObject(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.fasterxml.classmate.MemberResolver: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GenericType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TypeBindings:
	def hasUnbound(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBoundName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def withUnboundVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.fasterxml.classmate.TypeBindings: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.com.fasterxml.classmate.TypeBindings: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.com.fasterxml.classmate.ResolvedType, 1), ) -> javawrappers.com.fasterxml.classmate.TypeBindings: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeParameters(self, ) -> javawrappers.java.util.List: ...
	def findBoundType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getBoundType(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	@staticmethod
	def emptyBindings() -> javawrappers.com.fasterxml.classmate.TypeBindings: ...


class AnnotationInclusion:
	DONT_INCLUDE: AnnotationInclusion = ...
	INCLUDE_BUT_DONT_INHERIT: AnnotationInclusion = ...
	INCLUDE_AND_INHERIT_IF_INHERITED: AnnotationInclusion = ...
	INCLUDE_AND_INHERIT: AnnotationInclusion = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.fasterxml.classmate.AnnotationInclusion, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Annotations:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def asArray(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addAsDefault(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...
	def asList(self, ) -> javawrappers.java.util.List: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AnnotationConfiguration:
	def __init__(self, ): ...
	class StdConfiguration:
		def __init__(self, arg0: javawrappers.com.fasterxml.classmate.AnnotationInclusion, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getInclusionForClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def getInclusionForParameter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def getInclusionForConstructor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def setInclusion(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.fasterxml.classmate.AnnotationInclusion, ) -> None: ...
		def getInclusionForMethod(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getInclusionForField(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getInclusionForParameter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	@overload
	def getInclusionForParameter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	@overload
	def getInclusionForMethod(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	@overload
	def getInclusionForMethod(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getInclusionForClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	@overload
	def getInclusionForClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def setInclusion(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.fasterxml.classmate.AnnotationInclusion, ) -> None: ...
	@overload
	def getInclusionForConstructor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	@overload
	def getInclusionForConstructor(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getInclusionForField(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	@overload
	def getInclusionForField(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.fasterxml.classmate.AnnotationInclusion: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


