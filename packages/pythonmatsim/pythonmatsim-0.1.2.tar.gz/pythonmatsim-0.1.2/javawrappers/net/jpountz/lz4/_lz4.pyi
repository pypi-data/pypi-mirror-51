################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.net.jpountz.lz4
import javawrappers.java.nio

from jpype.types import *
from typing import Union

from typing import overload

class LZ4Exception:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LZ4BlockInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.net.jpountz.lz4.LZ4FastDecompressor, arg2: javawrappers.java.util.zip.Checksum, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.net.jpountz.lz4.LZ4FastDecompressor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class LZ4BlockOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JInt], arg2: javawrappers.net.jpountz.lz4.LZ4Compressor, arg3: javawrappers.java.util.zip.Checksum, arg4: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JInt], arg2: javawrappers.net.jpountz.lz4.LZ4Compressor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class LZ4FastDecompressor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def decompress(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: javawrappers.java.nio.ByteBuffer, arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LZ4SafeDecompressor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def decompress(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.nio.ByteBuffer, arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LZ4Compressor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def maxCompressedLength(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def compress(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def compress(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def compress(self, arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def compress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compress(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.nio.ByteBuffer, arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LZ4Factory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def highCompressor(self, ) -> javawrappers.net.jpountz.lz4.LZ4Compressor: ...
	@overload
	def highCompressor(self, arg0: Union[int, JInt], ) -> javawrappers.net.jpountz.lz4.LZ4Compressor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fastestInstance() -> javawrappers.net.jpountz.lz4.LZ4Factory: ...
	@staticmethod
	def nativeInstance() -> javawrappers.net.jpountz.lz4.LZ4Factory: ...
	def fastDecompressor(self, ) -> javawrappers.net.jpountz.lz4.LZ4FastDecompressor: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def unsafeInstance() -> javawrappers.net.jpountz.lz4.LZ4Factory: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def safeInstance() -> javawrappers.net.jpountz.lz4.LZ4Factory: ...
	def unknownSizeDecompressor(self, ) -> javawrappers.net.jpountz.lz4.LZ4UnknownSizeDecompressor: ...
	def safeDecompressor(self, ) -> javawrappers.net.jpountz.lz4.LZ4SafeDecompressor: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fastestJavaInstance() -> javawrappers.net.jpountz.lz4.LZ4Factory: ...
	def decompressor(self, ) -> javawrappers.net.jpountz.lz4.LZ4Decompressor: ...
	def fastCompressor(self, ) -> javawrappers.net.jpountz.lz4.LZ4Compressor: ...


class LZ4UnknownSizeDecompressor:
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...


class LZ4Decompressor:
	def decompress(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...


