################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.nio
import javawrappers.net.jpountz.xxhash
import javawrappers.java.util.zip

from jpype.types import *
from typing import Union

from typing import overload

class XXHash32:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def hash(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hash(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hash(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...


class XXHashFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fastestInstance() -> javawrappers.net.jpountz.xxhash.XXHashFactory: ...
	@staticmethod
	def nativeInstance() -> javawrappers.net.jpountz.xxhash.XXHashFactory: ...
	def notifyAll(self, ) -> None: ...
	def hash64(self, ) -> javawrappers.net.jpountz.xxhash.XXHash64: ...
	def hash32(self, ) -> javawrappers.net.jpountz.xxhash.XXHash32: ...
	@staticmethod
	def unsafeInstance() -> javawrappers.net.jpountz.xxhash.XXHashFactory: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def safeInstance() -> javawrappers.net.jpountz.xxhash.XXHashFactory: ...
	def notify(self, ) -> None: ...
	def newStreamingHash32(self, arg0: Union[int, JInt], ) -> javawrappers.net.jpountz.xxhash.StreamingXXHash32: ...
	def newStreamingHash64(self, arg0: Union[long, JLong], ) -> javawrappers.net.jpountz.xxhash.StreamingXXHash64: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fastestJavaInstance() -> javawrappers.net.jpountz.xxhash.XXHashFactory: ...


class StreamingXXHash64:
	class Factory:
		def newStreamingHash(self, arg0: Union[long, JLong], ) -> javawrappers.net.jpountz.xxhash.StreamingXXHash64: ...


	def newStreamingHash(self, arg0: Union[long, JLong], ) -> javawrappers.net.jpountz.xxhash.StreamingXXHash64: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def asChecksum(self, ) -> javawrappers.java.util.zip.Checksum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XXHash64:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def hash(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def hash(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def hash(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[long, JLong], ) -> Union[long, JLong]: ...


class StreamingXXHash32:
	class Factory:
		def newStreamingHash(self, arg0: Union[int, JInt], ) -> javawrappers.net.jpountz.xxhash.StreamingXXHash32: ...


	def newStreamingHash(self, arg0: Union[int, JInt], ) -> javawrappers.net.jpountz.xxhash.StreamingXXHash32: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def asChecksum(self, ) -> javawrappers.java.util.zip.Checksum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


