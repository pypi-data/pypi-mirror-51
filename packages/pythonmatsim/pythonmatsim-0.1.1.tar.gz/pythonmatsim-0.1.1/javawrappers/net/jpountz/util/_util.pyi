################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.nio
import javawrappers.net.jpountz.util

from jpype.types import *
from typing import Union

from typing import overload

class ByteBufferUtils:
	@staticmethod
	def inNativeByteOrder(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.nio.ByteBuffer: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def writeShortLE(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.net.jpountz.util.ByteBufferUtils, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def checkRange(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def checkRange(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def checkNotReadOnly(arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def writeLong(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readIntLE(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def readInt(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def readShortLE(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def inLittleEndianOrder(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.nio.ByteBuffer: ...
	@staticmethod
	def readLongLE(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def writeInt(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def writeByte(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.ByteBufferUtils: ...
	@staticmethod
	def readLong(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def readByte(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> JByte: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class UnsafeUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def writeShortLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.net.jpountz.util.UnsafeUtils, 1): ...
	@staticmethod
	def checkLength(arg0: Union[int, JInt], ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def checkRange(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def checkRange(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def writeLong(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readIntLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def readInt(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def readInt(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def readShortLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def readLongLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def writeInt(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeInt(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeByte(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def writeByte(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JByte, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.UnsafeUtils: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def readLong(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def readShort(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def readShort(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeShort(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> None: ...
	@overload
	@staticmethod
	def writeShort(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def readByte(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JByte: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SafeUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def writeShortLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.net.jpountz.util.SafeUtils, 1): ...
	@staticmethod
	def checkLength(arg0: Union[int, JInt], ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def checkRange(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def checkRange(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def readIntBE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readIntLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def readInt(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def readInt(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def readShortLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def readLongLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def writeInt(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def writeByte(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.SafeUtils: ...
	@staticmethod
	def readShort(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def writeShort(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def readByte(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JByte: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Native:
	class OS:
		WINDOWS: Native.OS = ...
		LINUX: Native.OS = ...
		MAC: Native.OS = ...
		SOLARIS: Native.OS = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.Native.OS: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.net.jpountz.util.Native.OS, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.Native.OS: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.Native: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.net.jpountz.util.Native.OS, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.net.jpountz.util.Native, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@staticmethod
	def isLoaded() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def load() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Utils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.net.jpountz.util.Utils: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.net.jpountz.util.Utils, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isUnalignedAccessAllowed() -> Union[int, JBoolean]: ...


