################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.net.sf.geographiclib
import javawrappers.java.io

from jpype.types import *
from typing import Union

from typing import overload

class PolygonResult:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeoMath:
	@staticmethod
	def AngRound(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def sincosd(arg0: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.Pair: ...
	@staticmethod
	def atan2d(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def atanh(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def log1p(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isfinite(arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def AngDiff(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.Pair: ...
	@staticmethod
	def sum(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.Pair: ...
	@staticmethod
	def LatFix(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def AngNormalize(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def cbrt(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def norm(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.Pair: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def hypot(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def copysign(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def polyval(arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def sq(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class GeodesicData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeodesicMask:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Geodesic:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	class Lambda12V:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class InverseStartV:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LengthsV:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class InverseData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def MajorRadius(self, ) -> Union[float, JDouble]: ...
	def EllipsoidArea(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def ArcDirect(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def ArcDirect(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Direct(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JBoolean], arg4: Union[float, JDouble], arg5: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Direct(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Direct(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Line(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	@overload
	def Line(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	def Flattening(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def DirectLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	@overload
	def DirectLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	@overload
	def ArcDirectLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	@overload
	def ArcDirectLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def InverseLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	@overload
	def InverseLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	def GenDirectLine(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JBoolean], arg4: Union[float, JDouble], arg5: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicLine: ...
	@overload
	def Inverse(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Inverse(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...


class Pair:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Constants:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeodesicLine:
	@overload
	def __init__(self, arg0: javawrappers.net.sf.geographiclib.Geodesic, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.net.sf.geographiclib.Geodesic, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def MajorRadius(self, ) -> Union[float, JDouble]: ...
	@overload
	def Position(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Position(self, arg0: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def Position(self, arg0: Union[int, JBoolean], arg1: Union[float, JDouble], arg2: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	def notifyAll(self, ) -> None: ...
	def EquatorialArc(self, ) -> Union[float, JDouble]: ...
	def Latitude(self, ) -> Union[float, JDouble]: ...
	def EquatorialAzimuthCosines(self, ) -> javawrappers.net.sf.geographiclib.Pair: ...
	def Longitude(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def GenSetDistance(self, arg0: Union[int, JBoolean], arg1: Union[float, JDouble], ) -> None: ...
	def EquatorialAzimuth(self, ) -> Union[float, JDouble]: ...
	def AzimuthCosines(self, ) -> javawrappers.net.sf.geographiclib.Pair: ...
	@overload
	def ArcPosition(self, arg0: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	@overload
	def ArcPosition(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> javawrappers.net.sf.geographiclib.GeodesicData: ...
	def Flattening(self, ) -> Union[float, JDouble]: ...
	def Arc(self, ) -> Union[float, JDouble]: ...
	def Azimuth(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def Capabilities(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def Capabilities(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def SetDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def Distance(self, ) -> Union[float, JDouble]: ...
	def GenDistance(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...


class GnomonicData:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeographicErr:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Accumulator:
	@overload
	def __init__(self, arg0: javawrappers.net.sf.geographiclib.Accumulator, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def Add(self, arg0: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def Set(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def Sum(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def Sum(self, ) -> Union[float, JDouble]: ...
	def Negate(self, ) -> None: ...
	def notify(self, ) -> None: ...


class PolygonArea:
	def __init__(self, arg0: javawrappers.net.sf.geographiclib.Geodesic, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def MajorRadius(self, ) -> Union[float, JDouble]: ...
	def AddEdge(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def Clear(self, ) -> None: ...
	def Flattening(self, ) -> Union[float, JDouble]: ...
	def CurrentPoint(self, ) -> javawrappers.net.sf.geographiclib.Pair: ...
	def AddPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def TestEdge(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> javawrappers.net.sf.geographiclib.PolygonResult: ...
	@overload
	def Compute(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> javawrappers.net.sf.geographiclib.PolygonResult: ...
	@overload
	def Compute(self, ) -> javawrappers.net.sf.geographiclib.PolygonResult: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def TestPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> javawrappers.net.sf.geographiclib.PolygonResult: ...


class Gnomonic:
	def __init__(self, arg0: javawrappers.net.sf.geographiclib.Geodesic, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def Flattening(self, ) -> Union[float, JDouble]: ...
	def MajorRadius(self, ) -> Union[float, JDouble]: ...
	def Reverse(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GnomonicData: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def Forward(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.net.sf.geographiclib.GnomonicData: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


