################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.filter.capability
import javawrappers.org.opengis.feature.type
import javawrappers.java.nio.charset
import javawrappers.org.opengis.feature
import javawrappers.org.xml.sax
import javawrappers.org.geotools.filter
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.opengis.filter.spatial
import javawrappers.org.xml.sax.helpers
import javawrappers.org.w3c.dom
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.util
import javawrappers.org.geotools.feature
import javawrappers.javax.xml.transform
import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.java.io
import javawrappers.org.opengis.filter.temporal
import javawrappers.org.opengis.filter.expression
import javawrappers.javax.xml.transform.stream
import javawrappers.org.opengis.filter.sort
import javawrappers.org.opengis.filter.identity
import javawrappers.org.geotools.xml.transform

from jpype.types import *
from typing import Union

from typing import overload

class IllegalFilterException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Exception, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class MultiCompareFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class BinaryComparisonAbstract:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class AttributeExpressionImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.helpers.NamespaceSupport, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setPropertyName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNamespaceContext(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getPropertyName(self, ) -> javawrappers.java.lang.String: ...


class LengthFunction:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FallbackFunction:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IsGreaterThanImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class GeometryFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class FilteringIteration:
	def __init__(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.geotools.feature.FeatureCollection, ): ...
	class FilterHandler:
		def __init__(self, arg0: javawrappers.org.opengis.filter.Filter, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def handleFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def endFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def handleAttribute(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def handleFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def endFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
		def notify(self, ) -> None: ...


	def handleFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def filter(arg0: javawrappers.org.geotools.feature.FeatureCollection, arg1: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def endFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def handleAttribute(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def handleFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	@staticmethod
	def iteration(arg0: javawrappers.org.geotools.feature.FeatureCollectionIteration.Handler, arg1: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def iterate(self, ) -> None: ...


class Filters:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ): ...
	@overload
	def __init__(self, ): ...
	@staticmethod
	def findPropertyName(arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ) -> None: ...
	@staticmethod
	def hasChildren(arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def removeFilter(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Filter: ...
	@overload
	@staticmethod
	def removeFilter(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.Filter: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def asType(arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.Filter: ...
	@overload
	def remove(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Filter: ...
	@staticmethod
	def asInt(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> Union[int, JInt]: ...
	@staticmethod
	def number(arg0: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...
	@staticmethod
	def search(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.Filter: ...
	@overload
	def attributeNames(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def attributeNames(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def children(arg0: javawrappers.org.opengis.filter.Filter, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.ArrayList: ...
	@overload
	@staticmethod
	def children(arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.util.ArrayList: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def and(arg0: javawrappers.org.opengis.filter.FilterFactory, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Filter: ...
	@overload
	@staticmethod
	def and(arg0: javawrappers.org.opengis.filter.FilterFactory, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.Filter: ...
	@staticmethod
	def asString(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def or_(arg0: javawrappers.org.opengis.filter.FilterFactory, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Filter: ...
	@overload
	@staticmethod
	def or_(arg0: javawrappers.org.opengis.filter.FilterFactory, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.Filter: ...
	@staticmethod
	def getFilterType(arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JShort]: ...
	@staticmethod
	def getExpressionType(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> Union[int, JShort]: ...
	def duplicate(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Filter: ...
	@staticmethod
	def gets(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def puts(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def puts(arg0: javawrappers.java.awt.Color, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def puts(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def propertyNames(arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.java.util.Set: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def asDouble(arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ExpressionDOMParser:
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ) -> None: ...
	def expression(self, arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def notifyAll(self, ) -> None: ...
	def gml(self, arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def parseCoords(arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseExpression(arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def coords(self, arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def parseGML(arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...


class MathExpressionImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterAttributeExtractor:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, ): ...
	def isConstantExpression(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAttributeNameSet(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def isUsingDynamincProperties(self, ) -> Union[int, JBoolean]: ...
	def getPropertyNameSet(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getAttributeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFilter:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.filter.FilterHandler, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.filter.FilterHandler, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEntityResolver(self, arg0: javawrappers.org.xml.sax.EntityResolver, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDTDHandler(self, arg0: javawrappers.org.xml.sax.DTDHandler, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.xml.sax.ErrorHandler: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def setFeature(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def setContentHandler(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getContentHandler(self, ) -> javawrappers.org.xml.sax.ContentHandler: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.xml.sax.XMLReader, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getParent(self, ) -> javawrappers.org.xml.sax.XMLReader: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def getEntityResolver(self, ) -> javawrappers.org.xml.sax.EntityResolver: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getFeature(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getDTDHandler(self, ) -> javawrappers.org.xml.sax.DTDHandler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setErrorHandler(self, arg0: javawrappers.org.xml.sax.ErrorHandler, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def geometry(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class NotImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getFilterIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setChildren(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class LikeFilterImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMatchCase(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSQL92LikePattern(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getEscape(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def convertToSQL92(arg0: Union[string, JString], arg1: Union[string, JString], arg2: Union[string, JString], arg3: Union[int, JBoolean], arg4: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getWildCard(self, ) -> javawrappers.java.lang.String: ...
	def setSingleChar(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLiteral(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getSingleChar(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setPattern(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setPattern(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def setMatchingCase(self, arg0: Union[int, JBoolean], ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def getWildcardSingle(self, ) -> javawrappers.java.lang.String: ...
	def setWildCard(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setEscape(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getWildcardMulti(self, ) -> javawrappers.java.lang.String: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setLiteral(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setValue(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExpression(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def getPattern(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class CompareFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class AreaFunction:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getPerimeter(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getArea(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...


class FilterCapabilities:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def fullySupports(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JBoolean]: ...
	def getScalarOps(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def convertFilterTypeToMask(self, arg0: Union[int, JShort], ) -> javawrappers.org.geotools.filter.FilterCapabilities: ...
	def notify(self, ) -> None: ...
	def getSpatialOps(self, ) -> Union[long, JLong]: ...
	@overload
	def addType(self, arg0: Union[int, JShort], ) -> None: ...
	@overload
	def addType(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def addType(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def addType(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> None: ...
	def addAll(self, arg0: javawrappers.org.geotools.filter.FilterCapabilities, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def findFunction(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.FilterCapabilities: ...
	@overload
	def supports(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JBoolean]: ...
	@overload
	def supports(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def supports(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def supports(self, arg0: javawrappers.org.geotools.filter.FilterCapabilities, ) -> Union[int, JBoolean]: ...
	@overload
	def supports(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def findOperation(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.FilterCapabilities: ...


class SortByImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.org.opengis.filter.sort.SortOrder, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPropertyName(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setSortOrder(self, arg0: javawrappers.org.opengis.filter.sort.SortOrder, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getPropertyName(self, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	def getSortOrder(self, ) -> javawrappers.org.opengis.filter.sort.SortOrder: ...


class MinFunction:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MalformedFilterException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Exception, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LiteralExpressionImpl:
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FunctionExpressionImpl:
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IsLessThenOrEqualToImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class ExpressionType:


class Capabilities:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.capability.FilterCapabilities, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def fullySupports(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JBoolean]: ...
	@overload
	def fullySupports(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def addName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def addName(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def addType(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.org.opengis.filter.capability.FilterCapabilities, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.filter.Capabilities, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContents(self, ) -> javawrappers.org.geotools.filter.capability.FilterCapabilitiesImpl: ...
	@overload
	def toOperationName(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.lang.String: ...
	@overload
	def toOperationName(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	def supports(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class OrImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getFilterIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setChildren(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class ExpressionSAXParser:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.filter.FilterFactory2, ): ...
	def getFunctionName(self, arg0: javawrappers.org.xml.sax.Attributes, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isReady(self, ) -> Union[int, JBoolean]: ...
	def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def message(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def geometry(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...


class FilterHandler:
	def filter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startDocument(self, ) -> None: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class DefaultExpression:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterSAXParser:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ) -> None: ...
	def expression(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def start(self, arg0: Union[int, JShort], ) -> None: ...
	def setAttributes(self, arg0: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def notify(self, ) -> None: ...
	def setDistance(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class IsEqualsToImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class CartesianDistanceFilter:
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def getDistanceUnits(self, ) -> javawrappers.java.lang.String: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setUnits(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class FidFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def addAllFids(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getIDs(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def removeFid(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def removeAllFids(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setIDs(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def addFid(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFidsSet(self, ) -> javawrappers.java.util.Set: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFids(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class FunctionFinder:
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def findFunctionDescription(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def findFunctionDescription(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def findFunction(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def findFunction(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def findFunction(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def findFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def findFunction(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def findFunction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAllFunctionDescriptions(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class BinaryLogicAbstract:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setChildren(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IsNotEqualToImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class FilterAbstract:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class LogicFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getFilterIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setChildren(self, arg0: javawrappers.java.util.List, ) -> None: ...


class LogicSAXParser:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ): ...
	def add(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def start(self, arg0: Union[int, JShort], ) -> None: ...
	def create(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def end(self, arg0: Union[int, JShort], ) -> None: ...
	def notify(self, ) -> None: ...
	def isComplete(self, ) -> Union[int, JBoolean]: ...


class MaxFunction:
	def __init__(self, ): ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IsBetweenImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLowerBoundary(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLowerBoundary(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getUpperBoundary(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExpression(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setUpperBoundary(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...


class AbstractFilter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFactoryImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def resourceId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.Date, ) -> javawrappers.org.opengis.filter.identity.ResourceId: ...
	@overload
	def resourceId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.filter.identity.Version, ) -> javawrappers.org.opengis.filter.identity.ResourceId: ...
	def functions(self, arg0: JArray(javawrappers.org.opengis.filter.capability.FunctionName, 1), ) -> javawrappers.org.opengis.filter.capability.Functions: ...
	@overload
	def before(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Before: ...
	@overload
	def before(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Before: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX: ...
	@overload
	def bbox(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	@overload
	def bbox(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.BoundingBox3D, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.BBOX3D: ...
	def arithmeticOperators(self, arg0: Union[int, JBoolean], arg1: javawrappers.org.opengis.filter.capability.Functions, ) -> javawrappers.org.opengis.filter.capability.ArithmeticOperators: ...
	def spatialOperator(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), ) -> javawrappers.org.opengis.filter.capability.SpatialOperator: ...
	@overload
	def endedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.EndedBy: ...
	@overload
	def endedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.EndedBy: ...
	@overload
	def begunBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.BegunBy: ...
	@overload
	def begunBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.BegunBy: ...
	@overload
	def during(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.During: ...
	@overload
	def during(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.During: ...
	def nativeFilter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.NativeFilter: ...
	@overload
	def beyond(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def beyond(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.Beyond: ...
	@overload
	def crosses(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	@overload
	def crosses(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Crosses: ...
	def operator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.Operator: ...
	@overload
	def begins(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Begins: ...
	@overload
	def begins(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Begins: ...
	@overload
	def disjoint(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def disjoint(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Disjoint: ...
	@overload
	def toverlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TOverlaps: ...
	@overload
	def toverlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TOverlaps: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.filter.expression.Expression, 1), ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.org.opengis.feature.type.Name, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def property(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def property(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.helpers.NamespaceSupport, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def property(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	@overload
	def overlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	@overload
	def overlaps(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Overlaps: ...
	def temporalCapabilities(self, arg0: JArray(javawrappers.org.opengis.filter.capability.TemporalOperator, 1), ) -> javawrappers.org.opengis.filter.capability.TemporalCapabilities: ...
	@overload
	def id(self, *arg0: javawrappers.org.opengis.filter.identity.FeatureId, ) -> javawrappers.org.opengis.filter.Id: ...
	@overload
	def id(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.filter.Id: ...
	def spatialCapabilities(self, arg0: JArray(javawrappers.org.opengis.filter.capability.GeometryOperand, 1), arg1: javawrappers.org.opengis.filter.capability.SpatialOperators, ) -> javawrappers.org.opengis.filter.capability.SpatialCapabilities: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def greater(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThan: ...
	@overload
	def between(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsBetween: ...
	@overload
	def between(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsBetween: ...
	def add(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Add: ...
	@overload
	def meets(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Meets: ...
	@overload
	def meets(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Meets: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	@overload
	def like(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLike: ...
	def subtract(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Subtract: ...
	@overload
	def tequals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TEquals: ...
	@overload
	def tequals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TEquals: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	@overload
	def notEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsNotEqualTo: ...
	def sort(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.sort.SortOrder, ) -> javawrappers.org.opengis.filter.sort.SortBy: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def less(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsLessThan: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Contains: ...
	@overload
	def dwithin(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, arg4: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	@overload
	def dwithin(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: Union[float, JDouble], arg3: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.spatial.DWithin: ...
	def idCapabilities(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.capability.IdCapabilities: ...
	@overload
	def tcontains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.TContains: ...
	@overload
	def tcontains(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.TContains: ...
	@overload
	def anyInteracts(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.AnyInteracts: ...
	@overload
	def anyInteracts(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.AnyInteracts: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def greaterOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def intersects(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	@overload
	def intersects(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Intersects: ...
	def comparisonOperators(self, arg0: JArray(javawrappers.org.opengis.filter.capability.Operator, 1), ) -> javawrappers.org.opengis.filter.capability.ComparisonOperators: ...
	def notifyAll(self, ) -> None: ...
	def gmlObjectId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.GmlObjectId: ...
	@overload
	def overlappedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.OverlappedBy: ...
	@overload
	def overlappedBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.OverlappedBy: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	@overload
	def lessOrEqual(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo: ...
	def notify(self, ) -> None: ...
	@overload
	def literal(self, arg0: JByte, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[string, JString], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JShort], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[long, JLong], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[float, JFloat], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	@overload
	def literal(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def scalarCapabilities(self, arg0: javawrappers.org.opengis.filter.capability.ComparisonOperators, arg1: javawrappers.org.opengis.filter.capability.ArithmeticOperators, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.capability.ScalarCapabilities: ...
	def spatialOperators(self, arg0: JArray(javawrappers.org.opengis.filter.capability.SpatialOperator, 1), ) -> javawrappers.org.opengis.filter.capability.SpatialOperators: ...
	def not_(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Not: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def and(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.And: ...
	@overload
	def and(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.And: ...
	def parameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.InternationalString, arg3: javawrappers.org.opengis.util.InternationalString, arg4: Union[int, JBoolean], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.parameter.Parameter: ...
	@overload
	def ends(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.Ends: ...
	@overload
	def ends(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.Ends: ...
	def divide(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Divide: ...
	@overload
	def after(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.After: ...
	@overload
	def after(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.After: ...
	def multiply(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.Multiply: ...
	@overload
	def featureId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def featureId(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def or_(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.Or: ...
	@overload
	def or_(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.filter.Or: ...
	@overload
	def capabilities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, arg4: javawrappers.org.opengis.filter.capability.TemporalCapabilities, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...
	@overload
	def capabilities(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.capability.ScalarCapabilities, arg2: javawrappers.org.opengis.filter.capability.SpatialCapabilities, arg3: javawrappers.org.opengis.filter.capability.IdCapabilities, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.parameter.Parameter, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.parameter.Parameter, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: Union[int, JInt], ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def functionName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	@overload
	def within(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	@overload
	def within(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Within: ...
	def temporalOperator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.filter.capability.TemporalOperator: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equal(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def touches(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	@overload
	def touches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Touches: ...
	def isNull(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsNull: ...
	@overload
	def equals(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.PropertyIsEqualTo: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.geometry.Geometry, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.spatial.Equals: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNil(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.filter.PropertyIsNil: ...
	@overload
	def metBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ) -> javawrappers.org.opengis.filter.temporal.MetBy: ...
	@overload
	def metBy(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.temporal.MetBy: ...


class IsGreaterThanOrEqualToImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], arg3: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class LikeToRegexConverter:
	def __init__(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPattern(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FunctionImpl:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IsNilImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNilReason(self, ) -> javawrappers.java.lang.Object: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class NullFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExpression(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class NativeFilterImpl:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNative(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FunctionFactory:
	def getFunctionNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def function(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	@overload
	def function(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.filter.expression.Literal, ) -> javawrappers.org.opengis.filter.expression.Function: ...


class FunctionExpression:
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AndImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getFilterIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setChildren(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class FilterType:


class AbstractFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FilterFactoryCreationException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Exception, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FilterDOMParser:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def parseFilter(arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.org.opengis.filter.Filter: ...


class BetweenFilterImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addMiddleValue(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def getLowerBoundary(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLowerBoundary(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getUpperBoundary(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExpression(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setUpperBoundary(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...


class ConstantExpression:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def constant(arg0: Union[int, JInt], ) -> javawrappers.org.geotools.filter.ConstantExpression: ...
	@overload
	@staticmethod
	def constant(arg0: Union[float, JDouble], ) -> javawrappers.org.geotools.filter.ConstantExpression: ...
	@overload
	@staticmethod
	def constant(arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.filter.ConstantExpression: ...
	@staticmethod
	def color(arg0: javawrappers.java.awt.Color, ) -> javawrappers.org.geotools.filter.ConstantExpression: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def setLiteral(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getLiteral(self, ) -> javawrappers.java.lang.Object: ...
	def getType(self, ) -> Union[int, JShort]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.java.lang.Object: ...


class IsLessThenImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class IsNullImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExpression(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class SortOrder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FilterTransformer:
	def __init__(self, ): ...
	class FilterTranslator:
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, ): ...
		def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
		def abort(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
		def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...


	def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEncoding(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createTransformer(self, ) -> javawrappers.javax.xml.transform.Transformer: ...
	def notify(self, ) -> None: ...
	def setOmitXMLDeclaration(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def setIndentation(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.lang.String: ...
	def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNamespaceDeclarationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createTranslator(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
	def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
	def createXMLReader(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.XMLReaderSupport: ...
	def getIndentation(self, ) -> Union[int, JInt]: ...
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def createTransformTask(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.Task: ...
	def isOmitXMLDeclaration(self, ) -> Union[int, JBoolean]: ...
	def abort(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNamespaceDeclartionEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...


