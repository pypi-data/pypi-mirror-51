################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.filter.expression
import javawrappers.org.geotools.factory
import javawrappers.org.geotools.filter.expression

from jpype.types import *
from typing import Union

from typing import overload

class PropertyAccessorFactory:
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.filter.expression.PropertyAccessor: ...


class SimpleFeaturePropertyAccessorFactory:
	def __init__(self, ): ...
	class SimpleFeaturePropertyAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
		def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DefaultGeometrySimpleFeaturePropertyAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
		def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class FidSimpleFeaturePropertyAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
		def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.filter.expression.PropertyAccessor: ...
	@overload
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SubtractImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class DirectPropertyAccessorFactory:
	def __init__(self, ): ...
	class DirectPropertyAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
		def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.filter.expression.PropertyAccessor: ...
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PropertyAccessor:
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class InternalVolatileFunction:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def duplicate(self, *arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.filter.expression.InternalFunction: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setParameters(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def setFallbackValue(self, arg0: javawrappers.org.opengis.filter.expression.Literal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ThisPropertyAccessorFactory:
	def __init__(self, ): ...
	class ThisPropertyAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
		def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.filter.expression.PropertyAccessor: ...
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExpressionAbstract:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class DivideImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AbstractExpressionVisitor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class AddImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MultiplyImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class NullPropertyAccessorFactory:
	def __init__(self, ): ...
	class NullPropertyAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
		def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Class, ) -> None: ...
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.filter.expression.PropertyAccessor: ...
	def canHandle(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PropertyAccessors:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def findPropertyAccessor(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.filter.expression.PropertyAccessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def findPropertyAccessors(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.List: ...


