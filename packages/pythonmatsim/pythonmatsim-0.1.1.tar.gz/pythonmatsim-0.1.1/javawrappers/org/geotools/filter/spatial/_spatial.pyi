################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.filter.capability
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.filter.temporal
import javawrappers.org.opengis.filter.expression
import javawrappers.org.geotools.filter.spatial
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.opengis.filter.spatial

from jpype.types import *
from typing import Union

from typing import overload

class DWithinImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def getDistanceUnits(self, ) -> javawrappers.java.lang.String: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setUnits(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class ContainsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class CrossesImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class BeyondImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def getDistanceUnits(self, ) -> javawrappers.java.lang.String: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setUnits(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class DefaultCRSFilterVisitor:
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class EqualsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class BBOXImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.lang.String, arg6: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMinY(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMinX(self, arg0: Union[float, JDouble], ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	@staticmethod
	def boundingPolygon(arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def setSRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setPropertyName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSRS(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setMaxY(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMaxX(self, arg0: Union[float, JDouble], ) -> None: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


class DisjointImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class ReprojectingFilterVisitor:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, arg1: javawrappers.org.opengis.feature.type.FeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.FilterFactory2, arg1: javawrappers.org.opengis.feature.type.FeatureType, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	class FunctionReprojector:
		def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getParameters(self, ) -> javawrappers.java.util.List: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	class BinaryComparisonTransformer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class GeometryFilterTransformer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getFunctionName(self, ) -> javawrappers.org.opengis.filter.capability.FunctionName: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.expression.ExpressionVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getFallbackValue(self, ) -> javawrappers.org.opengis.filter.expression.Literal: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class IntersectsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class AbstractPreparedGeometryFilter:
	class Literals:
		NEITHER: AbstractPreparedGeometryFilter.Literals = ...
		RIGHT: AbstractPreparedGeometryFilter.Literals = ...
		LEFT: AbstractPreparedGeometryFilter.Literals = ...
		BOTH: AbstractPreparedGeometryFilter.Literals = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.spatial.AbstractPreparedGeometryFilter.Literals: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.filter.spatial.AbstractPreparedGeometryFilter.Literals, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.spatial.AbstractPreparedGeometryFilter.Literals: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.filter.spatial.AbstractPreparedGeometryFilter.Literals, 1): ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class TouchesImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class WithinImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class BBOX3DImpl:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope3D, arg2: javawrappers.org.opengis.filter.FilterFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperty(self, ) -> javawrappers.org.opengis.filter.expression.PropertyName: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	def get3DEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope3D: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox3D: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	def getMaxZ(self, ) -> Union[float, JDouble]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def contains(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSRS(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMinZ(self, ) -> Union[float, JDouble]: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	@overload
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


class OverlapsImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def setExpression1(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def isMatchingCase(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setExpression2(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def evaluateInternal(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


