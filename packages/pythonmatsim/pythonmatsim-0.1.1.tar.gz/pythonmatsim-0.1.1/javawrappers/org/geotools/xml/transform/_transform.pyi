################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.xml.sax.helpers
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.javax.xml.transform.stream
import javawrappers.org.xml.sax
import javawrappers.org.geotools.xml.transform
import javawrappers.javax.xml.transform
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class Translator:
	def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
	def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
	def abort(self, ) -> None: ...
	def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
	def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...


class TransformerBase:
	def __init__(self, ): ...
	class XMLReaderSupport:
		def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase, arg1: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setEntityResolver(self, arg0: javawrappers.org.xml.sax.EntityResolver, ) -> None: ...
		def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def setDTDHandler(self, arg0: javawrappers.org.xml.sax.DTDHandler, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
		def getTranslator(self, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
		def notify(self, ) -> None: ...
		def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def getErrorHandler(self, ) -> javawrappers.org.xml.sax.ErrorHandler: ...
		def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def setFeature(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def setContentHandler(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getContentHandler(self, ) -> javawrappers.org.xml.sax.ContentHandler: ...
		def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
		def setParent(self, arg0: javawrappers.org.xml.sax.XMLReader, ) -> None: ...
		def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
		def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def getParent(self, ) -> javawrappers.org.xml.sax.XMLReader: ...
		def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
		def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
		def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
		@overload
		def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
		@overload
		def parse(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getEntityResolver(self, ) -> javawrappers.org.xml.sax.EntityResolver: ...
		def endDocument(self, ) -> None: ...
		def startDocument(self, ) -> None: ...
		def getFeature(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getDTDHandler(self, ) -> javawrappers.org.xml.sax.DTDHandler: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def setErrorHandler(self, arg0: javawrappers.org.xml.sax.ErrorHandler, ) -> None: ...
		def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


	class SchemaLocationSupport:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getSchemaLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getSchemaLocation(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.lang.String: ...
		@overload
		def getSchemaLocation(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TranslatorSupport:
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		class DirectBackend:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def notify(self, ) -> None: ...
			def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...


		class BufferedBackend:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def notify(self, ) -> None: ...
			def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...


		class Backend:
			def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
			def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
			def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...


		class End:
			def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase.TranslatorSupport, arg1: javawrappers.java.lang.String, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def commit(self, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class Comment:
			def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase.TranslatorSupport, arg1: javawrappers.java.lang.String, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def commit(self, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class CData:
			def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase.TranslatorSupport, arg1: javawrappers.java.lang.String, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def commit(self, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class Chars:
			def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase.TranslatorSupport, arg1: javawrappers.java.lang.String, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def commit(self, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class Start:
			def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase.TranslatorSupport, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.xml.sax.Attributes, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def commit(self, ) -> None: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		class Action:
			def commit(self, ) -> None: ...


		def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		@overload
		def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		@overload
		def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		@overload
		def commit(self, ) -> None: ...
		@overload
		def commit(self, ) -> None: ...
		@overload
		def commit(self, ) -> None: ...
		@overload
		def commit(self, ) -> None: ...
		@overload
		def commit(self, ) -> None: ...
		@overload
		def commit(self, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
		def abort(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
		def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
		@overload
		def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	class ContentHandlerFilter:
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.org.xml.sax.helpers.AttributesImpl, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def startEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def endCDATA(self, ) -> None: ...
		def endEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def endDocument(self, ) -> None: ...
		def startDocument(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def startDTD(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def endDTD(self, ) -> None: ...
		def startCDATA(self, ) -> None: ...
		def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def comment(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
		def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


	class Task:
		def __init__(self, arg0: javawrappers.org.geotools.xml.transform.TransformerBase, arg1: javawrappers.java.lang.Object, arg2: javawrappers.javax.xml.transform.stream.StreamResult, ): ...
		def getError(self, ) -> javawrappers.java.lang.Exception: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def abort(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def checkError(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDTDHandler(self, arg0: javawrappers.org.xml.sax.DTDHandler, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	@overload
	def commit(self, ) -> None: ...
	def run(self, ) -> None: ...
	def getTranslator(self, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
	def createTransformer(self, ) -> javawrappers.javax.xml.transform.Transformer: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def setOmitXMLDeclaration(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def setIndentation(self, arg0: Union[int, JInt], ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.xml.sax.ErrorHandler: ...
	def setContentHandler(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	def getContentHandler(self, ) -> javawrappers.org.xml.sax.ContentHandler: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setNamespaceDeclarationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createTranslator(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
	def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	@overload
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	@overload
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	@overload
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getIndentation(self, ) -> Union[int, JInt]: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def getEntityResolver(self, ) -> javawrappers.org.xml.sax.EntityResolver: ...
	def endEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endDocument(self, ) -> None: ...
	@overload
	def endDocument(self, ) -> None: ...
	def getFeature(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def cdata(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def createTransformTask(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.Task: ...
	def getError(self, ) -> javawrappers.java.lang.Exception: ...
	@overload
	def abort(self, ) -> None: ...
	@overload
	def abort(self, ) -> None: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
	def setEntityResolver(self, arg0: javawrappers.org.xml.sax.EntityResolver, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEncoding(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endCDATA(self, ) -> None: ...
	@overload
	def getSchemaLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSchemaLocation(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSchemaLocation(self, ) -> javawrappers.java.lang.String: ...
	def checkError(self, ) -> Union[int, JBoolean]: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def startCDATA(self, ) -> None: ...
	@overload
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
	def setFeature(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def setLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def end(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.xml.sax.XMLReader, ) -> None: ...
	def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
	def createXMLReader(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.XMLReaderSupport: ...
	def getParent(self, ) -> javawrappers.org.xml.sax.XMLReader: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	@overload
	def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	@overload
	def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	@overload
	def start(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def startEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def startDocument(self, ) -> None: ...
	@overload
	def startDocument(self, ) -> None: ...
	def startDTD(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def endDTD(self, ) -> None: ...
	def isOmitXMLDeclaration(self, ) -> Union[int, JBoolean]: ...
	def getDTDHandler(self, ) -> javawrappers.org.xml.sax.DTDHandler: ...
	def setErrorHandler(self, arg0: javawrappers.org.xml.sax.ErrorHandler, ) -> None: ...
	@overload
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNamespaceDeclartionEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def comment(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def comment(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def chars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


