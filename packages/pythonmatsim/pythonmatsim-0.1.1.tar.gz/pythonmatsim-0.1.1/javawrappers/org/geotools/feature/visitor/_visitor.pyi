################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.util
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.filter.temporal
import javawrappers.org.opengis.filter.expression
import javawrappers.org.geotools.feature.visitor
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.opengis.filter.spatial

from jpype.types import *
from typing import Union

from typing import overload

class AverageVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	class AverageResult:
		@overload
		def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def getSum(self, ) -> javawrappers.java.lang.Object: ...


	class IntegerAverageStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def getSum(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class LongAverageStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def getSum(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class FloatAverageStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def getSum(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class DoubleAverageStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def getSum(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class AverageStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def getSum(self, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def getAverage(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class IdFinderFilterVisitor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isFound(self, ) -> Union[int, JBoolean]: ...
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class GroupByVisitor:
	def __init__(self, arg0: javawrappers.org.geotools.feature.visitor.Aggregate, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.java.util.List, arg3: javawrappers.org.opengis.util.ProgressListener, ): ...
	class GroupByResult:
		def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.geotools.feature.visitor.Aggregate, arg2: javawrappers.java.util.List, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def getAggregateVisitor(self, ) -> javawrappers.org.geotools.feature.visitor.Aggregate: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def getGroupByAttributes(self, ) -> javawrappers.java.util.List: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def getResults(self, ) -> javawrappers.java.util.Map: ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class InMemoryGroupBy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class GroupByRawResult:
		def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def wasVisited(self, ) -> Union[int, JBoolean]: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	@overload
	def getGroupByAttributes(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getGroupByAttributes(self, ) -> javawrappers.java.util.List: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getAggregateVisitor(self, ) -> javawrappers.org.geotools.feature.visitor.Aggregate: ...
	@overload
	def getAggregateVisitor(self, ) -> javawrappers.org.opengis.feature.FeatureVisitor: ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def wasOptimized(self, ) -> Union[int, JBoolean]: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def getResults(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class UniqueVisitor:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	class UniqueResult:
		@overload
		def __init__(self, arg0: javawrappers.java.util.Set, arg1: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.util.Set, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def createNewSet(arg0: javawrappers.java.util.Collection, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.Set: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def getStartIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setPreserveOrder(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	@staticmethod
	def createNewSet(arg0: javawrappers.java.util.Collection, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def hasLimits(self, ) -> Union[int, JBoolean]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def isPreserveOrder(self, ) -> Union[int, JBoolean]: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getMaxFeatures(self, ) -> Union[int, JInt]: ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def setMaxFeatures(self, arg0: Union[int, JInt], ) -> None: ...
	def setStartIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnique(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class SumVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	class SumResult:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.geotools.feature.visitor.SumVisitor.SumStrategy, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class IntegerSumStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LongSumStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class FloatSumStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DoubleSumStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SumStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getSum(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class IdCollectorFilterVisitor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitNullFilter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Id, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.PropertyName, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Multiply, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.And, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Equals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Literal, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Function, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.After, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Subtract, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TContains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Meets, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TOverlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Begins, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Overlaps, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Not, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Beyond, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Disjoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Touches, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.NativeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.OverlappedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.TEquals, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Within, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.BegunBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Contains, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.ExcludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNil, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLike, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Ends, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNull, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.Or, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.NilExpression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Divide, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.AnyInteracts, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Intersects, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsBetween, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsGreaterThan, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.DWithin, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.BBOX, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.MetBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.EndedBy, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsLessThanOrEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.Before, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.spatial.Crosses, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.PropertyIsNotEqualTo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.IncludeFilter, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.temporal.During, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.filter.expression.Add, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class MedianVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	class MedianResult:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.util.List, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def isOptimized(self, ) -> Union[int, JBoolean]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getList(self, ) -> javawrappers.java.util.List: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isOptimized(self, ) -> Union[int, JBoolean]: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def getMedian(self, ) -> javawrappers.java.lang.Object: ...
	def getList(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...


class BoundsVisitor:
	def __init__(self, ): ...
	class BoundsResult:
		def __init__(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def getValue(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
		@overload
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getValue(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class AbstractCalcResult:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MinVisitor:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	class MinResult:
		def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def getMin(self, ) -> javawrappers.java.lang.Comparable: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...


class NearestVisitor:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Object, ): ...
	class GeometryAccumulator:
		def __init__(self, arg0: javawrappers.org.geotools.feature.visitor.NearestVisitor, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getNearest(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def visit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class DateAccumulator:
		def __init__(self, arg0: javawrappers.org.geotools.feature.visitor.NearestVisitor, arg1: javawrappers.java.util.Date, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.util.Date: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def visit(self, arg0: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class NumberAccumulator:
		def __init__(self, arg0: javawrappers.org.geotools.feature.visitor.NearestVisitor, arg1: javawrappers.java.lang.Number, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.lang.Number: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def visit(self, arg0: javawrappers.java.lang.Number, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class ComparableAccumulator:
		def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.lang.Comparable: ...
		@overload
		def getNearest(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def visit(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class NearestAccumulator:
		def getNearest(self, ) -> javawrappers.java.lang.Object: ...
		def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.util.Date: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getNearest(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getNearest(self, ) -> javawrappers.java.lang.Object: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def getNearestMatch(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getValueToMatch(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Number, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[int, JBoolean]: ...
	@overload
	def visit(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class CountVisitor:
	def __init__(self, ): ...
	class CountResult:
		def __init__(self, arg0: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...


class FeatureCalc:
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class StandardDeviationVisitor:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[float, JDouble], ): ...
	class Result:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getNaNCount(self, ) -> Union[int, JInt]: ...
	def getNullCount(self, ) -> Union[int, JInt]: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	def getMean(self, ) -> Union[float, JDouble]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...


class Aggregate:
	AVERAGE: Aggregate = ...
	COUNT: Aggregate = ...
	MAX: Aggregate = ...
	MEDIAN: Aggregate = ...
	MIN: Aggregate = ...
	STD_DEV: Aggregate = ...
	SUM: Aggregate = ...
	SUMAREA: Aggregate = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def valueOfIgnoreCase(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.visitor.Aggregate: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.visitor.Aggregate: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.feature.visitor.Aggregate, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def create(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.geotools.feature.visitor.FeatureCalc: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def wrap(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SumAreaVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	class SumAreaStrategy:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResult(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	def getSum(self, ) -> javawrappers.java.lang.Object: ...


class FeatureAttributeVisitor:
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...


class LimitingVisitor:
	def hasLimits(self, ) -> Union[int, JBoolean]: ...
	def getStartIndex(self, ) -> Union[int, JInt]: ...
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def getMaxFeatures(self, ) -> Union[int, JInt]: ...


class CalcResult:
	def toInt(self, ) -> Union[int, JInt]: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class QuantileListVisitor:
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	def getNaNCount(self, ) -> Union[int, JInt]: ...
	def getNullCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class MaxVisitor:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class MaxResult:
		def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def toInt(self, ) -> Union[int, JInt]: ...
		def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def toLong(self, ) -> Union[long, JLong]: ...
		def notifyAll(self, ) -> None: ...
		def toFloat(self, ) -> Union[float, JFloat]: ...
		def toList(self, ) -> javawrappers.java.util.List: ...
		def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
		def notify(self, ) -> None: ...
		def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
		def toSet(self, ) -> javawrappers.java.util.Set: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		def toDouble(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toMap(self, ) -> javawrappers.java.util.Map: ...
		def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def notifyAll(self, ) -> None: ...
	def toList(self, ) -> javawrappers.java.util.List: ...
	def toPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...
	def toDouble(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def toGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getNaNCount(self, ) -> Union[int, JInt]: ...
	def getNullCount(self, ) -> Union[int, JInt]: ...
	def init(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	def toLong(self, ) -> Union[long, JLong]: ...
	def getMax(self, ) -> javawrappers.java.lang.Comparable: ...
	def toFloat(self, ) -> Union[float, JFloat]: ...
	def getExpressions(self, ) -> javawrappers.java.util.List: ...
	def toStringArray(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isCompatible(self, arg0: javawrappers.org.geotools.feature.visitor.CalcResult, ) -> Union[int, JBoolean]: ...
	def toSet(self, ) -> javawrappers.java.util.Set: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getExpression(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def toMap(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getResult(self, ) -> javawrappers.org.geotools.feature.visitor.CalcResult: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...


class GroupByVisitorBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def withGroupByAttribute(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withGroupByAttribute(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withGroupByAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withAggregateVisitor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withAggregateVisitor(self, arg0: javawrappers.org.geotools.feature.visitor.Aggregate, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withAggregateAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withAggregateAttribute(self, arg0: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	@overload
	def withAggregateAttribute(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	def build(self, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def withProgressListener(self, arg0: javawrappers.org.opengis.util.ProgressListener, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def withGroupByAttributes(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.geotools.feature.visitor.GroupByVisitorBuilder: ...
	def notify(self, ) -> None: ...


class CollectionUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def calc(arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, arg1: javawrappers.org.geotools.feature.visitor.FeatureCalc, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class CalcUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


