################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.util
import javawrappers.java.util.stream
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.java.net
import javawrappers.org.opengis.feature
import javawrappers.org.geotools.filter.identity
import javawrappers.java.util.function
import javawrappers.org.geotools.feature.simple
import javawrappers.org.opengis.filter.identity

from jpype.types import *
from typing import Union

from typing import overload

class SimpleSchema:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.AttributeType, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def add(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def profile(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.org.opengis.feature.type.Schema: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getURI(self, ) -> javawrappers.java.lang.String: ...


class SimpleFeatureTypeBuilder:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def userData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def defaultValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def getSuperType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def descriptor(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def setBindings(self, arg0: javawrappers.org.opengis.feature.type.Schema, ) -> None: ...
	def srid(self, arg0: javawrappers.java.lang.Integer, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	@overload
	def setNamespaceURI(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	@overload
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getBinding(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def getDefaultGeometry(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Integer, ) -> None: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, ) -> None: ...
	def setCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def init(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	@staticmethod
	def retype(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def retype(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def retype(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	@staticmethod
	def retype(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def minOccurs(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def restrictions(self, arg0: javawrappers.java.util.List, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def setSRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def buildFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def restriction(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def addBindings(self, arg0: javawrappers.org.opengis.feature.type.Schema, ) -> None: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...
	def getFeatureTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...
	@overload
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setName(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def description(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def setDefaultGeometry(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setFeatureTypeFactory(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ) -> None: ...
	def setDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	@overload
	def setAttributes(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), ) -> None: ...
	@overload
	def setAttributes(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def nillable(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def maxOccurs(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	@staticmethod
	def copy(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.feature.AttributeTypeBuilder, ) -> None: ...
	def crs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def length(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def addBinding(self, arg0: javawrappers.org.opengis.feature.type.AttributeType, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), ) -> None: ...
	def srs(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureTypeBuilder: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAbstract(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSuperType(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class SimpleFeatureImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.filter.identity.FeatureId, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.filter.identity.FeatureId, arg3: Union[int, JBoolean], arg4: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg2: javawrappers.org.opengis.filter.identity.FeatureId, arg3: Union[int, JBoolean], ): ...
	class SimpleGeometryAttribute:
		@overload
		def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
		@overload
		def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
		@overload
		def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
		def notifyAll(self, ) -> None: ...
		def isNillable(self, ) -> Union[int, JBoolean]: ...
		def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
		def notify(self, ) -> None: ...
		def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
		def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getUserData(self, ) -> javawrappers.java.util.Map: ...
		def validate(self, ) -> None: ...


	class Attribute:
		@overload
		def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
		@overload
		def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
		def notifyAll(self, ) -> None: ...
		def isNillable(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
		@overload
		def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getUserData(self, ) -> javawrappers.java.util.Map: ...
		def validate(self, ) -> None: ...


	class AttributeList:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.Property: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
		@overload
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.Property, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureImpl.Attribute: ...
		@overload
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
		@overload
		def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getDefaultGeometry(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAttributes(self, ) -> javawrappers.java.util.List: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	@overload
	def getProperties(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getProperties(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.GeometryType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.type.ComplexType: ...
	@overload
	def getType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	def getDefaultGeometryProperty(self, ) -> javawrappers.org.opengis.feature.GeometryAttribute: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultGeometry(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAttributes(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def setAttributes(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	@overload
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isNillable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def setAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAttribute(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setAttribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def getAttribute(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getAttribute(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getAttribute(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.FeatureId: ...
	@overload
	def getIdentifier(self, ) -> javawrappers.org.opengis.filter.identity.Identifier: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.Property: ...
	def setDefaultGeometryProperty(self, arg0: javawrappers.org.opengis.feature.GeometryAttribute, ) -> None: ...
	@overload
	def validate(self, ) -> None: ...
	@overload
	def validate(self, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.feature.Property, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureImpl.Attribute: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getProperty(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.Property: ...
	@overload
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Property: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def getNumberOfAttributes(self, ) -> Union[int, JInt]: ...


class SimpleFeatureBuilder:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.opengis.feature.FeatureFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@staticmethod
	def template(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def deep(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def userData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureBuilder: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def createDefaultFeatureId() -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isValidating(self, ) -> Union[int, JBoolean]: ...
	def featureUserData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureBuilder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def copy(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def init(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def retype(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def retype(arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, arg1: javawrappers.org.geotools.feature.simple.SimpleFeatureBuilder, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@staticmethod
	def createDefaultFeatureIdentifier(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.filter.identity.FeatureIdImpl: ...
	@overload
	@staticmethod
	def build(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	@staticmethod
	def build(arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def buildFeature(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def buildFeature(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def buildFeature(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.Feature: ...
	def setUserData(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.feature.simple.SimpleFeatureBuilder: ...


class SimpleFeatureTypeImpl:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.util.List, arg2: javawrappers.org.opengis.feature.type.GeometryDescriptor, arg3: Union[int, JBoolean], arg4: javawrappers.java.util.List, arg5: javawrappers.org.opengis.feature.type.AttributeType, arg6: javawrappers.org.opengis.util.InternationalString, ): ...
	@overload
	def getDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.PropertyDescriptor: ...
	@overload
	def getDescriptor(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	@overload
	def getDescriptor(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def getAttributeDescriptors(self, ) -> javawrappers.java.util.List: ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def isIdentified(self, ) -> Union[int, JBoolean]: ...
	def getBinding(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def getRestrictions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def indexOf(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getDescriptors(self, ) -> javawrappers.java.util.Collection: ...
	def parse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAttributeCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.PropertyType: ...
	@overload
	def getSuper(self, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getType(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	@overload
	def getType(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.feature.type.AttributeType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInline(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUserData(self, ) -> javawrappers.java.util.Map: ...
	def getTypes(self, ) -> javawrappers.java.util.List: ...
	def createDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getGeometryDescriptor(self, ) -> javawrappers.org.opengis.feature.type.GeometryDescriptor: ...


