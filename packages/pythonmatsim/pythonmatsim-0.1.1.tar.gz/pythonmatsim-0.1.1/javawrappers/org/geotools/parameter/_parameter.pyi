################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.org.geotools.parameter
import javawrappers.java.util
import javawrappers.java.util.stream
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.referencing
import javawrappers.javax.media.jai
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.geotools.resources
import javawrappers.org.opengis.metadata.citation
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class FloatParameter:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, arg1: Union[float, JDouble], ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def doubleValue(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[float, JDouble]: ...
	@overload
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def stringValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def intValueList(self, ) -> JArray(Union[int, JInt], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], arg1: javawrappers.javax.measure.Unit, ) -> None: ...
	@overload
	def setValue(self, arg0: JArray(Union[float, JDouble], 1), arg1: javawrappers.javax.measure.Unit, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setValue(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.AbstractParameter: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.FloatParameter: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	def valueFile(self, ) -> javawrappers.java.net.URI: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def booleanValue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def doubleValueList(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def doubleValueList(self, arg0: javawrappers.javax.measure.Unit, ) -> JArray(Union[float, JDouble], 1): ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...


class DefaultParameterDescriptorGroup:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.parameter.GeneralParameterDescriptor, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.org.opengis.parameter.GeneralParameterDescriptor, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.parameter.GeneralParameterDescriptor, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(javawrappers.org.opengis.parameter.GeneralParameterDescriptor, 1), ): ...
	class AsList:
		def __init__(self, arg0: JArray(javawrappers.org.opengis.parameter.GeneralParameterDescriptor, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getElementType(self, ) -> javawrappers.java.lang.Class: ...
		def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
		def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
		@overload
		def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.geotools.resources.UnmodifiableArrayList: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getMaximumOccurs(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def descriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getMinimumOccurs(self, ) -> Union[int, JInt]: ...
	def descriptors(self, ) -> javawrappers.java.util.List: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getElementType(self, ) -> javawrappers.java.lang.Class: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.geotools.resources.UnmodifiableArrayList: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class AbstractParameterDescriptor:
	def getMaximumOccurs(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getMinimumOccurs(self, ) -> Union[int, JInt]: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def createValue(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...


class Parameter:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, arg1: javawrappers.java.lang.Object, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def doubleValue(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[float, JDouble]: ...
	@overload
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def ensureValidValue(arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def stringValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def intValueList(self, ) -> JArray(Union[int, JInt], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setValue(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], arg1: javawrappers.javax.measure.Unit, ) -> None: ...
	@overload
	def setValue(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: JArray(Union[float, JDouble], 1), arg1: javawrappers.javax.measure.Unit, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.Parameter: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.AbstractParameter: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	def valueFile(self, ) -> javawrappers.java.net.URI: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.geotools.parameter.Parameter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.org.opengis.util.CodeList, ) -> javawrappers.org.geotools.parameter.Parameter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: javawrappers.javax.measure.Unit, ) -> javawrappers.org.geotools.parameter.Parameter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def booleanValue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def doubleValueList(self, arg0: javawrappers.javax.measure.Unit, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def doubleValueList(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...


class MatrixParameterDescriptors:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.parameter.ParameterDescriptor, 1), arg2: javawrappers.java.lang.String, arg3: Union[string, JString], ): ...
	def getMaximumOccurs(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def descriptor(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	@overload
	def descriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def notify(self, ) -> None: ...
	def getMinimumOccurs(self, ) -> Union[int, JInt]: ...
	def descriptors(self, ) -> javawrappers.java.util.List: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getMatrix(self, arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...


class ParameterWriter:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Writer, ): ...
	def summary(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.Set, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...


class AbstractParameter:
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.AbstractParameter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Parameters:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def cast(arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	@overload
	@staticmethod
	def cast(arg0: javawrappers.org.opengis.parameter.ParameterValue, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def search(arg0: javawrappers.org.opengis.parameter.GeneralParameterValue, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isValid(arg0: javawrappers.org.opengis.parameter.ParameterValue, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toNameValueMap(arg0: javawrappers.org.opengis.parameter.GeneralParameterValue, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def copy(arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, arg1: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def ensureSet(arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, arg1: javawrappers.java.lang.String, arg2: Union[float, JDouble], arg3: javawrappers.javax.measure.Unit, arg4: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...


class MatrixParameters:
	def __init__(self, arg0: javawrappers.org.geotools.parameter.MatrixParameterDescriptors, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def getMaximumOccurs(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.List: ...
	def descriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def notify(self, ) -> None: ...
	def getMinimumOccurs(self, ) -> Union[int, JInt]: ...
	def descriptors(self, ) -> javawrappers.java.util.List: ...
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def parameter(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	@overload
	def parameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def setMatrix(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> None: ...
	def addGroup(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def groups(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.MatrixParameters: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.ParameterGroup: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.AbstractParameter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...


class ImagingParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.javax.media.jai.ParameterList, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.parameter.ImagingParameterDescriptors, ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.List: ...
	def groups(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def parameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.ImagingParameters: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.AbstractParameter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addGroup(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...


class ImagingParameterDescriptors:
	@overload
	def __init__(self, arg0: javawrappers.javax.media.jai.RegistryElementDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.media.jai.RegistryElementDescriptor, arg1: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.javax.media.jai.RegistryElementDescriptor, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.javax.media.jai.RegistryElementDescriptor, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.Map, arg4: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.javax.media.jai.ParameterListDescriptor, ): ...
	def getMaximumOccurs(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def descriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def notify(self, ) -> None: ...
	def getMinimumOccurs(self, ) -> Union[int, JInt]: ...
	def descriptors(self, ) -> javawrappers.java.util.List: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def properties(arg0: javawrappers.javax.media.jai.RegistryElementDescriptor, ) -> javawrappers.java.util.Map: ...


class ParameterGroup:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.parameter.GeneralParameterValue, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, arg1: JArray(javawrappers.org.opengis.parameter.GeneralParameterValue, 1), ): ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterDescriptor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.List: ...
	def groups(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def parameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.AbstractParameter: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.parameter.ParameterGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addGroup(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...


class DefaultParameterDescriptor:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.lang.Class, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Comparable, arg5: javawrappers.java.lang.Comparable, arg6: javawrappers.javax.measure.Unit, arg7: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: JArray(javawrappers.java.lang.Object, 1), arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Comparable, arg6: javawrappers.java.lang.Comparable, arg7: javawrappers.javax.measure.Unit, arg8: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.parameter.ParameterDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Object, ): ...
	def getValidValues(self, ) -> javawrappers.java.util.Set: ...
	def getMaximumOccurs(self, ) -> Union[int, JInt]: ...
	def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDefaultValue(self, ) -> javawrappers.java.lang.Object: ...
	def getMinimumOccurs(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getMaximumValue(self, ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.GeneralParameterValue: ...
	@overload
	def createValue(self, ) -> javawrappers.org.opengis.parameter.ParameterValue: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.org.geotools.parameter.DefaultParameterDescriptor: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], ) -> javawrappers.org.geotools.parameter.DefaultParameterDescriptor: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.javax.measure.Unit, ) -> javawrappers.org.geotools.parameter.DefaultParameterDescriptor: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.javax.measure.Unit, arg5: Union[int, JBoolean], ) -> javawrappers.org.geotools.parameter.DefaultParameterDescriptor: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.CharSequence, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Object, arg4: Union[int, JBoolean], ) -> javawrappers.org.geotools.parameter.DefaultParameterDescriptor: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getMinimumValue(self, ) -> javawrappers.java.lang.Comparable: ...


