################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.util.logging
import javawrappers.java.util
import javawrappers.org.opengis.referencing.operation
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.org.opengis.referencing.datum
import javawrappers.org.opengis.metadata.extent
import javawrappers.org.opengis.referencing.cs
import javawrappers.java.lang.reflect
import javawrappers.org.w3c.dom
import javawrappers.java.awt.geom
import javawrappers.org.opengis.geometry
import javawrappers.org.geotools.referencing.wkt
import javawrappers.org.opengis.referencing.crs
import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.geotools.resources
import javawrappers.java.awt.event
import javawrappers.javax.swing.tree
import javawrappers.java.util.function
import javawrappers.org.geotools.metadata.iso.extent
import javawrappers.javax.swing

from jpype.types import *
from typing import Union

from typing import overload

class NIOUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def allocate(arg0: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setMaxCacheSize(arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def returnToCache(arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isDirectBuffersEnabled() -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setDirectBuffersEnabled(arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def clean(arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def clean(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class CRSUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def dimensionColinearWith(arg0: javawrappers.org.opengis.referencing.cs.CoordinateSystem, arg1: javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis, ) -> Union[int, JInt]: ...
	@staticmethod
	def getSubCRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@staticmethod
	def getDimensionOf(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getStandardGeographicCRS2D(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	@staticmethod
	def getHeadGeoEllipsoid(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@staticmethod
	def getDatum(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def changeDimensionInName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getCRS2D(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@staticmethod
	def toWGS84String(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getUnit(arg0: javawrappers.org.opengis.referencing.cs.CoordinateSystem, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def deltaTransform(arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.opengis.geometry.DirectPosition, arg2: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	@staticmethod
	def deltaTransform(arg0: javawrappers.org.opengis.referencing.operation.MathTransform2D, arg1: javawrappers.java.awt.geom.Point2D, arg2: javawrappers.java.awt.geom.Point2D, arg3: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...


class IndexedResourceCompiler:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.io.File, arg2: JArray(javawrappers.java.lang.Class, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class CharUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toNormalScript(arg0: Union[string, JString], ) -> Union[string, JString]: ...
	@staticmethod
	def isSubScript(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isSuperScript(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toSubScript(arg0: Union[string, JString], ) -> Union[string, JString]: ...
	@staticmethod
	def toSuperScript(arg0: Union[string, JString], ) -> Union[string, JString]: ...


class BoundingBoxes:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.org.opengis.metadata.extent.GeographicBoundingBox, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def copy(arg0: javawrappers.org.opengis.geometry.Envelope, arg1: javawrappers.org.geotools.metadata.iso.extent.GeographicBoundingBoxImpl, ) -> None: ...
	def notify(self, ) -> None: ...


class Arguments:
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getReader(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.io.Reader: ...
	@staticmethod
	def getPrintWriter(arg0: javawrappers.java.io.PrintStream, ) -> javawrappers.java.io.PrintWriter: ...
	def notifyAll(self, ) -> None: ...
	def printSummary(self, arg0: javawrappers.java.lang.Exception, ) -> None: ...
	def getOptionalString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getRequiredInteger(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getRequiredDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	@overload
	def getRemainingArguments(self, arg0: Union[int, JInt], ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getRemainingArguments(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getRequiredString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOptionalBoolean(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Boolean: ...
	def getOptionalInteger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Integer: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getWriter(arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.java.io.Writer: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOptionalDouble(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Double: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRequiredBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getFlag(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class X364:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ClassChanger:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toPrimitive(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toWrapper(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def cast(arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def getFinestClass(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getFinestClass(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def toComparable(arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Comparable: ...
	@staticmethod
	def getTransformedClass(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getWidestClass(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getWidestClass(arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toNumber(arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def register(arg0: javawrappers.org.geotools.resources.ClassChanger, ) -> None: ...


class LazySet:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Iterator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.stream.Stream, ): ...
	class Iter:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class JDBC:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def loadDriver(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.logging.LogRecord: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XArray:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def intersects(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasNaN(arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasNaN(arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[int, JBoolean], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JBoolean], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JShort], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: JArray(Union[long, JLong], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[int, JBoolean], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def insert(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def containsIgnoreCase(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[int, JBoolean], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	@staticmethod
	def remove(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def contains(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[int, JBoolean], 1), arg1: Union[int, JInt], ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def resize(arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def allEquals(arg0: JArray(Union[float, JFloat], 1), arg1: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def allEquals(arg0: JArray(Union[float, JDouble], 1), arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.util.Comparator, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSorted(arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isStrictlySorted(arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...


class Classes:
	@staticmethod
	def specializedClass(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getClass(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def boundOfParameterizedAttribute(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def boundOfParameterizedAttribute(arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def primitiveToWrapper(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getShortClassName(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isFloat(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getBitCount(arg0: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def sameInterfaces(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isInteger(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def commonClass(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getEnumConstant(arg0: javawrappers.java.lang.Class, ) -> JByte: ...
	@staticmethod
	def getShortName(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrapperToPrimitive(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class Formattable:
	def formatWKT(self, arg0: javawrappers.org.geotools.referencing.wkt.Formatter, ) -> javawrappers.java.lang.String: ...


class Java6:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def consoleReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def consoleWriter() -> javawrappers.java.io.PrintWriter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def binarySearch(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class IndexedResourceBundle:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	@overload
	def getLogRecord(self, arg0: javawrappers.java.util.logging.Level, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.util.logging.LogRecord: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getMenuLabel(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def format(arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def list(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class OptionalDependencies:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def xmlToSwing(arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.javax.swing.tree.MutableTreeNode: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createTreeNode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.javax.swing.tree.DefaultMutableTreeNode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.javax.swing.tree.TreeNode, arg1: javawrappers.java.lang.Appendable, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.javax.swing.tree.TreeModel, arg1: javawrappers.java.lang.Appendable, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def show(arg0: javawrappers.javax.swing.tree.TreeNode, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def show(arg0: javawrappers.javax.swing.tree.TreeModel, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.javax.swing.tree.TreeNode, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.javax.swing.tree.TreeModel, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def copy(arg0: javawrappers.javax.swing.tree.TreeNode, ) -> javawrappers.javax.swing.tree.MutableTreeNode: ...
	def notify(self, ) -> None: ...


class XMath:
	@overload
	@staticmethod
	def next(arg0: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	@staticmethod
	def next(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def isReal(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def previous(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def previous(arg0: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def log10(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def pow10(arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def pow10(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def primitiveToWrapper(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getBitCount(arg0: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def rool(arg0: javawrappers.java.lang.Class, arg1: Union[float, JDouble], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def fixRoundingError(arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@staticmethod
	def isInteger(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def round(arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def hypot(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def toNaN(arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def sgn(arg0: JByte, ) -> JByte: ...
	@overload
	@staticmethod
	def sgn(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def countFractionDigits(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...


class UnmodifiableArrayList:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getElementType(self, ) -> javawrappers.java.lang.Class: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.geotools.resources.UnmodifiableArrayList: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class GraphicsUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def printStackTrace(arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def paintStackTrace(arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.Rectangle, arg2: javawrappers.java.lang.Throwable, ) -> None: ...


class SwingUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def showConfirmDialog(arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setTitle(arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def invokeAndWait(arg0: javawrappers.java.lang.Runnable, ) -> None: ...
	@staticmethod
	def getMultilineLabelFor(arg0: javawrappers.javax.swing.JComponent, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.swing.JComponent: ...
	@staticmethod
	def showMessageDialog(arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getLocale(arg0: javawrappers.java.awt.Component, ) -> javawrappers.java.util.Locale: ...
	@staticmethod
	def toFrame(arg0: javawrappers.java.awt.Component, arg1: javawrappers.javax.swing.JComponent, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.event.WindowListener, ) -> javawrappers.java.awt.Component: ...
	@overload
	@staticmethod
	def showOptionDialog(arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.event.ActionListener, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def showOptionDialog(arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


