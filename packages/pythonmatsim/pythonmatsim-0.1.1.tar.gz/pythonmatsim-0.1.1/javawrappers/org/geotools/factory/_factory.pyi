################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.geotools.data
import javawrappers.org.opengis.referencing.operation
import javawrappers.java.util.stream
import javawrappers.org.geotools.factory
import javawrappers.javax.naming
import javawrappers.org.opengis.referencing.datum
import javawrappers.javax.imageio.spi
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.util
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.referencing.cs
import javawrappers.org.xml.sax
import javawrappers.org.opengis.metadata.citation
import javawrappers.org.geotools.styling
import javawrappers.org.geotools.util.logging
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.crs
import javawrappers.javax.swing.event
import javawrappers.org.geotools.feature
import javawrappers.java.awt
import javawrappers.org.opengis.geometry.primitive
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.util.jar
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class FactoryIteratorProvider:
	def iterator(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Iterator: ...


class RegistrableFactory:
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class FactoryRegistryException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AbstractFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def notify(self, ) -> None: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class RecursiveSearchException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FactoryFinder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def mergeSystemHints(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.factory.Hints: ...
	def notify(self, ) -> None: ...


class Factory:
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...


class OptionalFactory:
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...


class BasicFactories:
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDatumFactory(self, ) -> javawrappers.org.opengis.referencing.datum.DatumFactory: ...
	def getFilterFactory(self, ) -> javawrappers.org.opengis.filter.FilterFactory: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...
	def getCRSFactory(self, ) -> javawrappers.org.opengis.referencing.crs.CRSFactory: ...
	def getNameFactory(self, ) -> javawrappers.org.opengis.util.NameFactory: ...
	def notifyAll(self, ) -> None: ...
	def getCRSAuthorityFactory(self, ) -> javawrappers.org.opengis.referencing.crs.CRSAuthorityFactory: ...
	def getGeometryFactory(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.coordinate.GeometryFactory: ...
	@staticmethod
	def getDefault() -> javawrappers.org.geotools.factory.BasicFactories: ...
	def getCoordinateOperationFactory(self, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperationFactory: ...
	def getCSFactory(self, ) -> javawrappers.org.opengis.referencing.cs.CSFactory: ...
	def notify(self, ) -> None: ...
	def getDatumAuthorityFactory(self, ) -> javawrappers.org.opengis.referencing.datum.DatumAuthorityFactory: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFeatureTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...
	def getPrimitiveFactory(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.primitive.PrimitiveFactory: ...
	def getCSAuthorityFactory(self, ) -> javawrappers.org.opengis.referencing.cs.CSAuthorityFactory: ...
	def getCoordinateOperationAuthorityFactory(self, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperationAuthorityFactory: ...
	def getCitationFactory(self, ) -> javawrappers.org.opengis.metadata.citation.CitationFactory: ...


class GeoTools:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def addFactoryIteratorProvider(arg0: javawrappers.org.geotools.factory.FactoryIteratorProvider, ) -> None: ...
	@staticmethod
	def getGeoToolsJarInfo() -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getManifest(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.jar.Manifest: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def clearInitialContext() -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def addChangeListener(arg0: javawrappers.javax.swing.event.ChangeListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getInitialContext(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.javax.naming.InitialContext: ...
	@staticmethod
	def getBuildTimestamp() -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getVersion() -> javawrappers.org.geotools.util.Version: ...
	@overload
	@staticmethod
	def getVersion(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.util.Version: ...
	@overload
	@staticmethod
	def init() -> None: ...
	@overload
	@staticmethod
	def init(arg0: javawrappers.org.geotools.factory.Hints, ) -> None: ...
	@overload
	@staticmethod
	def init(arg0: javawrappers.javax.naming.InitialContext, ) -> None: ...
	@staticmethod
	def getEnvironmentInfo() -> javawrappers.java.lang.String: ...
	@staticmethod
	def addClassLoader(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def setLoggerFactory(self, arg0: javawrappers.org.geotools.util.logging.LoggerFactory, ) -> None: ...
	@staticmethod
	def getDefaultHints() -> javawrappers.org.geotools.factory.Hints: ...
	@staticmethod
	def removeFactoryIteratorProvider(arg0: javawrappers.org.geotools.factory.FactoryIteratorProvider, ) -> None: ...
	@overload
	@staticmethod
	def fixName(arg0: javawrappers.javax.naming.Context, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def fixName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getBuildProperties() -> javawrappers.java.util.Properties: ...
	@staticmethod
	def getAboutInfo() -> javawrappers.java.lang.String: ...
	@staticmethod
	def getEntityResolver(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.xml.sax.EntityResolver: ...
	@staticmethod
	def removeChangeListener(arg0: javawrappers.javax.swing.event.ChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def addDefaultHints(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.factory.Hints: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fireConfigurationChanged() -> None: ...
	@staticmethod
	def getBuildRevision() -> javawrappers.java.lang.String: ...


class FactoryNotFoundException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Hints:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints.Key, arg3: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints.Key, arg3: javawrappers.java.lang.Object, *arg4: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.RenderingHints, ): ...
	class ConfigurationMetadataKey:
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def get(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.factory.Hints.ConfigurationMetadataKey: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DataSourceKey:
		def __init__(self, ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class OptionKey:
		def __init__(self, *arg0: javawrappers.java.lang.String, ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getOptions(self, ) -> javawrappers.java.util.Set: ...
		def notify(self, ) -> None: ...


	class DoubleKey:
		def __init__(self, arg0: Union[float, JDouble], ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def toValue(self, arg0: javawrappers.org.geotools.factory.Hints, ) -> Union[float, JDouble]: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDefault(self, ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	class IntegerKey:
		def __init__(self, arg0: Union[int, JInt], ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def toValue(self, arg0: javawrappers.org.geotools.factory.Hints, ) -> Union[int, JInt]: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDefault(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class FileKey:
		def __init__(self, arg0: Union[int, JBoolean], ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ClassKey:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Key:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
		def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getValueClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toValue(self, arg0: javawrappers.org.geotools.factory.Hints, ) -> Union[float, JDouble]: ...
	@overload
	def toValue(self, arg0: javawrappers.org.geotools.factory.Hints, ) -> Union[int, JInt]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompatibleValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.factory.Hints.ConfigurationMetadataKey: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def add(self, arg0: javawrappers.java.awt.RenderingHints, ) -> None: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@staticmethod
	def removeSystemDefault(arg0: javawrappers.java.awt.RenderingHints.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getDefault(self, ) -> Union[int, JInt]: ...
	@overload
	def getDefault(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def scanSystemProperties() -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.factory.Hints: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def putSystemDefault(arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOptions(self, ) -> javawrappers.java.util.Set: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getSystemDefault(arg0: javawrappers.java.awt.RenderingHints.Key, ) -> javawrappers.java.lang.Object: ...


class BufferedFactory:
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...


class CommonFactoryFinder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def getFilterFactory() -> javawrappers.org.opengis.filter.FilterFactory: ...
	@overload
	@staticmethod
	def getFilterFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.filter.FilterFactory: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getFunctions(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getFeatureCollectionsSet(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getFeatureLockFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.data.FeatureLockFactory: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def scanForPlugins() -> None: ...
	@staticmethod
	def getStyleFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getFilterFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getFeatureFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.feature.FeatureFactory: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getFunctionFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def getFilterFactory2(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.filter.FilterFactory2: ...
	@overload
	@staticmethod
	def getFilterFactory2() -> javawrappers.org.opengis.filter.FilterFactory2: ...
	@staticmethod
	def reset() -> None: ...
	@staticmethod
	def getFeatureLockFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getFeatureTypeFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...
	@staticmethod
	def mergeSystemHints(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.factory.Hints: ...
	@staticmethod
	def getFileDataStoreFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def getFeatureCollections(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.feature.FeatureCollections: ...
	@overload
	@staticmethod
	def getFeatureCollections() -> javawrappers.org.geotools.feature.FeatureCollections: ...
	@overload
	@staticmethod
	def getStyleFactory() -> javawrappers.org.geotools.styling.StyleFactory: ...
	@overload
	@staticmethod
	def getStyleFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.styling.StyleFactory: ...


class FactoryRegistry:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Class, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def deregisterAll(self, ) -> None: ...
	@overload
	def deregisterAll(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def unsetOrdering(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def deregisterServiceProviders(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def deregisterFactories(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def deregisterFactories(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	@staticmethod
	def lookupProviders(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.Iterator: ...
	@overload
	@staticmethod
	def lookupProviders(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def registerFactories(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def registerFactories(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	def getFactoryByClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getServiceProviders(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg2: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getServiceProviders(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg2: Union[int, JBoolean], ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getServiceProviders(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.Iterator: ...
	def streamCategories(self, ) -> javawrappers.java.util.stream.Stream: ...
	def notify(self, ) -> None: ...
	@overload
	def registerServiceProvider(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def registerServiceProvider(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def registerFactory(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def registerFactory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def deregisterFactory(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def deregisterFactory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getServiceProviderByClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getFactories(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.function.Predicate, arg2: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def getFactories(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def getFactories(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.function.Predicate, arg2: Union[int, JBoolean], ) -> javawrappers.java.util.stream.Stream: ...
	def getFactory(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.function.Predicate, arg2: javawrappers.org.geotools.factory.Hints, arg3: javawrappers.org.geotools.factory.Hints.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def deregisterServiceProvider(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def deregisterServiceProvider(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def getServiceProvider(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg2: javawrappers.org.geotools.factory.Hints, arg3: javawrappers.org.geotools.factory.Hints.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Comparator, ) -> Union[int, JBoolean]: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], arg2: javawrappers.java.util.function.Predicate, arg3: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], arg2: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg3: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, ) -> Union[int, JBoolean]: ...
	def registerServiceProviders(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def scanForPlugins(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassLoaders(self, ) -> javawrappers.java.util.Set: ...


class FactoryUsingVolatileDependencies:
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...


class FactoryCreator:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Class, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def deregisterAll(self, ) -> None: ...
	@overload
	def deregisterAll(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def unsetOrdering(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def deregisterServiceProviders(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def deregisterFactories(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def deregisterFactories(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	@staticmethod
	def lookupProviders(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.Iterator: ...
	@overload
	@staticmethod
	def lookupProviders(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def registerFactories(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def registerFactories(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	def getFactoryByClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getServiceProviders(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg2: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getServiceProviders(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg2: Union[int, JBoolean], ) -> javawrappers.java.util.Iterator: ...
	@overload
	def getServiceProviders(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.Iterator: ...
	def streamCategories(self, ) -> javawrappers.java.util.stream.Stream: ...
	def notify(self, ) -> None: ...
	@overload
	def registerServiceProvider(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def registerServiceProvider(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def registerFactory(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def registerFactory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def deregisterFactory(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def deregisterFactory(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getServiceProviderByClass(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getFactories(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.function.Predicate, arg2: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def getFactories(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def getFactories(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.function.Predicate, arg2: Union[int, JBoolean], ) -> javawrappers.java.util.stream.Stream: ...
	def getFactory(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.function.Predicate, arg2: javawrappers.org.geotools.factory.Hints, arg3: javawrappers.org.geotools.factory.Hints.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def deregisterServiceProvider(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def deregisterServiceProvider(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def getServiceProvider(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg2: javawrappers.org.geotools.factory.Hints, arg3: javawrappers.org.geotools.factory.Hints.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Comparator, ) -> Union[int, JBoolean]: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], arg2: javawrappers.java.util.function.Predicate, arg3: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def setOrdering(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], arg2: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, arg3: javawrappers.javax.imageio.spi.ServiceRegistry.Filter, ) -> Union[int, JBoolean]: ...
	def registerServiceProviders(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def scanForPlugins(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassLoaders(self, ) -> javawrappers.java.util.Set: ...


