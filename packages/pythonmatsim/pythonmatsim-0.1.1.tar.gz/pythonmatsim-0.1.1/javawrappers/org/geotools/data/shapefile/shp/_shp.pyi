################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.renderer
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.geotools.data.shapefile.shp
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.opengis.feature.type

from jpype.types import *
from typing import Union

from typing import overload

class ShapeType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isPolygonType(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isLineType(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isMultiPoint(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forID(arg0: Union[int, JInt], ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getShapeHandler(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeHandler: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isMultiPointType(self, ) -> Union[int, JBoolean]: ...
	def isPointType(self, ) -> Union[int, JBoolean]: ...


class ShapefileException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PointHandler:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getShapeType(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	def notify(self, ) -> None: ...


class ShapeHandler:
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def getLength(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getShapeType(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...


class PolygonHandler:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getShapeType(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	def notify(self, ) -> None: ...


class ShapefileWriter:
	def __init__(self, arg0: javawrappers.java.nio.channels.FileChannel, arg1: javawrappers.java.nio.channels.FileChannel, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def skipHeaders(self, ) -> None: ...
	def writeHeaders(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeGeometry(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def close(self, ) -> None: ...
	def write(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryCollection, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, ) -> None: ...
	def notify(self, ) -> None: ...


class ShapefileHeader:
	def __init__(self, ): ...
	def getVersion(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JBoolean], ) -> None: ...
	def getFileLength(self, ) -> Union[int, JInt]: ...
	def maxY(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def maxX(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def minY(self, ) -> Union[float, JDouble]: ...
	def minX(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ) -> None: ...
	def getShapeType(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...


class MultiLineHandler:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getShapeType(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	def notify(self, ) -> None: ...


class JTSUtilities:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def convertToCollection(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def guessCoorinateDims(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def makeGoodShapePolygon(arg0: javawrappers.org.locationtech.jts.geom.Polygon, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def zMinMax(arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def zMinMax(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> JArray(Union[float, JDouble], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def makeGoodShapeMultiPolygon(arg0: javawrappers.org.locationtech.jts.geom.MultiPolygon, ) -> javawrappers.org.locationtech.jts.geom.MultiPolygon: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def findBestGeometryType(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getShapeType(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[int, JInt], ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	@overload
	@staticmethod
	def getShapeType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	@overload
	@staticmethod
	def getShapeType(arg0: javawrappers.org.opengis.feature.type.GeometryDescriptor, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	@staticmethod
	def findBestGeometryClass(arg0: javawrappers.org.geotools.data.shapefile.shp.ShapeType, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def reverseRing(arg0: javawrappers.org.locationtech.jts.geom.LinearRing, ) -> javawrappers.org.locationtech.jts.geom.LinearRing: ...


class IndexFile:
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getContentLength(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getOffsetInBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getHeader(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapefileHeader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRecordCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def id(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...


class ShapefileReader:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.org.locationtech.jts.geom.GeometryFactory, arg4: Union[int, JBoolean], ): ...
	class Record:
		def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapefileReader, ): ...
		@overload
		def getSimplifiedShape(self, arg0: javawrappers.org.geotools.renderer.ScreenMap, ) -> javawrappers.java.lang.Object: ...
		@overload
		def getSimplifiedShape(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def envelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
		def offset(self, ) -> Union[int, JInt]: ...
		def shape(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setHandler(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapeHandler, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def transferTo(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapefileWriter, arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapefileHeader: ...
	@overload
	def getSimplifiedShape(self, arg0: javawrappers.org.geotools.renderer.ScreenMap, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSimplifiedShape(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def id(self, ) -> javawrappers.java.lang.String: ...
	def shapeAt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def close(self, ) -> None: ...
	def getCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def offset(self, ) -> Union[int, JInt]: ...
	def shape(self, ) -> javawrappers.java.lang.Object: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fill(arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.channels.ReadableByteChannel, ) -> Union[int, JInt]: ...
	def envelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def goTo(self, arg0: Union[int, JInt], ) -> None: ...
	def disableShxUsage(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def recordAt(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.data.shapefile.shp.ShapefileReader.Record: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setFlatGeometry(self, arg0: Union[int, JBoolean], ) -> None: ...
	def nextRecord(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapefileReader.Record: ...
	def supportsRandomAccess(self, ) -> Union[int, JBoolean]: ...


class MultiPointHandler:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.org.geotools.data.shapefile.shp.ShapeType, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getShapeType(self, ) -> javawrappers.org.geotools.data.shapefile.shp.ShapeType: ...
	def notify(self, ) -> None: ...


