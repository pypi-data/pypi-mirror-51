################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.data.simple
import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.util
import javawrappers.org.opengis.filter.sort
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type

from jpype.types import *
from typing import Union

from typing import overload

class SimpleFeatureLocking:
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...


class SimpleFeatureCollection:
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...


class DelegateSimpleFeatureReader:
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class SimpleFeatureIterator:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class FilteringSimpleFeatureReader:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureReader, arg1: javawrappers.org.opengis.filter.Filter, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class SimpleFeatureWriter:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def remove(self, ) -> None: ...


class SimpleFeatureReader:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class DelegatingSimpleFeatureWriter:
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getDelegate(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureWriter: ...
	@overload
	def getDelegate(self, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def remove(self, ) -> None: ...


class EmptySimpleFeatureReader:
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class SimpleFeatureStore:
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...


class SimpleFeatureSource:
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...


