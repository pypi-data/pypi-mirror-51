################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.data.simple
import javawrappers.org.opengis.filter
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.feature.simple
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.java.io
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type

from jpype.types import *
from typing import Union

from typing import overload

class DirectoryFeatureLocking:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureLocking, ): ...
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def unwrap(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def unwrap(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureStore: ...
	@overload
	def unwrap(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureLocking: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...


class FileStoreFactory:
	def getDataStore(self, arg0: javawrappers.java.io.File, ) -> javawrappers.org.geotools.data.DataStore: ...


class DirectoryFeatureStore:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureStore, ): ...
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def unwrap(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureStore: ...
	@overload
	def unwrap(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...


class DirectoryDataStore:
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.geotools.data.directory.FileStoreFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getDataStore(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.DataStore: ...
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...


class DirectoryLockingManager:
	def __init__(self, arg0: javawrappers.org.geotools.data.directory.DirectoryTypeCache, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def lockFeatureID(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, arg3: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def release(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def unLockFeatureID(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.geotools.data.Transaction, arg3: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...
	def exists(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def refresh(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DirectoryFeatureSource:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def notifyAll(self, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def unwrap(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...


class DataStoreSoftReference:
	def __init__(self, arg0: javawrappers.org.geotools.data.DataStore, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...


