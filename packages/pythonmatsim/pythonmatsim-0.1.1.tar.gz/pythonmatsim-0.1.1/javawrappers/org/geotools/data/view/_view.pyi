################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.data.simple
import javawrappers.org.opengis.filter
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.feature.simple
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type

from jpype.types import *
from typing import Union

from typing import overload

class DefaultView:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, arg1: javawrappers.org.geotools.data.Query, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def notifyAll(self, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	@staticmethod
	def create(arg0: javawrappers.org.geotools.data.simple.SimpleFeatureSource, arg1: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...


