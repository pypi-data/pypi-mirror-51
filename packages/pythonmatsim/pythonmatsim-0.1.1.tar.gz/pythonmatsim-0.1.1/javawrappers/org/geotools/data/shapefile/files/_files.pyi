################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.geotools.data.shapefile.files
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.java.nio.file
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class Result:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FileWriter:
	def id(self, ) -> javawrappers.java.lang.String: ...


class StreamLogging:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def open(self, ) -> None: ...


class ReadableByteChannelDecorator:
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg2: javawrappers.java.net.URL, arg3: javawrappers.org.geotools.data.shapefile.files.FileReader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class FileReader:
	def id(self, ) -> javawrappers.java.lang.String: ...


class ShpFileType:
	SHP: ShpFileType = ...
	DBF: ShpFileType = ...
	SHX: ShpFileType = ...
	PRJ: ShpFileType = ...
	QIX: ShpFileType = ...
	FIX: ShpFileType = ...
	SHP_XML: ShpFileType = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def toBase(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toBase(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.lang.String: ...
	@overload
	def toBase(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.shapefile.files.ShpFileType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.data.shapefile.files.ShpFileType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class StorageFile:
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg1: javawrappers.java.io.File, arg2: javawrappers.org.geotools.data.shapefile.files.ShpFileType, ): ...
	def replaceOriginal(self, ) -> None: ...
	def getWriteChannel(self, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def replaceOriginals(*arg0: javawrappers.org.geotools.data.shapefile.files.StorageFile, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def id(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.geotools.data.shapefile.files.StorageFile, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getFile(self, ) -> javawrappers.java.io.File: ...
	def notify(self, ) -> None: ...


class BasicShpFileWriter:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def id(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class WritableByteChannelDecorator:
	def __init__(self, arg0: javawrappers.java.nio.channels.WritableByteChannel, arg1: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg2: javawrappers.java.net.URL, arg3: javawrappers.org.geotools.data.shapefile.files.FileWriter, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class FileChannelDecorator:
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.FileChannel, arg1: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg2: javawrappers.java.net.URL, arg3: javawrappers.org.geotools.data.shapefile.files.FileWriter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.nio.channels.FileChannel, arg1: javawrappers.org.geotools.data.shapefile.files.ShpFiles, arg2: javawrappers.java.net.URL, arg3: javawrappers.org.geotools.data.shapefile.files.FileReader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	def transferFrom(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def transferTo(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: javawrappers.java.nio.channels.WritableByteChannel, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	def tryLock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	@overload
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.FileChannel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def lock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def force(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def position(self, ) -> Union[long, JLong]: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	def map(self, arg0: javawrappers.java.nio.channels.FileChannel.MapMode, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.java.nio.MappedByteBuffer: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.channels.FileChannel: ...


class ShpFiles:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class State:
		NOT_EXIST: ShpFiles.State = ...
		LOCKED: ShpFiles.State = ...
		GOOD: ShpFiles.State = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.shapefile.files.ShpFiles.State: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.data.shapefile.files.ShpFiles.State, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getWriteChannel(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> javawrappers.java.nio.channels.WritableByteChannel: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def tryAcquireRead(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> javawrappers.org.geotools.data.shapefile.files.Result: ...
	def acquireWrite(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.data.shapefile.files.ShpFiles.State, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def isWritable(self, ) -> Union[int, JBoolean]: ...
	def delete(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def unlockWrite(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> None: ...
	@overload
	def unlockWrite(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def tryAcquireWrite(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> javawrappers.org.geotools.data.shapefile.files.Result: ...
	def acquireRead(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> javawrappers.java.net.URL: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, ) -> javawrappers.java.lang.String: ...
	def getReadChannel(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> javawrappers.java.nio.channels.ReadableByteChannel: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	def getStorageFile(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, ) -> javawrappers.org.geotools.data.shapefile.files.StorageFile: ...
	def logCurrentLockers(self, arg0: javawrappers.java.util.logging.Level, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.shapefile.files.ShpFiles.State: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def acquireReadFile(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> javawrappers.java.io.File: ...
	def acquireWriteFile(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> javawrappers.java.io.File: ...
	def getInputStream(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> javawrappers.java.io.InputStream: ...
	def isMemoryMapCacheEnabled(self, ) -> Union[int, JBoolean]: ...
	def isLocal(self, ) -> Union[int, JBoolean]: ...
	def numberOfLocks(self, ) -> Union[int, JInt]: ...
	def getFileNames(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setMemoryMapCacheEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def exists(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getOutputStream(self, arg0: javawrappers.org.geotools.data.shapefile.files.ShpFileType, arg1: javawrappers.org.geotools.data.shapefile.files.FileWriter, ) -> javawrappers.java.io.OutputStream: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	@overload
	def unlockRead(self, arg0: javawrappers.java.io.File, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> None: ...
	@overload
	def unlockRead(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.geotools.data.shapefile.files.FileReader, ) -> None: ...


