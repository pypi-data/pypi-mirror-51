################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.geotools.data
import javawrappers.org.opengis.util
import javawrappers.java.util.stream
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.feature
import javawrappers.org.opengis.filter.sort
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class CollectionFeatureSource:
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ): ...
	class SubCollection:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def getID(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
		@overload
		def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
		def notify(self, ) -> None: ...
		def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
		@overload
		def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
		@overload
		def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
		@overload
		def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
		@overload
		def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
		@overload
		def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...


class DelegateFeatureReader:
	def __init__(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, arg1: javawrappers.org.geotools.feature.FeatureIterator, ): ...
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ListFeatureCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, arg1: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	class ListFeatureIterator:
		def __init__(self, arg0: javawrappers.org.geotools.data.collection.ListFeatureCollection, arg1: javawrappers.java.util.List, ): ...
		@overload
		def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
		@overload
		def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def close(self, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class SpatialIndexFeatureSource:
	def __init__(self, arg0: javawrappers.org.geotools.data.collection.SpatialIndexFeatureCollection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	def notifyAll(self, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataStore: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...


class SpatialIndexFeatureCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def purge(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def close(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def close(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def addListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def removeListener(self, arg0: javawrappers.org.geotools.feature.CollectionListener, ) -> None: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TreeSetFeatureCollection:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def reader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def purge(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def close(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def close(self, arg0: javawrappers.org.geotools.feature.FeatureIterator, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def collection(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fids(self, ) -> javawrappers.java.util.Set: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


