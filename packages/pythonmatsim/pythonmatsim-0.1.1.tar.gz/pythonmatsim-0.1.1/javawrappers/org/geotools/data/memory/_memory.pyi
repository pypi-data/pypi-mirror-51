################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.opengis.filter.capability
import javawrappers.org.opengis.util
import javawrappers.java.util.stream
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.geotools.feature
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.feature
import javawrappers.org.geotools.data.store
import javawrappers.org.opengis.filter.sort
import javawrappers.java.util.function
import javawrappers.org.geotools.data.memory
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class MemoryDataStore:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.FeatureReader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory, ) -> None: ...
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def notifyAll(self, ) -> None: ...
	def getDataStoreFactory(self, ) -> javawrappers.org.geotools.data.DataStoreFactorySpi: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def setFeatureTypeFactory(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ) -> None: ...
	def addFeature(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def notify(self, ) -> None: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEntry(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFilterFactory(self, ) -> javawrappers.org.opengis.filter.FilterFactory: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	@overload
	def addFeatures(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, ) -> None: ...
	@overload
	def addFeatures(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def addFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	@overload
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	@overload
	def addFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.simple.SimpleFeature, 1), ) -> None: ...
	def setFeatureFactory(self, arg0: javawrappers.org.opengis.feature.FeatureFactory, ) -> None: ...
	def setDataStoreFactory(self, arg0: javawrappers.org.geotools.data.DataStoreFactorySpi, ) -> None: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	def getGeometryFactory(self, ) -> javawrappers.org.locationtech.jts.geom.GeometryFactory: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	def getLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def getFeatureFactory(self, ) -> javawrappers.org.opengis.feature.FeatureFactory: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setGeometryFactory(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFeatureTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...


class MemoryEntry:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getMemory(self, ) -> javawrappers.java.util.Map: ...
	def getState(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	def clearTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def dispose(self, ) -> None: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.store.ContentDataStore: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...


class MemoryFeatureReader:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentState, arg1: javawrappers.org.geotools.data.Query, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class MemoryFeatureWriter:
	def __init__(self, arg0: javawrappers.org.geotools.data.memory.MemoryState, arg1: javawrappers.org.geotools.data.Query, ): ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class MemoryFeatureSource:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentEntry, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentEntry, arg1: javawrappers.org.geotools.data.Query, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def isView(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	@overload
	def getEntry(self, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	@overload
	def getEntry(self, ) -> javawrappers.org.geotools.data.memory.MemoryEntry: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def getView(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getView(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def getReader(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def accepts(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.opengis.feature.FeatureVisitor, arg2: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getState(self, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	@overload
	def getState(self, ) -> javawrappers.org.geotools.data.memory.MemoryState: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.memory.MemoryDataStore: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.store.ContentDataStore: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...


class MemoryState:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.memory.MemoryEntry, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.data.memory.MemoryState, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def fireFeatureUpdated(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.opengis.feature.Feature, arg2: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ) -> None: ...
	def fireFeatureAdded(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	def setFeatureType(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def fireFeatureEvent(self, arg0: javawrappers.org.geotools.data.FeatureEvent, ) -> None: ...
	@overload
	def copy(self, ) -> javawrappers.org.geotools.data.memory.MemoryState: ...
	@overload
	def copy(self, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	@overload
	def getEntry(self, ) -> javawrappers.org.geotools.data.memory.MemoryEntry: ...
	@overload
	def getEntry(self, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	def close(self, ) -> None: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	def setCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def fireBatchFeatureEvent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def fireFeatureRemoved(self, arg0: javawrappers.org.geotools.data.FeatureSource, arg1: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def removeListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.geotools.geometry.jts.ReferencedEnvelope, ) -> None: ...
	def getBatchFeatureEvent(self, ) -> javawrappers.org.geotools.data.BatchFeatureEvent: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, ) -> Union[int, JBoolean]: ...


class MemoryFeatureCollection:
	def __init__(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
	class MemoryIterator:
		@overload
		def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.Feature: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def removeFeatureMember(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.feature.FeatureIterator: ...
	@overload
	def features(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureIterator: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def openIterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def openIterator(self, ) -> javawrappers.org.geotools.data.memory.MemoryFeatureCollection.MemoryIterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getFeatureMember(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def subCollection(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> Union[int, JBoolean]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def accepts(self, arg0: javawrappers.org.opengis.feature.FeatureVisitor, arg1: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def sort(self, arg0: javawrappers.org.opengis.filter.sort.SortBy, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class MemoryFeatureStore:
	def __init__(self, arg0: javawrappers.org.geotools.data.store.ContentEntry, arg1: javawrappers.org.geotools.data.Query, ): ...
	def setFeatures(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.AttributeDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.AttributeDescriptor, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.org.opengis.feature.type.Name, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def modifyFeatures(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	def isView(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	@overload
	def getBounds(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getQueryCapabilities(self, ) -> javawrappers.org.geotools.data.QueryCapabilities: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> None: ...
	@overload
	def unLockFeatures(self, ) -> None: ...
	@overload
	def unLockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> None: ...
	def getEntry(self, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def getView(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getView(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def getTransaction(self, ) -> javawrappers.org.geotools.data.Transaction: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ResourceInfo: ...
	@overload
	def addFeatures(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	@overload
	def addFeatures(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> javawrappers.java.util.List: ...
	@overload
	def getReader(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getReader(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def accepts(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.opengis.feature.FeatureVisitor, arg2: javawrappers.org.opengis.util.ProgressListener, ) -> None: ...
	def getSupportedHints(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[int, JInt]: ...
	@overload
	def lockFeatures(self, ) -> Union[int, JInt]: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getState(self, ) -> javawrappers.org.geotools.data.memory.MemoryState: ...
	@overload
	def getState(self, ) -> javawrappers.org.geotools.data.store.ContentState: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.store.ContentFeatureCollection: ...
	@overload
	def getFeatures(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.feature.FeatureCollection: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.geotools.data.Query, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: Union[int, JInt], ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getWriter(self, arg0: javawrappers.org.geotools.data.Query, arg1: Union[int, JInt], ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def addFeatureListener(self, arg0: javawrappers.org.geotools.data.FeatureListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def getDataStore(self, ) -> javawrappers.org.geotools.data.store.ContentDataStore: ...
	def setFeatureLock(self, arg0: javawrappers.org.geotools.data.FeatureLock, ) -> None: ...


class CollectionSource:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def setTransaction(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.org.opengis.feature.type.Name: ...
	def getCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def content(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def content(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def content(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: Union[int, JInt], ) -> javawrappers.java.util.Collection: ...
	@overload
	def content(self, arg0: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def describe(self, ) -> javawrappers.java.lang.Object: ...
	def getFilterCapabilities(self, ) -> javawrappers.org.opengis.filter.capability.FilterCapabilities: ...


