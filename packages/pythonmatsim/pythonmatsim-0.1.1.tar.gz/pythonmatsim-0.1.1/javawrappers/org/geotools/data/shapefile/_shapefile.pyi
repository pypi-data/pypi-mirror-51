################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.org.opengis.filter
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.org.opengis.referencing.crs
import javawrappers.java.nio.charset
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.opengis.feature
import javawrappers.org.geotools.data.store
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class ShapefileDumper:
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	class StoreWriter:
		def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.ShapefileDumper, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def nextWriter(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMaxShpSize(self, ) -> Union[long, JLong]: ...
	def setCharset(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setMaxDbfSize(self, arg0: Union[long, JLong], ) -> None: ...
	def getCharset(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def notify(self, ) -> None: ...
	def setMaxShpSize(self, arg0: Union[long, JLong], ) -> None: ...
	def getMaxDbfSize(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmptyShapefileAllowed(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dump(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureCollection, ) -> Union[int, JBoolean]: ...
	def setEmptyShapefileAllowed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def nextWriter(self, ) -> None: ...


class ShapefileDataStore:
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def setMemoryMapped(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def getFeatureReader(self, arg0: javawrappers.org.geotools.data.Query, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	@overload
	def getFeatureReader(self, ) -> javawrappers.org.geotools.data.FeatureReader: ...
	def getDataStoreFactory(self, ) -> javawrappers.org.geotools.data.DataStoreFactorySpi: ...
	@overload
	def getFeatureSource(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.FeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	@overload
	def getFeatureSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.store.ContentFeatureSource: ...
	def setIndexCreationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isIndexCreationEnabled(self, ) -> Union[int, JBoolean]: ...
	def setFidIndexed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTypeNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCount(self, arg0: javawrappers.org.geotools.data.Query, ) -> Union[long, JLong]: ...
	@overload
	def getFeatureWriterAppend(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriterAppend(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def getFilterFactory(self, ) -> javawrappers.org.opengis.filter.FilterFactory: ...
	def isIndexed(self, ) -> Union[int, JBoolean]: ...
	def getInfo(self, ) -> javawrappers.org.geotools.data.ServiceInfo: ...
	def setFeatureFactory(self, arg0: javawrappers.org.opengis.feature.FeatureFactory, ) -> None: ...
	def setDataStoreFactory(self, arg0: javawrappers.org.geotools.data.DataStoreFactorySpi, ) -> None: ...
	def getLockingManager(self, ) -> javawrappers.org.geotools.data.LockingManager: ...
	def getGeometryFactory(self, ) -> javawrappers.org.locationtech.jts.geom.GeometryFactory: ...
	def isMemoryMapped(self, ) -> Union[int, JBoolean]: ...
	def getLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def createSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def getFeatureFactory(self, ) -> javawrappers.org.opengis.feature.FeatureFactory: ...
	def getNamespaceURI(self, ) -> javawrappers.java.lang.String: ...
	def getFeatureTypeFactory(self, ) -> javawrappers.org.opengis.feature.type.FeatureTypeFactory: ...
	def dispose(self, ) -> None: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.org.opengis.filter.Filter, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.Filter, arg2: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	@overload
	def getFeatureWriter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.data.Transaction, ) -> javawrappers.org.geotools.data.FeatureWriter: ...
	def isFidIndexed(self, ) -> Union[int, JBoolean]: ...
	def setIndexed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isBufferCachingEnabled(self, ) -> Union[int, JBoolean]: ...
	def setCharset(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFilterFactory(self, arg0: javawrappers.org.opengis.filter.FilterFactory, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setFeatureTypeFactory(self, arg0: javawrappers.org.opengis.feature.type.FeatureTypeFactory, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, arg1: javawrappers.org.opengis.feature.type.FeatureType, ) -> None: ...
	@overload
	def updateSchema(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.feature.simple.SimpleFeatureType, ) -> None: ...
	def getNames(self, ) -> javawrappers.java.util.List: ...
	def getCharset(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def notify(self, ) -> None: ...
	def setBufferCachingEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getEntry(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.geotools.data.store.ContentEntry: ...
	def forceSchemaCRS(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> None: ...
	@overload
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.type.FeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.org.opengis.feature.type.Name, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	@overload
	def getSchema(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setGeometryFactory(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ShapefileDirectoryFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.FileDataStore: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def canProcess(self, arg0: javawrappers.java.net.URL, ) -> Union[int, JBoolean]: ...
	@overload
	def canProcess(self, arg0: javawrappers.java.util.Map, ) -> Union[int, JBoolean]: ...
	def getParametersInfo(self, ) -> JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1): ...
	def notifyAll(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.lang.String: ...
	def createNewDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	def getFileExtensions(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class ShapefileDataStoreFactory:
	def __init__(self, ): ...
	class ShpFileStoreFactory:
		def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.ShapefileDataStoreFactory, arg1: javawrappers.java.util.Map, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDataStore(self, arg0: javawrappers.java.io.File, ) -> javawrappers.org.geotools.data.DataStore: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.org.geotools.data.FileDataStore: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataAccess: ...
	@overload
	def createDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def canProcess(self, arg0: javawrappers.java.net.URL, ) -> Union[int, JBoolean]: ...
	@overload
	def canProcess(self, arg0: javawrappers.java.util.Map, ) -> Union[int, JBoolean]: ...
	def getParametersInfo(self, ) -> JArray(javawrappers.org.geotools.data.DataAccessFactory.Param, 1): ...
	def notifyAll(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getDataStore(self, arg0: javawrappers.java.io.File, ) -> javawrappers.org.geotools.data.DataStore: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.lang.String: ...
	def createNewDataStore(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.geotools.data.DataStore: ...
	def getFileExtensions(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class ShapefileSizeException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


