################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.data.shapefile.index
import javawrappers.org.geotools.data.shapefile.index.quadtree
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.geotools.data
import javawrappers.java.io
import javawrappers.org.geotools.data.shapefile.shp
import javawrappers.java.util.function
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class IndexStore:
	def load(self, arg0: javawrappers.org.geotools.data.shapefile.shp.IndexFile, arg1: Union[int, JBoolean], ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.QuadTree: ...
	def store(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.QuadTree, ) -> None: ...


class LazySearchIterator:
	def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.QuadTree, arg1: javawrappers.org.locationtech.jts.geom.Envelope, ): ...
	class Indices:
		def __init__(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.LazySearchIterator, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.org.geotools.data.shapefile.index.Data: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class Node:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumSubNodes(self, ) -> Union[int, JInt]: ...
	def getSubNode(self, arg0: Union[int, JInt], ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.Node: ...
	def notifyAll(self, ) -> None: ...
	def getShapesId(self, ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	@overload
	def setShapesId(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> None: ...
	@overload
	def setShapesId(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addShapeId(self, arg0: Union[int, JInt], ) -> None: ...
	def setChildrenVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addSubNode(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> None: ...
	def copy(self, ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.Node: ...
	def getShapeId(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def isChildrenVisited(self, ) -> Union[int, JBoolean]: ...
	def removeSubNode(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> Union[int, JBoolean]: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def clearSubNodes(self, ) -> None: ...
	def clean(self, ) -> None: ...
	def setBounds(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	def pack(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNumShapeIds(self, ) -> Union[int, JInt]: ...


class QuadTree:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Envelope, arg2: javawrappers.org.geotools.data.shapefile.shp.IndexFile, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.geotools.data.shapefile.shp.IndexFile, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.geom.Envelope, arg3: javawrappers.org.geotools.data.shapefile.shp.IndexFile, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaxDepth(self, arg0: Union[int, JInt], ) -> None: ...
	def registerIterator(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	@overload
	def insert(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.geom.Envelope, arg3: Union[int, JInt], ) -> None: ...
	def setRoot(self, arg0: javawrappers.org.geotools.data.shapefile.index.quadtree.Node, ) -> None: ...
	def getIndexfile(self, ) -> javawrappers.org.geotools.data.shapefile.shp.IndexFile: ...
	def getNumShapes(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def search(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> javawrappers.org.geotools.data.CloseableIterator: ...
	def trim(self, ) -> Union[int, JBoolean]: ...
	def setNumShapes(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRoot(self, ) -> javawrappers.org.geotools.data.shapefile.index.quadtree.Node: ...
	@overload
	def close(self, arg0: javawrappers.java.util.Iterator, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	def getMaxDepth(self, ) -> Union[int, JInt]: ...


class StoreException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


