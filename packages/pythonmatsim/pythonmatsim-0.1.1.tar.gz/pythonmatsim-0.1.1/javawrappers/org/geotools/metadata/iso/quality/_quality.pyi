################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.org.geotools.metadata
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.metadata.lineage
import javawrappers.org.opengis.util
import javawrappers.javax.swing.tree
import javawrappers.org.opengis.metadata.citation
import javawrappers.org.opengis.metadata.maintenance
import javawrappers.org.opengis.metadata
import javawrappers.org.opengis.metadata.quality
import javawrappers.org.opengis.metadata.extent

from jpype.types import *
from typing import Union

from typing import overload

class ConformanceResultImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.org.opengis.util.InternationalString, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.ConformanceResult, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def setSpecification(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def getSpecification(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def pass_(self, ) -> Union[int, JBoolean]: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def setExplanation(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExplanation(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPass(self, arg0: Union[int, JBoolean], ) -> None: ...


class ConceptualConsistencyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.ConceptualConsistency, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class NonQuantitativeAttributeAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.NonQuantitativeAttributeAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class GriddedDataPositionalAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.GriddedDataPositionalAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class QuantitativeAttributeAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.QuantitativeAttributeAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class ScopeImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.maintenance.ScopeCode, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Scope, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getExtent(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: javawrappers.org.opengis.metadata.maintenance.ScopeCode, ) -> None: ...
	def getLevel(self, ) -> javawrappers.org.opengis.metadata.maintenance.ScopeCode: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setLevelDescription(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setExtent(self, arg0: javawrappers.org.opengis.metadata.extent.Extent, ) -> None: ...
	def getLevelDescription(self, ) -> javawrappers.java.util.Collection: ...


class TemporalValidityImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.TemporalValidity, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class FormatConsistencyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.FormatConsistency, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class PositionalAccuracyImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Result, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.PositionalAccuracy, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class TemporalAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.TemporalAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class CompletenessOmissionImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.CompletenessOmission, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class ThematicClassificationCorrectnessImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.ThematicClassificationCorrectness, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class TopologicalConsistencyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.TopologicalConsistency, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class ThematicAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.ThematicAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class RelativeInternalPositionalAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.RelativeInternalPositionalAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class DomainConsistencyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.DomainConsistency, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class ElementImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Element, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Result, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class DataQualityImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.DataQuality, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Scope, ): ...
	def setLineage(self, arg0: javawrappers.org.opengis.metadata.lineage.Lineage, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def setReports(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReports(self, ) -> javawrappers.java.util.Collection: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def getLineage(self, ) -> javawrappers.org.opengis.metadata.lineage.Lineage: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setScope(self, arg0: javawrappers.org.opengis.metadata.quality.Scope, ) -> None: ...
	def getScope(self, ) -> javawrappers.org.opengis.metadata.quality.Scope: ...


class TemporalConsistencyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.TemporalConsistency, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class AbsoluteExternalPositionalAccuracyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Result, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.AbsoluteExternalPositionalAccuracy, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class ResultImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Result, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class QuantitativeResultImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.QuantitativeResult, ): ...
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), ): ...
	class SimpleRecord:
		def __init__(self, arg0: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttributes(self, ) -> javawrappers.java.util.Map: ...
		def set(self, arg0: javawrappers.org.opengis.util.MemberName, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def locate(self, arg0: javawrappers.org.opengis.util.MemberName, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getRecordType(self, ) -> javawrappers.org.opengis.util.RecordType: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def locate(self, arg0: javawrappers.org.opengis.util.MemberName, ) -> javawrappers.java.lang.Object: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setValueUnit(self, arg0: javawrappers.javax.measure.Unit, ) -> None: ...
	def getErrorStatistic(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def setValueType(self, arg0: javawrappers.org.opengis.util.RecordType, ) -> None: ...
	@overload
	def setValues(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def setValues(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getValueUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getValueType(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def set(self, arg0: javawrappers.org.opengis.util.MemberName, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	@overload
	def getValues(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getValues(self, ) -> javawrappers.java.util.Collection: ...
	def getRecordType(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def setErrorStatistic(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AccuracyOfATimeMeasurementImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.AccuracyOfATimeMeasurement, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class LogicalConsistencyImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.LogicalConsistency, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class CompletenessCommissionImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.CompletenessCommission, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


class CompletenessImpl:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.quality.Completeness, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDates(self, ) -> javawrappers.java.util.Collection: ...
	def asMap(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getMeasureDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getEvaluationMethodDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isModifiable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def freeze(self, ) -> None: ...
	def unmodifiable(self, ) -> javawrappers.org.geotools.metadata.AbstractMetadata: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMeasureIdentification(self, arg0: javawrappers.org.opengis.metadata.Identifier, ) -> None: ...
	def setDates(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def setEvaluationMethodType(self, arg0: javawrappers.org.opengis.metadata.quality.EvaluationMethodType, ) -> None: ...
	def setResults(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getMeasureIdentification(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setEvaluationMethodDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def getInterface(self, ) -> javawrappers.java.lang.Class: ...
	def getEvaluationMethodType(self, ) -> javawrappers.org.opengis.metadata.quality.EvaluationMethodType: ...
	def getStandard(self, ) -> javawrappers.org.geotools.metadata.MetadataStandard: ...
	def setMeasureDescription(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def asTree(self, ) -> javawrappers.javax.swing.tree.TreeModel: ...
	def setEvaluationProcedure(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNamesOfMeasure(self, ) -> javawrappers.java.util.Collection: ...
	def getResults(self, ) -> javawrappers.java.util.Collection: ...
	def setNamesOfMeasure(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEvaluationProcedure(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...


