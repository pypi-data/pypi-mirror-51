################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.xml.sax.helpers
import javawrappers.org.opengis.geometry
import javawrappers.org.geotools.data
import javawrappers.org.geotools.feature
import javawrappers.javax.xml.transform
import javawrappers.java.nio.charset
import javawrappers.org.opengis.feature.type
import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.opengis.feature
import javawrappers.javax.xml.transform.stream
import javawrappers.org.xml.sax
import javawrappers.org.geotools.gml.producer
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.geotools.xml.transform

from jpype.types import *
from typing import Union

from typing import overload

class CoordinateWriter:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], arg6: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], arg6: Union[float, JDouble], arg7: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], arg4: Union[float, JDouble], arg5: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPadWithZeros(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isDummyZEnabled(self, ) -> Union[int, JBoolean]: ...
	def getNumDecimals(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def writeCoordinates(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	@overload
	def writeCoordinates(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	def setPrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setNamespaceUri(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getForceDecimalEncoding(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FeatureTypeTransformer:
	def __init__(self, ): ...
	class FeatureTypeTranslator:
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, ): ...
		def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
		def abort(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
		def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
		def notify(self, ) -> None: ...


	def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEncoding(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def createTransformer(self, ) -> javawrappers.javax.xml.transform.Transformer: ...
	def notify(self, ) -> None: ...
	def setOmitXMLDeclaration(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def setIndentation(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNamespaceDeclarationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createTranslator(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
	def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
	def createXMLReader(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.XMLReaderSupport: ...
	def getIndentation(self, ) -> Union[int, JInt]: ...
	def createTransformTask(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.Task: ...
	def isOmitXMLDeclaration(self, ) -> Union[int, JBoolean]: ...
	def abort(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNamespaceDeclartionEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...


class CoordinateFormatter:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPadWithZeros(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isPadWithZeros(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, ) -> javawrappers.java.lang.StringBuffer: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setForcedDecimal(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isForcedDecimal(self, ) -> Union[int, JBoolean]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class GeometryTransformer:
	def __init__(self, ): ...
	class GeometryTranslator:
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: Union[int, JInt], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: Union[int, JInt], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], arg7: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: Union[int, JInt], ): ...
		@overload
		def encode(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
		@overload
		def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
		@overload
		def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
		def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getPadWithZeros(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def isDummyZEnabled(self, ) -> Union[int, JBoolean]: ...
		def getNumDecimals(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
		def abort(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getForceDecimalEncoding(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
		def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...


	@overload
	def encode(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPadWithZeros(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEncoding(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def getPadWithZeros(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def createTransformer(self, ) -> javawrappers.javax.xml.transform.Transformer: ...
	def notify(self, ) -> None: ...
	def setOmitXMLDeclaration(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def setIndentation(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
	def getForceDecimalEncoding(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNamespaceDeclarationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createTranslator(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
	def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
	def createXMLReader(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.XMLReaderSupport: ...
	def getIndentation(self, ) -> Union[int, JInt]: ...
	def setNumDecimals(self, arg0: Union[int, JInt], ) -> None: ...
	def setUseDummyZ(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isDummyZEnabled(self, ) -> Union[int, JBoolean]: ...
	def getNumDecimals(self, ) -> Union[int, JInt]: ...
	def createTransformTask(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.Task: ...
	def isOmitXMLDeclaration(self, ) -> Union[int, JBoolean]: ...
	def abort(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNamespaceDeclartionEnabled(self, ) -> Union[int, JBoolean]: ...
	def setForceDecimalEncoding(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...


class FeatureTransformer:
	def __init__(self, ): ...
	class FeatureTranslator:
		def __init__(self, arg0: javawrappers.org.xml.sax.ContentHandler, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.geotools.gml.producer.FeatureTransformer.FeatureTypeNamespaces, arg4: javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport, ): ...
		def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def handleFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def writeNullBounds(self, ) -> None: ...
		def endFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
		def setLockId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...
		def handleFeatureIterator(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, ) -> None: ...
		def writeBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
		def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def endFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
		@overload
		def endFeatureCollection(self, ) -> None: ...
		def abort(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def handleAttribute(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def handleFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
		def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
		def getFeatureTypeNamespaces(self, ) -> javawrappers.org.geotools.gml.producer.FeatureTransformer.FeatureTypeNamespaces: ...
		def handleFeatureReader(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
		def startFeatureCollection(self, ) -> None: ...


	class FeatureTypeNamespaces:
		def __init__(self, arg0: javawrappers.org.xml.sax.helpers.NamespaceSupport, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def declareDefaultNamespace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def findPrefix(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def declareNamespace(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	def encode(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPadWithZeros(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createTransformer(self, ) -> javawrappers.javax.xml.transform.Transformer: ...
	def setOmitXMLDeclaration(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def writeBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	def setIndentation(self, arg0: Union[int, JInt], ) -> None: ...
	def addSchemaLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setNamespaceDeclarationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createTranslator(self, arg0: javawrappers.org.xml.sax.ContentHandler, ) -> javawrappers.org.geotools.xml.transform.Translator: ...
	def getNamespaceSupport(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	def handleFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def getIndentation(self, ) -> Union[int, JInt]: ...
	def writeNullBounds(self, ) -> None: ...
	def endFeature(self, arg0: javawrappers.org.opengis.feature.Feature, ) -> None: ...
	def handleFeatureIterator(self, arg0: javawrappers.org.geotools.data.simple.SimpleFeatureIterator, ) -> None: ...
	def createTransformTask(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.Task: ...
	def setFeatureBounding(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCollectionNamespace(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def abort(self, ) -> None: ...
	def setForceDecimalEncoding(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSchemaLocationSupport(self, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.SchemaLocationSupport: ...
	@overload
	def getFeatureTypeNamespaces(self, ) -> javawrappers.org.geotools.gml.producer.FeatureTransformer.FeatureTypeNamespaces: ...
	@overload
	def getFeatureTypeNamespaces(self, ) -> javawrappers.org.geotools.gml.producer.FeatureTransformer.FeatureTypeNamespaces: ...
	def getFeatureNamespaces(self, ) -> javawrappers.org.xml.sax.helpers.NamespaceSupport: ...
	def getCollectionNamespace(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEncoding(self, arg0: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setLockId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setLockId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def declareDefaultNamespace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.stream.StreamResult, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getDefaultPrefix(self, ) -> javawrappers.java.lang.String: ...
	def findPrefix(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, ) -> javawrappers.java.lang.String: ...
	def setCollectionBounding(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def handleAttribute(self, arg0: javawrappers.org.opengis.feature.type.PropertyDescriptor, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def declareNamespace(self, arg0: javawrappers.org.opengis.feature.type.FeatureType, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getDefaultNamespace(self, ) -> javawrappers.java.lang.String: ...
	def createXMLReader(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.geotools.xml.transform.TransformerBase.XMLReaderSupport: ...
	def setNumDecimals(self, arg0: Union[int, JInt], ) -> None: ...
	def getCollectionPrefix(self, ) -> javawrappers.java.lang.String: ...
	def setSrsName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCollectionPrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isOmitXMLDeclaration(self, ) -> Union[int, JBoolean]: ...
	def setGmlPrefixing(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def endFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	@overload
	def endFeatureCollection(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNamespaceDeclartionEnabled(self, ) -> Union[int, JBoolean]: ...
	def handleFeatureCollection(self, arg0: javawrappers.org.geotools.feature.FeatureCollection, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleFeatureReader(self, arg0: javawrappers.org.geotools.data.FeatureReader, ) -> None: ...
	def startFeatureCollection(self, ) -> None: ...


