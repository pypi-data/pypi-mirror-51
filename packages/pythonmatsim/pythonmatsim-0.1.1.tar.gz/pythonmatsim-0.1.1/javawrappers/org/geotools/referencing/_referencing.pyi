################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.opengis.geometry
import javawrappers.java.awt.geom
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.org.geotools.factory
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.referencing.datum
import javawrappers.org.opengis.metadata.extent
import javawrappers.org.geotools.referencing
import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.org.geotools.util
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.opengis.referencing.cs
import javawrappers.org.opengis.metadata.citation
import javawrappers.java.util.function
import javawrappers.org.geotools.geometry
import javawrappers.org.geotools.referencing.operation.projection

from jpype.types import *
from typing import Union

from typing import overload

class CRS:
	class AxisOrder:
		EAST_NORTH: CRS.AxisOrder = ...
		NORTH_EAST: CRS.AxisOrder = ...
		INAPPLICABLE: CRS.AxisOrder = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.referencing.CRS.AxisOrder: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.geotools.referencing.CRS.AxisOrder, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getProjectedCRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.geotools.referencing.CRS.AxisOrder, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def findMathTransform(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	@staticmethod
	def findMathTransform(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def decode(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@staticmethod
	def getAuthorityFactory(arg0: Union[int, JBoolean], ) -> javawrappers.org.opengis.referencing.crs.CRSAuthorityFactory: ...
	@staticmethod
	def getSupportedAuthorities(arg0: Union[int, JBoolean], ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getTemporalCRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.opengis.geometry.Envelope, ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.geometry.Envelope, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, arg1: javawrappers.org.opengis.geometry.Envelope, ) -> javawrappers.org.geotools.geometry.GeneralEnvelope: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.referencing.operation.MathTransform2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	@staticmethod
	def getAxisOrder(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.geotools.referencing.CRS.AxisOrder: ...
	@overload
	@staticmethod
	def getAxisOrder(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[int, JBoolean], ) -> javawrappers.org.geotools.referencing.CRS.AxisOrder: ...
	@staticmethod
	def lookupEpsgCode(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.Integer: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getSupportedCodes(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getEllipsoid(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@staticmethod
	def getGeographicBoundingBox(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.metadata.extent.GeographicBoundingBox: ...
	@staticmethod
	def getVersion(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.util.Version: ...
	@staticmethod
	def parseWKT(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@staticmethod
	def equalsIgnoreMetadata(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.referencing.CRS.AxisOrder: ...
	@staticmethod
	def getHorizontalCRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.crs.SingleCRS: ...
	@staticmethod
	def getCoordinateOperationFactory(arg0: Union[int, JBoolean], ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperationFactory: ...
	@overload
	@staticmethod
	def toSRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toSRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def lookupIdentifier(arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def lookupIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reset(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getEnvelope(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	@staticmethod
	def getVerticalCRS(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	@staticmethod
	def isTransformationRequired(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getMapProjection(arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.geotools.referencing.operation.projection.MapProjection: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class NamedIdentifier:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: javawrappers.org.opengis.util.InternationalString, ): ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def asScopedName(self, ) -> javawrappers.org.opengis.util.ScopedName: ...
	def notifyAll(self, ) -> None: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def notify(self, ) -> None: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCodeSpace(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def asLocalName(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getCode(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.GenericName: ...


class AbstractIdentifiedObject:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ): ...
	class RemarksComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class IdentifierComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class NameComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class AbstractReferenceSystem:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.ReferenceSystem, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def notify(self, ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class ReferencingFactoryFinder:
	class AuthorityFilter:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		@overload
		def test(self, arg0: javawrappers.org.opengis.referencing.AuthorityFactory, ) -> Union[int, JBoolean]: ...
		@overload
		def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class VendorFilter:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		@overload
		def test(self, arg0: javawrappers.org.opengis.referencing.Factory, ) -> Union[int, JBoolean]: ...
		@overload
		def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getDatumFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.datum.DatumFactory: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getCRSFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.crs.CRSFactory: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def addAuthorityFactory(arg0: javawrappers.org.opengis.referencing.AuthorityFactory, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getCoordinateOperationAuthorityFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def listProviders(arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	@staticmethod
	def getCRSFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getDatumFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getMathTransformFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.operation.MathTransformFactory: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def mergeSystemHints(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.factory.Hints: ...
	@staticmethod
	def getCSAuthorityFactory(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.cs.CSAuthorityFactory: ...
	@staticmethod
	def setVendorOrdering(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getCoordinateOperationAuthorityFactory(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperationAuthorityFactory: ...
	@staticmethod
	def getCSAuthorityFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def test(self, arg0: javawrappers.org.opengis.referencing.Factory, ) -> Union[int, JBoolean]: ...
	@overload
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def test(self, arg0: javawrappers.org.opengis.referencing.AuthorityFactory, ) -> Union[int, JBoolean]: ...
	@overload
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def removeAuthorityFactory(arg0: javawrappers.org.opengis.referencing.AuthorityFactory, ) -> None: ...
	@staticmethod
	def getMathTransformFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getGridShiftLocators(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getCoordinateOperationFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getAuthorityNames() -> javawrappers.java.util.Set: ...
	@staticmethod
	def setAuthorityOrdering(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getCRSAuthorityFactory(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.crs.CRSAuthorityFactory: ...
	@staticmethod
	def getDatumAuthorityFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getCoordinateOperationFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperationFactory: ...
	@staticmethod
	def getCSFactory(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.cs.CSFactory: ...
	@staticmethod
	def getCSFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getCRSAuthorityFactories(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def getDatumAuthorityFactory(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.opengis.referencing.datum.DatumAuthorityFactory: ...
	@staticmethod
	def scanForPlugins() -> None: ...
	@staticmethod
	def unsetVendorOrdering(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def reset() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isRegistered(arg0: javawrappers.org.opengis.referencing.Factory, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def unsetAuthorityOrdering(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class GeodeticCalculator:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.datum.Ellipsoid, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getStartingPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getGeographicCRS(self, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMeridianArcLength(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getDestinationGeographicPoint(self, ) -> javawrappers.java.awt.geom.Point2D: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getAzimuth(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getGeodeticCurve(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Shape: ...
	@overload
	def getGeodeticCurve(self, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def setDestinationGeographicPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setDestinationGeographicPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	def notify(self, ) -> None: ...
	def getStartingGeographicPoint(self, ) -> javawrappers.java.awt.geom.Point2D: ...
	def setStartingPosition(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> None: ...
	def getOrthodromicDistance(self, ) -> Union[float, JDouble]: ...
	def setDestinationPosition(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> None: ...
	@overload
	def setStartingGeographicPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setStartingGeographicPoint(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEllipsoid(self, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDestinationPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def setDirection(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getGeodeticPath(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.List: ...


class Console:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.LineNumberReader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def printDefinitions(self, ) -> None: ...
	def setPrompt(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def executeAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def getPrompt(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def addDefinition(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def stop(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def loadDefinitions(self, arg0: javawrappers.java.io.LineNumberReader, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


