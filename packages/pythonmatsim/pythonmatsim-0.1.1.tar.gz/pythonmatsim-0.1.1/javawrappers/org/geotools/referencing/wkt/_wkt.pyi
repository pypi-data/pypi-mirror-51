################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.util
import javawrappers.org.geotools.referencing.wkt
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.parameter
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.metadata
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.opengis.metadata.citation
import javawrappers.tec.uom.se.format

from jpype.types import *
from typing import Union

from typing import overload

class Symbols:
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def containsAxis(self, arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Formatter:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.lang.String: ...
	def getAngularUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def getLinearUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def isInvalidWKT(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def notify(self, ) -> None: ...
	def setAuthority(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifier(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def setLinearUnit(self, arg0: javawrappers.javax.measure.Unit, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def append(self, arg0: javawrappers.org.opengis.parameter.GeneralParameterValue, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.org.geotools.referencing.wkt.Formattable, ) -> None: ...
	@overload
	def append(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.javax.measure.Unit, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def append(self, arg0: Union[int, JInt], ) -> None: ...
	def setAngularUnit(self, arg0: javawrappers.javax.measure.Unit, ) -> None: ...
	def setInvalidWKT(self, arg0: javawrappers.java.lang.Class, ) -> None: ...


class MathTransformParser:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, arg1: javawrappers.org.opengis.referencing.operation.MathTransformFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	def parseMathTransform(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def setColorEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def reformat(self, arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.io.Writer, arg2: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setAuthority(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def getWarning(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isColorEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AbstractConsole:
	@overload
	def __init__(self, arg0: javawrappers.java.text.Format, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.Format, arg1: javawrappers.java.io.LineNumberReader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.Format, arg1: javawrappers.java.io.LineNumberReader, arg2: javawrappers.java.io.Writer, arg3: javawrappers.java.io.PrintWriter, arg4: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def printDefinitions(self, ) -> None: ...
	def setPrompt(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def executeAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def getPrompt(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addDefinition(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def stop(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def loadDefinitions(self, arg0: javawrappers.java.io.LineNumberReader, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AbstractParser:
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def setColorEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def reformat(self, arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.io.Writer, arg2: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setAuthority(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def getWarning(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isColorEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DefaultUnitParser:
	class UnitWrapper:
		def __init__(self, arg0: javawrappers.javax.measure.Unit, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	def parseProductUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	def getEquivalentUnit(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def notify(self, ) -> None: ...
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	def parseSingleUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def alias(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, ) -> javawrappers.org.geotools.referencing.wkt.DefaultUnitParser: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.org.geotools.referencing.wkt.DefaultUnitParser: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, ) -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def isValidIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class Formattable:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Preprocessor:
	def __init__(self, arg0: javawrappers.java.text.Format, ): ...
	class Replacement:
		def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Definition:
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def printDefinitions(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	def removeDefinition(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def addDefinition(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getDefinitionNames(self, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class UnformattableObjectException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnformattableClass(self, ) -> javawrappers.java.lang.Class: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Element:
	def pullVoidElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.referencing.wkt.Element: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def parseFailed(self, arg0: javawrappers.java.lang.Exception, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.text.ParseException: ...
	def isRoot(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def pullOptionalVoidElement(self, ) -> javawrappers.org.geotools.referencing.wkt.Element: ...
	def notify(self, ) -> None: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def pullElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.referencing.wkt.Element: ...
	def print_(self, arg0: javawrappers.java.io.PrintWriter, arg1: Union[int, JInt], ) -> None: ...
	def pullDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	def pullInteger(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def pullOptionalElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.referencing.wkt.Element: ...
	def pullString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def pullOptionalString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...


class Parser:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, arg1: javawrappers.org.geotools.referencing.factory.ReferencingFactoryContainer, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.referencing.wkt.Symbols, arg1: javawrappers.org.opengis.referencing.datum.DatumFactory, arg2: javawrappers.org.opengis.referencing.cs.CSFactory, arg3: javawrappers.org.opengis.referencing.crs.CRSFactory, arg4: javawrappers.org.opengis.referencing.operation.MathTransformFactory, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	def parseMathTransform(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def parseCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def setColorEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getNameOf(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def reformat(self, arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.io.Writer, arg2: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setAuthority(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> None: ...
	def getWarning(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getClassOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isColorEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


