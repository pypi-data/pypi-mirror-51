################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.opengis.geometry
import javawrappers.java.awt.geom
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.geotools.math
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.referencing.datum
import javawrappers.org.opengis.coverage.grid
import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.geotools.referencing.datum
import javawrappers.org.geotools.referencing.operation.matrix

from jpype.types import *
from typing import Union

from typing import overload

class MappedPosition:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSource(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getTarget(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAccuracy(self, arg0: Union[float, JDouble], ) -> None: ...
	def getComments(self, ) -> javawrappers.java.lang.String: ...
	def setTarget(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setComments(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class TriangulationException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AffineTransformBuilder:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def includeWeights(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


class MissingInfoException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class RubberSheetBuilder:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def getMapTriangulation(self, ) -> javawrappers.java.util.HashMap: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


class BursaWolfTransformBuilder:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def getDxMatrix(self, ) -> javawrappers.org.geotools.referencing.operation.matrix.GeneralMatrix: ...
	def notifyAll(self, ) -> None: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getBursaWolfParameters(self, arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.geotools.referencing.datum.BursaWolfParameters: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def setTargetGeodeticDatum(self, arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


class LocalizationGrid:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPolynomialTransform(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeSingularities(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isNaN(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def isMonotonic(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def transform(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getAffineTransform(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLocalizationPoint(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.geom.Point2D: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setLocalizationPoint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def setLocalizationPoint(self, arg0: javawrappers.java.awt.Point, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AdvancedAffineBuilder:
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.geotools.referencing.operation.transform.AffineTransform2D, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def notifyAll(self, ) -> None: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getMaxIterationDifference(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getNumberOfIterationSteps(self, ) -> Union[int, JInt]: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def setConstrain(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def setNumberOfIterationSteps(self, arg0: Union[int, JInt], ) -> None: ...
	def clearConstrains(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setMaxIterationDifference(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


class ProjectiveTransformBuilder:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def includeWeights(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


class MathTransformBuilder:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


class GridToEnvelopeMapper:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.coverage.grid.GridEnvelope, arg1: javawrappers.org.opengis.geometry.Envelope, ): ...
	def setReverseAxis(self, arg0: JArray(Union[int, JBoolean], 1), ) -> None: ...
	def createAffineTransform(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setGridRange(self, arg0: javawrappers.org.opengis.coverage.grid.GridEnvelope, ) -> None: ...
	def getGridRange(self, ) -> javawrappers.org.opengis.coverage.grid.GridEnvelope: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPixelAnchor(self, arg0: javawrappers.org.opengis.referencing.datum.PixelInCell, ) -> None: ...
	def getSwapXY(self, ) -> Union[int, JBoolean]: ...
	def reverseAxis(self, arg0: Union[int, JInt], ) -> None: ...
	def setEnvelope(self, arg0: javawrappers.org.opengis.geometry.Envelope, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setAutomatic(self, arg0: Union[int, JInt], ) -> None: ...
	def setGridType(self, arg0: javawrappers.org.opengis.referencing.datum.PixelInCell, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSwapXY(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getPixelAnchor(self, ) -> javawrappers.org.opengis.referencing.datum.PixelInCell: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getReverseAxis(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGridType(self, ) -> javawrappers.org.opengis.referencing.datum.PixelInCell: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def isAutomatic(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class AffineToGeometric:
	def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.AffineTransform2D, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getYTranslate(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSkew(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getXTranslate(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getXRotation(self, ) -> Union[float, JDouble]: ...
	def getXScale(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getYScale(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getYRotation(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class SimilarTransformBuilder:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMappedPositions(self, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setMappedPositions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.referencing.operation.Transformation: ...
	def getMinimumPointCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinateSystemType(self, ) -> javawrappers.java.lang.Class: ...
	def getErrorStatistics(self, ) -> javawrappers.org.geotools.math.Statistics: ...
	def printPoints(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.util.Locale, ) -> None: ...
	def setTargetPoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def includeWeights(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSourcePoints(self, arg0: JArray(javawrappers.org.opengis.geometry.DirectPosition, 1), ) -> None: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSourcePoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...
	def getTargetPoints(self, ) -> JArray(javawrappers.org.opengis.geometry.DirectPosition, 1): ...


