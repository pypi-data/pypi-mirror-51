################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.opengis.geometry
import javawrappers.java.awt.geom
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.org.geotools.referencing.wkt
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.factory
import javawrappers.org.geotools.referencing.operation.transform
import javawrappers.org.geotools.referencing
import javawrappers.java.awt
import javawrappers.javax.media.jai
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.geotools.referencing.operation
import javawrappers.org.opengis.metadata.citation

from jpype.types import *
from typing import Union

from typing import overload

class LogarithmicTransform1D:
	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Base10:
		def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def derivative(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def create(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class WarpBuilder:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	class ExcessiveDepthException:
		@overload
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.WarpBuilder, arg1: javawrappers.java.lang.Throwable, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.WarpBuilder, arg1: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.WarpBuilder, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.WarpBuilder, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def buildWarp(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform2D, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.Warp: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setMaxPositions(self, arg0: Union[int, JInt], ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class IdentityTransform:
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: Union[int, JInt], ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class LocalizationGrid:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPolynomialTransform(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeSingularities(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isNaN(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def isMonotonic(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def transform(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getAffineTransform(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLocalizationPoint(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.geom.Point2D: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setLocalizationPoint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def setLocalizationPoint(self, arg0: javawrappers.java.awt.Point, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class GeocentricTransform:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.datum.Ellipsoid, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.javax.measure.Unit, arg3: Union[int, JBoolean], ): ...
	class ProviderInverse:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def createMathTransform(self, arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Inverse:
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.GeocentricTransform, ): ...
		def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def inverseTransform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def inverseTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def createMathTransform(self, arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class AbstractMathTransform:
	class Inverse:
		def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class NADCONTransform:
	def __init__(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.net.URI, ): ...
	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Inverse:
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.NADCONTransform, ): ...
		def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def inverseTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class LinearTransform1D:
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.geotools.referencing.operation.transform.LinearTransform1D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class MolodenskiTransform:
	def __init__(self, arg0: Union[int, JBoolean], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JBoolean], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[int, JBoolean], arg7: Union[float, JDouble], arg8: Union[float, JDouble], arg9: Union[float, JDouble], ): ...
	class ProviderAbridged:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class As2D:
		def __init__(self, arg0: Union[int, JBoolean], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], ): ...
		def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class WarpTransform2D:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: JArray(Union[float, JFloat], 1), arg2: Union[int, JInt], arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: JArray(Union[float, JFloat], 1), arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: JArray(javawrappers.java.awt.geom.Point2D, 1), arg2: Union[int, JInt], arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: JArray(javawrappers.java.awt.geom.Point2D, 1), arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.awt.geom.Point2D, 1), arg1: JArray(javawrappers.java.awt.geom.Point2D, 1), arg2: Union[int, JInt], ): ...
	class PointDouble:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getX(self, ) -> Union[float, JDouble]: ...
		def getY(self, ) -> Union[float, JDouble]: ...
		@overload
		def distance(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
		@overload
		def distance(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		@staticmethod
		def distance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def setLocation(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
		@overload
		def setLocation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def clone(self, ) -> javawrappers.org.geotools.referencing.operation.transform.WarpTransform2D.PointDouble: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def distanceSq(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
		@overload
		@staticmethod
		def distanceSq(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def distanceSq(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	class PointFloat:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getX(self, ) -> Union[float, JDouble]: ...
		def getY(self, ) -> Union[float, JDouble]: ...
		@overload
		def distance(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
		@overload
		def distance(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		@staticmethod
		def distance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def setLocation(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
		@overload
		def setLocation(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> None: ...
		@overload
		def setLocation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def clone(self, ) -> javawrappers.org.geotools.referencing.operation.transform.WarpTransform2D.PointFloat: ...
		@overload
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def distanceSq(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
		@overload
		@staticmethod
		def distanceSq(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def distanceSq(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def notify(self, ) -> None: ...


	class Provider:


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def distance(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
	@overload
	def distance(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def distance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def distanceSq(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def distanceSq(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def distanceSq(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: javawrappers.javax.media.jai.Warp, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def getX(self, ) -> Union[float, JDouble]: ...
	@overload
	def getX(self, ) -> Union[float, JDouble]: ...
	@overload
	def getY(self, ) -> Union[float, JDouble]: ...
	@overload
	def getY(self, ) -> Union[float, JDouble]: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.transform.WarpTransform2D.PointDouble: ...
	@overload
	def clone(self, ) -> javawrappers.org.geotools.referencing.operation.transform.WarpTransform2D.PointFloat: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getWarp(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.org.opengis.referencing.operation.MathTransform2D, ) -> javawrappers.javax.media.jai.Warp: ...
	@overload
	def getWarp(self, ) -> javawrappers.javax.media.jai.Warp: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class AffineTransform2D:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.geom.AffineTransform, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def rotate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def concatenate(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	def preConcatenate(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	@staticmethod
	def getRotation(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getRotateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def translate(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setToQuadrantRotation(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setToQuadrantRotation(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def getMatrix(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def quadrantRotate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def quadrantRotate(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def inverseTransform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def inverseTransform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def inverseTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getFlip(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[int, JInt]: ...
	def getDeterminant(self, ) -> Union[float, JDouble]: ...
	def invert(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentity(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def inverseDeltaTransform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.geom.Point2D, arg2: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def createInverse(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def getScaleY(self, ) -> Union[float, JDouble]: ...
	def getShearX(self, ) -> Union[float, JDouble]: ...
	def getScaleX(self, ) -> Union[float, JDouble]: ...
	def getShearY(self, ) -> Union[float, JDouble]: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getScale(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getScaleY0(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	def setToTranslation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def getShearInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def setToIdentity(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getSwapXY(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def scale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	@staticmethod
	def getScaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getScaleInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def notify(self, ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setToRotation(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.Shape, arg2: Union[int, JBoolean], ) -> javawrappers.java.awt.Shape: ...
	@overload
	@staticmethod
	def transform(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(javawrappers.java.awt.geom.Point2D, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.java.awt.geom.Point2D, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def formatWKT(self, arg0: javawrappers.org.geotools.referencing.wkt.Formatter, ) -> javawrappers.java.lang.String: ...
	@overload
	def setTransform(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> None: ...
	@overload
	def setTransform(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setToShear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getTranslateY(self, ) -> Union[float, JDouble]: ...
	def getTranslateX(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getScaleX0(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> Union[float, JDouble]: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def shear(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def getQuadrantRotateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@overload
	@staticmethod
	def getQuadrantRotateInstance(arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def getTranslateInstance(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.AffineTransform: ...
	@staticmethod
	def round(arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> None: ...
	def setToScale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.awt.geom.AffineTransform: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def deltaTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def deltaTransform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...


class PassThroughTransform:
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...
	def getSubTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: Union[int, JInt], arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: Union[int, JInt], ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiedCoordinates(self, ) -> JArray(Union[int, JInt], 1): ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class NTv2Transform:
	def __init__(self, arg0: javawrappers.java.net.URI, ): ...
	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Inverse:
		def __init__(self, arg0: javawrappers.org.geotools.referencing.operation.transform.NTv2Transform, ): ...
		def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def inverseTransform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform2D: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class GeocentricTranslation:
	def __init__(self, arg0: javawrappers.org.geotools.referencing.datum.BursaWolfParameters, ): ...
	class ProviderFrameRotation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class ProviderSevenParam:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@staticmethod
	def createScale(arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@staticmethod
	def createSelectMatrix(arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def createTranslation(arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class DimensionFilter:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransformFactory, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSourceDimensionRange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addTargetDimensions(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def separate(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def addTargetDimensionRange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def addTargetDimension(self, arg0: Union[int, JInt], ) -> None: ...
	def addSourceDimensions(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def addSourceDimension(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.org.geotools.referencing.operation.transform.DimensionFilter: ...
	def getTargetDimensions(self, ) -> JArray(Union[int, JInt], 1): ...


class SimilarityTransformProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class ProjectiveTransform:
	class ProviderLongitudeRotation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	class ProviderAffine:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		@staticmethod
		def getProvider(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.geotools.referencing.operation.transform.ProjectiveTransform.ProviderAffine: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@staticmethod
	def createScale(arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	def notify(self, ) -> None: ...
	@overload
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getProvider(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.geotools.referencing.operation.transform.ProjectiveTransform.ProviderAffine: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.geom.AffineTransform, ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@staticmethod
	def createSelectMatrix(arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def createTranslation(arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> javawrappers.org.geotools.referencing.operation.LinearTransform: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class MathTransformProxy:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class WarpTransform2DProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class ExponentialTransform1D:
	class Provider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		@staticmethod
		def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def notify(self, ) -> None: ...
		def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def derivative(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform1D: ...
	@overload
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class ConcatenatedTransform:
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getStepCount(self, ) -> Union[int, JInt]: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def getParameterDescriptors(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def derivative(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def createTransformedShape(self, arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


