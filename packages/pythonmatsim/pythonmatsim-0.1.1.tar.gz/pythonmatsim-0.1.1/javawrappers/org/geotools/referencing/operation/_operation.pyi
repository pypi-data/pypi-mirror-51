################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.factory
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.referencing.datum
import javawrappers.org.opengis.metadata.extent
import javawrappers.org.geotools.referencing
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.opengis.referencing.cs
import javawrappers.org.geotools.referencing.operation
import javawrappers.org.opengis.metadata.citation
import javawrappers.java.util.function
import javawrappers.org.geotools.referencing.datum

from jpype.types import *
from typing import Union

from typing import overload

class DefaultSingleOperation:
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultOperation:
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultConcatenatedOperation:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), arg2: javawrappers.org.opengis.referencing.operation.MathTransformFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getOperations(self, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class BufferedCoordinateOperationFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperationFactory, arg1: Union[int, JInt], ): ...
	class CRSPair:
		def __init__(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.operation.OperationMethod, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def notify(self, ) -> None: ...
	def getMathTransformFactory(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransformFactory: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createConcatenatedOperation(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def findOperations(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.java.util.Set: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createDefiningConversion(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, arg2: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...


class DefaultOperationMethod:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def notify(self, ) -> None: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class AbstractCoordinateOperationFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	class TemporaryIdentifier:
		def __init__(self, arg0: javawrappers.org.opengis.referencing.ReferenceIdentifier, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getParsedNames(self, ) -> javawrappers.java.util.List: ...
		@overload
		def compareTo(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def unwrap(arg0: javawrappers.org.opengis.referencing.ReferenceIdentifier, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
		def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
		def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
		def getCode(self, ) -> javawrappers.java.lang.String: ...
		def getVersion(self, ) -> javawrappers.java.lang.String: ...
		def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def asScopedName(self, ) -> javawrappers.org.opengis.util.ScopedName: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
		def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...
		def depth(self, ) -> Union[int, JInt]: ...
		def getCodeSpace(self, ) -> javawrappers.java.lang.String: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def asLocalName(self, ) -> javawrappers.org.opengis.util.LocalName: ...
		def getScope(self, ) -> javawrappers.org.opengis.util.GenericName: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.operation.OperationMethod, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def unwrap(arg0: javawrappers.org.opengis.referencing.ReferenceIdentifier, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def getMathTransformFactory(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransformFactory: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def getCode(self, ) -> javawrappers.java.lang.String: ...
	def findOperations(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.java.util.Set: ...
	def createDefiningConversion(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, arg2: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def asScopedName(self, ) -> javawrappers.org.opengis.util.ScopedName: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def getCodeSpace(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def asLocalName(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createConcatenatedOperation(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class TransformPathNotFoundException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.referencing.FactoryException, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.FactoryException, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getLastCompletedTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLastCompletedTransform(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class DefaultTransformation:
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultPlanarProjection:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class MathTransformProvider:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.opengis.parameter.ParameterDescriptorGroup, ): ...
	class Delegate:
		def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		def notify(self, ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
		@overload
		def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSourceDimensions(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTargetDimensions(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	@staticmethod
	def checkDimensions(arg0: javawrappers.org.opengis.referencing.operation.OperationMethod, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def notify(self, ) -> None: ...
	def getOperationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	def getFormula(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterDescriptorGroup: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class DefaultCoordinateOperationFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	class TemporaryDatum:
		def __init__(self, arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def isWGS84(arg0: javawrappers.org.opengis.referencing.datum.Datum, ) -> Union[int, JBoolean]: ...
		@overload
		def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@overload
		def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def cleanupThreadLocals() -> None: ...
		def getPrimeMeridian(self, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
		def notifyAll(self, ) -> None: ...
		def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def unwrap(arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
		def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		@overload
		def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		@overload
		@staticmethod
		def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
		def getEllipsoid(self, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
		def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
		@overload
		def getBursaWolfParameters(self, arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.geotools.referencing.datum.BursaWolfParameters: ...
		@overload
		def getBursaWolfParameters(self, ) -> JArray(javawrappers.org.geotools.referencing.datum.BursaWolfParameters, 1): ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
		@overload
		@staticmethod
		def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
		def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		@overload
		def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def toWKT(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAffineTransform(arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, arg1: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAlias(self, ) -> javawrappers.java.util.Collection: ...
		def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
		def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def isWGS84(arg0: javawrappers.org.opengis.referencing.datum.Datum, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def getPrimeMeridian(self, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.operation.OperationMethod, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def unwrap(arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransformFactory(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransformFactory: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getEllipsoid(self, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getRealizationEpoch(self, ) -> javawrappers.java.util.Date: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def getBursaWolfParameters(self, arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.geotools.referencing.datum.BursaWolfParameters: ...
	@overload
	def getBursaWolfParameters(self, ) -> JArray(javawrappers.org.geotools.referencing.datum.BursaWolfParameters, 1): ...
	def findOperations(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.java.util.Set: ...
	def createDefiningConversion(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, arg2: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAffineTransform(arg0: javawrappers.org.opengis.referencing.datum.GeodeticDatum, arg1: javawrappers.org.opengis.referencing.datum.GeodeticDatum, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createConcatenatedOperation(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class DefiningConversion:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.parameter.ParameterValueGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, arg2: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, arg2: javawrappers.org.opengis.parameter.ParameterValueGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultConicProjection:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultPassThroughOperation:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.Operation, arg4: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.Operation, arg4: Union[int, JInt], arg5: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getModifiedCoordinates(self, ) -> JArray(Union[int, JInt], 1): ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getOperation(self, ) -> javawrappers.org.opengis.referencing.operation.Operation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultMathTransformFactory:
	def __init__(self, ): ...
	class MethodFilter:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		@overload
		def test(self, arg0: javawrappers.org.geotools.referencing.operation.MathTransformProvider, ) -> Union[int, JBoolean]: ...
		@overload
		def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def createFromWKT(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def createFromXML(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def notify(self, ) -> None: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createPassThroughTransform(self, arg0: Union[int, JInt], arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: Union[int, JInt], ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def createBaseToDerived(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, arg2: javawrappers.org.opengis.referencing.cs.CoordinateSystem, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def createBaseToDerived(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.parameter.ParameterValueGroup, arg2: javawrappers.org.opengis.referencing.cs.CoordinateSystem, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def getLastMethodUsed(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def createAffineTransform(self, arg0: javawrappers.org.opengis.referencing.operation.Matrix, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def test(self, arg0: javawrappers.org.geotools.referencing.operation.MathTransformProvider, ) -> Union[int, JBoolean]: ...
	@overload
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def createConcatenatedTransform(self, arg0: javawrappers.org.opengis.referencing.operation.MathTransform, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def scanForPlugins(self, ) -> None: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDefaultParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createParameterizedTransform(self, arg0: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	def getAvailableMethods(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...


class DefaultCylindricalProjection:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class DefaultProjection:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class LinearTransform:
	def inverse(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def transform(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	def getMatrix(self, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def getSourceDimensions(self, ) -> Union[int, JInt]: ...
	@overload
	def isIdentity(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	def derivative(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.org.opengis.referencing.operation.Matrix: ...
	def getTargetDimensions(self, ) -> Union[int, JInt]: ...


class AuthorityBackedFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	@overload
	def createOperation(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.operation.OperationMethod, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def notify(self, ) -> None: ...
	def getMathTransformFactory(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransformFactory: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createConcatenatedOperation(self, arg0: javawrappers.java.util.Map, arg1: JArray(javawrappers.org.opengis.referencing.operation.CoordinateOperation, 1), ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def findOperations(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.java.util.Set: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createDefiningConversion(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.operation.OperationMethod, arg2: javawrappers.org.opengis.parameter.ParameterValueGroup, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...


class DefaultConversion:
	@overload
	def __init__(self, arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getMethod(self, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.opengis.referencing.operation.Conversion, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.Conversion: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, arg4: javawrappers.org.opengis.referencing.operation.OperationMethod, arg5: javawrappers.java.lang.Class, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getParameterValues(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


class AbstractCoordinateOperation:
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg3: javawrappers.org.opengis.referencing.operation.MathTransform, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def nameMatches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nameMatches(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> Union[int, JBoolean]: ...
	def getPositionalAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getName(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getName(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cleanupThreadLocals() -> None: ...
	def notifyAll(self, ) -> None: ...
	def getValidArea(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def getTargetCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def notify(self, ) -> None: ...
	def getCoordinateOperationAccuracy(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getIdentifier(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	@overload
	@staticmethod
	def getIdentifier(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.org.opengis.referencing.ReferenceIdentifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getIdentifiers(self, ) -> javawrappers.java.util.Set: ...
	def getSourceCRS(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	@staticmethod
	def getAccuracy(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> Union[float, JDouble]: ...
	@overload
	def getAccuracy(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, arg1: javawrappers.org.opengis.metadata.citation.Citation, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def getProperties(arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.util.Map: ...
	def getRemarks(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMathTransform(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...
	@overload
	def toWKT(self, arg0: javawrappers.org.opengis.metadata.citation.Citation, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def toWKT(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getType(arg0: javawrappers.org.opengis.referencing.operation.CoordinateOperation, ) -> javawrappers.java.lang.Class: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.geotools.referencing.AbstractIdentifiedObject, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAlias(self, ) -> javawrappers.java.util.Collection: ...
	def getOperationVersion(self, ) -> javawrappers.java.lang.String: ...
	def getScope(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getDomainOfValidity(self, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...


