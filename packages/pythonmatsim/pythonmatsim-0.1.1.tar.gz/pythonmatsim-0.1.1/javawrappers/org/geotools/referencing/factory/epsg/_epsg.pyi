################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.util
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.java.util.stream
import javawrappers.org.opengis.parameter
import javawrappers.org.geotools.factory
import javawrappers.org.opengis.referencing.crs
import javawrappers.javax.sql
import javawrappers.org.opengis.referencing.datum
import javawrappers.org.opengis.metadata.extent
import javawrappers.org.geotools.referencing.factory
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.opengis.referencing
import javawrappers.org.opengis.referencing.cs
import javawrappers.org.opengis.metadata.citation
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class CartesianAuthorityFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class FactoryUsingWKT:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class SqlScriptReader:
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	def next(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def dispose(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ThreadedEpsgFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDataSource(self, ) -> javawrappers.javax.sql.DataSource: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def setDataSource(self, arg0: javawrappers.javax.sql.DataSource, ) -> None: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class HsqlDialectEpsgMediator:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.javax.sql.DataSource, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.geotools.factory.Hints, arg2: javawrappers.javax.sql.DataSource, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class ThreadedHsqlEpsgFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDataSource(self, ) -> javawrappers.javax.sql.DataSource: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def setDataSource(self, arg0: javawrappers.javax.sql.DataSource, ) -> None: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class LongitudeFirstEpsgDecorator:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class AccessDialectEpsgFactory:
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.java.sql.Connection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	def generateEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def generateDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def generateCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def generateCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def generatePrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def notifyAll(self, ) -> None: ...
	def generateParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def generateCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def notify(self, ) -> None: ...
	def generateOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def connect(self, ) -> None: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def generateFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def generateExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def generateObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def generateUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def generateCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class FactoryUsingAnsiSQL:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.java.sql.Connection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.javax.sql.DataSource, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setValidationQuery(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getValidationQuery(self, ) -> javawrappers.java.lang.String: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class AnsiDialectEpsgFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.javax.sql.DataSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.java.sql.Connection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	def generateEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def generateDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def generateCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def generateCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def generatePrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def notifyAll(self, ) -> None: ...
	def generateParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def generateCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def notify(self, ) -> None: ...
	def generateOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def connect(self, ) -> None: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def generateFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def generateExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def generateObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def generateUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def generateCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class DirectEpsgFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.javax.sql.DataSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.java.sql.Connection, ): ...
	class Finder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def findIdentifier(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setProxy(self, arg0: javawrappers.org.geotools.referencing.factory.AuthorityFactoryProxy, ) -> None: ...
		def setFullScanAllowed(self, arg0: Union[int, JBoolean], ) -> None: ...
		def isFullScanAllowed(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Dimensions:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def find(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def setProxy(self, arg0: javawrappers.org.geotools.referencing.factory.AuthorityFactoryProxy, ) -> None: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isFullScanAllowed(self, ) -> Union[int, JBoolean]: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFullScanAllowed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setValidationQuery(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def findIdentifier(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.lang.String: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getValidationQuery(self, ) -> javawrappers.java.lang.String: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class CoordinateOperationFactoryUsingWKT:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class DatabaseCreationScript:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class HsqlEpsgDatabase:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def createDataSource(arg0: javawrappers.org.geotools.factory.Hints, ) -> javawrappers.javax.sql.DataSource: ...
	@overload
	@staticmethod
	def createDataSource() -> javawrappers.javax.sql.DataSource: ...
	@overload
	@staticmethod
	def createDataSource(arg0: javawrappers.java.io.File, ) -> javawrappers.javax.sql.DataSource: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LongitudeFirstFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class FactoryUsingSQL:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.javax.sql.DataSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.java.sql.Connection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setValidationQuery(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getValidationQuery(self, ) -> javawrappers.java.lang.String: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class AbstractEpsgFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.javax.sql.DataSource, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: javawrappers.java.sql.Connection, ): ...
	class AuthorityCodeSet:
		def __init__(self, arg0: javawrappers.org.geotools.referencing.factory.epsg.AbstractEpsgFactory, arg1: javawrappers.org.geotools.referencing.factory.epsg.TableInfo, arg2: javawrappers.java.lang.Class, ): ...
		class Map:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
			def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
			def notifyAll(self, ) -> None: ...
			def values(self, ) -> javawrappers.java.util.Collection: ...
			@overload
			def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
			@overload
			def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
			def notify(self, ) -> None: ...
			def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
			@overload
			def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@overload
			def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
			def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
			def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
			@overload
			def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
			@overload
			def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
			def keySet(self, ) -> javawrappers.java.util.Set: ...
			def entrySet(self, ) -> javawrappers.java.util.Set: ...
			def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
			def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def clear(self, ) -> None: ...
			def isEmpty(self, ) -> Union[int, JBoolean]: ...
			def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
			def size(self, ) -> Union[int, JInt]: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


		class Iterator:
			@overload
			def next(self, ) -> javawrappers.java.lang.Object: ...
			@overload
			def next(self, ) -> javawrappers.java.lang.String: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		@overload
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def clear(self, ) -> None: ...
		@overload
		def clear(self, ) -> None: ...
		@overload
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		@overload
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		@overload
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class Finder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def findIdentifier(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setProxy(self, arg0: javawrappers.org.geotools.referencing.factory.AuthorityFactoryProxy, ) -> None: ...
		def setFullScanAllowed(self, arg0: Union[int, JBoolean], ) -> None: ...
		def isFullScanAllowed(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Dimensions:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def disconnect(self, ) -> None: ...
	def generateEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def isFullScanAllowed(self, ) -> Union[int, JBoolean]: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def connect(self, ) -> None: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def findIdentifier(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.java.lang.String: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def generateFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def generateExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def generateObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def generateDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def generateCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def find(self, arg0: javawrappers.org.opengis.referencing.IdentifiedObject, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProxy(self, arg0: javawrappers.org.geotools.referencing.factory.AuthorityFactoryProxy, ) -> None: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def generateCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.String: ...
	def generatePrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def setFullScanAllowed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def generateParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def generateCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def generateOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def generateUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def generateCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


class DefaultFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.geotools.factory.Hints, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTemporalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.TemporalCRS: ...
	def createSphericalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.SphericalCS: ...
	def getVendor(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createVerticalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.VerticalCS: ...
	def createOperationMethod(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.OperationMethod: ...
	def getImplementationHints(self, ) -> javawrappers.java.util.Map: ...
	def createCoordinateOperation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.operation.CoordinateOperation: ...
	def createVerticalCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.VerticalCRS: ...
	def createExtent(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.extent.Extent: ...
	def createVerticalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.VerticalDatum: ...
	def createFromCoordinateReferenceSystemCodes(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getBackingStoreDescription(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def exit() -> None: ...
	def getDescriptionText(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def createTimeCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.TimeCS: ...
	def createPolarCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.PolarCS: ...
	def dispose(self, ) -> None: ...
	def createImageDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.ImageDatum: ...
	def createUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def createEllipsoid(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Ellipsoid: ...
	def isAvailable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDataSource(self, ) -> javawrappers.javax.sql.DataSource: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getIdentifiedObjectFinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.geotools.referencing.factory.IdentifiedObjectFinder: ...
	def getAuthorityCodes(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def createEngineeringDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.EngineeringDatum: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createEngineeringCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.EngineeringCRS: ...
	def setDataSource(self, arg0: javawrappers.javax.sql.DataSource, ) -> None: ...
	def createCompoundCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CompoundCRS: ...
	def onDeregistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...
	def createCylindricalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CylindricalCS: ...
	def createDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.Datum: ...
	def createTemporalDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.TemporalDatum: ...
	def createGeodeticDatum(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.GeodeticDatum: ...
	def createCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystem: ...
	def createProjectedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ProjectedCRS: ...
	def createImageCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.ImageCRS: ...
	def createCoordinateSystemAxis(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CoordinateSystemAxis: ...
	def getAuthority(self, ) -> javawrappers.org.opengis.metadata.citation.Citation: ...
	def createObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.IdentifiedObject: ...
	def createDerivedCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.DerivedCRS: ...
	def createCartesianCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.CartesianCS: ...
	def setTimeout(self, arg0: Union[long, JLong], ) -> None: ...
	def createCoordinateReferenceSystem(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createGeocentricCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeocentricCRS: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createGeographicCRS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.crs.GeographicCRS: ...
	def createEllipsoidalCS(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.cs.EllipsoidalCS: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def createParameterDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.parameter.ParameterDescriptor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createPrimeMeridian(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.referencing.datum.PrimeMeridian: ...
	def onRegistration(self, arg0: javawrappers.org.geotools.factory.FactoryRegistry, arg1: javawrappers.java.lang.Class, ) -> None: ...


