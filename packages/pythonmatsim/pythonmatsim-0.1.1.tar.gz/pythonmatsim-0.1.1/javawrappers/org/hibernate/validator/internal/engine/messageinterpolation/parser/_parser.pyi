################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser
import javawrappers.java.io
import javawrappers.org.hibernate.validator.internal.engine.messageinterpolation

from jpype.types import *
from typing import Union

from typing import overload

class MessageState:
	def __init__(self, ): ...
	def handleELDesignator(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEscapeCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleNonMetaCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def terminate(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def notify(self, ) -> None: ...
	def handleEndTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleBeginTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...


class MessageDescriptorFormatException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TokenIterator:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def replaceCurrentInterpolationTerm(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getInterpolatedMessage(self, ) -> javawrappers.java.lang.String: ...
	def hasMoreInterpolationTerms(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def nextInterpolationTerm(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Token:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[string, JString], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def makeELToken(self, ) -> None: ...
	def isParameter(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def makeParameterToken(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTokenValue(self, ) -> javawrappers.java.lang.String: ...
	def terminate(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def append(self, arg0: Union[string, JString], ) -> None: ...


class ParserState:
	def handleELDesignator(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleEscapeCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleNonMetaCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def terminate(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleEndTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleBeginTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...


class EscapedState:
	def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.ParserState, ): ...
	def handleELDesignator(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEscapeCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleNonMetaCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def terminate(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def notify(self, ) -> None: ...
	def handleEndTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleBeginTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...


class InterpolationTermState:
	def __init__(self, ): ...
	def handleELDesignator(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEscapeCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleNonMetaCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def terminate(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def notify(self, ) -> None: ...
	def handleEndTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleBeginTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...


class TokenCollector:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.InterpolationTermType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def makeParameterToken(self, ) -> None: ...
	def appendToToken(self, arg0: Union[string, JString], ) -> None: ...
	def transitionState(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.ParserState, ) -> None: ...
	def parse(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def makeELToken(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOriginalMessageDescriptor(self, ) -> javawrappers.java.lang.String: ...
	def getTokenList(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def terminateToken(self, ) -> None: ...
	def getInterpolationType(self, ) -> javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.InterpolationTermType: ...


class ELState:
	def __init__(self, ): ...
	def handleELDesignator(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEscapeCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleNonMetaCharacter(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def terminate(self, arg0: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def notify(self, ) -> None: ...
	def handleEndTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...
	def handleBeginTerm(self, arg0: Union[string, JString], arg1: javawrappers.org.hibernate.validator.internal.engine.messageinterpolation.parser.TokenCollector, ) -> None: ...


