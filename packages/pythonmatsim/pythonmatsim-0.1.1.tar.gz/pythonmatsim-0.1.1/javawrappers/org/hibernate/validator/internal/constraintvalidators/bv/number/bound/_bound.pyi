################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.lang.annotation
import javawrappers.javax.validation.constraints
import javawrappers.javax.validation

from jpype.types import *
from typing import Union

from typing import overload

class MaxValidatorForFloat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MaxValidatorForBigInteger:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MinValidatorForFloat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MinValidatorForDouble:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MaxValidatorForDouble:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MinValidatorForBigDecimal:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MaxValidatorForBigDecimal:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractMinValidator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MaxValidatorForNumber:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MinValidatorForBigInteger:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MinValidatorForLong:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MinValidatorForNumber:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Min, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractMaxValidator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


class MaxValidatorForLong:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isValid(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.validation.ConstraintValidatorContext, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def initialize(self, arg0: javawrappers.javax.validation.constraints.Max, ) -> None: ...
	@overload
	def initialize(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def notify(self, ) -> None: ...


