################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.javax.validation.valueextraction
import javawrappers.java.lang.annotation
import javawrappers.org.hibernate.validator.internal.engine.valueextraction

from jpype.types import *
from typing import Union

from typing import overload

class AnnotatedObject:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getGenericDeclaration(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getGenericDeclaration(self, ) -> javawrappers.java.lang.reflect.GenericDeclaration: ...


class ValueExtractorDescriptor:
	def __init__(self, arg0: javawrappers.javax.validation.valueextraction.ValueExtractor, ): ...
	class Key:
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.TypeVariable, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getExtractedType(self, ) -> javawrappers.java.util.Optional: ...
	def getValueExtractor(self, ) -> javawrappers.javax.validation.valueextraction.ValueExtractor: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor.Key: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getExtractedTypeParameter(self, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isUnwrapByDefault(self, ) -> Union[int, JBoolean]: ...
	def getContainerType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ValueExtractorHelper:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toValueExtractorClasses(arg0: javawrappers.java.util.Set, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def extractValues(arg0: javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor, arg1: javawrappers.java.lang.Object, arg2: javawrappers.javax.validation.valueextraction.ValueExtractor.ValueReceiver, ) -> None: ...


class ArrayElement:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.reflect.AnnotatedArrayType, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.reflect.Type, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getContainerClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getGenericDeclaration(self, ) -> javawrappers.java.lang.reflect.GenericDeclaration: ...
	@overload
	def getGenericDeclaration(self, ) -> javawrappers.java.lang.Class: ...


class ValueExtractorResolver:
	class ValueExtractorCacheKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMaximallySpecificAndContainerElementCompliantValueExtractor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def getValueExtractorCandidatesForCascadedValidation(self, arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.TypeVariable, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getPotentialValueExtractorCandidatesForCascadedValidation(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.util.Set: ...
	def getMaximallySpecificAndRuntimeContainerElementCompliantValueExtractor(self, arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.TypeVariable, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.util.Collection, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getValueExtractorCandidatesForContainerDetectionOfGlobalCascadedValidation(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMaximallySpecificValueExtractorForAllContainerElements(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Set, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	def getMaximallySpecificValueExtractors(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...


class ValueExtractorManager:
	@overload
	def __init__(self, arg0: javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorManager, arg1: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaximallySpecificAndRuntimeContainerElementCompliantValueExtractor(self, arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.TypeVariable, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.util.Collection, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorDescriptor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getResolver(self, ) -> javawrappers.org.hibernate.validator.internal.engine.valueextraction.ValueExtractorResolver: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getDefaultValueExtractors() -> javawrappers.java.util.Set: ...


