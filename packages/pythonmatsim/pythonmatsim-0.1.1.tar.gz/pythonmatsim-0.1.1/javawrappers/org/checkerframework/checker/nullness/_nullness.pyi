################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class Opt:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isPresent(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def orElse(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def orElseThrow(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def filter(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def orElseGet(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def ifPresent(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Consumer, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def map(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...


class NullnessUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def castNonNull(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def castNonNullDeep(arg0: JArray(JArray(javawrappers.java.lang.Object, 1), 1), ) -> JArray(JArray(javawrappers.java.lang.Object, 1), 1): ...
	@overload
	@staticmethod
	def castNonNullDeep(arg0: JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), ) -> JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1): ...
	@overload
	@staticmethod
	def castNonNullDeep(arg0: JArray(JArray(JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), 1), 1), ) -> JArray(JArray(JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), 1), 1): ...
	@overload
	@staticmethod
	def castNonNullDeep(arg0: JArray(JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), 1), ) -> JArray(JArray(JArray(JArray(javawrappers.java.lang.Object, 1), 1), 1), 1): ...
	@overload
	@staticmethod
	def castNonNullDeep(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...


