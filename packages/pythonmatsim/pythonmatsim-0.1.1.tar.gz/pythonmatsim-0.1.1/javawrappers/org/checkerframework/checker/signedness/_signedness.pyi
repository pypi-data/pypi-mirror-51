################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.nio

from jpype.types import *
from typing import Union

from typing import overload

class SignednessUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def writeUnsignedChar(arg0: javawrappers.java.io.RandomAccessFile, arg1: Union[string, JString], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def toUnsignedShort(arg0: Union[string, JString], ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def toUnsignedShort(arg0: JByte, ) -> Union[int, JShort]: ...
	@staticmethod
	def writeUnsignedShort(arg0: javawrappers.java.io.RandomAccessFile, arg1: Union[int, JShort], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def writeUnsignedInt(arg0: javawrappers.java.io.RandomAccessFile, arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def toUnsignedLong(arg0: Union[int, JShort], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def toUnsignedLong(arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def toUnsignedLong(arg0: JByte, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def toUnsignedLong(arg0: Union[string, JString], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def wrapUnsigned(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def wrapUnsigned(arg0: JArray(JByte, 1), ) -> javawrappers.java.nio.ByteBuffer: ...
	@staticmethod
	def longFromFloat(arg0: Union[float, JFloat], ) -> Union[long, JLong]: ...
	@staticmethod
	def writeUnsigned(arg0: javawrappers.java.io.RandomAccessFile, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getUnsigned(arg0: javawrappers.java.nio.IntBuffer, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getUnsigned(arg0: javawrappers.java.nio.ByteBuffer, arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	@staticmethod
	def getUnsigned(arg0: javawrappers.java.nio.ByteBuffer, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def getUnsigned(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> JByte: ...
	@overload
	@staticmethod
	def getUnsigned(arg0: javawrappers.java.nio.ByteBuffer, ) -> JByte: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def putUnsignedLong(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> javawrappers.java.nio.ByteBuffer: ...
	@staticmethod
	def readUnsignedLong(arg0: javawrappers.java.io.RandomAccessFile, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def toDouble(arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def toDouble(arg0: Union[int, JShort], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def toDouble(arg0: JByte, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def toDouble(arg0: Union[long, JLong], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def readFullyUnsigned(arg0: javawrappers.java.io.RandomAccessFile, arg1: JArray(JByte, 1), ) -> None: ...
	@staticmethod
	def getUnsignedInt(arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@staticmethod
	def readUnsignedByte(arg0: javawrappers.java.io.RandomAccessFile, ) -> JByte: ...
	@staticmethod
	def byteFromDouble(arg0: Union[float, JDouble], ) -> JByte: ...
	@staticmethod
	def intFromDouble(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def putUnsigned(arg0: javawrappers.java.nio.ByteBuffer, arg1: JByte, ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def putUnsigned(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: JByte, ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def putUnsigned(arg0: javawrappers.java.nio.IntBuffer, arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.nio.IntBuffer: ...
	@overload
	@staticmethod
	def putUnsigned(arg0: javawrappers.java.nio.IntBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.nio.IntBuffer: ...
	@overload
	@staticmethod
	def putUnsigned(arg0: javawrappers.java.nio.IntBuffer, arg1: Union[int, JInt], ) -> javawrappers.java.nio.IntBuffer: ...
	@overload
	@staticmethod
	def putUnsigned(arg0: javawrappers.java.nio.IntBuffer, arg1: JArray(Union[int, JInt], 1), ) -> javawrappers.java.nio.IntBuffer: ...
	@staticmethod
	def intFromFloat(arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@staticmethod
	def readUnsigned(arg0: javawrappers.java.io.RandomAccessFile, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def putUnsignedShort(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def putUnsignedShort(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JShort], ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def toFloat(arg0: JByte, ) -> Union[float, JFloat]: ...
	@overload
	@staticmethod
	def toFloat(arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	@staticmethod
	def toFloat(arg0: Union[long, JLong], ) -> Union[float, JFloat]: ...
	@overload
	@staticmethod
	def toFloat(arg0: Union[int, JShort], ) -> Union[float, JFloat]: ...
	@staticmethod
	def shortFromFloat(arg0: Union[float, JFloat], ) -> Union[int, JShort]: ...
	@staticmethod
	def getUnsignedShort(arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def toUnsignedInt(arg0: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def toUnsignedInt(arg0: Union[string, JString], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def toUnsignedInt(arg0: JByte, ) -> Union[int, JInt]: ...
	@staticmethod
	def readUnsignedInt(arg0: javawrappers.java.io.RandomAccessFile, ) -> Union[int, JInt]: ...
	@staticmethod
	def readUnsignedChar(arg0: javawrappers.java.io.RandomAccessFile, ) -> Union[string, JString]: ...
	@overload
	@staticmethod
	def compareUnsigned(arg0: JByte, arg1: JByte, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def compareUnsigned(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def compareUnsigned(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def compareUnsigned(arg0: Union[int, JShort], arg1: Union[int, JShort], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def writeUnsignedByte(arg0: javawrappers.java.io.RandomAccessFile, arg1: JByte, ) -> None: ...
	@staticmethod
	def longFromDouble(arg0: Union[float, JDouble], ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: Union[int, JShort], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: JByte, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: JByte, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: Union[int, JShort], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toUnsignedString(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def shortFromDouble(arg0: Union[float, JDouble], ) -> Union[int, JShort]: ...
	@staticmethod
	def byteFromFloat(arg0: Union[float, JFloat], ) -> JByte: ...
	@staticmethod
	def readUnsignedShort(arg0: javawrappers.java.io.RandomAccessFile, ) -> Union[int, JShort]: ...
	@overload
	@staticmethod
	def putUnsignedInt(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	@staticmethod
	def putUnsignedInt(arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...
	@staticmethod
	def writeUnsignedLong(arg0: javawrappers.java.io.RandomAccessFile, arg1: Union[long, JLong], ) -> None: ...


