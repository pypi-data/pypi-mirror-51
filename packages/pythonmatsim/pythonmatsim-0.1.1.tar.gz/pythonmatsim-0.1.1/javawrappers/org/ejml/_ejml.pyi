################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.ejml.interfaces.decomposition
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.ejml.data
import javawrappers.org.ejml

from jpype.types import *
from typing import Union

from typing import overload

class EjmlVersion:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CodeGeneratorMisc:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class UtilEjml:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def max(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def max(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	@staticmethod
	def isUncountable(arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isUncountable(arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def shuffled(arg0: Union[int, JInt], arg1: javawrappers.java.util.Random, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def shuffled(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def pivotVector(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.IGrowArray, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def isIdentical(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: Union[float, JFloat], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def parse_DSCC(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixSparseCSC: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def permutationSign(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def shuffledSorted(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def memset(arg0: JArray(Union[float, JDouble], 1), arg1: Union[float, JDouble], arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def memset(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def parse_DDRM(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def parse_FDRM(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@staticmethod
	def setnull(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def shuffle(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def sortByIndex(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Integer, 1): ...


class EjmlUnitTests:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def assertEqualsUncountable(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def assertRelativeEquals(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.CMatrix, arg1: javawrappers.org.ejml.data.CMatrix, arg2: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, arg2: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.ZMatrix, arg1: javawrappers.org.ejml.data.ZMatrix, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def assertEquals(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.FMatrix, arg2: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def assertEqualsTrans(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def assertEqualsTrans(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.FMatrix, arg2: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def assertCountable(arg0: javawrappers.org.ejml.data.DMatrix, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def assertShape(arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	@staticmethod
	def assertShape(arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class LinearSolverSafe:
	def __init__(self, arg0: javawrappers.org.ejml.interfaces.linsol.LinearSolverDense, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.ReshapeMatrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.ReshapeMatrix, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.ReshapeMatrix, arg1: javawrappers.org.ejml.data.ReshapeMatrix, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...


class MatrixDimensionException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class EjmlParameters:
	def __init__(self, ): ...
	class MemoryUsage:
		LOW_MEMORY: EjmlParameters.MemoryUsage = ...
		FASTER: EjmlParameters.MemoryUsage = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.ejml.EjmlParameters.MemoryUsage: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.ejml.EjmlParameters.MemoryUsage, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.ejml.EjmlParameters.MemoryUsage: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.ejml.EjmlParameters.MemoryUsage, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


