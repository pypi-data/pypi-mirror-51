################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class MatrixFeatures_F:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.FMatrix, arg2: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.FMatrix, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class MatrixIO:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def saveSparseCSV(arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def saveSparseCSV(arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def saveDenseCSV(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def saveBin(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def printJava(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.DMatrix, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def printJava(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.FMatrix, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def loadCSV(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrix: ...
	@overload
	@staticmethod
	def loadCSV(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def loadBin(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.ejml.data.DMatrix: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.ZMatrix, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.CMatrix, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.DMatrix, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.FMatrix, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.CMatrix, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.FMatrix, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.ZMatrix, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.CMatrix, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.ZMatrix, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.FMatrix, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.DMatrix, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.DMatrix, ) -> None: ...
	@overload
	@staticmethod
	def print_(arg0: javawrappers.java.io.PrintStream, arg1: javawrappers.org.ejml.data.FMatrix, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MatrixFeatures_D:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ConvertMatrixData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.FMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.FMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.FMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.ZMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.ZMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.CMatrix, arg1: javawrappers.org.ejml.data.ZMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.CMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.FMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.ZMatrix, arg1: javawrappers.org.ejml.data.CMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.CMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.ZMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.CMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.ZMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.CMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.DMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> None: ...
	def notify(self, ) -> None: ...


class CommonOps_BDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def transposeSquare(arg0: javawrappers.org.ejml.data.BMatrixRMaj, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ComplexMath_F64:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def minus(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def conj(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.ComplexPolar_F64, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.ComplexPolar_F64, arg1: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def plus(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@staticmethod
	def sqrt(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def root(arg0: javawrappers.org.ejml.data.ComplexPolar_F64, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.ComplexPolar_F64, ) -> None: ...
	@overload
	@staticmethod
	def root(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@staticmethod
	def pow(arg0: javawrappers.org.ejml.data.ComplexPolar_F64, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.ComplexPolar_F64, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.ComplexPolar_F64, arg1: javawrappers.org.ejml.data.ComplexPolar_F64, arg2: javawrappers.org.ejml.data.ComplexPolar_F64, ) -> None: ...
	@overload
	@staticmethod
	def multiply(arg0: javawrappers.org.ejml.data.Complex_F64, arg1: javawrappers.org.ejml.data.Complex_F64, arg2: javawrappers.org.ejml.data.Complex_F64, ) -> None: ...
	@overload
	@staticmethod
	def multiply(arg0: javawrappers.org.ejml.data.ComplexPolar_F64, arg1: javawrappers.org.ejml.data.ComplexPolar_F64, arg2: javawrappers.org.ejml.data.ComplexPolar_F64, ) -> None: ...


class ReadCsv:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReader(self, ) -> javawrappers.java.io.BufferedReader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setComment(self, arg0: Union[string, JString], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ReadMatrixCsv:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReader(self, ) -> javawrappers.java.io.BufferedReader: ...
	def notifyAll(self, ) -> None: ...
	def readFDRM(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	def notify(self, ) -> None: ...
	def readCDRM(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.CMatrixRMaj: ...
	def read32(self, ) -> javawrappers.org.ejml.data.FMatrix: ...
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def read64(self, ) -> javawrappers.org.ejml.data.DMatrix: ...
	def readDDRM(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readZDRM(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.ZMatrixRMaj: ...
	def setComment(self, arg0: Union[string, JString], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ComplexMath_F32:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def minus(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def conj(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.ComplexPolar_F32, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.ComplexPolar_F32, arg1: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def plus(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@staticmethod
	def sqrt(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def root(arg0: javawrappers.org.ejml.data.ComplexPolar_F32, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.ComplexPolar_F32, ) -> None: ...
	@overload
	@staticmethod
	def root(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@staticmethod
	def pow(arg0: javawrappers.org.ejml.data.ComplexPolar_F32, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.ComplexPolar_F32, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.ComplexPolar_F32, arg1: javawrappers.org.ejml.data.ComplexPolar_F32, arg2: javawrappers.org.ejml.data.ComplexPolar_F32, ) -> None: ...
	@overload
	@staticmethod
	def multiply(arg0: javawrappers.org.ejml.data.Complex_F32, arg1: javawrappers.org.ejml.data.Complex_F32, arg2: javawrappers.org.ejml.data.Complex_F32, ) -> None: ...
	@overload
	@staticmethod
	def multiply(arg0: javawrappers.org.ejml.data.ComplexPolar_F32, arg1: javawrappers.org.ejml.data.ComplexPolar_F32, arg2: javawrappers.org.ejml.data.ComplexPolar_F32, ) -> None: ...


class ConvertMatrixType:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.MatrixType, ) -> javawrappers.org.ejml.data.Matrix: ...
	def notify(self, ) -> None: ...


class QuickSort_S32:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def sort(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	def notify(self, ) -> None: ...


class SortCoupledArray_F64:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def quick(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def shellSort(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> None: ...
	def notify(self, ) -> None: ...


class ConvertFMatrixStruct:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixSparseCSC, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix4, ) -> javawrappers.org.ejml.data.FMatrix4: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix5, ) -> javawrappers.org.ejml.data.FMatrix5: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix3x3, ) -> javawrappers.org.ejml.data.FMatrix3x3: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix5x5, ) -> javawrappers.org.ejml.data.FMatrix5x5: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix6, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix6, ) -> javawrappers.org.ejml.data.FMatrix6: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrixRBlock, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix5, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixSparseCSC, arg1: javawrappers.org.ejml.data.FMatrixSparseTriplet, ) -> javawrappers.org.ejml.data.FMatrixSparseTriplet: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix3, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix4, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix5x5, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix6x6, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix2x2, ) -> javawrappers.org.ejml.data.FMatrix2x2: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRBlock, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix4x4, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.FMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix2, ) -> javawrappers.org.ejml.data.FMatrix2: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix2, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix4x4, ) -> javawrappers.org.ejml.data.FMatrix4x4: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix3x3, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix2x2, arg1: javawrappers.org.ejml.data.FMatrixRMaj, ) -> javawrappers.org.ejml.data.FMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix3, ) -> javawrappers.org.ejml.data.FMatrix3: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrixSparseCSC, arg2: Union[float, JFloat], ) -> javawrappers.org.ejml.data.FMatrixSparseCSC: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrix, arg1: javawrappers.org.ejml.data.FMatrixSparseTriplet, arg2: Union[float, JFloat], ) -> javawrappers.org.ejml.data.FMatrixSparseTriplet: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrixSparseTriplet, arg2: Union[float, JFloat], ) -> javawrappers.org.ejml.data.FMatrixSparseTriplet: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixRMaj, arg1: javawrappers.org.ejml.data.FMatrix6x6, ) -> javawrappers.org.ejml.data.FMatrix6x6: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet, arg1: javawrappers.org.ejml.data.FMatrixSparseCSC, ) -> javawrappers.org.ejml.data.FMatrixSparseCSC: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.FMatrixSparseTriplet, arg1: javawrappers.org.ejml.data.FMatrixSparseCSC, arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.org.ejml.data.FMatrixSparseCSC: ...
	def notify(self, ) -> None: ...


class ConvertDMatrixStruct:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> javawrappers.org.ejml.data.DMatrix4: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> javawrappers.org.ejml.data.DMatrix5: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> javawrappers.org.ejml.data.DMatrix4x4: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> javawrappers.org.ejml.data.DMatrix2x2: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> javawrappers.org.ejml.data.DMatrix6: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRBlock, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixSparseTriplet, arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixSparseTriplet: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixSparseCSC, arg1: javawrappers.org.ejml.data.DMatrixSparseTriplet, ) -> javawrappers.org.ejml.data.DMatrixSparseTriplet: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet, arg1: javawrappers.org.ejml.data.DMatrixSparseCSC, ) -> javawrappers.org.ejml.data.DMatrixSparseCSC: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> javawrappers.org.ejml.data.DMatrix6x6: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> javawrappers.org.ejml.data.DMatrix2: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> javawrappers.org.ejml.data.DMatrix3: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> javawrappers.org.ejml.data.DMatrix3x3: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, ) -> None: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> javawrappers.org.ejml.data.DMatrix5x5: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrixSparseTriplet, arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixSparseTriplet: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixSparseCSC, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixSparseCSC, arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixSparseCSC: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixRBlock, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def convert(arg0: javawrappers.org.ejml.data.DMatrixSparseTriplet, arg1: javawrappers.org.ejml.data.DMatrixSparseCSC, arg2: JArray(Union[int, JInt], 1), ) -> javawrappers.org.ejml.data.DMatrixSparseCSC: ...
	def notify(self, ) -> None: ...


class SortCoupledArray_F32:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def quick(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), arg3: JArray(Union[float, JFloat], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def shellSort(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), ) -> None: ...
	def notify(self, ) -> None: ...


