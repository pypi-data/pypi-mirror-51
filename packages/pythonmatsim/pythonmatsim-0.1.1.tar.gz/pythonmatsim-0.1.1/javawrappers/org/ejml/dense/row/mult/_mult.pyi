################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class MatrixMultProduct_DDRM:
	def __init__(self, ): ...
	@staticmethod
	def inner_reorder_upper(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def outer(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@staticmethod
	def inner_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def inner_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def notify(self, ) -> None: ...


class SubmatrixOps_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setSubMatrix(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MatrixVectorMult_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def multAddTransA_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def multTransA_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def multAddTransA_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def multTransA_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	def notify(self, ) -> None: ...


class VectorVectorMult_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def householder(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, arg3: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def addOuterProd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def rank1Update(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, arg3: javawrappers.org.ejml.data.DMatrixRMaj, arg4: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def rank1Update(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, arg3: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@staticmethod
	def innerProd(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def innerProdTranA(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def innerProdA(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def outerProd(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...


class MatrixMatrixMult_DDRM:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def multAdd_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAdd_reorder(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def multTransA_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransA_small(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def mult_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def mult_reorder(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def mult_aux(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def mult_aux(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def multAdd_aux(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def multAdd_aux(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA_small(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransA_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransA_reorder(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB_aux(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB_aux(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA_reorder(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA_reorder(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def mult_small(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def mult_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def multAdd_small(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAdd_small(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB_aux(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, arg4: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	@staticmethod
	def multTransAB_aux(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: JArray(Union[float, JDouble], 1), ) -> None: ...


