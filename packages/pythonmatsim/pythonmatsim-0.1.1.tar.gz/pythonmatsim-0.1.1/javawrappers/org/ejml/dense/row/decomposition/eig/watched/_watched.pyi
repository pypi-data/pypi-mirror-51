################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.dense.row.decomposition.eig.watched
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class WatchedDoubleStepQREigen_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addEigenAt(self, arg0: Union[int, JInt], ) -> None: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setChecks(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def addComputedEigen2x2(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def incrementSteps(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isZero(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def setQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def isReal2x2(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def bulgeSingleStepQn(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def bulgeSingleStepQn(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def createBulgeSingleStep(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def bulgeDoubleStepQn(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def bulgeDoubleStepQn(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def exceptionalShift(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def printSteps(self, ) -> None: ...
	def implicitDoubleStep(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def eigen2by2_scale(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setup(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def performImplicitSingleStep(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEigenvalues(self, ) -> JArray(javawrappers.org.ejml.data.Complex_F64, 1): ...
	def performImplicitDoubleStep(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> None: ...


class WatchedDoubleStepQREigenvalue_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def process(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def getImplicitQR(self, ) -> javawrappers.org.ejml.dense.row.decomposition.eig.watched.WatchedDoubleStepQREigen_DDRM: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getNumberOfEigenvalues(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setup(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEigenvalues(self, ) -> JArray(javawrappers.org.ejml.data.Complex_F64, 1): ...
	def notify(self, ) -> None: ...


class WatchedDoubleStepQREigenvector_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def process(self, arg0: javawrappers.org.ejml.dense.row.decomposition.eig.watched.WatchedDoubleStepQREigen_DDRM, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def getImplicit(self, ) -> javawrappers.org.ejml.dense.row.decomposition.eig.watched.WatchedDoubleStepQREigen_DDRM: ...
	def notifyAll(self, ) -> None: ...
	def findQandR(self, ) -> Union[int, JBoolean]: ...
	def getQ(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEigenvalues(self, ) -> JArray(javawrappers.org.ejml.data.Complex_F64, 1): ...
	def getEigenvectors(self, ) -> JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1): ...
	def extractVectors(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...


