################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class CommonOps_DDF4:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@staticmethod
	def diag(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@staticmethod
	def dot(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@staticmethod
	def trace(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	@staticmethod
	def extractRow(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix4, ) -> javawrappers.org.ejml.data.DMatrix4: ...
	@staticmethod
	def det(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, arg3: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, arg2: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@staticmethod
	def extractColumn(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix4, ) -> javawrappers.org.ejml.data.DMatrix4: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, ) -> javawrappers.org.ejml.data.DMatrix4x4: ...


class MatrixFeatures_DDF3:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MatrixFeatures_DDF2:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class NormOps_DDF5:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class CommonOps_DDF2:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@staticmethod
	def diag(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@staticmethod
	def dot(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@staticmethod
	def trace(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	@staticmethod
	def extractRow(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix2, ) -> javawrappers.org.ejml.data.DMatrix2: ...
	@staticmethod
	def det(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, arg3: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, arg2: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, arg2: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix2, arg1: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@staticmethod
	def extractColumn(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix2, ) -> javawrappers.org.ejml.data.DMatrix2: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix2x2, arg1: javawrappers.org.ejml.data.DMatrix2x2, ) -> javawrappers.org.ejml.data.DMatrix2x2: ...


class CommonOps_DDF6:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def multTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@staticmethod
	def diag(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@staticmethod
	def dot(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@staticmethod
	def trace(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	@staticmethod
	def extractRow(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix6, ) -> javawrappers.org.ejml.data.DMatrix6: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, arg3: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, arg2: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@staticmethod
	def extractColumn(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix6, ) -> javawrappers.org.ejml.data.DMatrix6: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, ) -> javawrappers.org.ejml.data.DMatrix6x6: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...


class CommonOps_DDF3:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@staticmethod
	def diag(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@staticmethod
	def dot(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@staticmethod
	def trace(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	@staticmethod
	def extractRow(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix3, ) -> javawrappers.org.ejml.data.DMatrix3: ...
	@staticmethod
	def det(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, arg3: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, arg2: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, arg2: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix3, arg1: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@staticmethod
	def extractColumn(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix3, ) -> javawrappers.org.ejml.data.DMatrix3: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix3x3, arg1: javawrappers.org.ejml.data.DMatrix3x3, ) -> javawrappers.org.ejml.data.DMatrix3x3: ...


class MatrixFeatures_DDF6:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix6, arg1: javawrappers.org.ejml.data.DMatrix6, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix6x6, arg1: javawrappers.org.ejml.data.DMatrix6x6, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MatrixFeatures_DDF4:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix4, arg1: javawrappers.org.ejml.data.DMatrix4, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix4x4, arg1: javawrappers.org.ejml.data.DMatrix4x4, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CommonOps_DDF5:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@staticmethod
	def diag(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@staticmethod
	def dot(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@staticmethod
	def trace(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	@staticmethod
	def extractRow(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix5, ) -> javawrappers.org.ejml.data.DMatrix5: ...
	@staticmethod
	def det(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, arg3: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, arg2: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, ) -> None: ...
	@overload
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@staticmethod
	def extractColumn(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrix5, ) -> javawrappers.org.ejml.data.DMatrix5: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, ) -> javawrappers.org.ejml.data.DMatrix5x5: ...


class NormOps_DDF3:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> None: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix3, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix3x3, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class NormOps_DDF6:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> None: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix6, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix6x6, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class NormOps_DDF4:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> None: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix4, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix4x4, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class MatrixFeatures_DDF5:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix5x5, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrix5, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix5, arg1: javawrappers.org.ejml.data.DMatrix5, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrix5x5, arg1: javawrappers.org.ejml.data.DMatrix5x5, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class NormOps_DDF2:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> None: ...
	@overload
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix2, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrix2x2, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


