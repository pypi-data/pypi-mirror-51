################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.ejml.interfaces.decomposition
import javawrappers.java.util
import javawrappers.java.awt.image
import javawrappers.java.awt.dnd
import javawrappers.java.beans
import javawrappers.java.awt.im
import javawrappers.javax.swing.event
import javawrappers.org.ejml.data
import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.javax.accessibility
import javawrappers.java.io
import javawrappers.javax.swing.plaf
import javawrappers.java.awt.event
import javawrappers.javax.swing.border
import javawrappers.javax.swing

from jpype.types import *
from typing import Union

from typing import overload

class MatrixFeatures_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isPositiveDefinite(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isEqualsTriangle(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[int, JBoolean], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def hasNaN(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isIdentical(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isVector(arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isZeros(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def hasUncountable(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isOrthogonal(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isDiagonalPositive(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def rank(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def rank(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def isSymmetric(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSymmetric(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isNegative(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def countNonZero(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JInt]: ...
	@staticmethod
	def isInverse(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSkewSymmetric(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isIdentity(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isFullRank(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isLowerTriangle(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isRowsLinearIndependent(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isPositiveSemidefinite(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isConstantVal(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isUpperTriangle(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.BMatrixRMaj, arg1: javawrappers.org.ejml.data.BMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isEquals(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSquare(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def nullity(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def nullity(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JInt]: ...


class SpecializedOps_DDRM:
	def __init__(self, ): ...
	@staticmethod
	def elementSumSq(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def subvector(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], arg5: Union[int, JInt], arg6: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def diffNormP1(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def pivotMatrix(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def diffNormF(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def createReflector(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def createReflector(arg0: javawrappers.org.ejml.data.DMatrix1Row, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def qualityTriangular(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def addIdentity(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def diffNormF_fast(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def elementDiagonalMaxAbs(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def copyTriangle(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def splitIntoVectors(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: Union[int, JBoolean], ) -> JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1): ...
	@staticmethod
	def copyChangeRow(arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def diagProd(arg0: javawrappers.org.ejml.data.DMatrix1Row, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CovarianceOps_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def randomVector(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def isValidFast(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isValid(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DMatrixComponent:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def getLocation(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Point: ...
	@overload
	def getLocation(self, ) -> javawrappers.java.awt.Point: ...
	@overload
	def requestFocusInWindow(self, ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocusInWindow(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> Union[int, JBoolean]: ...
	def getInputVerifier(self, ) -> javawrappers.javax.swing.InputVerifier: ...
	def isOpaque(self, ) -> Union[int, JBoolean]: ...
	def setDoubleBuffered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def paint(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getInputMethodListeners(self, ) -> JArray(javawrappers.java.awt.event.InputMethodListener, 1): ...
	def setLayout(self, arg0: javawrappers.java.awt.LayoutManager, ) -> None: ...
	def mouseDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getInputMethodRequests(self, ) -> javawrappers.java.awt.im.InputMethodRequests: ...
	def requestDefaultFocus(self, ) -> Union[int, JBoolean]: ...
	def addHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def removeAll(self, ) -> None: ...
	def getMinimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	@staticmethod
	def renderMatrix(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.java.awt.image.BufferedImage, arg2: Union[float, JDouble], ) -> None: ...
	def getAlignmentY(self, ) -> Union[float, JFloat]: ...
	def setAutoscrolls(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getAlignmentX(self, ) -> Union[float, JFloat]: ...
	def setAlignmentY(self, arg0: Union[float, JFloat], ) -> None: ...
	def dispatchEvent(self, arg0: javawrappers.java.awt.AWTEvent, ) -> None: ...
	def isOptimizedDrawingEnabled(self, ) -> Union[int, JBoolean]: ...
	def reshape(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setAlignmentX(self, arg0: Union[float, JFloat], ) -> None: ...
	def postEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.Point, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> javawrappers.java.awt.Dimension: ...
	def unregisterKeyboardAction(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> None: ...
	def mouseUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def enableInputMethods(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def addComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def removeInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def getClientProperty(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def removeHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def isRequestFocusEnabled(self, ) -> Union[int, JBoolean]: ...
	def getFontMetrics(self, arg0: javawrappers.java.awt.Font, ) -> javawrappers.java.awt.FontMetrics: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def getAncestorListeners(self, ) -> JArray(javawrappers.javax.swing.event.AncestorListener, 1): ...
	def getIgnoreRepaint(self, ) -> Union[int, JBoolean]: ...
	def getBaselineResizeBehavior(self, ) -> javawrappers.java.awt.Component.BaselineResizeBehavior: ...
	def removeMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def applyComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def validate(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.awt.Container: ...
	def isMinimumSizeSet(self, ) -> Union[int, JBoolean]: ...
	def setComponentOrientation(self, arg0: javawrappers.java.awt.ComponentOrientation, ) -> None: ...
	def getVerifyInputWhenFocusTarget(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setBounds(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def setBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def isValidateRoot(self, ) -> Union[int, JBoolean]: ...
	def addNotify(self, ) -> None: ...
	def addInputMethodListener(self, arg0: javawrappers.java.awt.event.InputMethodListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFocusCycleRootAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def getToolTipLocation(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.awt.Point: ...
	def setFocusTraversalPolicyProvider(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getConditionForKeyStroke(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setToolTipText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def countComponents(self, ) -> Union[int, JInt]: ...
	def isFocusTraversable(self, ) -> Union[int, JBoolean]: ...
	def inside(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getInputContext(self, ) -> javawrappers.java.awt.im.InputContext: ...
	def nextFocus(self, ) -> None: ...
	def getFocusTraversalKeys(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.Set: ...
	def isCursorSet(self, ) -> Union[int, JBoolean]: ...
	def setVerifyInputWhenFocusTarget(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setActionMap(self, arg0: javawrappers.javax.swing.ActionMap, ) -> None: ...
	def getMouseWheelListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseWheelListener, 1): ...
	def getComponents(self, ) -> JArray(javawrappers.java.awt.Component, 1): ...
	def setInputVerifier(self, arg0: javawrappers.javax.swing.InputVerifier, ) -> None: ...
	def removeMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def doLayout(self, ) -> None: ...
	def getNextFocusableComponent(self, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	@overload
	def add(self, arg0: javawrappers.java.awt.PopupMenu, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def putClientProperty(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setFocusCycleRoot(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setNextFocusableComponent(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setDropTarget(self, arg0: javawrappers.java.awt.dnd.DropTarget, ) -> None: ...
	@overload
	def list(self, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintWriter, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def list(self, arg0: javawrappers.java.io.PrintStream, arg1: Union[int, JInt], ) -> None: ...
	def revalidate(self, ) -> None: ...
	def createToolTip(self, ) -> javawrappers.javax.swing.JToolTip: ...
	@staticmethod
	def setDefaultLocale(arg0: javawrappers.java.util.Locale, ) -> None: ...
	def removeNotify(self, ) -> None: ...
	def gotFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeAncestorListener(self, arg0: javawrappers.javax.swing.event.AncestorListener, ) -> None: ...
	def scrollRectToVisible(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getRegisteredKeyStrokes(self, ) -> JArray(javawrappers.javax.swing.KeyStroke, 1): ...
	def handleEvent(self, arg0: javawrappers.java.awt.Event, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isForegroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def show(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def show(self, ) -> None: ...
	def update(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def isFocusTraversalPolicySet(self, ) -> Union[int, JBoolean]: ...
	def getUIClassID(self, ) -> javawrappers.java.lang.String: ...
	def setMaximumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.MenuComponent, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.awt.Component, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	def addMouseWheelListener(self, arg0: javawrappers.java.awt.event.MouseWheelListener, ) -> None: ...
	def imageUpdate(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	@overload
	def checkImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JInt]: ...
	def getLayout(self, ) -> javawrappers.java.awt.LayoutManager: ...
	def addKeyListener(self, arg0: javawrappers.java.awt.event.KeyListener, ) -> None: ...
	def getContainerListeners(self, ) -> JArray(javawrappers.java.awt.event.ContainerListener, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getComponentListeners(self, ) -> JArray(javawrappers.java.awt.event.ComponentListener, 1): ...
	def isMaximumSizeSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getCursor(self, ) -> javawrappers.java.awt.Cursor: ...
	@overload
	def createImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Image: ...
	@overload
	def createImage(self, arg0: javawrappers.java.awt.image.ImageProducer, ) -> javawrappers.java.awt.Image: ...
	def mouseMove(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def areFocusTraversalKeysSet(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getKeyListeners(self, ) -> JArray(javawrappers.java.awt.event.KeyListener, 1): ...
	@overload
	def registerKeyboardAction(self, arg0: javawrappers.java.awt.event.ActionListener, arg1: javawrappers.javax.swing.KeyStroke, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def registerKeyboardAction(self, arg0: javawrappers.java.awt.event.ActionListener, arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.swing.KeyStroke, arg3: Union[int, JInt], ) -> None: ...
	def addAncestorListener(self, arg0: javawrappers.javax.swing.event.AncestorListener, ) -> None: ...
	def layout(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getComponentPopupMenu(self, ) -> javawrappers.javax.swing.JPopupMenu: ...
	def getBaseline(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setUI(self, arg0: javawrappers.javax.swing.plaf.PanelUI, ) -> None: ...
	def paintComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def setBorder(self, arg0: javawrappers.javax.swing.border.Border, ) -> None: ...
	def getFocusListeners(self, ) -> JArray(javawrappers.java.awt.event.FocusListener, 1): ...
	@overload
	def resize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def resize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.VolatileImage: ...
	@overload
	def createVolatileImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.ImageCapabilities, ) -> javawrappers.java.awt.image.VolatileImage: ...
	def location(self, ) -> javawrappers.java.awt.Point: ...
	def lostFocus(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def keyDown(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDropTarget(self, ) -> javawrappers.java.awt.dnd.DropTarget: ...
	def getTransferHandler(self, ) -> javawrappers.javax.swing.TransferHandler: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getHierarchyBoundsListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyBoundsListener, 1): ...
	def getRootPane(self, ) -> javawrappers.javax.swing.JRootPane: ...
	def getAutoscrolls(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getBounds(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.Rectangle: ...
	def setPreferredSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def setInputMap(self, arg0: Union[int, JInt], arg1: javawrappers.javax.swing.InputMap, ) -> None: ...
	@overload
	def enable(self, ) -> None: ...
	@overload
	def enable(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def paintImmediately(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	@overload
	def paintImmediately(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def getMousePosition(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.awt.Point: ...
	@overload
	def getMousePosition(self, ) -> javawrappers.java.awt.Point: ...
	def isManagingFocus(self, ) -> Union[int, JBoolean]: ...
	def action(self, arg0: javawrappers.java.awt.Event, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setMatrix(self, arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	def addContainerListener(self, arg0: javawrappers.java.awt.event.ContainerListener, ) -> None: ...
	def setComponentZOrder(self, arg0: javawrappers.java.awt.Component, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[string, JString], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: JByte, arg2: JByte, ) -> None: ...
	@overload
	def firePropertyChange(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], arg2: Union[int, JShort], ) -> None: ...
	def addMouseMotionListener(self, arg0: javawrappers.java.awt.event.MouseMotionListener, ) -> None: ...
	def getComponentOrientation(self, ) -> javawrappers.java.awt.ComponentOrientation: ...
	def setFocusable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTreeLock(self, ) -> javawrappers.java.lang.Object: ...
	def addHierarchyListener(self, arg0: javawrappers.java.awt.event.HierarchyListener, ) -> None: ...
	def isBackgroundSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def findComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def findComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setOpaque(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setComponentPopupMenu(self, arg0: javawrappers.javax.swing.JPopupMenu, ) -> None: ...
	def setEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isLightweight(self, ) -> Union[int, JBoolean]: ...
	def setTransferHandler(self, arg0: javawrappers.javax.swing.TransferHandler, ) -> None: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def minimumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def bounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def repaint(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def repaint(self, ) -> None: ...
	@overload
	def repaint(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def repaint(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMouseMotionListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseMotionListener, 1): ...
	def setMinimumSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	def transferFocus(self, ) -> None: ...
	def printComponents(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getListeners(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.util.EventListener, 1): ...
	@overload
	def getInputMap(self, ) -> javawrappers.javax.swing.InputMap: ...
	@overload
	def getInputMap(self, arg0: Union[int, JInt], ) -> javawrappers.javax.swing.InputMap: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setRequestFocusEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getLocationOnScreen(self, ) -> javawrappers.java.awt.Point: ...
	def keyUp(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setFocusTraversalPolicy(self, arg0: javawrappers.java.awt.FocusTraversalPolicy, ) -> None: ...
	def paintAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def setFocusTraversalKeys(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Set, ) -> None: ...
	def setDebugGraphicsOptions(self, arg0: Union[int, JInt], ) -> None: ...
	def isPaintingTile(self, ) -> Union[int, JBoolean]: ...
	def hasFocus(self, ) -> Union[int, JBoolean]: ...
	def isPreferredSizeSet(self, ) -> Union[int, JBoolean]: ...
	def isDoubleBuffered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPropertyChangeListeners(self, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	@overload
	def getPropertyChangeListeners(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.beans.PropertyChangeListener, 1): ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getInsets(self, arg0: javawrappers.java.awt.Insets, ) -> javawrappers.java.awt.Insets: ...
	@overload
	def getInsets(self, ) -> javawrappers.java.awt.Insets: ...
	def getFocusTraversalKeysEnabled(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDefaultLocale() -> javawrappers.java.util.Locale: ...
	def hide(self, ) -> None: ...
	def getPreferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def disable(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	@overload
	def prepareImage(self, arg0: javawrappers.java.awt.Image, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.ImageObserver, ) -> Union[int, JBoolean]: ...
	def isFocusable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getToolTipText(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getToolTipText(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getBorder(self, ) -> javawrappers.javax.swing.border.Border: ...
	def isPaintingForPrint(self, ) -> Union[int, JBoolean]: ...
	def insets(self, ) -> javawrappers.java.awt.Insets: ...
	def setMixingCutoutShape(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def mouseExit(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getHierarchyListeners(self, ) -> JArray(javawrappers.java.awt.event.HierarchyListener, 1): ...
	def computeVisibleRect(self, arg0: javawrappers.java.awt.Rectangle, ) -> None: ...
	def isShowing(self, ) -> Union[int, JBoolean]: ...
	def mouseEnter(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def mouseDrag(self, arg0: javawrappers.java.awt.Event, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def preferredSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getMouseListeners(self, ) -> JArray(javawrappers.java.awt.event.MouseListener, 1): ...
	def setFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setInheritsPopupMenu(self, arg0: Union[int, JBoolean], ) -> None: ...
	def deliverEvent(self, arg0: javawrappers.java.awt.Event, ) -> None: ...
	def getActionMap(self, ) -> javawrappers.javax.swing.ActionMap: ...
	def getForeground(self, ) -> javawrappers.java.awt.Color: ...
	def isAncestorOf(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def getComponentCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getUI(self, ) -> javawrappers.javax.swing.plaf.PanelUI: ...
	@overload
	def getUI(self, ) -> javawrappers.javax.swing.plaf.ComponentUI: ...
	def getTopLevelAncestor(self, ) -> javawrappers.java.awt.Container: ...
	def getActionForKeyStroke(self, arg0: javawrappers.javax.swing.KeyStroke, ) -> javawrappers.java.awt.event.ActionListener: ...
	def grabFocus(self, ) -> None: ...
	def getPopupLocation(self, arg0: javawrappers.java.awt.event.MouseEvent, ) -> javawrappers.java.awt.Point: ...
	def getFont(self, ) -> javawrappers.java.awt.Font: ...
	def setCursor(self, arg0: javawrappers.java.awt.Cursor, ) -> None: ...
	def isDisplayable(self, ) -> Union[int, JBoolean]: ...
	def getGraphicsConfiguration(self, ) -> javawrappers.java.awt.GraphicsConfiguration: ...
	def getComponent(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def removeComponentListener(self, arg0: javawrappers.java.awt.event.ComponentListener, ) -> None: ...
	@overload
	def requestFocus(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def requestFocus(self, ) -> None: ...
	@overload
	def requestFocus(self, arg0: javawrappers.java.awt.event.FocusEvent.Cause, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def locate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def addFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def getInheritsPopupMenu(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getComponentAt(self, arg0: javawrappers.java.awt.Point, ) -> javawrappers.java.awt.Component: ...
	@overload
	def getComponentAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Component: ...
	def updateUI(self, ) -> None: ...
	@overload
	def isFocusCycleRoot(self, arg0: javawrappers.java.awt.Container, ) -> Union[int, JBoolean]: ...
	@overload
	def isFocusCycleRoot(self, ) -> Union[int, JBoolean]: ...
	def resetKeyboardActions(self, ) -> None: ...
	def setFocusTraversalKeysEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getComponentZOrder(self, arg0: javawrappers.java.awt.Component, ) -> Union[int, JInt]: ...
	def setBackground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def printAll(self, arg0: javawrappers.java.awt.Graphics, ) -> None: ...
	def getToolkit(self, ) -> javawrappers.java.awt.Toolkit: ...
	def getVetoableChangeListeners(self, ) -> JArray(javawrappers.java.beans.VetoableChangeListener, 1): ...
	def transferFocusUpCycle(self, ) -> None: ...
	def isFontSet(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setSize(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setSize(self, arg0: javawrappers.java.awt.Dimension, ) -> None: ...
	@overload
	def setLocation(self, arg0: javawrappers.java.awt.Point, ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def isFocusTraversalPolicyProvider(self, ) -> Union[int, JBoolean]: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def removeFocusListener(self, arg0: javawrappers.java.awt.event.FocusListener, ) -> None: ...
	def setIgnoreRepaint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getVisibleRect(self, ) -> javawrappers.java.awt.Rectangle: ...
	def transferFocusBackward(self, ) -> None: ...
	def move(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def transferFocusDownCycle(self, ) -> None: ...
	@staticmethod
	def isLightweightComponent(arg0: javawrappers.java.awt.Component, ) -> Union[int, JBoolean]: ...
	def setForeground(self, arg0: javawrappers.java.awt.Color, ) -> None: ...
	def invalidate(self, ) -> None: ...
	def getAccessibleContext(self, ) -> javawrappers.javax.accessibility.AccessibleContext: ...
	def isFocusOwner(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSize(self, arg0: javawrappers.java.awt.Dimension, ) -> javawrappers.java.awt.Dimension: ...
	@overload
	def getSize(self, ) -> javawrappers.java.awt.Dimension: ...
	def getX(self, ) -> Union[int, JInt]: ...
	def removeHierarchyBoundsListener(self, arg0: javawrappers.java.awt.event.HierarchyBoundsListener, ) -> None: ...
	def getY(self, ) -> Union[int, JInt]: ...
	def getFocusTraversalPolicy(self, ) -> javawrappers.java.awt.FocusTraversalPolicy: ...
	def removeMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...
	def getBackground(self, ) -> javawrappers.java.awt.Color: ...
	def getDebugGraphicsOptions(self, ) -> Union[int, JInt]: ...
	def addMouseListener(self, arg0: javawrappers.java.awt.event.MouseListener, ) -> None: ...


class RandomMatrices_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def symmetricWithEigenvalues(arg0: Union[int, JInt], arg1: javawrappers.java.util.Random, *arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def fillUniform(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> None: ...
	@overload
	@staticmethod
	def fillUniform(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def rectangleGaussian(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def symmetricPosDef(arg0: Union[int, JInt], arg1: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def symmetric(arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def symmetric(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def fillGaussian(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def triangularUpper(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def addUniform(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def insideSpan(arg0: JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1), arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def orthogonal(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def setRandomB(arg0: javawrappers.org.ejml.data.BMatrixRMaj, arg1: javawrappers.java.util.Random, ) -> None: ...
	@staticmethod
	def randomBinary(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def rectangle(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def rectangle(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def singular(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, *arg3: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def diagonal(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def diagonal(arg0: Union[int, JInt], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.java.util.Random, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def span(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Random, ) -> JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1): ...


class DMatrixVisualization:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def show(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class NormOps_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def inducedP2(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@staticmethod
	def inducedP1(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def normF(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def normalizeF(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@staticmethod
	def fastNormP2(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@staticmethod
	def fastNormP(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def normPInf(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@staticmethod
	def conditionP(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def inducedPInf(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@staticmethod
	def elementP(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def normP(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def normP2(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fastElementP(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def fastNormF(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def normP1(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@staticmethod
	def conditionP2(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...


class EigenOps_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createMatrixV(arg0: javawrappers.org.ejml.interfaces.decomposition.EigenDecomposition_F64, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def computeEigenVector(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DEigenpair: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def computeEigenValue(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dominantEigenpair(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DEigenpair: ...
	@staticmethod
	def boundLargestEigenValue(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createMatrixD(arg0: javawrappers.org.ejml.interfaces.decomposition.EigenDecomposition_F64, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notify(self, ) -> None: ...


class SingularOps_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def nullspaceQR(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def checkSvdMatrixSize(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DMatrixRMaj, arg3: javawrappers.org.ejml.data.DMatrixRMaj, arg4: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullspaceQRP(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def descendingOrder(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: javawrappers.org.ejml.data.DMatrixRMaj, arg5: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def descendingOrder(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DMatrixRMaj, arg3: javawrappers.org.ejml.data.DMatrixRMaj, arg4: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def rank(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def rank(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullspaceSVD(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def nullSpace(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def nullity(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def nullity(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@staticmethod
	def nullVector(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, arg1: Union[int, JBoolean], arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def singularThreshold(arg0: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64, ) -> Union[float, JDouble]: ...


class CovarianceRandomDraw_DDRM:
	def __init__(self, arg0: javawrappers.java.util.Random, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ): ...
	def next(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def computeLikelihoodP(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CommonOps_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def concatColumns(*arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def mult(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def mult(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAdd(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@staticmethod
	def minCols(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransA(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@staticmethod
	def maxRows(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def det(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@staticmethod
	def extractDiag(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@staticmethod
	def multOuter(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@staticmethod
	def elementMax(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: Union[float, JDouble], arg3: javawrappers.org.ejml.data.DMatrixD1, arg4: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrixD1, arg3: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, arg3: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def elementMaxAbs(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def minRows(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def elementMoreThan(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.BMatrixRMaj, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	@overload
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def invert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def elementDiv(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def subtract(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def fill(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def countTrue(arg0: javawrappers.org.ejml.data.BMatrixRMaj, ) -> Union[int, JInt]: ...
	@staticmethod
	def subtractEquals(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def extract(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def extract(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: JArray(Union[int, JInt], 1), arg4: Union[int, JInt], arg5: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	@staticmethod
	def extract(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def extract(arg0: javawrappers.org.ejml.data.DMatrix, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.org.ejml.data.DMatrix, arg6: Union[int, JInt], arg7: Union[int, JInt], ) -> None: ...
	@staticmethod
	def kron(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@staticmethod
	def pinv(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@staticmethod
	def solve(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setIdentity(arg0: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@staticmethod
	def elementSumAbs(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def maxCols(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def addEquals(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransA(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multTransB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def diag(*arg0: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def diag(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], *arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def columnsToVector(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1), ) -> JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def dot(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def scale(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def insert(arg0: javawrappers.org.ejml.data.DMatrix, arg1: javawrappers.org.ejml.data.DMatrix, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def insert(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: JArray(Union[int, JInt], 1), arg3: Union[int, JInt], arg4: JArray(Union[int, JInt], 1), arg5: Union[int, JInt], ) -> None: ...
	@staticmethod
	def elementMinAbs(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def rowsToVector(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1), ) -> JArray(javawrappers.org.ejml.data.DMatrixRMaj, 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def trace(arg0: javawrappers.org.ejml.data.DMatrix1Row, ) -> Union[float, JDouble]: ...
	@staticmethod
	def elementExp(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def extractRow(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def rref(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def identity(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def identity(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def divide(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def elementLessThan(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.BMatrixRMaj, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	@overload
	@staticmethod
	def elementLessThan(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.BMatrixRMaj, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	@staticmethod
	def multInner(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: javawrappers.org.ejml.data.DMatrix1Row, arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def multAddTransAB(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrix1Row, arg2: javawrappers.org.ejml.data.DMatrix1Row, arg3: javawrappers.org.ejml.data.DMatrix1Row, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def changeSign(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def concatRows(*arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def elementMult(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def elementMin(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@staticmethod
	def permuteRowInv(arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def elementPower(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def elementPower(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def elementPower(arg0: Union[float, JDouble], arg1: javawrappers.org.ejml.data.DMatrixD1, arg2: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@staticmethod
	def sumCols(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def elementMoreThanOrEqual(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.BMatrixRMaj, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	@staticmethod
	def extractColumn(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def diagR(arg0: Union[int, JInt], arg1: Union[int, JInt], *arg2: Union[float, JDouble], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def elements(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.BMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def elementLog(arg0: javawrappers.org.ejml.data.DMatrixD1, arg1: javawrappers.org.ejml.data.DMatrixD1, ) -> None: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@staticmethod
	def elementSum(arg0: javawrappers.org.ejml.data.DMatrixD1, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def elementLessThanOrEqual(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.BMatrixRMaj, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	@overload
	@staticmethod
	def elementLessThanOrEqual(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[float, JDouble], arg2: javawrappers.org.ejml.data.BMatrixRMaj, ) -> javawrappers.org.ejml.data.BMatrixRMaj: ...
	@staticmethod
	def sumRows(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


