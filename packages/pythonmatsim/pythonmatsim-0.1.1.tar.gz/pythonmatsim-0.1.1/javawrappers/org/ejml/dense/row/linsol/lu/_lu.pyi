################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.ejml.dense.row.decomposition.lu
import javawrappers.org.ejml.interfaces.decomposition
import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class LinearSolverLuBase_DDRM:
	def __init__(self, arg0: javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def improveSol(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...


class LinearSolverLuKJI_DDRM:
	def __init__(self, arg0: javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def improveSol(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...


class LinearSolverLu_DDRM:
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def invert(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def setA(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def quality(self, ) -> Union[float, JDouble]: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.dense.row.decomposition.lu.LUDecompositionBase_DDRM: ...
	@overload
	def getDecomposition(self, ) -> javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: javawrappers.org.ejml.data.Matrix, ) -> None: ...
	@overload
	def solve(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def modifiesA(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def modifiesB(self, ) -> Union[int, JBoolean]: ...
	def getA(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def improveSol(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...


