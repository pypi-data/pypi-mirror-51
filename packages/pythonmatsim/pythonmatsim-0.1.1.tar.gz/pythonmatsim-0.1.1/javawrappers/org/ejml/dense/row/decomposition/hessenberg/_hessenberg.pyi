################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class HessenbergSimilarDecomposition_DDRM:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getH(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getQH(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getGammas(self, ) -> JArray(Union[float, JDouble], 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class TridiagonalDecomposition_DDRB_to_DDRM:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def convertBlockToRow(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def getDiagonal(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	@overload
	def getT(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class TridiagonalDecompositionHouseholder_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getQT(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notifyAll(self, ) -> None: ...
	def getDiagonal(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getQ(self, arg0: javawrappers.org.ejml.data.Matrix, arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.data.Matrix: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getT(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@overload
	def getT(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> javawrappers.org.ejml.data.Matrix: ...
	def householderSymmetric(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TridiagonalDecompositionHouseholderOrig_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getQT(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notifyAll(self, ) -> None: ...
	def getGamma(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def getQ(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notify(self, ) -> None: ...
	def getT(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def householderSymmetric(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


