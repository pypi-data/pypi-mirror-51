################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class SvdImplicitQrAlgorithm_DDRM:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setVt(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def nextSplit(self, ) -> Union[int, JBoolean]: ...
	def getMaxValue(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def selectWilkinsonShift(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getUt(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def exceptionShift(self, ) -> None: ...
	def incrementSteps(self, ) -> None: ...
	def printMatrix(self, ) -> None: ...
	def swapOff(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def initParam(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isDiagonalZero(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def setMatrix(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getDiag(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def process(self, ) -> Union[int, JBoolean]: ...
	@overload
	def process(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	def swapDiag(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def setUt(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> None: ...
	def setSubmatrix(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def _process(self, ) -> Union[int, JBoolean]: ...
	def getNumberOfSingularValues(self, ) -> Union[int, JInt]: ...
	def getSingularValues(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getVt(self, ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def getOff(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setMaxValue(self, arg0: Union[float, JDouble], ) -> None: ...
	def resetSteps(self, ) -> None: ...
	def isOffZero(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def performImplicitSingleStep(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setFastValues(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSingularValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...


