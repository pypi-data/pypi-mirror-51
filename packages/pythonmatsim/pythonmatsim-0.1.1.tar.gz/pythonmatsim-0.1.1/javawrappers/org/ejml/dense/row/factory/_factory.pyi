################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.ejml.interfaces.decomposition
import javawrappers.java.lang
import javawrappers.org.ejml.interfaces.linsol
import javawrappers.org.ejml.data
import javawrappers.org.ejml.dense.row.linsol

from jpype.types import *
from typing import Union

from typing import overload

class LinearSolverFactory_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def pseudoInverse(arg0: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	@staticmethod
	def qr(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def linear(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	@staticmethod
	def symmPosDef(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def lu(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	@staticmethod
	def chol(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def qrp(arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	@staticmethod
	def leastSquares(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	@staticmethod
	def general(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def adjustable() -> javawrappers.org.ejml.dense.row.linsol.AdjustableLinearSolver_DDRM: ...
	@staticmethod
	def leastSquaresQrPivot(arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.linsol.LinearSolverDense: ...


class DecompositionFactory_DDRM:
	def __init__(self, ): ...
	@staticmethod
	def svd(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition_F64: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def qr(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.decomposition.QRDecomposition: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def decomposeSafe(arg0: javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface, arg1: javawrappers.org.ejml.data.DMatrix, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def eig(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.decomposition.EigenDecomposition_F64: ...
	@overload
	@staticmethod
	def eig(arg0: Union[int, JInt], arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.decomposition.EigenDecomposition_F64: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def lu(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.decomposition.LUDecomposition_F64: ...
	@staticmethod
	def chol(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.org.ejml.interfaces.decomposition.CholeskyDecomposition_F64: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def qrp(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.decomposition.QRPDecomposition_F64: ...
	@overload
	@staticmethod
	def quality(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.interfaces.decomposition.SingularValueDecomposition, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def quality(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.data.DMatrixRMaj, arg2: javawrappers.org.ejml.data.DMatrixRMaj, arg3: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def quality(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: javawrappers.org.ejml.interfaces.decomposition.EigenDecomposition_F64, ) -> Union[float, JDouble]: ...
	@staticmethod
	def tridiagonal(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.decomposition.TridiagonalSimilarDecomposition_F64: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cholLDL(arg0: Union[int, JInt], ) -> javawrappers.org.ejml.interfaces.decomposition.CholeskyLDLDecomposition_F64: ...


