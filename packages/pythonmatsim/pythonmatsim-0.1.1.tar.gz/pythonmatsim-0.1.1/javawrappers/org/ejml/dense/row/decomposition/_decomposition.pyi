################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.ejml.data

from jpype.types import *
from typing import Union

from typing import overload

class UtilDecompositons_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def checkIdentity(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	@staticmethod
	def checkZerosLT(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def checkZerosUT(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def checkZeros(arg0: javawrappers.org.ejml.data.DMatrixRMaj, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.ejml.data.DMatrixRMaj: ...


class TriangularSolver_DDRM:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def solveL(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def solveL(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def invertLower(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def invertLower(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def solveTranL(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def solveU(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def solveU(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def solveU(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: JArray(Union[float, JDouble], 1), arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class BaseDecomposition_DDRB_to_DDRM:
	def __init__(self, arg0: javawrappers.org.ejml.interfaces.decomposition.DecompositionInterface, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def convertBlockToRow(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.Matrix, ) -> Union[int, JBoolean]: ...
	@overload
	def decompose(self, arg0: javawrappers.org.ejml.data.DMatrixRMaj, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def inputModified(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


