################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.hsqldb.map
import javawrappers.org.hsqldb.lib
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class BitMap:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[int, JInt], 1), ): ...
	def countSet(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setByte(arg0: Union[int, JInt], arg1: JByte, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def hasAnyBitSet(arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def unsetRange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def unset(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def unset(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def unset(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def getBytes(self, ) -> JArray(JByte, 1): ...
	@staticmethod
	def not_(arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def and(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JByte, arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def and(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def xor(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@staticmethod
	def leftShift(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def set(self, arg0: javawrappers.org.hsqldb.map.BitMap, ) -> None: ...
	@overload
	@staticmethod
	def set(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def set(arg0: JByte, arg1: Union[int, JInt], ) -> JByte: ...
	@overload
	@staticmethod
	def set(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def or_(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def or_(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JByte, arg3: Union[int, JInt], ) -> None: ...
	@staticmethod
	def overlay(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JByte, arg3: Union[int, JInt], ) -> None: ...
	def setRange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def isSet(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSet(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isSet(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isSet(arg0: JByte, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def countSetBits(self, ) -> Union[int, JInt]: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.map.BitMap: ...
	def countSetMatches(self, arg0: javawrappers.org.hsqldb.map.BitMap, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def countSetBitsEnd(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def countSetBitsEnd(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def countUnsetBitsStart(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getIntArray(self, ) -> JArray(Union[int, JInt], 1): ...


class HashIndex:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
	def resetTables(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLookup(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getHashIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def getNewNodePointer(self, ) -> Union[int, JInt]: ...
	def getNextLookup(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def unlinkNode(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def linkNode(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def reset(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeEmptyNode(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class ValuePoolHashMap:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ReusableObjectCache:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def putHashSet(arg0: javawrappers.org.hsqldb.lib.HashSet, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def putHashMappedList(arg0: javawrappers.org.hsqldb.lib.HashMappedList, ) -> None: ...
	@staticmethod
	def getHashMappedList() -> javawrappers.org.hsqldb.lib.HashMappedList: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getHashSet() -> javawrappers.org.hsqldb.lib.HashSet: ...


class BaseHashMap:
	class BaseHashIterator:
		@overload
		def __init__(self, arg0: javawrappers.org.hsqldb.map.BaseHashMap, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.hsqldb.map.BaseHashMap, arg1: Union[int, JBoolean], ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLookup(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def nextInt(self, ) -> Union[int, JInt]: ...
		def nextLong(self, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def setAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
		def getAccessCount(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class MultiValueKeyIterator:
		def __init__(self, arg0: javawrappers.org.hsqldb.map.BaseHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def nextInt(self, ) -> Union[int, JInt]: ...
		def nextLong(self, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class ValuesIterator:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def nextInt(self, ) -> Union[int, JInt]: ...
		def nextLong(self, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLookup(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def nextInt(self, ) -> Union[int, JInt]: ...
	@overload
	def nextInt(self, ) -> Union[int, JInt]: ...
	@overload
	def nextInt(self, ) -> Union[int, JInt]: ...
	@overload
	def nextLong(self, ) -> Union[long, JLong]: ...
	@overload
	def nextLong(self, ) -> Union[long, JLong]: ...
	@overload
	def nextLong(self, ) -> Union[long, JLong]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ValuePool:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getDouble(arg0: Union[long, JLong], ) -> javawrappers.java.lang.Double: ...
	@staticmethod
	def getBigDecimal(arg0: javawrappers.java.math.BigDecimal, ) -> javawrappers.java.math.BigDecimal: ...
	@staticmethod
	def getSubString(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getLong(arg0: Union[long, JLong], ) -> javawrappers.java.lang.Long: ...
	@staticmethod
	def getInt(arg0: Union[int, JInt], ) -> javawrappers.java.lang.Integer: ...
	@staticmethod
	def clearPool() -> None: ...
	@staticmethod
	def resetPool() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getBoolean(arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.Boolean: ...
	@staticmethod
	def getMaxStringLength() -> Union[int, JInt]: ...


