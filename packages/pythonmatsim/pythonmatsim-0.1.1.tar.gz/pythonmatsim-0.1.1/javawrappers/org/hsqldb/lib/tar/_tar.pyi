################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.hsqldb.lib
import javawrappers.java.util.function
import javawrappers.org.hsqldb.lib.tar
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class TarFileOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JInt], ): ...
	class Compression:


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def assertAtBlockBoundary(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def writePadBlocks(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def bytesLeftInBlock(self, ) -> Union[int, JInt]: ...
	def writePadBlock(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def padCurrentBlock(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeBlock(self, arg0: JArray(JByte, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	def getBytesWritten(self, ) -> Union[long, JLong]: ...


class DbBackupMain:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class TarHeaderField:
	name: TarHeaderField = ...
	mode: TarHeaderField = ...
	uid: TarHeaderField = ...
	gid: TarHeaderField = ...
	size: TarHeaderField = ...
	mtime: TarHeaderField = ...
	checksum: TarHeaderField = ...
	typeflag: TarHeaderField = ...
	magic: TarHeaderField = ...
	uname: TarHeaderField = ...
	gname: TarHeaderField = ...
	prefix: TarHeaderField = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStart(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.lib.tar.TarHeaderField: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hsqldb.lib.tar.TarHeaderField, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStop(self, ) -> Union[int, JInt]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class TarReader:
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.String, 1), arg3: javawrappers.java.lang.Integer, arg4: javawrappers.java.io.File, ): ...
	class TarEntryHeader:
		def __init__(self, arg0: JArray(JByte, 1), ): ...
		class MissingField:
			def __init__(self, arg0: javawrappers.org.hsqldb.lib.tar.TarHeaderField, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			@overload
			def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
			@overload
			def printStackTrace(self, ) -> None: ...
			@overload
			def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
			def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
			def notifyAll(self, ) -> None: ...
			def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
			def getMessage(self, ) -> javawrappers.java.lang.String: ...
			def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
			def notify(self, ) -> None: ...
			def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
			def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
			def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getFileMode(self, ) -> Union[int, JInt]: ...
		def getEntryType(self, ) -> Union[string, JString]: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getPath(self, ) -> javawrappers.java.lang.String: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		@staticmethod
		def indexOf(arg0: JArray(JByte, 1), arg1: JByte, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
		def getModTime(self, ) -> Union[long, JLong]: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def isUstar(self, ) -> Union[int, JBoolean]: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def generateFile(self, ) -> javawrappers.java.io.File: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setDataSize(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDataSize(self, ) -> Union[long, JLong]: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getFileMode(self, ) -> Union[int, JInt]: ...
	def getEntryType(self, ) -> Union[string, JString]: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@staticmethod
	def indexOf(arg0: JArray(JByte, 1), arg1: JByte, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getModTime(self, ) -> Union[long, JLong]: ...
	def read(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def isUstar(self, ) -> Union[int, JBoolean]: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def generateFile(self, ) -> javawrappers.java.io.File: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setDataSize(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataSize(self, ) -> Union[long, JLong]: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TarGenerator:
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], arg2: javawrappers.java.lang.Integer, ): ...
	class TarEntrySupplicant:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.File, arg2: javawrappers.org.hsqldb.lib.tar.TarFileOutputStream, arg3: Union[long, JLong], ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hsqldb.lib.InputStreamInterface, arg2: javawrappers.org.hsqldb.lib.tar.TarFileOutputStream, arg3: Union[long, JLong], ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], arg3: Union[string, JString], arg4: javawrappers.org.hsqldb.lib.tar.TarFileOutputStream, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def prePaddedOctalString(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPath(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def makeXentry(self, ) -> javawrappers.org.hsqldb.lib.tar.TarGenerator.TarEntrySupplicant: ...
		def close(self, ) -> None: ...
		def write(self, ) -> None: ...
		def getDataSize(self, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def prePaddedOctalString(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getPaxThreshold(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPaxThreshold(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def queueEntry(self, arg0: javawrappers.java.io.File, ) -> None: ...
	@overload
	def queueEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hsqldb.lib.InputStreamInterface, ) -> None: ...
	@overload
	def queueEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def queueEntry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.File, ) -> None: ...
	def makeXentry(self, ) -> javawrappers.org.hsqldb.lib.tar.TarGenerator.TarEntrySupplicant: ...
	def close(self, ) -> None: ...
	def getDataSize(self, ) -> Union[long, JLong]: ...
	@overload
	def write(self, ) -> None: ...
	@overload
	def write(self, ) -> None: ...


class PIFData:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getSize(self, ) -> javawrappers.java.lang.Long: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TarFileInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	def getReadBufferBlocks(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def readBlock(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readBlocks(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readNextHeaderBlock(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class DbBackup:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	def setAbortUponModify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAbortUponModify(self, ) -> Union[int, JBoolean]: ...
	def setStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hsqldb.lib.InputStreamInterface, ) -> None: ...
	def writeAsFiles(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setFileIgnore(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getOverWrite(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setOverWrite(self, arg0: Union[int, JBoolean], ) -> None: ...
	def write(self, ) -> None: ...


class TarReaderMain:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class TarMalformatException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class TarGeneratorMain:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class PIFGenerator:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def addRecord(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def addRecord(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def addRecord(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addRecord(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...


class RB:
	DbBackup_syntax: RB = ...
	DbBackup_syntaxerr: RB = ...
	TarGenerator_syntax: RB = ...
	pad_block_write: RB = ...
	cleanup_rmfail: RB = ...
	TarReader_syntax: RB = ...
	unsupported_entry_present: RB = ...
	bpr_write: RB = ...
	stream_buffer_report: RB = ...
	write_queue_report: RB = ...
	file_missing: RB = ...
	modified_property: RB = ...
	file_disappeared: RB = ...
	file_changed: RB = ...
	file_appeared: RB = ...
	pif_malformat: RB = ...
	pif_malformat_size: RB = ...
	zero_write: RB = ...
	pif_toobig: RB = ...
	read_denied: RB = ...
	compression_unknown: RB = ...
	insufficient_read: RB = ...
	decompression_ranout: RB = ...
	move_work_file: RB = ...
	cant_overwrite: RB = ...
	cant_write_dir: RB = ...
	no_parent_dir: RB = ...
	bad_block_write_len: RB = ...
	illegal_block_boundary: RB = ...
	workfile_delete_fail: RB = ...
	unsupported_ext: RB = ...
	dest_exists: RB = ...
	parent_not_dir: RB = ...
	cant_write_parent: RB = ...
	parent_create_fail: RB = ...
	tar_field_toobig: RB = ...
	missing_supp_path: RB = ...
	nonfile_entry: RB = ...
	read_lt_1: RB = ...
	data_changed: RB = ...
	unexpected_header_key: RB = ...
	tarreader_syntaxerr: RB = ...
	unsupported_mode: RB = ...
	dir_x_conflict: RB = ...
	pif_unknown_datasize: RB = ...
	pif_data_toobig: RB = ...
	data_size_unknown: RB = ...
	extraction_exists: RB = ...
	extraction_exists_notfile: RB = ...
	extraction_parent_not_dir: RB = ...
	extraction_parent_not_writable: RB = ...
	extraction_parent_mkfail: RB = ...
	write_count_mismatch: RB = ...
	header_field_missing: RB = ...
	checksum_mismatch: RB = ...
	create_only_normal: RB = ...
	bad_header_value: RB = ...
	bad_numeric_header_value: RB = ...
	listing_format: RB = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.lib.tar.RB: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.hsqldb.lib.tar.RB, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


