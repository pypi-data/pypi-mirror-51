################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.java.sql
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.hsqldb.map
import javawrappers.java.io
import javawrappers.java.util.concurrent
import javawrappers.org.hsqldb.lib
import javawrappers.java.util.function
import javawrappers.java.util.concurrent.locks

from jpype.types import *
from typing import Union

from typing import overload

class InputStreamWrapper:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setSizeLimit(self, arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def available(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getSizeLimit(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class FileUtil:
	class DatabaseFilenameFilter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getExistingFileListInDirectory(self, ) -> JArray(javawrappers.java.io.File, 1): ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getCompleteMainFileSetList(self, ) -> JArray(javawrappers.java.io.File, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getExistingMainFileSetList(self, ) -> JArray(javawrappers.java.io.File, 1): ...
		def notify(self, ) -> None: ...
		def accept(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	class FileAccessRes:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def renameElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
		def openInputStreamElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def notifyAll(self, ) -> None: ...
		def isStreamElement(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getFileSync(self, arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.org.hsqldb.lib.FileAccess.FileSync: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def openOutputStreamElement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.io.OutputStream: ...
		def createParentDirs(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	class FileSync:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def sync(self, ) -> None: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def getFileAccess(arg0: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.lib.FileAccess: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def renameElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def renameElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def openInputStreamElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def openInputStreamElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isStreamElement(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isStreamElement(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDatabaseFileList(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.io.File, 1): ...
	def delete(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def newDiscardFileName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getDatabaseMainFileList(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.io.File, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCompleteMainFileSetList(self, ) -> JArray(javawrappers.java.io.File, 1): ...
	@staticmethod
	def getFileUtil() -> javawrappers.org.hsqldb.lib.FileUtil: ...
	def absolutePath(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def openOutputStreamElement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def openOutputStreamElement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.io.OutputStream: ...
	def deleteOnExit(self, arg0: javawrappers.java.io.File, ) -> None: ...
	@overload
	def createParentDirs(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def createParentDirs(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def canonicalOrAbsolutePath(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getExistingFileListInDirectory(self, ) -> JArray(javawrappers.java.io.File, 1): ...
	def getExistingMainFileSetList(self, ) -> JArray(javawrappers.java.io.File, 1): ...
	def sync(self, ) -> None: ...
	@overload
	def canonicalFile(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.io.File: ...
	@overload
	def canonicalFile(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.File: ...
	def accept(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def getFileSync(self, arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.org.hsqldb.lib.FileAccess.FileSync: ...
	@overload
	def getFileSync(self, arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.org.hsqldb.lib.FileAccess.FileSync: ...
	@staticmethod
	def deleteOrRenameDatabaseFiles(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def makeDirectories(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def canonicalPath(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def canonicalPath(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.lang.String: ...
	@overload
	def exists(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def exists(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def makeParentDirectories(self, arg0: javawrappers.java.io.File, ) -> None: ...


class DoubleIntIndex:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setKeysSearchTarget(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def addUnsorted(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def addUnsorted(self, arg0: javawrappers.org.hsqldb.lib.LongLookup, ) -> Union[int, JBoolean]: ...
	@overload
	def addUnsorted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def addUnique(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def setLongValue(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def copyTo(self, arg0: javawrappers.org.hsqldb.lib.DoubleIntIndex, ) -> None: ...
	def removeAll(self, ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLongValue(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def removeRange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getLongKey(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def compactLookupAsIntervals(self, ) -> Union[int, JBoolean]: ...
	def getTotalValues(self, ) -> Union[long, JLong]: ...
	def setKey(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def lookup(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def lookup(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def lookup(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def lookup(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getValues(self, ) -> JArray(Union[int, JInt], 1): ...
	def clear(self, ) -> None: ...
	def lookupFirstGreaterEqual(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def sort(self, ) -> None: ...
	def getKeys(self, ) -> JArray(Union[int, JInt], 1): ...
	def setValuesSearchTarget(self, ) -> None: ...
	def findFirstGreaterEqualKeyIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getValue(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def sortOnKeys(self, ) -> None: ...
	def findFirstGreaterEqualSlotIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def findFirstEqualKeyIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def addSorted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def sortOnValues(self, ) -> None: ...


class LineReader:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


class FileAccess:
	class FileSync:
		def sync(self, ) -> None: ...


	def renameElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
	def openInputStreamElement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def isStreamElement(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def removeElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def sync(self, ) -> None: ...
	def openOutputStreamElement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.io.OutputStream: ...
	def createParentDirs(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFileSync(self, arg0: javawrappers.java.io.OutputStream, ) -> javawrappers.org.hsqldb.lib.FileAccess.FileSync: ...


class SimpleLog:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLevel(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPrintWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def logContext(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def logContext(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logContext(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: Union[int, JInt], ) -> None: ...


class AppendableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def appendMessage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class OrderedIntKeyHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	def removeKeyAndValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getKey(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def containsKey(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def valuesToArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...


class IntKeyHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def containsKey(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.IntKeyHashMap, ) -> None: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def valuesToArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class ObjectComparator:
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def longKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...


class StopWatch:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def currentElapsedTimeToMessage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def start(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def zero(self, ) -> None: ...
	def currentElapsedTime(self, ) -> Union[long, JLong]: ...
	def stop(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def mark(self, ) -> None: ...
	def elapsedTimeToMessage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def elapsedTime(self, ) -> Union[long, JLong]: ...


class ClosableByteArrayOutputStream:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def toByteArrayInputStream(self, ) -> javawrappers.java.io.ByteArrayInputStream: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isFreed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def free(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...


class HashMappedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def keysToArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	def insert(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.HashMap, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...
	def setKey(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def add(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def toValuesArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def valuesToArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def toKeysArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...


class HsqlArrayHeap:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Comparator, ): ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> javawrappers.java.lang.Object: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFull(self, ) -> Union[int, JBoolean]: ...


class LongKeyLongValueHashMap:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class ArraySort:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def insertionSort(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.util.Comparator, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def sort(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: javawrappers.java.util.Comparator, ) -> None: ...
	@staticmethod
	def deDuplicate(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: javawrappers.java.util.Comparator, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def searchFirst(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.util.Comparator, ) -> Union[int, JInt]: ...


class HsqlList:
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...


class InputStreamInterface:
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def setSizeLimit(self, arg0: Union[long, JLong], ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getSizeLimit(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...


class HsqlTaskQueue:
	def __init__(self, ): ...
	class TaskRunner:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def restart(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def getTaskRunnerThread(self, ) -> javawrappers.java.lang.Thread: ...
	def shutdownAfterQueued(self, ) -> None: ...
	def execute(self, arg0: javawrappers.java.lang.Runnable, ) -> None: ...
	def shutdownImmediately(self, ) -> None: ...
	def shutdownAfterCurrent(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isShutdown(self, ) -> Union[int, JBoolean]: ...


class StringInputStream:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class OrderedLongHashSet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getStartMatchCount(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JInt]: ...
	def getOrderedStartMatchCount(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ReadWriteLockDummy:
	def __init__(self, ): ...
	class LockDummy:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def unlock(self, ) -> None: ...
		def lockInterruptibly(self, ) -> None: ...
		def newCondition(self, ) -> javawrappers.java.util.concurrent.locks.Condition: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def lock(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@overload
		def tryLock(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[int, JBoolean]: ...
		@overload
		def tryLock(self, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def unlock(self, ) -> None: ...
	def writeLock(self, ) -> javawrappers.java.util.concurrent.locks.Lock: ...
	def notifyAll(self, ) -> None: ...
	def readLock(self, ) -> javawrappers.java.util.concurrent.locks.Lock: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def tryLock(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def lockInterruptibly(self, ) -> None: ...
	def newCondition(self, ) -> javawrappers.java.util.concurrent.locks.Condition: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def lock(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LongKeyIntValueHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLookup(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class ArrayUtil:
	def __init__(self, ): ...
	@staticmethod
	def haveEqualSets(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def hasAllNull(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getTwoPowerFloor(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def projectRow(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	@staticmethod
	def projectRow(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	@staticmethod
	def find(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def find(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def find(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def find(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def find(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def find(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def projectMap(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@staticmethod
	def duplicateArray(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def containsAt(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def containsAt(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isAnyIntIndexInBooleanArray(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def countStartElementsAt(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def getTwoPowerScale(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getBinaryMultipleCeiling(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def copyAdjustArray(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@staticmethod
	def countTrueElements(arg0: JArray(Union[int, JBoolean], 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def clearArray(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def byteArrayToChars(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	@staticmethod
	def byteArrayToChars(arg0: JArray(JByte, 1), ) -> JArray(Union[string, JString], 1): ...
	@staticmethod
	def isTwoPower(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def containsAny(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def countCommonElements(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def countCommonElements(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def countNonStartElementsAt(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def findNotIn(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def countStartIntIndexesInBooleanArray(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def commonElements(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def adjustArray(arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@staticmethod
	def findIn(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def arraySlice(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def isInSortedArray(arg0: Union[string, JString], arg1: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def containsAllAtStart(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toAdjustedColumnArray(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def resizeArray(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def compare(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def compare(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def copyMoveSegment(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def fillArray(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JByte, ) -> None: ...
	@overload
	@staticmethod
	def fillArray(arg0: JArray(Union[float, JDouble], 1), arg1: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def fillArray(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[string, JString], ) -> None: ...
	@overload
	@staticmethod
	def fillArray(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def fillArray(arg0: JArray(Union[int, JBoolean], 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def fillArray(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> None: ...
	@staticmethod
	def reorderMaps(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	@staticmethod
	def areAllIntIndexesAsBooleanArray(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def hasNull(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def booleanArrayToIntIndexes(arg0: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JInt], 1): ...
	@staticmethod
	def projectRowReverse(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	@staticmethod
	def charArrayToBytes(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def charArrayToBytes(arg0: JArray(Union[string, JString], 1), ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def haveEqualArrays(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def haveEqualArrays(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def orBooleanArray(arg0: JArray(Union[int, JBoolean], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> None: ...
	@staticmethod
	def areAllIntIndexesInBooleanArray(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def byteSequenceToLong(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@staticmethod
	def toAdjustedArray(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def copyBytes(arg0: Union[long, JLong], arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[long, JLong], arg5: JArray(JByte, 1), arg6: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def copyBytes(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@staticmethod
	def fillSequence(arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	@staticmethod
	def cdiv(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def cdiv(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def resizeArrayIfDifferent(arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def haveCommonElement(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def containsAll(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def containsAll(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def union(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def countSameElements(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def countSameElements(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getBinaryNormalisedCeiling(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def getBinaryNormalisedCeiling(arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@staticmethod
	def copyArray(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ) -> None: ...
	@staticmethod
	def areEqual(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toByteArray(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> JArray(JByte, 1): ...
	@staticmethod
	def sortArray(arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def containsAllTrueElements(arg0: JArray(Union[int, JBoolean], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def areEqualSets(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@staticmethod
	def findNot(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def intIndexesToBooleanArray(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JBoolean], 1), ) -> None: ...


class HsqlHeap:
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def isFull(self, ) -> Union[int, JBoolean]: ...
	def remove(self, ) -> javawrappers.java.lang.Object: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...


class ReaderInputStream:
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class StringUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def toZeroPaddedString(arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isEmpty(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def skipSpaces(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def rightTrimSize(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def arrayToString(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def split(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getList(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getList(arg0: JArray(Union[long, JLong], 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getList(arg0: JArray(JArray(javawrappers.java.lang.String, 1), 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getList(arg0: JArray(Union[int, JInt], 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toLowerSubset(arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toPaddedString(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[string, JString], arg3: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toPaddedString(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...


class ThreadFactory:
	def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...


class IntValueHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.IntValueHashMap, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class ValidatingResourceBundle:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, *arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.Enum, ) -> javawrappers.java.lang.String: ...
	def setMissingPosValueBehavior(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getExpandedString(self, arg0: javawrappers.java.lang.Enum, *arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, arg0: javawrappers.java.lang.Enum, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getMissingPosValueBehavior(self, ) -> Union[int, JInt]: ...
	def setMissingPropertyBehavior(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def resourceKeyFor(arg0: javawrappers.java.lang.Enum, ) -> javawrappers.java.lang.String: ...
	def getMissingPropertyBehavior(self, ) -> Union[int, JInt]: ...
	def validate(self, ) -> None: ...


class DoubleLongIndex:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def lookup(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def lookup(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def addUnsorted(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def addUnsorted(self, arg0: javawrappers.org.hsqldb.lib.LongLookup, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def sort(self, ) -> None: ...
	def findFirstGreaterEqualKeyIndex(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setLongValue(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def findFirstGreaterEqualSlotIndex(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def findFirstEqualKeyIndex(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLongValue(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLongKey(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...


class OrderedIntHashSet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getStartMatchCount(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def getOrderedStartMatchCount(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.OrderedIntHashSet, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HsqlDeque:
	def __init__(self, ): ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getLast(self, ) -> javawrappers.java.lang.Object: ...
	def removeLast(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def addLast(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFirst(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def removeFirst(self, ) -> javawrappers.java.lang.Object: ...
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addFirst(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class StringConverter:
	def __init__(self, ): ...
	@staticmethod
	def sqlBitStringToBitMap(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.map.BitMap: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def byteArrayToSQLHexString(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def stringToHtmlBytes(arg0: javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def byteArrayToString(arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def inputStreamToString(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getUTFSize(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toQuotedString(arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toStringUUID(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def readUTF(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def readUTF(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def toBinaryUUID(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def writeUUIDHexBytes(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def byteArrayToSQLBitString(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def stringToUnicodeBytes(arg0: javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def hexStringToByteArray(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def writeHexBytes(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def unicodeStringToString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def byteArrayToBitString(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def byteArrayToHexString(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def stringToUTFBytes(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream, ) -> Union[int, JInt]: ...


class InOutUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def serialize(arg0: javawrappers.java.io.Serializable, ) -> JArray(JByte, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.Reader, arg1: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.Reader, arg1: javawrappers.java.io.Writer, arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.Reader, arg1: javawrappers.java.io.Writer, arg2: Union[long, JLong], arg3: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, arg2: Union[long, JLong], arg3: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	@staticmethod
	def readLine(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def deserialize(arg0: JArray(JByte, 1), ) -> javawrappers.java.io.Serializable: ...


class HsqlTimer:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.lib.ThreadFactory, ): ...
	@overload
	def __init__(self, ): ...
	class TaskQueue:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> javawrappers.java.lang.Object: ...
		def peek(self, ) -> javawrappers.java.lang.Object: ...
		def size(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isFull(self, ) -> Union[int, JBoolean]: ...


	class Task:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TaskRunner:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def cancel(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	@staticmethod
	def isFixedDelay(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def shutdownImmediately(self, ) -> None: ...
	def remove(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def scheduleAfter(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Object: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getLastScheduled(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Date: ...
	@staticmethod
	def getNextScheduled(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Date: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def isFixedRate(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isCancelled(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def restart(self, ) -> None: ...
	def scheduleAt(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Object: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def schedulePeriodicallyAt(self, arg0: javawrappers.java.util.Date, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Runnable, arg3: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def setPeriod(arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def schedulePeriodicallyAfter(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: javawrappers.java.lang.Runnable, arg3: Union[int, JBoolean], ) -> javawrappers.java.lang.Object: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def shutDown(self, ) -> None: ...
	@staticmethod
	def isPeriodic(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getThread(self, ) -> javawrappers.java.lang.Thread: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFull(self, ) -> Union[int, JBoolean]: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def shutdown(self, ) -> None: ...


class DataOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def notify(self, ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


class HashSet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def containsAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setComparator(self, arg0: javawrappers.org.hsqldb.lib.ObjectComparator, ) -> None: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class HsqlByteArrayInputStream:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class MultiValueHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def valueCount(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.HashMap, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class WrapperIterator:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.lib.Iterator, arg1: javawrappers.org.hsqldb.lib.Iterator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JBoolean], ): ...
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def nextInt(self, ) -> Union[int, JInt]: ...
	def nextLong(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class HsqlByteArrayOutputStream:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...


class CountdownInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def getCount(self, ) -> Union[long, JLong]: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def setCount(self, arg0: Union[long, JLong], ) -> None: ...


class IntKeyIntValueHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class Set:
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class LongKeyHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.LongKeyHashMap, ) -> None: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...
	def getOrderedMatchCount(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getWriteLock(self, ) -> javawrappers.java.util.concurrent.locks.Lock: ...
	def containsKey(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def getReadLock(self, ) -> javawrappers.java.util.concurrent.locks.Lock: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CountUpDownLatch:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Sync:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getFirstQueuedThread(self, ) -> javawrappers.java.lang.Thread: ...
		def release(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def acquireShared(self, arg0: Union[int, JInt], ) -> None: ...
		def acquire(self, arg0: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...
		def releaseShared(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def owns(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> Union[int, JBoolean]: ...
		def hasQueuedThreads(self, ) -> Union[int, JBoolean]: ...
		def isQueued(self, arg0: javawrappers.java.lang.Thread, ) -> Union[int, JBoolean]: ...
		def acquireSharedInterruptibly(self, arg0: Union[int, JInt], ) -> None: ...
		def getQueuedThreads(self, ) -> javawrappers.java.util.Collection: ...
		def getExclusiveQueuedThreads(self, ) -> javawrappers.java.util.Collection: ...
		def tryAcquireSharedNanos(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def getWaitQueueLength(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> Union[int, JInt]: ...
		def getQueueLength(self, ) -> Union[int, JInt]: ...
		def tryAcquireNanos(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def acquireInterruptibly(self, arg0: Union[int, JInt], ) -> None: ...
		def hasContended(self, ) -> Union[int, JBoolean]: ...
		def hasQueuedPredecessors(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSharedQueuedThreads(self, ) -> javawrappers.java.util.Collection: ...
		def hasWaiters(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getWaitingThreads(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> javawrappers.java.util.Collection: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFirstQueuedThread(self, ) -> javawrappers.java.lang.Thread: ...
	def release(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def acquireShared(self, arg0: Union[int, JInt], ) -> None: ...
	def acquire(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def releaseShared(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def await(self, ) -> None: ...
	@overload
	def await(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[int, JBoolean]: ...
	def owns(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> Union[int, JBoolean]: ...
	def hasQueuedThreads(self, ) -> Union[int, JBoolean]: ...
	@overload
	def countDown(self, ) -> Union[int, JBoolean]: ...
	@overload
	def countDown(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isQueued(self, arg0: javawrappers.java.lang.Thread, ) -> Union[int, JBoolean]: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	def countUp(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def countUp(self, ) -> Union[int, JBoolean]: ...
	def acquireSharedInterruptibly(self, arg0: Union[int, JInt], ) -> None: ...
	def setCount(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getQueuedThreads(self, ) -> javawrappers.java.util.Collection: ...
	def getExclusiveQueuedThreads(self, ) -> javawrappers.java.util.Collection: ...
	def tryAcquireSharedNanos(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getWaitQueueLength(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> Union[int, JInt]: ...
	def getQueueLength(self, ) -> Union[int, JInt]: ...
	def tryAcquireNanos(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def acquireInterruptibly(self, arg0: Union[int, JInt], ) -> None: ...
	def hasContended(self, ) -> Union[int, JBoolean]: ...
	def hasQueuedPredecessors(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.hsqldb.lib.CountUpDownLatch, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSharedQueuedThreads(self, ) -> javawrappers.java.util.Collection: ...
	def hasWaiters(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getWaitingThreads(self, arg0: javawrappers.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject, ) -> javawrappers.java.util.Collection: ...


class OrderedLongKeyHashMap:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLookup(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	def getThirdValueByIndex(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFirstByLookup(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getValueByIndex(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSecondValueByIndex(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getSecondValueByIndex(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setThirdValueByIndex(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class IntLookup:
	def add(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def lookup(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def lookup(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addUnsorted(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...


class ArrayCounter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def rank(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def countSegments(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...


class RefCapablePropertyResourceBundle:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def posSubst(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toNativeLs(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.org.hsqldb.lib.RefCapablePropertyResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.org.hsqldb.lib.RefCapablePropertyResourceBundle: ...


class ClosableCharArrayWriter:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toCharArray(self, ) -> JArray(Union[string, JString], 1): ...
	def trimToSize(self, ) -> None: ...
	def toCharArrayReader(self, ) -> javawrappers.java.io.CharArrayReader: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def writeTo(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isFreed(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def free(self, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class Storage:
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def wasNio(self, ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[long, JLong]: ...
	def getFilePointer(self, ) -> Union[long, JLong]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def seek(self, arg0: Union[long, JLong], ) -> None: ...


class IntIndex:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addUnsorted(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def findFirstConsecutiveKeys(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def addUnique(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	def removeFirstConsecutiveKeys(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def removeAll(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def findFirstIndexUnsorted(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def removeRange(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getTotalValues(self, ) -> Union[long, JLong]: ...
	def setKey(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def sort(self, ) -> None: ...
	def getKeys(self, ) -> JArray(Union[int, JInt], 1): ...
	def findFirstGreaterEqualKeyIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def findFirstGreaterEqualSlotIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def findFirstEqualKeyIndex(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addSorted(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CharArrayWriter:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[string, JString], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toCharArray(self, ) -> JArray(Union[string, JString], 1): ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getBuffer(self, ) -> JArray(Union[string, JString], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def reset(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class IntKeyHashMapConcurrent:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getWriteLock(self, ) -> javawrappers.java.util.concurrent.locks.Lock: ...
	def containsKey(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...
	def getOrderedMatchCount(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...


class OrderedHashSet:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def insert(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def removeAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def setComparator(self, arg0: javawrappers.org.hsqldb.lib.ObjectComparator, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def add(arg0: javawrappers.org.hsqldb.lib.OrderedHashSet, arg1: javawrappers.java.lang.Object, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def containsAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSmallestIndex(self, arg0: javawrappers.org.hsqldb.lib.OrderedHashSet, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def addAll(arg0: javawrappers.org.hsqldb.lib.OrderedHashSet, arg1: javawrappers.org.hsqldb.lib.OrderedHashSet, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.OrderedHashSet, ) -> None: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getCommonElementCount(self, arg0: javawrappers.org.hsqldb.lib.Set, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLargestIndex(self, arg0: javawrappers.org.hsqldb.lib.OrderedHashSet, ) -> Union[int, JInt]: ...


class Collection:
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class StringComparator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def notify(self, ) -> None: ...


class FileArchiver:
	def __init__(self, ): ...
	@staticmethod
	def copyFile(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.hsqldb.lib.FileAccess, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def unarchive(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.hsqldb.lib.FileAccess, arg3: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def archive(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.hsqldb.lib.FileAccess, arg3: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class LongDeque:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getLast(self, ) -> Union[long, JLong]: ...
	def removeLast(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def addLast(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.LongDeque, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFirst(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def removeFirst(self, ) -> Union[long, JLong]: ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> None: ...
	def zeroSize(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def indexOf(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def addFirst(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...


class FrameworkLogger:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def getLog(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.lib.FrameworkLogger: ...
	@overload
	@staticmethod
	def getLog(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.lib.FrameworkLogger: ...
	@overload
	@staticmethod
	def getLog(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.hsqldb.lib.FrameworkLogger: ...
	@overload
	@staticmethod
	def getLog(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.hsqldb.lib.FrameworkLogger: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def clearLoggers(arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def enduserlog(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finest(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def isDefaultJdkConfig() -> Union[int, JBoolean]: ...
	def privlog(self, arg0: javawrappers.java.util.logging.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, arg3: Union[int, JInt], arg4: javawrappers.java.lang.Class, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def finer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def severe(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def report() -> javawrappers.java.lang.String: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warning(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...


class LongValueHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.LongValueHashMap, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class ArrayListIdentity:
	def __init__(self, ): ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def trim(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class Iterator:
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def nextInt(self, ) -> Union[int, JInt]: ...
	def nextLong(self, ) -> Union[long, JLong]: ...
	def remove(self, ) -> None: ...


class LineGroupReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.LineNumberReader, arg1: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.LineNumberReader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.hsqldb.lib.HsqlArrayList: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def convertToString(arg0: javawrappers.org.hsqldb.lib.HsqlArrayList, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getStartLineNumber(self, ) -> Union[int, JInt]: ...
	def getAsMap(self, ) -> javawrappers.org.hsqldb.lib.HashMappedList: ...


class HashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class Values:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def keysToArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.org.hsqldb.lib.Collection: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.org.hsqldb.lib.HashMap, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def valuesToArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def keySet(self, ) -> javawrappers.org.hsqldb.lib.Set: ...


class IntKeyLongValueHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: Union[int, JInt], arg1: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class KMPSearchAlgorithm:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def search(arg0: JArray(Union[string, JString], 1), arg1: JArray(Union[string, JString], 1), arg2: JArray(Union[int, JInt], 1), arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def search(arg0: javawrappers.java.io.InputStream, arg1: JArray(JByte, 1), arg2: JArray(Union[int, JInt], 1), ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def search(arg0: javawrappers.java.io.Reader, arg1: JArray(Union[string, JString], 1), arg2: JArray(Union[int, JInt], 1), ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def search(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(Union[int, JInt], 1), arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def search(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), arg2: JArray(Union[int, JInt], 1), arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def computeTable(arg0: JArray(JByte, 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def computeTable(arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def computeTable(arg0: javawrappers.java.lang.String, ) -> JArray(Union[int, JInt], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BasicTextJdkLogFormatter:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatMessage(self, arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	def getTail(self, arg0: javawrappers.java.util.logging.Handler, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getHead(self, arg0: javawrappers.java.util.logging.Handler, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def format(self, arg0: javawrappers.java.util.logging.LogRecord, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RefCapableRBInterface:
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getExpandedString(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...


class Notified:
	def notify(self, arg0: Union[int, JInt], ) -> None: ...


class RCData:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.lang.String, arg7: javawrappers.java.lang.String, arg8: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, arg6: javawrappers.java.lang.String, arg7: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getConnection(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Connection: ...
	@overload
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setTI(arg0: javawrappers.java.sql.Connection, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDefaultJdbcDriverName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def tiToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def expandSysPropVars(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setDefaultJdbcDriver(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class LongLookup:
	def add(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def lookup(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def lookup(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addUnsorted(self, arg0: javawrappers.org.hsqldb.lib.LongLookup, ) -> Union[int, JBoolean]: ...
	@overload
	def addUnsorted(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getLongValue(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def clear(self, ) -> None: ...
	def sort(self, ) -> None: ...
	def getLongKey(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def setLongValue(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...


class HsqlArrayList:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ): ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def iterator(self, ) -> javawrappers.org.hsqldb.lib.Iterator: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def trim(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.org.hsqldb.lib.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


