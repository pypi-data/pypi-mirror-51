################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.hsqldb
import javawrappers.java.io
import javawrappers.org.hsqldb.types
import javawrappers.org.hsqldb.lib
import javawrappers.org.hsqldb.rowio

from jpype.types import *
from typing import Union

from typing import overload

class RowInputTextLog:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSource(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSchemaName(self, ) -> javawrappers.java.lang.String: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def getStatementType(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	def getTableName(self, ) -> javawrappers.java.lang.String: ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class RowOutputInterface:
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def writeEnd(self, ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class RowOutputBinary:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeEnd(self, ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	def writeIntData(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeNull(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeByteArray16(self, arg0: JArray(JByte, 1), ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def writeArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	def writeCharArray(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeFieldType(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	@overload
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	@overload
	def getSize(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def getSize(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class RowOutputTextLog:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeEnd(self, ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	@overload
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...


class RowOutputTextQuoted:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.TextFileSettings, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeEnd(self, ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...


class RowOutputBinaryEncode:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.Crypto, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeEnd(self, ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	def writeIntData(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeNull(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeByteArray16(self, arg0: JArray(JByte, 1), ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def writeArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	def writeCharArray(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeFieldType(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	@overload
	def getSize(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def getSize(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> Union[int, JInt]: ...
	@overload
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class RowInputBinary180:
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readCharArray(self, ) -> JArray(Union[string, JString], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def resetRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readByteArray16(self, ) -> JArray(JByte, 1): ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	def readIntArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readByteArray(self, ) -> JArray(JByte, 1): ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readNull(self, ) -> Union[int, JBoolean]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class RowInputBinaryDecode:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.Crypto, arg1: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readCharArray(self, ) -> JArray(Union[string, JString], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def resetRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readByteArray16(self, ) -> JArray(JByte, 1): ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def readIntArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readByteArray(self, ) -> JArray(JByte, 1): ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readNull(self, ) -> Union[int, JBoolean]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class RowInputBinary:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputBinary, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readCharArray(self, ) -> JArray(Union[string, JString], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def resetRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readByteArray16(self, ) -> JArray(JByte, 1): ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	def readIntArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readByteArray(self, ) -> JArray(JByte, 1): ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readNull(self, ) -> Union[int, JBoolean]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class RowOutputText:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.TextFileSettings, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeEnd(self, ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...


class RowInputText:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.TextFileSettings, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSource(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLineNumber(self, ) -> Union[long, JLong]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedLine(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class RowOutputBinary180:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeEnd(self, ) -> None: ...
	@overload
	def writeData(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.org.hsqldb.lib.HashMappedList, arg4: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.org.hsqldb.Row, arg1: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> None: ...
	@overload
	def writeData(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def writeType(self, arg0: Union[int, JInt], ) -> None: ...
	def writeIntData(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def duplicate(self, ) -> javawrappers.org.hsqldb.rowio.RowOutputInterface: ...
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def writeNull(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	def writeSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def reset(self, ) -> None: ...
	@overload
	def reset(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def ensureRoom(self, arg0: Union[int, JInt], ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeNoCheck(self, arg0: Union[int, JInt], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeByteArray16(self, arg0: JArray(JByte, 1), ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def setSize(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def writeArray(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	def writeCharArray(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getStorageSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setMode(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeFieldType(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> None: ...
	@overload
	def getSize(self, arg0: javawrappers.org.hsqldb.Row, ) -> Union[int, JInt]: ...
	@overload
	def getSize(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def getSize(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.org.hsqldb.lib.HsqlByteArrayOutputStream: ...
	def writeString(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class RowInputTextQuoted:
	def __init__(self, arg0: javawrappers.org.hsqldb.persist.TextFileSettings, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSource(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLineNumber(self, ) -> Union[long, JLong]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedLine(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class RowInputInterface:
	@overload
	def readData(self, arg0: JArray(javawrappers.org.hsqldb.types.Type, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def readData(self, arg0: javawrappers.org.hsqldb.types.Type, ) -> javawrappers.java.lang.Object: ...
	def getBuffer(self, ) -> JArray(JByte, 1): ...
	def readString(self, ) -> javawrappers.java.lang.String: ...
	def resetBlock(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def getFilePosition(self, ) -> Union[long, JLong]: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def resetRow(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	def readType(self, ) -> Union[int, JInt]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...


