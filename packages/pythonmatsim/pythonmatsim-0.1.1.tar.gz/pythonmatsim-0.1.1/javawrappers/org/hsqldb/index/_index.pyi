################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.hsqldb.persist
import javawrappers.org.hsqldb.navigator
import javawrappers.org.hsqldb
import javawrappers.org.hsqldb.rights
import javawrappers.org.hsqldb.types
import javawrappers.org.hsqldb.lib
import javawrappers.org.hsqldb.index
import javawrappers.org.hsqldb.rowio

from jpype.types import *
from typing import Union

from typing import overload

class NodeAVLDisk:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.RowAVLDisk, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.RowAVLDisk, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def replace(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: javawrappers.org.hsqldb.index.Index, arg2: javawrappers.org.hsqldb.index.NodeAVL, ) -> None: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def delete(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def setBalance(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JInt], ) -> javawrappers.org.hsqldb.index.NodeAVL: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	def getData(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JBoolean], arg2: javawrappers.org.hsqldb.index.NodeAVL, ) -> javawrappers.org.hsqldb.index.NodeAVL: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def getRow(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.RowAVL: ...
	def getBalance(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def child(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.index.NodeAVL: ...


class NodeAVL:
	def __init__(self, arg0: javawrappers.org.hsqldb.Row, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def replace(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: javawrappers.org.hsqldb.index.Index, arg2: javawrappers.org.hsqldb.index.NodeAVL, ) -> None: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def delete(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def setBalance(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JInt], ) -> javawrappers.org.hsqldb.index.NodeAVL: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JBoolean], arg2: javawrappers.org.hsqldb.index.NodeAVL, ) -> javawrappers.org.hsqldb.index.NodeAVL: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def getRow(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.RowAVL: ...
	def getBalance(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def child(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.index.NodeAVL: ...


class Index:
	class IndexUse:
		def __init__(self, arg0: javawrappers.org.hsqldb.index.Index, arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def emptyIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def asArray(self, ) -> JArray(javawrappers.org.hsqldb.index.Index.IndexUse, 1): ...
	def isUnique(self, ) -> Union[int, JBoolean]: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> JArray(Union[float, JDouble], 1): ...
	def existsParent(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def getOwner(self, ) -> javawrappers.org.hsqldb.rights.Grantee: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def getSQL(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JBoolean], arg7: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def compile(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.SchemaObject, ) -> None: ...
	def getComponents(self, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	def getChangeTimestamp(self, ) -> Union[long, JLong]: ...
	def compareRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def isForward(self, ) -> Union[int, JBoolean]: ...
	def getReferences(self, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	@overload
	def firstRow(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def firstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def size(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def isClustered(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def isConstraint(self, ) -> Union[int, JBoolean]: ...
	def setTable(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> None: ...
	def getDefaultColumnMap(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSchemaName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def getCatalogName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def notifyAll(self, ) -> None: ...
	def getColumnDesc(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def checkIndex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JInt]: ...
	def insert(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.Row, ) -> None: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.Row, ) -> None: ...
	def sizeUnique(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getColumns(self, ) -> JArray(Union[int, JInt], 1): ...
	def getNodeCount(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def lastRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPersistenceId(self, ) -> Union[long, JLong]: ...
	def isEmpty(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JBoolean]: ...
	def setClustered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getColumnTypes(self, ) -> JArray(javawrappers.org.hsqldb.types.Type, 1): ...
	def getPosition(self, ) -> Union[int, JInt]: ...
	def findFirstRowNotNull(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIndexOrderValue(self, ) -> Union[int, JInt]: ...


class IndexAVL:
	def __init__(self, arg0: javawrappers.org.hsqldb.HsqlNameManager.HsqlName, arg1: Union[long, JLong], arg2: javawrappers.org.hsqldb.TableBase, arg3: JArray(Union[int, JInt], 1), arg4: JArray(Union[int, JBoolean], 1), arg5: JArray(Union[int, JBoolean], 1), arg6: JArray(javawrappers.org.hsqldb.types.Type, 1), arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], arg10: Union[int, JBoolean], ): ...
	class IndexRowIterator:
		def __init__(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.index.IndexAVL, arg3: javawrappers.org.hsqldb.index.NodeAVL, arg4: Union[int, JInt], arg5: Union[int, JBoolean], arg6: Union[int, JBoolean], ): ...
		def next(self, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def release(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getRowId(self, ) -> Union[long, JLong]: ...
		def getField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def getCurrentRow(self, ) -> javawrappers.org.hsqldb.Row: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeCurrent(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCurrent(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def emptyIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def asArray(self, ) -> JArray(javawrappers.org.hsqldb.index.Index.IndexUse, 1): ...
	def release(self, ) -> None: ...
	def isUnique(self, ) -> Union[int, JBoolean]: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> JArray(Union[float, JDouble], 1): ...
	def existsParent(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def getOwner(self, ) -> javawrappers.org.hsqldb.rights.Grantee: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def unlinkNodes(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: javawrappers.org.hsqldb.index.NodeAVL, ) -> None: ...
	def getSQL(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JBoolean], arg7: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def compile(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.SchemaObject, ) -> None: ...
	def compareRowForChange(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getComponents(self, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	def getChangeTimestamp(self, ) -> Union[long, JLong]: ...
	def compareRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	def getField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def isForward(self, ) -> Union[int, JBoolean]: ...
	@overload
	def firstRow(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def firstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def getReferences(self, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	def size(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def isClustered(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def isConstraint(self, ) -> Union[int, JBoolean]: ...
	def setTable(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> None: ...
	def removeCurrent(self, ) -> None: ...
	def getDefaultColumnMap(self, ) -> JArray(Union[int, JInt], 1): ...
	def getCurrent(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def next(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSchemaName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def getCatalogName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def getRowId(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def getColumnDesc(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def checkIndex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JInt]: ...
	def insert(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.Row, ) -> None: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.Row, ) -> None: ...
	def sizeUnique(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getCurrentRow(self, ) -> javawrappers.org.hsqldb.Row: ...
	def getColumns(self, ) -> JArray(Union[int, JInt], 1): ...
	def getNodeCount(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def lastRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPersistenceId(self, ) -> Union[long, JLong]: ...
	def isEmpty(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JBoolean]: ...
	def setClustered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getColumnTypes(self, ) -> JArray(javawrappers.org.hsqldb.types.Type, 1): ...
	def getPosition(self, ) -> Union[int, JInt]: ...
	def findFirstRowNotNull(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIndexOrderValue(self, ) -> Union[int, JInt]: ...


class IndexAVLMemory:
	def __init__(self, arg0: javawrappers.org.hsqldb.HsqlNameManager.HsqlName, arg1: Union[long, JLong], arg2: javawrappers.org.hsqldb.TableBase, arg3: JArray(Union[int, JInt], 1), arg4: JArray(Union[int, JBoolean], 1), arg5: JArray(Union[int, JBoolean], 1), arg6: JArray(javawrappers.org.hsqldb.types.Type, 1), arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], arg10: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def emptyIterator(self, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def compareRowNonUnique(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def asArray(self, ) -> JArray(javawrappers.org.hsqldb.index.Index.IndexUse, 1): ...
	def isUnique(self, ) -> Union[int, JBoolean]: ...
	def searchCost(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> JArray(Union[float, JDouble], 1): ...
	def existsParent(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def getOwner(self, ) -> javawrappers.org.hsqldb.rights.Grantee: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def unlinkNodes(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: javawrappers.org.hsqldb.index.NodeAVL, ) -> None: ...
	def getSQL(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[int, JInt], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def findFirstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JBoolean], arg7: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def compile(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.SchemaObject, ) -> None: ...
	def compareRowForChange(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), arg3: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getComponents(self, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	def getChangeTimestamp(self, ) -> Union[long, JLong]: ...
	def compareRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def isForward(self, ) -> Union[int, JBoolean]: ...
	@overload
	def firstRow(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	@overload
	def firstRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def getReferences(self, ) -> javawrappers.org.hsqldb.lib.OrderedHashSet: ...
	def size(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def isClustered(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def getTable(self, ) -> javawrappers.org.hsqldb.TableBase: ...
	def isConstraint(self, ) -> Union[int, JBoolean]: ...
	def setTable(self, arg0: javawrappers.org.hsqldb.TableBase, ) -> None: ...
	def getDefaultColumnMap(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSchemaName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def getCatalogName(self, ) -> javawrappers.org.hsqldb.HsqlNameManager.HsqlName: ...
	def notifyAll(self, ) -> None: ...
	def getColumnDesc(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def checkIndex(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JInt]: ...
	def insert(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.Row, ) -> None: ...
	def delete(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: javawrappers.org.hsqldb.Row, ) -> None: ...
	def sizeUnique(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getColumns(self, ) -> JArray(Union[int, JInt], 1): ...
	def getNodeCount(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[long, JLong]: ...
	def lastRow(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPersistenceId(self, ) -> Union[long, JLong]: ...
	def isEmpty(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JBoolean]: ...
	def setClustered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getColumnTypes(self, ) -> JArray(javawrappers.org.hsqldb.types.Type, 1): ...
	def getPosition(self, ) -> Union[int, JInt]: ...
	def findFirstRowNotNull(self, arg0: javawrappers.org.hsqldb.Session, arg1: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.navigator.RowIterator: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIndexOrderValue(self, ) -> Union[int, JInt]: ...


class NodeAVLDiskLarge:
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.RowAVLDisk, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.hsqldb.RowAVLDisk, arg1: javawrappers.org.hsqldb.rowio.RowInputInterface, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isBlock(self, ) -> Union[int, JBoolean]: ...
	def keepInMemory(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def replace(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: javawrappers.org.hsqldb.index.Index, arg2: javawrappers.org.hsqldb.index.NodeAVL, ) -> None: ...
	def getDefaultCapacity(self, ) -> Union[int, JInt]: ...
	def setInMemory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def delete(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setPos(self, arg0: Union[long, JLong], ) -> None: ...
	def hasChanged(self, ) -> Union[int, JBoolean]: ...
	def getAccessCount(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPos(self, ) -> Union[long, JLong]: ...
	def setBalance(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JInt], ) -> javawrappers.org.hsqldb.index.NodeAVL: ...
	def isInvariable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, arg1: javawrappers.org.hsqldb.lib.LongLookup, ) -> None: ...
	def getData(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getRealSize(self, arg0: javawrappers.org.hsqldb.rowio.RowOutputInterface, ) -> Union[int, JInt]: ...
	def read(self, arg0: javawrappers.org.hsqldb.rowio.RowInputInterface, ) -> None: ...
	def set(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JBoolean], arg2: javawrappers.org.hsqldb.index.NodeAVL, ) -> javawrappers.org.hsqldb.index.NodeAVL: ...
	def getStorageSize(self, ) -> Union[int, JInt]: ...
	def isMemory(self, ) -> Union[int, JBoolean]: ...
	def restore(self, ) -> None: ...
	def destroy(self, ) -> None: ...
	def isNew(self, ) -> Union[int, JBoolean]: ...
	def getRow(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> javawrappers.org.hsqldb.RowAVL: ...
	def getBalance(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInMemory(self, ) -> Union[int, JBoolean]: ...
	def updateAccessCount(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isKeepInMemory(self, ) -> Union[int, JBoolean]: ...
	def setChanged(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStorageSize(self, arg0: Union[int, JInt], ) -> None: ...
	def child(self, arg0: javawrappers.org.hsqldb.persist.PersistentStore, arg1: Union[int, JBoolean], ) -> javawrappers.org.hsqldb.index.NodeAVL: ...


