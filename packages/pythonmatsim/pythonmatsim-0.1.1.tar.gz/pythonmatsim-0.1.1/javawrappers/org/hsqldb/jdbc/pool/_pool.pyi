################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util.logging
import javawrappers.java.sql
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.javax.transaction.xa
import javawrappers.org.hsqldb
import javawrappers.java.util.concurrent
import javawrappers.javax.sql
import javawrappers.javax.naming
import javawrappers.org.hsqldb.jdbc.pool

from jpype.types import *
from typing import Union

from typing import overload

class JDBCXADataSource:
	def __init__(self, ): ...
	def createXAConnectionBuilder(self, ) -> javawrappers.javax.sql.XAConnectionBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setDatabase(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def getParentLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getDatabaseName(self, ) -> javawrappers.java.lang.String: ...
	def getNetworkProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDataSourceName(self, ) -> javawrappers.java.lang.String: ...
	def removeResource(self, arg0: javawrappers.javax.transaction.xa.Xid, ) -> javawrappers.org.hsqldb.jdbc.pool.JDBCXAResource: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addResource(self, arg0: javawrappers.javax.transaction.xa.Xid, arg1: javawrappers.org.hsqldb.jdbc.pool.JDBCXAResource, ) -> None: ...
	def createShardingKeyBuilder(self, ) -> javawrappers.java.sql.ShardingKeyBuilder: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getReference(self, ) -> javawrappers.javax.naming.Reference: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	@overload
	def getXAConnection(self, ) -> javawrappers.javax.sql.XAConnection: ...
	@overload
	def getXAConnection(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.sql.XAConnection: ...
	def setLoginTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setUrl(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getURL(self, ) -> javawrappers.java.lang.String: ...
	def getUrl(self, ) -> javawrappers.java.lang.String: ...
	def getDatabase(self, ) -> javawrappers.java.lang.String: ...
	def setDatabaseName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLoginTimeout(self, ) -> Union[int, JInt]: ...


class JDBCXID:
	def __init__(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), arg2: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getGlobalTransactionId(self, ) -> JArray(JByte, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFormatId(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBranchQualifier(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getUniqueXid(arg0: Union[int, JInt], ) -> javawrappers.javax.transaction.xa.Xid: ...
	def notify(self, ) -> None: ...


class JDBCXAConnection:
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.pool.JDBCXADataSource, arg1: javawrappers.org.hsqldb.jdbc.JDBCConnection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addStatementEventListener(self, arg0: javawrappers.javax.sql.StatementEventListener, ) -> None: ...
	def release(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addConnectionEventListener(self, arg0: javawrappers.javax.sql.ConnectionEventListener, ) -> None: ...
	def connectionErrorOccurred(self, arg0: javawrappers.java.sql.SQLException, ) -> None: ...
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	def removeStatementEventListener(self, arg0: javawrappers.javax.sql.StatementEventListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeConnectionEventListener(self, arg0: javawrappers.javax.sql.ConnectionEventListener, ) -> None: ...
	def reset(self, ) -> None: ...
	def getXAResource(self, ) -> javawrappers.javax.transaction.xa.XAResource: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def connectionClosed(self, ) -> None: ...
	def isInUse(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class JDBCXAResource:
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.pool.JDBCXADataSource, arg1: javawrappers.org.hsqldb.jdbc.JDBCConnection, ): ...
	def rollback(self, arg0: javawrappers.javax.transaction.xa.Xid, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def prepare(self, arg0: javawrappers.javax.transaction.xa.Xid, ) -> Union[int, JInt]: ...
	def getTransactionTimeout(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def recover(self, arg0: Union[int, JInt], ) -> JArray(javawrappers.javax.transaction.xa.Xid, 1): ...
	def prepareThis(self, ) -> Union[int, JInt]: ...
	def commitThis(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTransactionTimeout(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def start(self, arg0: javawrappers.javax.transaction.xa.Xid, arg1: Union[int, JInt], ) -> None: ...
	def rollbackThis(self, ) -> None: ...
	def commit(self, arg0: javawrappers.javax.transaction.xa.Xid, arg1: Union[int, JBoolean], ) -> None: ...
	def withinGlobalTransaction(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def forget(self, arg0: javawrappers.javax.transaction.xa.Xid, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def end(self, arg0: javawrappers.javax.transaction.xa.Xid, arg1: Union[int, JInt], ) -> None: ...
	def isSameRM(self, arg0: javawrappers.javax.transaction.xa.XAResource, ) -> Union[int, JBoolean]: ...


class JDBCPooledDataSource:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setPassword(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLogWriter(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setDatabase(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setProperties(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	def getParentLogger(self, ) -> javawrappers.java.util.logging.Logger: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	def getDatabaseName(self, ) -> javawrappers.java.lang.String: ...
	def getNetworkProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDataSourceName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createShardingKeyBuilder(self, ) -> javawrappers.java.sql.ShardingKeyBuilder: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getReference(self, ) -> javawrappers.javax.naming.Reference: ...
	def getLogWriter(self, ) -> javawrappers.java.io.PrintWriter: ...
	def setLoginTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setURL(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setUrl(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getPooledConnection(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.sql.PooledConnection: ...
	@overload
	def getPooledConnection(self, ) -> javawrappers.javax.sql.PooledConnection: ...
	def getURL(self, ) -> javawrappers.java.lang.String: ...
	def getUrl(self, ) -> javawrappers.java.lang.String: ...
	def getDatabase(self, ) -> javawrappers.java.lang.String: ...
	def createPooledConnectionBuilder(self, ) -> javawrappers.javax.sql.PooledConnectionBuilder: ...
	def setDatabaseName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLoginTimeout(self, ) -> Union[int, JInt]: ...


class JDBCPooledConnection:
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.JDBCConnection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addStatementEventListener(self, arg0: javawrappers.javax.sql.StatementEventListener, ) -> None: ...
	def release(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addConnectionEventListener(self, arg0: javawrappers.javax.sql.ConnectionEventListener, ) -> None: ...
	def getConnection(self, ) -> javawrappers.java.sql.Connection: ...
	def connectionErrorOccurred(self, arg0: javawrappers.java.sql.SQLException, ) -> None: ...
	def removeStatementEventListener(self, arg0: javawrappers.javax.sql.StatementEventListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeConnectionEventListener(self, arg0: javawrappers.javax.sql.ConnectionEventListener, ) -> None: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def connectionClosed(self, ) -> None: ...
	def isInUse(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


class JDBCXAConnectionWrapper:
	def __init__(self, arg0: javawrappers.org.hsqldb.jdbc.pool.JDBCXAResource, arg1: javawrappers.org.hsqldb.jdbc.pool.JDBCXAConnection, arg2: javawrappers.org.hsqldb.jdbc.JDBCConnection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def beginRequest(self, ) -> None: ...
	def getHoldability(self, ) -> Union[int, JInt]: ...
	def commit(self, ) -> None: ...
	def setCatalog(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setHoldability(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[int, JInt], 1), ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.sql.PreparedStatement: ...
	@overload
	def prepareStatement(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.PreparedStatement: ...
	def createClob(self, ) -> javawrappers.java.sql.Clob: ...
	def closeFully(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setClientInfo(self, arg0: javawrappers.java.util.Properties, ) -> None: ...
	@overload
	def setClientInfo(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def createSQLXML(self, ) -> javawrappers.java.sql.SQLXML: ...
	def unwrap(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getCatalog(self, ) -> javawrappers.java.lang.String: ...
	def createBlob(self, ) -> javawrappers.java.sql.Blob: ...
	@overload
	def createStatement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.sql.Statement: ...
	@overload
	def createStatement(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.sql.Statement: ...
	@overload
	def createStatement(self, ) -> javawrappers.java.sql.Statement: ...
	@overload
	def setShardingKeyIfValid(self, arg0: javawrappers.java.sql.ShardingKey, arg1: javawrappers.java.sql.ShardingKey, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def setShardingKeyIfValid(self, arg0: javawrappers.java.sql.ShardingKey, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def abort(self, arg0: javawrappers.java.util.concurrent.Executor, ) -> None: ...
	def setAutoCommit(self, arg0: Union[int, JBoolean], ) -> None: ...
	def reset(self, ) -> None: ...
	def getMetaData(self, ) -> javawrappers.java.sql.DatabaseMetaData: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def prepareCall(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.sql.CallableStatement: ...
	@overload
	def prepareCall(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.CallableStatement: ...
	@overload
	def prepareCall(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.sql.CallableStatement: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTransactionIsolation(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getWarnings(self, ) -> javawrappers.java.sql.SQLWarning: ...
	def releaseSavepoint(self, arg0: javawrappers.java.sql.Savepoint, ) -> None: ...
	def notify(self, ) -> None: ...
	def nativeSQL(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def createArrayOf(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.sql.Array: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def setSavepoint(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.sql.Savepoint: ...
	@overload
	def setSavepoint(self, ) -> javawrappers.java.sql.Savepoint: ...
	def close(self, ) -> None: ...
	def createNClob(self, ) -> javawrappers.java.sql.NClob: ...
	@overload
	def rollback(self, ) -> None: ...
	@overload
	def rollback(self, arg0: javawrappers.java.sql.Savepoint, ) -> None: ...
	def setNetworkTimeout(self, arg0: javawrappers.java.util.concurrent.Executor, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setShardingKey(self, arg0: javawrappers.java.sql.ShardingKey, arg1: javawrappers.java.sql.ShardingKey, ) -> None: ...
	@overload
	def setShardingKey(self, arg0: javawrappers.java.sql.ShardingKey, ) -> None: ...
	def setTypeMap(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def isValid(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getAutoCommit(self, ) -> Union[int, JBoolean]: ...
	def endRequest(self, ) -> None: ...
	def clearWarnings(self, ) -> None: ...
	def getSchema(self, ) -> javawrappers.java.lang.String: ...
	def getNetworkTimeout(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isWrapperFor(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTransactionIsolation(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createStruct(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.sql.Struct: ...
	def getSession(self, ) -> javawrappers.org.hsqldb.SessionInterface: ...
	@overload
	def getClientInfo(self, ) -> javawrappers.java.util.Properties: ...
	@overload
	def getClientInfo(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getTypeMap(self, ) -> javawrappers.java.util.Map: ...


