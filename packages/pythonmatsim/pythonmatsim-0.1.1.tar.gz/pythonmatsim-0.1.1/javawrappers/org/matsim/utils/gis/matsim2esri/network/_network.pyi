################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.utils.gis.matsim2esri.network
import javawrappers.java.lang
import javawrappers.org.opengis.feature.simple
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class Links2ESRIShape:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.utils.gis.matsim2esri.network.FeatureGeneratorBuilder, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...


class LanesBasedWidthCalculator:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.Double, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getWidth(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class FreespeedBasedWidthCalculator:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.Double, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getWidth(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class CapacityBasedWidthCalculator:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.Double, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getWidth(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class WidthCalculator:
	def getWidth(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...


class FeatureGeneratorBuilderImpl:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, ): ...
	def setFeatureGeneratorPrototype(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setWidthCoefficient(self, arg0: Union[float, JDouble], ) -> None: ...
	def setCoordinateReferenceSystem(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setWidthCalculatorPrototype(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def createFeatureGenerator(self, ) -> javawrappers.org.matsim.utils.gis.matsim2esri.network.FeatureGenerator: ...


class LineStringBasedFeatureGenerator:
	def __init__(self, arg0: javawrappers.org.matsim.utils.gis.matsim2esri.network.WidthCalculator, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getFeature(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class FeatureGeneratorBuilder:
	def createFeatureGenerator(self, ) -> javawrappers.org.matsim.utils.gis.matsim2esri.network.FeatureGenerator: ...


class PolygonFeatureGenerator:
	def __init__(self, arg0: javawrappers.org.matsim.utils.gis.matsim2esri.network.WidthCalculator, arg1: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createPolygonCoordsForLink(arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...
	def getFeature(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


class Nodes2ESRIShape:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def write(self, ) -> None: ...
	def notify(self, ) -> None: ...


class FeatureGenerator:
	def getFeature(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...


