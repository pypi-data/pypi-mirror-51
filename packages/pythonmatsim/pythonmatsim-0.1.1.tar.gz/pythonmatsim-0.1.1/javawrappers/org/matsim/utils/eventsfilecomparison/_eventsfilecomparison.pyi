################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.utils.eventsfilecomparison
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.java.io

from jpype.types import *
from typing import Union

from typing import overload

class EventsFileComparator:
	class EventsComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class Result:
		FILES_ARE_EQUAL: EventsFileComparator.Result = ...
		DIFFERENT_NUMBER_OF_TIMESTEPS: EventsFileComparator.Result = ...
		DIFFERENT_TIMESTEPS: EventsFileComparator.Result = ...
		MISSING_EVENT: EventsFileComparator.Result = ...
		WRONG_EVENT_COUNT: EventsFileComparator.Result = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.utils.eventsfilecomparison.EventsFileComparator.Result: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.utils.eventsfilecomparison.EventsFileComparator.Result, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def compare(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.utils.eventsfilecomparison.EventsFileComparator.Result: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.utils.eventsfilecomparison.EventsFileComparator.Result: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.utils.eventsfilecomparison.EventsFileComparator.Result, 1): ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	@staticmethod
	def compareAndReturnInt(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Worker:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.concurrent.CyclicBarrier, ): ...
	class ComparatorInterruptedException:
		def __init__(self, arg0: javawrappers.java.lang.Exception, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def run(self, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def getEventsMap(self, ) -> javawrappers.java.util.Map: ...
	def interrupt(self, ) -> None: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def getCurrentTime(self, ) -> Union[float, JDouble]: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def isFinished(self, ) -> Union[int, JBoolean]: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def getNumEvents(self, ) -> Union[int, JInt]: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def yield_() -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	def start(self, ) -> None: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


