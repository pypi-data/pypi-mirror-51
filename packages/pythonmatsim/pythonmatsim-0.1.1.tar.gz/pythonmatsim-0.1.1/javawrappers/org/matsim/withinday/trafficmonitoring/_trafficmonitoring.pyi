################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.api.core.v01.events
import javawrappers.java.util
import javawrappers.java.util.concurrent
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.core.network
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.withinday.trafficmonitoring
import javawrappers.org.matsim.core.mobsim.framework.events
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TravelTimeInfoProvider:
	@overload
	def getTravelTimeInfo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo: ...
	@overload
	def getTravelTimeInfo(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo: ...


class WithinDayTravelTime:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.java.util.Set, ): ...
	class UpdateMeanTravelTimesRunnable:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def setEndBarrier(self, arg0: javawrappers.java.util.concurrent.CyclicBarrier, ) -> None: ...
		def run(self, ) -> None: ...
		def setStartBarrier(self, arg0: javawrappers.java.util.concurrent.CyclicBarrier, ) -> None: ...
		def notify(self, ) -> None: ...
		def addTravelTimeInfo(self, arg0: javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getActiveLinksCount(self, ) -> Union[int, JInt]: ...
		def setTime(self, arg0: Union[float, JDouble], ) -> None: ...
		def afterSim(self, ) -> None: ...


	class TravelTimeInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TripBin:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleLeavesTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkLeaveEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkEnterEvent, ) -> None: ...
	def setEndBarrier(self, arg0: javawrappers.java.util.concurrent.CyclicBarrier, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def setStartBarrier(self, arg0: javawrappers.java.util.concurrent.CyclicBarrier, ) -> None: ...
	def notify(self, ) -> None: ...
	def notifyMobsimBeforeSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeSimStepEvent, ) -> None: ...
	def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
	def addTravelTimeInfo(self, arg0: javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyMobsimInitialized(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimInitializedEvent, ) -> None: ...
	def addNetworkChangeEvent(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActiveLinksCount(self, ) -> Union[int, JInt]: ...
	def notifyMobsimBeforeCleanup(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimBeforeCleanupEvent, ) -> None: ...
	def getLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...
	def setTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def afterSim(self, ) -> None: ...


class EarliestLinkExitTimeProvider:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.java.util.Map, arg2: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	@overload
	def getEarliestLinkExitTimesPerTimeStep(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.Set: ...
	@overload
	def getEarliestLinkExitTimesPerTimeStep(self, ) -> javawrappers.java.util.Map: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getEarliestLinkExitTimes(self, ) -> javawrappers.java.util.Map: ...
	def getTransportModeProvider(self, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.TransportModeProvider: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkLeaveEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonDepartureEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkEnterEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleLeavesTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getEarliestLinkExitTime(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[float, JDouble]: ...


class WithinDayTravelTimeModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class LinkEnteredProvider:
	def __init__(self, ): ...
	def notifyMobsimAfterSimStep(self, arg0: javawrappers.org.matsim.core.mobsim.framework.events.MobsimAfterSimStepEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLinkEnteredAgentsInLastTimeStep(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkEnterEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleLeavesTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MapBasedTravelTimeInfoProvider:
	def __init__(self, arg0: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def getTravelTimeInfo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo: ...
	@overload
	def getTravelTimeInfo(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo: ...


class ArrayBasedTravelTimeInfoProvider:
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def getTravelTimeInfo(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo: ...
	@overload
	def getTravelTimeInfo(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.matsim.withinday.trafficmonitoring.WithinDayTravelTime.TravelTimeInfo: ...


class TransportModeProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTransportMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.lang.String: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonDepartureEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


