################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.pt.router
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TransitRouterNetwork:
	def __init__(self, ): ...
	class TransitRouterNetworkLink:
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode, arg2: javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode, arg3: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg4: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg5: Union[float, JDouble], ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode, arg2: javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode, arg3: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg4: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		@overload
		def getFreespeed(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def getFreespeed(self, ) -> Union[float, JDouble]: ...
		def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
		def getRoute(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...
		def notify(self, ) -> None: ...
		def setFromNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
		@overload
		def getToNode(self, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode: ...
		def setFreespeed(self, arg0: Union[float, JDouble], ) -> None: ...
		@overload
		def getFlowCapacityPerSec(self, ) -> Union[float, JDouble]: ...
		@overload
		def getFlowCapacityPerSec(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def setToNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
		def getAllowedModes(self, ) -> javawrappers.java.util.Set: ...
		def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
		@overload
		def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
		@overload
		def getFromNode(self, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode: ...
		@overload
		def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
		@overload
		def getNumberOfLanes(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def getLine(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitLine: ...
		def setAllowedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
		def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getLength(self, ) -> Union[float, JDouble]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
		def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
		@overload
		def getCapacity(self, ) -> Union[float, JDouble]: ...
		@overload
		def getCapacity(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


	class TransitRouterNetworkNode:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop, arg2: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg3: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
		def notifyAll(self, ) -> None: ...
		def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
		def getLine(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitLine: ...
		def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
		def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
		def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def getRoute(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...
		def notify(self, ) -> None: ...
		def getInLinks(self, ) -> javawrappers.java.util.Map: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
		def getStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def createNode(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getFreespeed(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def getFreespeed(self, ) -> Union[float, JDouble]: ...
	@overload
	def getRoute(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...
	@overload
	def getRoute(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...
	def createLink(self, arg0: javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode, arg1: javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode, arg2: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg3: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkLink: ...
	def setFromNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def setFreespeed(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getFlowCapacityPerSec(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFlowCapacityPerSec(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getAllowedModes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	@overload
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	@overload
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getNodes(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getNumberOfLanes(self, ) -> Union[float, JDouble]: ...
	@overload
	def getNumberOfLanes(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getNearestNode(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode: ...
	def getEffectiveCellSize(self, ) -> Union[float, JDouble]: ...
	def setAllowedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def setCapacity(self, arg0: Union[float, JDouble], ) -> None: ...
	def addLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinks(self, ) -> javawrappers.java.util.Map: ...
	def addNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@overload
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setNumberOfLanes(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getToNode(self, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode: ...
	def getEffectiveLaneWidth(self, ) -> Union[float, JDouble]: ...
	def setEffectiveCellSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def finishInit(self, ) -> None: ...
	def setToNode(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, ) -> Union[int, JBoolean]: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	@overload
	def getFromNode(self, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork.TransitRouterNetworkNode: ...
	@overload
	def getLine(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitLine: ...
	@overload
	def getLine(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitLine: ...
	def setEffectiveLaneWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	@staticmethod
	def createFromSchedule(arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.api.core.v01.network.NetworkFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	def getCapacityPeriod(self, ) -> Union[float, JDouble]: ...
	def getNearestNodes(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: Union[float, JDouble], ) -> javawrappers.java.util.Collection: ...
	def setCapacityPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[float, JDouble]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@overload
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop: ...
	@overload
	def getCapacity(self, ) -> Union[float, JDouble]: ...
	@overload
	def getCapacity(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class TransitScheduleChangedEvent:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getEventType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MultiNodeDijkstra:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.pt.router.TransitTravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.java.util.Map, arg2: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TransitActsRemover:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class FakeFacility:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def notify(self, ) -> None: ...


class PreparedTransitSchedule:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	def getNextDepartureTime(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop, arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TransitRouterModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class TransitScheduleChangedEventHandler:
	def handleEvent(self, arg0: javawrappers.org.matsim.pt.router.TransitScheduleChangedEvent, ) -> None: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...


class TransitPassengerRoute:
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTravelCost(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRoute(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class TransitRouter:
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...


class TransitTravelDisutility:
	def getWalkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def getWalkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def getLinkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, arg4: javawrappers.org.matsim.pt.router.CustomDataManager, ) -> Union[float, JDouble]: ...


class AbstractTransitRouter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CustomDataManager:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setToNodeCustomData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def storeTmpData(self, ) -> None: ...
	def initForLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def notify(self, ) -> None: ...
	def getFromNodeCustomData(self, ) -> javawrappers.java.lang.Object: ...


class TransitRouterNetworkTravelTimeAndDisutility:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.router.TransitRouterConfig, arg1: javawrappers.org.matsim.pt.router.PreparedTransitSchedule, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.router.TransitRouterConfig, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getWalkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def getWalkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getVehArrivalTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getLinkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, arg4: javawrappers.org.matsim.pt.router.CustomDataManager, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...


class TransitRouterConfig:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup, arg1: javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup, arg2: javawrappers.org.matsim.pt.config.TransitRouterConfigGroup, arg3: javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setUtilityOfLineSwitch_utl(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBeelineWalkConnectionDistance(self, ) -> Union[float, JDouble]: ...
	def getUtilityOfLineSwitch_utl(self, ) -> Union[float, JDouble]: ...
	def getDirectWalkFactor(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getSearchRadius(self, ) -> Union[float, JDouble]: ...
	def getMarginalUtilityOfTravelDistancePt_utl_m(self, ) -> Union[float, JDouble]: ...
	def isCacheTree(self, ) -> Union[int, JBoolean]: ...
	def setMarginalUtilityOfTravelTimePt_utl_s(self, arg0: Union[float, JDouble], ) -> None: ...
	def setBeelineWalkConnectionDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def getExtensionRadius(self, ) -> Union[float, JDouble]: ...
	def setMarginalUtilityOfTravelDistanceWalk_utl_m(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setBeelineWalkSpeed(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMarginalUtilityOfTravelDistanceWalk_utl_m(self, ) -> Union[float, JDouble]: ...
	def setAdditionalTransferTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMarginalUtilityOfTravelTimePt_utl_s(self, ) -> Union[float, JDouble]: ...
	def setExtensionRadius(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMarginalUtilityOfTravelTimeWalk_utl_s(self, ) -> Union[float, JDouble]: ...
	def getBeelineWalkSpeed(self, ) -> Union[float, JDouble]: ...
	def getAdditionalTransferTime(self, ) -> Union[float, JDouble]: ...
	def getBeelineDistanceFactor(self, ) -> javawrappers.java.lang.Double: ...
	def setMarginalUtilityOfTravelTimeWalk_utl_s(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMarginalUtilityOfWaitingPt_utl_s(self, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCacheTree(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSearchRadius(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMarginalUtilityOfTravelDistancePt_utl_m(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMarginalUtilityOfWaitingPt_utl_s(self, arg0: Union[float, JDouble], ) -> None: ...


class TransitRouterImplFactory:
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg1: javawrappers.org.matsim.pt.router.TransitRouterConfig, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.pt.router.TransitRouter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TransitLeastCostPathTree:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.pt.router.TransitTravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, arg3: javawrappers.java.util.Map, arg4: javawrappers.org.matsim.api.core.v01.population.Person, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.pt.router.TransitTravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, arg3: javawrappers.java.util.Map, arg4: javawrappers.java.util.Map, arg5: javawrappers.org.matsim.api.core.v01.population.Person, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPath(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTransitPassengerRoute(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.matsim.pt.router.TransitPassengerRoute: ...
	def notify(self, ) -> None: ...


class TransitRouterImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.router.TransitRouterConfig, arg1: javawrappers.org.matsim.pt.router.PreparedTransitSchedule, arg2: javawrappers.org.matsim.pt.router.TransitRouterNetwork, arg3: javawrappers.org.matsim.core.router.util.TravelTime, arg4: javawrappers.org.matsim.pt.router.TransitTravelDisutility, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.router.TransitRouterConfig, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTransitRouterNetwork(self, ) -> javawrappers.org.matsim.pt.router.TransitRouterNetwork: ...
	def notify(self, ) -> None: ...


class RouteSegment:
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.Id, arg4: javawrappers.org.matsim.api.core.v01.Id, ): ...
	def getRouteTaken(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLineTaken(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTravelTime(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFromStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...
	def notify(self, ) -> None: ...
	def getToStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...


