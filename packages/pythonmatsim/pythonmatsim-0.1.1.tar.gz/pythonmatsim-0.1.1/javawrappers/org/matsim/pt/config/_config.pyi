################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.pt.config

from jpype.types import *
from typing import Union

from typing import overload

class TransitConfigGroup:
	def __init__(self, ): ...
	class BoardingAcceptance:
		checkLineAndStop: TransitConfigGroup.BoardingAcceptance = ...
		checkStopOnly: TransitConfigGroup.BoardingAcceptance = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setBoardingAcceptance(self, arg0: javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setTransitStopsAttributesFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setTransitModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setTransitLinesAttributesFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getInputScheduleCRS(self, ) -> javawrappers.java.lang.String: ...
	def getTransitStopsAttributesFile(self, ) -> javawrappers.java.lang.String: ...
	def setVehiclesFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getVehiclesFile(self, ) -> javawrappers.java.lang.String: ...
	def setInputScheduleCRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getVehiclesFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance: ...
	def setUseTransit(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTransitScheduleFile(self, ) -> javawrappers.java.lang.String: ...
	def getTransitLinesAttributesFile(self, ) -> javawrappers.java.lang.String: ...
	def getBoardingAcceptance(self, ) -> javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance: ...
	def setLocked(self, ) -> None: ...
	def getTransitModes(self, ) -> javawrappers.java.util.Set: ...
	def getTransitScheduleFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def isUsingTransitInMobsim(self, ) -> Union[int, JBoolean]: ...
	def getTransitStopsAttributesFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def isUseTransit(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def setUsingTransitInMobsim(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def setTransitScheduleFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class TransitRouterConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getMaxBeelineWalkConnectionDistance(self, ) -> Union[float, JDouble]: ...
	def getDirectWalkFactor(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getSearchRadius(self, ) -> Union[float, JDouble]: ...
	def isCacheTree(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getExtensionRadius(self, ) -> Union[float, JDouble]: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setAdditionalTransferTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def setExtensionRadius(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getAdditionalTransferTime(self, ) -> Union[float, JDouble]: ...
	def setLocked(self, ) -> None: ...
	def setDirectWalkFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setMaxBeelineWalkConnectionDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def setCacheTree(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSearchRadius(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


