################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class VehicleTracker:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFacilityIdForVehicle(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleDepartsAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TransitRouteAccessEgressAnalysis:
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg1: javawrappers.org.matsim.pt.analysis.VehicleTracker, ): ...
	def getEgressCounter(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> javawrappers.java.util.Map: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonEntersVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonLeavesVehicleEvent, ) -> None: ...
	def getAccessCounter(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def printStats(self, ) -> None: ...


class RouteOccupancy:
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg1: javawrappers.org.matsim.pt.analysis.VehicleTracker, ): ...
	def getNumberOfLeavingPassengers(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumberOfEnteringPassengers(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JInt]: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonEntersVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonLeavesVehicleEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RouteTimeDiagram:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createGraph(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleDepartsAtFacilityEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeData(self, ) -> None: ...
	def notify(self, ) -> None: ...


class TransitLoad:
	def __init__(self, ): ...
	class StopInformation:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class StopData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class RouteData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LineData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class VehicleData:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: javawrappers.org.matsim.api.core.v01.Id, arg4: javawrappers.org.matsim.api.core.v01.Id, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDepartureStopInformation(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg3: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> javawrappers.java.util.List: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonLeavesVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonEntersVehicleEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleDepartsAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.TransitDriverStartsEvent, ) -> None: ...
	@overload
	def getLoadAtDeparture(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: Union[int, JInt], arg3: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> Union[int, JInt]: ...
	@overload
	def getLoadAtDeparture(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg3: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


