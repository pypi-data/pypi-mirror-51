################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.utils.objectattributes
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.xml.sax
import javawrappers.org.matsim.core.api.internal
import javawrappers.org.matsim.core.population.routes
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TransitScheduleReaderV2:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg1: javawrappers.org.matsim.core.population.routes.RouteFactories, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	class StringCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TempRoute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TempStop:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TempTransitRoute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class TransitScheduleReaderV1:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg1: javawrappers.org.matsim.core.population.routes.RouteFactories, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg2: javawrappers.org.matsim.core.population.routes.RouteFactories, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg1: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	class StringCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TempRoute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TempStop:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TempTransitRoute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class TransitScheduleImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getMinimalTransferTimes(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.MinimalTransferTimes: ...
	def notifyAll(self, ) -> None: ...
	def removeStopFacility(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> Union[int, JBoolean]: ...
	def addStopFacility(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> None: ...
	def getTransitLinesAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.ObjectAttributes: ...
	def getFacilities(self, ) -> javawrappers.java.util.Map: ...
	def getTransitStopsAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.ObjectAttributes: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.core.api.internal.MatsimFactory: ...
	@overload
	def getFactory(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitScheduleFactory: ...
	def addTransitLine(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, ) -> None: ...
	def notify(self, ) -> None: ...
	def getTransitLines(self, ) -> javawrappers.java.util.Map: ...
	def removeTransitLine(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TransitRouteStopImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getArrivalOffset(self, ) -> Union[float, JDouble]: ...
	def setAwaitDepartureTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDepartureOffset(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStopFacility(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isAwaitDepartureTime(self, ) -> Union[int, JBoolean]: ...
	def setStopFacility(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> None: ...
	def notify(self, ) -> None: ...


class TransitLineImpl:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeRoute(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, ) -> Union[int, JBoolean]: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def getRoutes(self, ) -> javawrappers.java.util.Map: ...
	def addRoute(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DepartureImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setVehicleId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDepartureTime(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class TransitRouteImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setRoute(self, arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getTransportMode(self, ) -> javawrappers.java.lang.String: ...
	def getDirection(self, ) -> javawrappers.java.lang.String: ...
	def addDeparture(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> None: ...
	def setTransportMode(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getDepartures(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getRoute(self, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getStops(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeDeparture(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.Departure, ) -> Union[int, JBoolean]: ...
	def setDirection(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop: ...


class TransitScheduleWriterV2:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPrettyPrint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIndentationString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def useCompression(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def notify(self, ) -> None: ...


class TransitScheduleWriterV1:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPrettyPrint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIndentationString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def useCompression(self, arg0: Union[int, JBoolean], ) -> None: ...
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class TransitStopFacilityImpl:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def setStopAreaId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getIsBlockingLane(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getStopAreaId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class TransitScheduleFactoryImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createTransitRouteStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRouteStop: ...
	def createDeparture(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.pt.transitSchedule.api.Departure: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createTransitSchedule(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createTransitLine(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitLine: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createTransitStopFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: Union[int, JBoolean], ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...
	def notify(self, ) -> None: ...
	def createTransitRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg2: javawrappers.java.util.List, arg3: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...


