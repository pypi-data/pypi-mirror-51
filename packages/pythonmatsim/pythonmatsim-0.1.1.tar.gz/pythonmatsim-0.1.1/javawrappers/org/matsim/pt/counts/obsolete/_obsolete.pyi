################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.pt.counts.obsolete
import javawrappers.org.jfree.chart

from jpype.types import *
from typing import Union

from typing import overload

class PtCountSimComparisonWriter:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: javawrappers.java.util.List, ): ...
	class PtCountsType:
		Boarding: PtCountSimComparisonWriter.PtCountsType = ...
		Alighting: PtCountSimComparisonWriter.PtCountsType = ...
		Occupancy: PtCountSimComparisonWriter.PtCountsType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.counts.obsolete.PtCountSimComparisonWriter.PtCountsType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.pt.counts.obsolete.PtCountSimComparisonWriter.PtCountsType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.pt.counts.obsolete.PtCountSimComparisonWriter.PtCountsType: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.pt.counts.obsolete.PtCountSimComparisonWriter.PtCountsType, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def setIterationNumber(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PtCountsSimRealPerHourGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.org.matsim.pt.counts.obsolete.PtCountSimComparisonWriter.PtCountsType, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHour(self, ) -> Union[int, JInt]: ...


class PtBiasErrorGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMeanRelError(self, ) -> JArray(Union[float, JDouble], 1): ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def getMeanAbsBias(self, ) -> JArray(Union[float, JDouble], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PtCountSimComparisonKMLWriter:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg4: javawrappers.org.matsim.counts.Counts, arg5: javawrappers.org.matsim.counts.Counts, arg6: javawrappers.org.matsim.counts.Counts, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setIterationNumber(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


