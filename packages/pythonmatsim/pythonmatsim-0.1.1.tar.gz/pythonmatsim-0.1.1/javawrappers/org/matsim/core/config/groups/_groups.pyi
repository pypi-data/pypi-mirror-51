################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.awt.image
import javawrappers.org.matsim.core.config.groups
import javawrappers.java.net
import javawrappers.org.matsim.core.replanning.modules
import javawrappers.java.awt.geom
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ControlerConfigGroup:
	def __init__(self, ): ...
	class MobsimType:
		qsim: ControlerConfigGroup.MobsimType = ...
		JDEQSim: ControlerConfigGroup.MobsimType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.MobsimType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.MobsimType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class EventsFileFormat:
		xml: ControlerConfigGroup.EventsFileFormat = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.EventsFileFormat: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.EventsFileFormat, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class RoutingAlgorithmType:
		Dijkstra: ControlerConfigGroup.RoutingAlgorithmType = ...
		AStarLandmarks: ControlerConfigGroup.RoutingAlgorithmType = ...
		FastDijkstra: ControlerConfigGroup.RoutingAlgorithmType = ...
		FastAStarLandmarks: ControlerConfigGroup.RoutingAlgorithmType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.RoutingAlgorithmType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.RoutingAlgorithmType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isLinkToLinkRoutingEnabled(self, ) -> Union[int, JBoolean]: ...
	def setSnapshotFormat(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setOutputDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getEventsFileFormats(self, ) -> javawrappers.java.util.Set: ...
	def getOverwriteFileSetting(self, ) -> javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting: ...
	def setLinkToLinkRoutingEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setWritePlansUntilIteration(self, arg0: Union[int, JInt], ) -> None: ...
	def getRoutingAlgorithmType(self, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.RoutingAlgorithmType: ...
	def setWriteSnapshotsInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getWriteEventsInterval(self, ) -> Union[int, JInt]: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def setWriteEventsUntilIteration(self, arg0: Union[int, JInt], ) -> None: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	def setWriteEventsInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def setCreateGraphs(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getMobsim(self, ) -> javawrappers.java.lang.String: ...
	def getWritePlansUntilIteration(self, ) -> Union[int, JInt]: ...
	def getDumpDataAtEnd(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getSnapshotFormat(self, ) -> javawrappers.java.util.Collection: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def isCreateGraphs(self, ) -> Union[int, JBoolean]: ...
	def getLastIteration(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setRoutingAlgorithmType(self, arg0: javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.RoutingAlgorithmType, ) -> None: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.RoutingAlgorithmType, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.EventsFileFormat, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.MobsimType, 1): ...
	def notifyAll(self, ) -> None: ...
	def setOverwriteFileSetting(self, arg0: javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting, ) -> None: ...
	def getFirstIteration(self, ) -> Union[int, JInt]: ...
	def getRunId(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setMobsim(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setFirstIteration(self, arg0: Union[int, JInt], ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setWritePlansInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getWriteSnapshotsInterval(self, ) -> Union[int, JInt]: ...
	def getWriteEventsUntilIteration(self, ) -> Union[int, JInt]: ...
	def setLastIteration(self, arg0: Union[int, JInt], ) -> None: ...
	def getWritePlansInterval(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.RoutingAlgorithmType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.EventsFileFormat: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup.MobsimType: ...
	def setRunId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getOutputDirectory(self, ) -> javawrappers.java.lang.String: ...
	def setEventsFileFormats(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setDumpDataAtEnd(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SubtourModeChoiceConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def considerCarAvailability(self, ) -> Union[int, JBoolean]: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setProbaForRandomSingleTripMode(self, arg0: Union[float, JDouble], ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getProbaForRandomSingleTripMode(self, ) -> Union[float, JDouble]: ...
	def setConsiderCarAvailability(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getBehavior(self, ) -> javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior: ...
	def getChainBasedModes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getModes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setModes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setBehavior(self, arg0: javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def setChainBasedModes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class LinkStatsConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def setWriteLinkStatsInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getWriteLinkStatsInterval(self, ) -> Union[int, JInt]: ...
	def getAverageLinkStatsOverIterations(self, ) -> Union[int, JInt]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setAverageLinkStatsOverIterations(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class StrategyConfigGroup:
	def __init__(self, ): ...
	class ReflectiveDelegate:
		def __init__(self, ): ...
		def getPlanSelectorForRemoval(self, ) -> javawrappers.java.lang.String: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def setPlanSelectorForRemoval(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...
		def setExternalExeTmpFileRootDir(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def testForLocked(self, ) -> None: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getExternalExeTimeOut(self, ) -> Union[long, JLong]: ...
		def getExternalExeConfigTemplate(self, ) -> javawrappers.java.lang.String: ...
		def setExternalExeConfigTemplate(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def setExternalExeTimeOut(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def setLocked(self, ) -> None: ...
		def getExternalExeTmpFileRootDir(self, ) -> javawrappers.java.lang.String: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getFractionOfIterationsToDisableInnovation(self, ) -> Union[float, JDouble]: ...
		def getMaxAgentPlanMemorySize(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setMaxAgentPlanMemorySize(self, arg0: Union[int, JInt], ) -> None: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def setFractionOfIterationsToDisableInnovation(self, arg0: Union[float, JDouble], ) -> None: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...


	class StrategySettings:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def getWeight(self, ) -> Union[float, JDouble]: ...
		def notifyAll(self, ) -> None: ...
		def getDisableAfter(self, ) -> Union[int, JInt]: ...
		def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def getSubpopulation(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def testForLocked(self, ) -> None: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def setExePath(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
		def setStrategyName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
		def setDisableAfter(self, arg0: Union[int, JInt], ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def getStrategyName(self, ) -> javawrappers.java.lang.String: ...
		def setWeight(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
		def setLocked(self, ) -> None: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setSubpopulation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def getExePath(self, ) -> javawrappers.java.lang.String: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...


	@overload
	def getPlanSelectorForRemoval(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getPlanSelectorForRemoval(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getDisableAfter(self, ) -> Union[int, JInt]: ...
	@overload
	def setPlanSelectorForRemoval(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setPlanSelectorForRemoval(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getSubpopulation(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def clearStrategySettings(self, ) -> None: ...
	@overload
	def setExternalExeTmpFileRootDir(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setExternalExeTmpFileRootDir(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setExePath(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
	def setStrategyName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
	def getStrategySettings(self, ) -> javawrappers.java.util.Collection: ...
	def setDisableAfter(self, arg0: Union[int, JInt], ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
	@overload
	def getExternalExeTimeOut(self, ) -> Union[long, JLong]: ...
	@overload
	def getExternalExeTimeOut(self, ) -> Union[long, JLong]: ...
	@overload
	def getExternalExeConfigTemplate(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getExternalExeConfigTemplate(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setExternalExeConfigTemplate(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setExternalExeConfigTemplate(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setExternalExeTimeOut(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def setExternalExeTimeOut(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getStrategyName(self, ) -> javawrappers.java.lang.String: ...
	def setWeight(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
	def setLocked(self, ) -> None: ...
	@overload
	def getExternalExeTmpFileRootDir(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getExternalExeTmpFileRootDir(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getFractionOfIterationsToDisableInnovation(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFractionOfIterationsToDisableInnovation(self, ) -> Union[float, JDouble]: ...
	@overload
	def getMaxAgentPlanMemorySize(self, ) -> Union[int, JInt]: ...
	@overload
	def getMaxAgentPlanMemorySize(self, ) -> Union[int, JInt]: ...
	def addStrategySettings(self, arg0: javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSubpopulation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup.StrategySettings: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setMaxAgentPlanMemorySize(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setMaxAgentPlanMemorySize(self, arg0: Union[int, JInt], ) -> None: ...
	def getExePath(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setFractionOfIterationsToDisableInnovation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setFractionOfIterationsToDisableInnovation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	@overload
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class ParallelEventHandlingConfigGroup:
	def __init__(self, ): ...
	def getEstimatedNumberOfEvents(self, ) -> javawrappers.java.lang.Long: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getNumberOfThreads(self, ) -> javawrappers.java.lang.Integer: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setSynchronizeOnSimSteps(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def getSynchronizeOnSimSteps(self, ) -> javawrappers.java.lang.Boolean: ...
	def setEstimatedNumberOfEvents(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def setNumberOfThreads(self, arg0: javawrappers.java.lang.Integer, ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def makeLocked(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setOneThreadPerHandler(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def getOneThreadPerHandler(self, ) -> javawrappers.java.lang.Boolean: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class NetworkConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setChangeEventsInputFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLaneDefinitionsFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def getInputFile(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getInputCRS(self, ) -> javawrappers.java.lang.String: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getInputFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setInputCRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setInputFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChangeEventsInputFileUrl(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getChangeEventsInputFile(self, ) -> javawrappers.java.lang.String: ...
	def getLaneDefinitionsFile(self, ) -> javawrappers.java.lang.String: ...
	def setLocked(self, ) -> None: ...
	def isTimeVariantNetwork(self, ) -> Union[int, JBoolean]: ...
	def setTimeVariantNetwork(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class ScenarioConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setUseTransit(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setUseHouseholds(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUseVehicles(self, arg0: javawrappers.java.lang.Boolean, ) -> None: ...
	def getSimulationPeriodInDays(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def testForLocked(self, ) -> None: ...
	def setSimulationPeriodInDays(self, arg0: Union[float, JDouble], ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class CountsConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setWriteCountsInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setCountsScaleFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def setDistanceFilterCenterNode(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setAnalyzedModes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def getAnalyzedModes(self, ) -> javawrappers.java.lang.String: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getInputCRS(self, ) -> javawrappers.java.lang.String: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setOutputFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setInputCRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setInputFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDistanceFilter(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def getCountsFileName(self, ) -> javawrappers.java.lang.String: ...
	def setFilterModes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isFilterModes(self, ) -> Union[int, JBoolean]: ...
	def getCountsFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	def getWriteCountsInterval(self, ) -> Union[int, JInt]: ...
	def setLocked(self, ) -> None: ...
	def getDistanceFilterCenterNode(self, ) -> javawrappers.java.lang.String: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getAverageCountsOverIterations(self, ) -> Union[int, JInt]: ...
	def getCountsScaleFactor(self, ) -> Union[float, JDouble]: ...
	def getOutputFormat(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAverageCountsOverIterations(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDistanceFilter(self, ) -> javawrappers.java.lang.Double: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class TimeAllocationMutatorConfigGroup:
	def __init__(self, ): ...
	class TimeAllocationMutatorSubpopulationSettings:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getSubpopulation(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def testForLocked(self, ) -> None: ...
		def isAffectingDuration(self, ) -> Union[int, JBoolean]: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def setLocked(self, ) -> None: ...
		def setMutationRange(self, arg0: Union[float, JDouble], ) -> None: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getMutationRange(self, ) -> Union[float, JDouble]: ...
		def setSubpopulation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...
		def setAffectingDuration(self, arg0: Union[int, JBoolean], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getSubpopulation(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setUseIndividualSettingsForSubpopulations(self, arg0: Union[int, JBoolean], ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def isUseIndividualSettingsForSubpopulations(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isAffectingDuration(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isAffectingDuration(self, ) -> Union[int, JBoolean]: ...
	@overload
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getTimeAllocationMutatorSubpopulationSettings(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.TimeAllocationMutatorConfigGroup.TimeAllocationMutatorSubpopulationSettings: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setLocked(self, ) -> None: ...
	@overload
	def setMutationRange(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setMutationRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getMutationRange(self, ) -> Union[float, JDouble]: ...
	@overload
	def getMutationRange(self, ) -> Union[float, JDouble]: ...
	def setSubpopulation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def setAffectingDuration(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAffectingDuration(self, arg0: Union[int, JBoolean], ) -> None: ...


class FacilitiesConfigGroup:
	def __init__(self, ): ...
	class FacilitiesSource:
		none: FacilitiesConfigGroup.FacilitiesSource = ...
		fromFile: FacilitiesConfigGroup.FacilitiesSource = ...
		setInScenario: FacilitiesConfigGroup.FacilitiesSource = ...
		onePerActivityLinkInPlansFile: FacilitiesConfigGroup.FacilitiesSource = ...
		onePerActivityLocationInPlansFile: FacilitiesConfigGroup.FacilitiesSource = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup.FacilitiesSource: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup.FacilitiesSource, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup.FacilitiesSource, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def getInputFile(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def setFacilitiesSource(self, arg0: javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup.FacilitiesSource, ) -> None: ...
	def getInputCRS(self, ) -> javawrappers.java.lang.String: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	def setIdPrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getInputFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setInputCRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setInputFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getIdPrefix(self, ) -> javawrappers.java.lang.String: ...
	def setInputFacilitiesAttributesFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFacilitiesSource(self, ) -> javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup.FacilitiesSource: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup.FacilitiesSource: ...
	def getInputFacilitiesAttributesFile(self, ) -> javawrappers.java.lang.String: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ChangeModeConfigGroup:
	def __init__(self, ): ...
	class Behavior:
		fromAllModesToSpecifiedModes: ChangeModeConfigGroup.Behavior = ...
		fromSpecifiedModesToSpecifiedModes: ChangeModeConfigGroup.Behavior = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup.Behavior: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup.Behavior, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup.Behavior, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getBehavior(self, ) -> javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup.Behavior: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup.Behavior: ...
	def getModes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setLocked(self, ) -> None: ...
	def setIgnoreCarAvailability(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setModes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setBehavior(self, arg0: javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup.Behavior, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def getIgnoreCarAvailability(self, ) -> Union[int, JBoolean]: ...


class PlanCalcScoreConfigGroup:
	def __init__(self, ): ...
	class ReflectiveDelegate:
		def getPathSizeLogitBeta(self, ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setBrainExpBeta(self, arg0: Union[float, JDouble], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getBrainExpBeta(self, ) -> Union[float, JDouble]: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def isWriteExperiencedPlans(self, ) -> Union[int, JBoolean]: ...
		def setLearningRate(self, arg0: Union[float, JDouble], ) -> None: ...
		def notify(self, ) -> None: ...
		def setWriteExperiencedPlans(self, arg0: Union[int, JBoolean], ) -> None: ...
		def isUsingOldScoringBelowZeroUtilityDuration(self, ) -> Union[int, JBoolean]: ...
		def testForLocked(self, ) -> None: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def setFractionOfIterationsToStartScoreMSA(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def setLocked(self, ) -> None: ...
		def setPathSizeLogitBeta(self, arg0: Union[float, JDouble], ) -> None: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getFractionOfIterationsToStartScoreMSA(self, ) -> javawrappers.java.lang.Double: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getLearningRate(self, ) -> Union[float, JDouble]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def setUsingOldScoringBelowZeroUtilityDuration(self, arg0: Union[int, JBoolean], ) -> None: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...


	class ScoringParameterSet:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getActivityParams(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getActivityParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def notifyAll(self, ) -> None: ...
		def getUtilityOfLineSwitch(self, ) -> Union[float, JDouble]: ...
		def checkConsistency(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...
		def setMarginalUtlOfWaitingPt_utils_hr(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
		def getSubpopulation(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def setPerforming_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
		def testForLocked(self, ) -> None: ...
		def getMarginalUtlOfWaitingPt_utils_hr(self, ) -> Union[float, JDouble]: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def addActivityParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams, ) -> None: ...
		def getOrCreateActivityParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def setUtilityOfLineSwitch(self, arg0: Union[float, JDouble], ) -> None: ...
		def getActivityParamsPerType(self, ) -> javawrappers.java.util.Map: ...
		def getPerforming_utils_hr(self, ) -> Union[float, JDouble]: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def getLateArrival_utils_hr(self, ) -> Union[float, JDouble]: ...
		def getMarginalUtlOfWaiting_utils_hr(self, ) -> Union[float, JDouble]: ...
		def setMarginalUtlOfWaiting_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
		def setEarlyDeparture_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
		def setLateArrival_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
		def getModes(self, ) -> javawrappers.java.util.Map: ...
		def getEarlyDeparture_utils_hr(self, ) -> Union[float, JDouble]: ...
		def setLocked(self, ) -> None: ...
		def setMarginalUtilityOfMoney(self, arg0: Union[float, JDouble], ) -> None: ...
		def getActivityTypes(self, ) -> javawrappers.java.util.Collection: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def addModeParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams, ) -> None: ...
		def setSubpopulation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getOrCreateModeParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...
		def getMarginalUtilityOfMoney(self, ) -> Union[float, JDouble]: ...


	class ModeParams:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def setMarginalUtilityOfDistance(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def getMonetaryDistanceRate(self, ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setMonetaryDistanceRate(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def testForLocked(self, ) -> None: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def setMarginalUtilityOfTraveling(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def setDailyUtilityConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getConstant(self, ) -> Union[float, JDouble]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getMode(self, ) -> javawrappers.java.lang.String: ...
		def setConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def getMarginalUtilityOfTraveling(self, ) -> Union[float, JDouble]: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def setMode(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def setLocked(self, ) -> None: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getDailyUtilityConstant(self, ) -> Union[float, JDouble]: ...
		def setDailyMonetaryConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDailyMonetaryConstant(self, ) -> Union[float, JDouble]: ...
		def getMarginalUtilityOfDistance(self, ) -> Union[float, JDouble]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...


	class ActivityParams:
		@overload
		def __init__(self, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getEarliestEndTime(self, ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def testForLocked(self, ) -> None: ...
		def setClosingTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def setLatestStartTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getActivityType(self, ) -> javawrappers.java.lang.String: ...
		def getOpeningTime(self, ) -> Union[float, JDouble]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getTypicalDuration(self, ) -> Union[float, JDouble]: ...
		def isScoringThisActivityAtAll(self, ) -> Union[int, JBoolean]: ...
		def getClosingTime(self, ) -> Union[float, JDouble]: ...
		def getTypicalDurationScoreComputation(self, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation: ...
		def setMinimalDuration(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def setScoringThisActivityAtAll(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def setEarliestEndTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def setTypicalDuration(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def setTypicalDurationScoreComputation(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def setLocked(self, ) -> None: ...
		def getLatestStartTime(self, ) -> Union[float, JDouble]: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[float, JDouble]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setActivityType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def setPriority(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def setOpeningTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...
		def getMinimalDuration(self, ) -> Union[float, JDouble]: ...


	class TypicalDurationScoreComputation:
		uniform: PlanCalcScoreConfigGroup.TypicalDurationScoreComputation = ...
		relative: PlanCalcScoreConfigGroup.TypicalDurationScoreComputation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getEarliestEndTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def getActivityParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	def getActivityParams(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getActivityParams(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getActivityParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	def setMonetaryDistanceRate(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	@overload
	def isUsingOldScoringBelowZeroUtilityDuration(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isUsingOldScoringBelowZeroUtilityDuration(self, ) -> Union[int, JBoolean]: ...
	def setClosingTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def setLatestStartTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getConstant(self, ) -> Union[float, JDouble]: ...
	def getTypicalDurationScoreComputation(self, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setTypicalDuration(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@staticmethod
	def createStageActivityType(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getEarlyDeparture_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def getEarlyDeparture_utils_hr(self, ) -> Union[float, JDouble]: ...
	def getDailyUtilityConstant(self, ) -> Union[float, JDouble]: ...
	def setDailyMonetaryConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	def getMarginalUtilityOfDistance(self, ) -> Union[float, JDouble]: ...
	def setActivityType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def setPriority(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	def getMinimalDuration(self, ) -> Union[float, JDouble]: ...
	def getMonetaryDistanceRate(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getUtilityOfLineSwitch(self, ) -> Union[float, JDouble]: ...
	@overload
	def getUtilityOfLineSwitch(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def setWriteExperiencedPlans(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setWriteExperiencedPlans(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMemorizingExperiencedPlans(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getActivityType(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getTypicalDuration(self, ) -> Union[float, JDouble]: ...
	@overload
	def addActivityParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams, ) -> None: ...
	@overload
	def addActivityParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams, ) -> None: ...
	def isScoringThisActivityAtAll(self, ) -> Union[int, JBoolean]: ...
	def setMinimalDuration(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	def getLateArrival_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def getLateArrival_utils_hr(self, ) -> Union[float, JDouble]: ...
	def setMode(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	def setTypicalDurationScoreComputation(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	def setEarlyDeparture_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setEarlyDeparture_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setMarginalUtilityOfMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setMarginalUtilityOfMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	def getScoringParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ScoringParameterSet: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def addModeParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams, ) -> None: ...
	@overload
	def addModeParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams, ) -> None: ...
	def getPriority(self, ) -> Union[float, JDouble]: ...
	def setSubpopulation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setUsingOldScoringBelowZeroUtilityDuration(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setUsingOldScoringBelowZeroUtilityDuration(self, arg0: Union[int, JBoolean], ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def setBrainExpBeta(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setBrainExpBeta(self, arg0: Union[float, JDouble], ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkConsistency(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...
	@overload
	def isWriteExperiencedPlans(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isWriteExperiencedPlans(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getSubpopulation(self, ) -> javawrappers.java.lang.String: ...
	def getAllModes(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def setPerforming_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setPerforming_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def setMarginalUtilityOfTraveling(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	def setDailyUtilityConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def setConstant(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	@overload
	def setUtilityOfLineSwitch(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setUtilityOfLineSwitch(self, arg0: Union[float, JDouble], ) -> None: ...
	def getActivityParamsPerType(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getPerforming_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def getPerforming_utils_hr(self, ) -> Union[float, JDouble]: ...
	def setEarliestEndTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	def getOrCreateScoringParameters(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ScoringParameterSet: ...
	@overload
	def getMarginalUtlOfWaiting_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def getMarginalUtlOfWaiting_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def getModes(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getModes(self, ) -> javawrappers.java.util.Map: ...
	def getLatestStartTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def getFractionOfIterationsToStartScoreMSA(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def getFractionOfIterationsToStartScoreMSA(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def getLearningRate(self, ) -> Union[float, JDouble]: ...
	@overload
	def getLearningRate(self, ) -> Union[float, JDouble]: ...
	def getDailyMonetaryConstant(self, ) -> Union[float, JDouble]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def isMemorizingExperiencedPlans(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getOrCreateModeParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	@overload
	def getOrCreateModeParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	def getScoringParametersPerSubpopulation(self, ) -> javawrappers.java.util.Map: ...
	def setOpeningTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getMarginalUtilityOfMoney(self, ) -> Union[float, JDouble]: ...
	@overload
	def getMarginalUtilityOfMoney(self, ) -> Union[float, JDouble]: ...
	def setMarginalUtilityOfDistance(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ModeParams: ...
	@overload
	def getPathSizeLogitBeta(self, ) -> Union[float, JDouble]: ...
	@overload
	def getPathSizeLogitBeta(self, ) -> Union[float, JDouble]: ...
	@overload
	def getBrainExpBeta(self, ) -> Union[float, JDouble]: ...
	@overload
	def getBrainExpBeta(self, ) -> Union[float, JDouble]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setMarginalUtlOfWaitingPt_utils_hr(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	@overload
	def setMarginalUtlOfWaitingPt_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setLearningRate(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setLearningRate(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getMarginalUtlOfWaitingPt_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def getMarginalUtlOfWaitingPt_utils_hr(self, ) -> Union[float, JDouble]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getOpeningTime(self, ) -> Union[float, JDouble]: ...
	def getOrCreateActivityParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	def getClosingTime(self, ) -> Union[float, JDouble]: ...
	def getMarginalUtilityOfTraveling(self, ) -> Union[float, JDouble]: ...
	@overload
	def setFractionOfIterationsToStartScoreMSA(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	@overload
	def setFractionOfIterationsToStartScoreMSA(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def setScoringThisActivityAtAll(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.ActivityParams: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup.TypicalDurationScoreComputation: ...
	@overload
	def setMarginalUtlOfWaiting_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setMarginalUtlOfWaiting_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setLateArrival_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setLateArrival_utils_hr(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setPathSizeLogitBeta(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setPathSizeLogitBeta(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setLocked(self, ) -> None: ...
	@overload
	def setLocked(self, ) -> None: ...
	@overload
	def getActivityTypes(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getActivityTypes(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...


class VspExperimentalConfigGroup:
	def __init__(self, ): ...
	class VspDefaultsCheckingLevel:
		ignore: VspExperimentalConfigGroup.VspDefaultsCheckingLevel = ...
		info: VspExperimentalConfigGroup.VspDefaultsCheckingLevel = ...
		warn: VspExperimentalConfigGroup.VspDefaultsCheckingLevel = ...
		abort: VspExperimentalConfigGroup.VspDefaultsCheckingLevel = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def setLogitScaleParamForPlansRemoval(self, arg0: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def testForLocked(self, ) -> None: ...
	def setUsingOpportunityCostOfTimeForLocationChoice(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setVspDefaultsCheckingLevel(self, arg0: javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def isWritingOutputEvents(self, ) -> Union[int, JBoolean]: ...
	def isUsingOpportunityCostOfTimeForLocationChoice(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel: ...
	def setWritingOutputEvents(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setGeneratingBoardingDeniedEvent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getLogitScaleParamForPlansRemoval(self, ) -> Union[float, JDouble]: ...
	def isAbleToOverwritePtInteractionParams(self, ) -> Union[int, JBoolean]: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getVspDefaultsCheckingLevel(self, ) -> javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup.VspDefaultsCheckingLevel: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAbleToOverwritePtInteractionParams(self, arg0: Union[int, JBoolean], ) -> None: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def isGeneratingBoardingDeniedEvents(self, ) -> Union[int, JBoolean]: ...


class ExternalMobimConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setExternalExe(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExternalExe(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def getEndTime(self, ) -> Union[float, JDouble]: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getExternalTimeOut(self, ) -> Union[int, JInt]: ...
	def setExternalTimeOut(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setStartTime(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setStartTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getStartTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def setEndTime(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setEndTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class GlobalConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getNumberOfThreads(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getCoordinateSystem(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setRandomSeed(self, arg0: Union[long, JLong], ) -> None: ...
	def setNumberOfThreads(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setLocked(self, ) -> None: ...
	def getRandomSeed(self, ) -> Union[long, JLong]: ...
	def isInsistingOnDeprecatedConfigVersion(self, ) -> Union[int, JBoolean]: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setInsistingOnDeprecatedConfigVersion(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCoordinateSystem(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class PlansCalcRouteConfigGroup:
	def __init__(self, ): ...
	class ModeRoutingParams:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getTeleportedModeFreespeedLimit(self, ) -> javawrappers.java.lang.Double: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def setTeleportedModeFreespeedFactor(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
		def notifyAll(self, ) -> None: ...
		def checkConsistency(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...
		def notify(self, ) -> None: ...
		def testForLocked(self, ) -> None: ...
		def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
		def isLocked(self, ) -> Union[int, JBoolean]: ...
		def getComments(self, ) -> javawrappers.java.util.Map: ...
		@staticmethod
		def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getMode(self, ) -> javawrappers.java.lang.String: ...
		def getTeleportedModeSpeed(self, ) -> javawrappers.java.lang.Double: ...
		@overload
		def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
		@overload
		def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
		def setTeleportedModeFreespeedLimit(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
		def setTeleportedModeSpeed(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
		def setMode(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
		def setLocked(self, ) -> None: ...
		def setBeelineDistanceFactor(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getBeelineDistanceFactor(self, ) -> javawrappers.java.lang.Double: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
		def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
		def getTeleportedModeFreespeedFactor(self, ) -> javawrappers.java.lang.Double: ...
		def getParams(self, ) -> javawrappers.java.util.Map: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTeleportedModeFreespeedLimit(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setTeleportedModeFreespeedFactor(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
	@overload
	def setTeleportedModeFreespeedFactor(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	def checkConsistency(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clearModeRoutingParams(self, ) -> None: ...
	def isInsertingAccessEgressWalk(self, ) -> Union[int, JBoolean]: ...
	def setInsertingAccessEgressWalk(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNetworkModes(self, ) -> javawrappers.java.util.Collection: ...
	def testForLocked(self, ) -> None: ...
	def addModeRoutingParams(self, arg0: javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams, ) -> None: ...
	@overload
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getTeleportedModeSpeeds(self, ) -> javawrappers.java.util.Map: ...
	def getBeelineDistanceFactors(self, ) -> javawrappers.java.util.Map: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getTeleportedModeSpeed(self, ) -> javawrappers.java.lang.Double: ...
	def getModeRoutingParams(self, ) -> javawrappers.java.util.Map: ...
	def setTeleportedModeFreespeedLimit(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def setTeleportedModeSpeed(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
	@overload
	def setTeleportedModeSpeed(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	def setMode(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
	def setLocked(self, ) -> None: ...
	def getTeleportedModeFreespeedFactors(self, ) -> javawrappers.java.util.Map: ...
	def getOrCreateModeRoutingParams(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
	def setRoutingRandomness(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setBeelineDistanceFactor(self, arg0: javawrappers.java.lang.Double, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams: ...
	@overload
	def setBeelineDistanceFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getBeelineDistanceFactor(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printModeRoutingParams(self, ) -> None: ...
	def getRoutingRandomness(self, ) -> Union[float, JDouble]: ...
	def setNetworkModes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeModeRoutingParams(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	@overload
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def getTeleportedModeFreespeedFactor(self, ) -> javawrappers.java.lang.Double: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	@overload
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class QSimConfigGroup:
	def __init__(self, ): ...
	class VehiclesSource:
		defaultVehicle: QSimConfigGroup.VehiclesSource = ...
		modeVehicleTypesFromVehiclesData: QSimConfigGroup.VehiclesSource = ...
		fromVehiclesData: QSimConfigGroup.VehiclesSource = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehiclesSource: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehiclesSource, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class LinkDynamics:
		FIFO: QSimConfigGroup.LinkDynamics = ...
		PassingQ: QSimConfigGroup.LinkDynamics = ...
		SeepageQ: QSimConfigGroup.LinkDynamics = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.LinkDynamics: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.LinkDynamics, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class SnapshotStyle:
		equiDist: QSimConfigGroup.SnapshotStyle = ...
		queue: QSimConfigGroup.SnapshotStyle = ...
		withHoles: QSimConfigGroup.SnapshotStyle = ...
		withHolesAndShowHoles: QSimConfigGroup.SnapshotStyle = ...
		kinematicWaves: QSimConfigGroup.SnapshotStyle = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.SnapshotStyle: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.SnapshotStyle, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class VehicleBehavior:
		teleport: QSimConfigGroup.VehicleBehavior = ...
		wait: QSimConfigGroup.VehicleBehavior = ...
		exception: QSimConfigGroup.VehicleBehavior = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehicleBehavior: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehicleBehavior, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class EndtimeInterpretation:
		minOfEndtimeAndMobsimFinished: QSimConfigGroup.EndtimeInterpretation = ...
		onlyUseEndtime: QSimConfigGroup.EndtimeInterpretation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.EndtimeInterpretation: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.EndtimeInterpretation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class StarttimeInterpretation:
		maxOfStarttimeAndEarliestActivityEnd: QSimConfigGroup.StarttimeInterpretation = ...
		onlyUseStarttime: QSimConfigGroup.StarttimeInterpretation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.StarttimeInterpretation: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.StarttimeInterpretation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class TrafficDynamics:
		queue: QSimConfigGroup.TrafficDynamics = ...
		withHoles: QSimConfigGroup.TrafficDynamics = ...
		kinematicWaves: QSimConfigGroup.TrafficDynamics = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setTrafficDynamics(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics, ) -> None: ...
	def setSeepModeStorageFree(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isInsertingWaitingVehiclesBeforeDrivingVehicles(self, ) -> Union[int, JBoolean]: ...
	def setUsingTravelTimeCheckInTeleportation(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setStorageCapFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTimeStepSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def getSimStarttimeInterpretation(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.StarttimeInterpretation: ...
	def testForLocked(self, ) -> None: ...
	def isSeepModeStorageFree(self, ) -> Union[int, JBoolean]: ...
	def getEndTime(self, ) -> Union[float, JDouble]: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def setVehicleBehavior(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehicleBehavior, ) -> None: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	def getSeepModes(self, ) -> javawrappers.java.util.Collection: ...
	def getVehicleBehavior(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehicleBehavior: ...
	def getStartTime(self, ) -> Union[float, JDouble]: ...
	def getLinkDynamics(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.LinkDynamics: ...
	def setRemoveStuckVehicles(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberOfThreads(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setSimEndtimeInterpretation(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.EndtimeInterpretation, ) -> None: ...
	def setSimStarttimeInterpretation(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.StarttimeInterpretation, ) -> None: ...
	def isUsingTravelTimeCheckInTeleportation(self, ) -> Union[int, JBoolean]: ...
	def setNodeOffset(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLinkWidthForVis(self, ) -> Union[float, JFloat]: ...
	def setLinkDynamics(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.LinkDynamics, ) -> None: ...
	def setVehiclesSource(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehiclesSource, ) -> None: ...
	def getMainModes(self, ) -> javawrappers.java.util.Collection: ...
	def getSnapshotStyle(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.SnapshotStyle: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getStuckTime(self, ) -> Union[float, JDouble]: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def getFlowCapFactor(self, ) -> Union[float, JDouble]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def setUsingFastCapacityUpdate(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isUsingThreadpool(self, ) -> Union[int, JBoolean]: ...
	def getVehiclesSource(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehiclesSource: ...
	def getNumberOfThreads(self, ) -> Union[int, JInt]: ...
	def setSnapshotPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def getUsePersonIdForMissingVehicleId(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.EndtimeInterpretation, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.StarttimeInterpretation, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.SnapshotStyle, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehiclesSource, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehicleBehavior, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.QSimConfigGroup.LinkDynamics, 1): ...
	def notifyAll(self, ) -> None: ...
	def getNodeOffset(self, ) -> Union[float, JDouble]: ...
	def isUseLanes(self, ) -> Union[int, JBoolean]: ...
	def setSeepModes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def setInsertingWaitingVehiclesBeforeDrivingVehicles(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTimeStepSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setLinkWidthForVis(self, arg0: Union[float, JFloat], ) -> None: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setStartTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def setUseLanes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isRemoveStuckVehicles(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.EndtimeInterpretation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.StarttimeInterpretation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.SnapshotStyle: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehiclesSource: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.VehicleBehavior: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.LinkDynamics: ...
	def setFlowCapFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def isUsingFastCapacityUpdate(self, ) -> Union[int, JBoolean]: ...
	def setLocked(self, ) -> None: ...
	def getTrafficDynamics(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.TrafficDynamics: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getPcuThresholdForFlowCapacityEasing(self, ) -> Union[float, JDouble]: ...
	def isRestrictingSeepage(self, ) -> Union[int, JBoolean]: ...
	def setPcuThresholdForFlowCapacityEasing(self, arg0: Union[float, JDouble], ) -> None: ...
	def setRestrictingSeepage(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getStorageCapFactor(self, ) -> Union[float, JDouble]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSnapshotPeriod(self, ) -> Union[float, JDouble]: ...
	def setEndTime(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setUsePersonIdForMissingVehicleId(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setStuckTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def setUsingThreadpool(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSnapshotStyle(self, arg0: javawrappers.org.matsim.core.config.groups.QSimConfigGroup.SnapshotStyle, ) -> None: ...
	def getSimEndtimeInterpretation(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup.EndtimeInterpretation: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def setMainModes(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class PtCountsConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setBoardCountsFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPtCountsInterval(self, ) -> Union[int, JInt]: ...
	def setAlightCountsFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAlightCountsFileName(self, ) -> javawrappers.java.lang.String: ...
	def setPtCountsInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def setCountsScaleFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def setDistanceFilterCenterNode(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def getBoardCountsFileName(self, ) -> javawrappers.java.lang.String: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getOccupancyCountsFileName(self, ) -> javawrappers.java.lang.String: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setOutputFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDistanceFilter(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def setLocked(self, ) -> None: ...
	def getDistanceFilterCenterNode(self, ) -> javawrappers.java.lang.String: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getCountsScaleFactor(self, ) -> Union[float, JDouble]: ...
	def getOutputFormat(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDistanceFilter(self, ) -> javawrappers.java.lang.Double: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def setOccupancyCountsFileName(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class VehiclesConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setVehiclesFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getVehiclesFile(self, ) -> javawrappers.java.lang.String: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


class PlansConfigGroup:
	def __init__(self, ): ...
	class ActivityDurationInterpretation:
		minOfDurationAndEndTime: PlansConfigGroup.ActivityDurationInterpretation = ...
		tryEndTimeThenDuration: PlansConfigGroup.ActivityDurationInterpretation = ...
		endTimeOnly: PlansConfigGroup.ActivityDurationInterpretation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class NetworkRouteType:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isInsistingOnUsingDeprecatedPersonAttributeFile(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setActivityDurationInterpretation(self, arg0: javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation, ) -> None: ...
	def getInputPersonAttributeFile(self, ) -> javawrappers.java.lang.String: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def getInputFile(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setInputPersonAttributeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def setInsistingOnUsingDeprecatedPersonAttributeFile(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSubpopulationAttributeName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getInputCRS(self, ) -> javawrappers.java.lang.String: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getInputFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setInputCRS(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSubpopulationAttributeName(self, ) -> javawrappers.java.lang.String: ...
	def setInputFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isRemovingUnneccessaryPlanAttributes(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def getInputPersonAttributeFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	def getActivityDurationInterpretation(self, ) -> javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation: ...
	def setRemovingUnneccessaryPlanAttributes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNetworkRouteType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getNetworkRouteType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ChangeLegModeConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def setIgnoreCarAvailability(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setModes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def getIgnoreCarAvailability(self, ) -> Union[int, JBoolean]: ...


class ZoomEntry:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getZoomstart(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getSnap(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TravelTimeCalculatorConfigGroup:
	def __init__(self, ): ...
	class DifferentModesHandling:
		separateAccordingToAnalyzedModes: TravelTimeCalculatorConfigGroup.DifferentModesHandling = ...
		jointButRestrictedToAnalyzedModes: TravelTimeCalculatorConfigGroup.DifferentModesHandling = ...
		jointAndUsingAllModes: TravelTimeCalculatorConfigGroup.DifferentModesHandling = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.DifferentModesHandling: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.DifferentModesHandling, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class TravelTimeCalculatorType:
		TravelTimeCalculatorArray: TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType = ...
		TravelTimeCalculatorHashMap: TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMaxTime(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setTravelTimeCalculatorType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMaxTime(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.DifferentModesHandling, 1): ...
	def notifyAll(self, ) -> None: ...
	def isCalculateLinkToLinkTravelTimes(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getSeparateModes(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setTraveltimeBinSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getTravelTimeAggregatorType(self, ) -> javawrappers.java.lang.String: ...
	def getTravelTimeCalculatorType(self, ) -> javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType: ...
	def setAnalyzedModesAsString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getTraveltimeBinSize(self, ) -> Union[int, JInt]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTravelTimeGetterType(self, ) -> javawrappers.java.lang.String: ...
	def setAnalyzedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def getAnalyzedModes(self, ) -> javawrappers.java.util.Set: ...
	def getAnalyzedModesAsString(self, ) -> javawrappers.java.lang.String: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def setTravelTimeAggregatorType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def setCalculateLinkToLinkTravelTimes(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.TravelTimeCalculatorType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup.DifferentModesHandling: ...
	def isCalculateLinkTravelTimes(self, ) -> Union[int, JBoolean]: ...
	def setFilterModes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isFilterModes(self, ) -> Union[int, JBoolean]: ...
	def setCalculateLinkTravelTimes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTravelTimeGetterType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def setSeparateModes(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class HouseholdsConfigGroup:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getInputHouseholdAttributesFile(self, ) -> javawrappers.java.lang.String: ...
	def setInputHouseholdAttributesFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def getInputFile(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def getInputFileURL(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def setInputFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


