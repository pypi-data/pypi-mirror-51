################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.population.algorithms

from jpype.types import *
from typing import Union

from typing import overload

class PlanCollectFromAlgorithm:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...
	def getPlans(self, ) -> javawrappers.java.util.Set: ...


class XY2Links:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	def notify(self, ) -> None: ...


class ChooseRandomSingleLegMode:
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.util.Random, arg2: Union[int, JBoolean], ): ...
	def setIgnoreCarAvailability(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class ChooseRandomLegModeForSubtour:
	def __init__(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, arg1: javawrappers.org.matsim.core.router.MainModeIdentifier, arg2: javawrappers.org.matsim.core.population.algorithms.PermissibleModesCalculator, arg3: JArray(javawrappers.java.lang.String, 1), arg4: JArray(javawrappers.java.lang.String, 1), arg5: javawrappers.java.util.Random, arg6: javawrappers.org.matsim.core.replanning.modules.SubtourModeChoice.Behavior, arg7: Union[float, JDouble], ): ...
	class Candidate:
		def __init__(self, arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Subtour, arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...
	def setSingleTripSubtourModes(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class TripPlanMutateTimeAllocation:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], arg3: javawrappers.java.util.Random, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], arg3: javawrappers.java.util.Random, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.util.Map, arg6: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setUseActivityDurations(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class ZZEverythingInPackageIsPackageFinalOrEmpty:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ChooseRandomLegMode:
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.util.Random, arg2: Union[int, JBoolean], ): ...
	def setIgnoreCarAvailability(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class PlansFilterByLegMode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.population.algorithms.PlansFilterByLegMode.FilterType, ): ...
	class FilterType:
		keepAllPlansWithMode: PlansFilterByLegMode.FilterType = ...
		removeAllPlansWithMode: PlansFilterByLegMode.FilterType = ...
		keepPlansWithOnlyThisMode: PlansFilterByLegMode.FilterType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.population.algorithms.PlansFilterByLegMode.FilterType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.population.algorithms.PlansFilterByLegMode.FilterType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.population.algorithms.PlansFilterByLegMode.FilterType: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.population.algorithms.PlansFilterByLegMode.FilterType, 1): ...
	def notifyAll(self, ) -> None: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PlanAlgorithm:
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...


class PermissibleModesCalculatorImpl:
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPermissibleModes(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TripsToLegsAlgorithm:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.TripRouter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, arg1: javawrappers.org.matsim.core.router.MainModeIdentifier, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class PermissibleModesCalculator:
	def getPermissibleModes(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> javawrappers.java.util.Collection: ...


class PersonRemoveLinkAndRoute:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractPersonAlgorithm:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	def notify(self, ) -> None: ...


class PersonAlgorithm:
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...


class PersonPrepareForSim:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm, arg1: javawrappers.org.matsim.api.core.v01.Scenario, arg2: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.population.algorithms.PlanAlgorithm, arg1: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	def notify(self, ) -> None: ...


class PlanMutateTimeAllocationSimplified:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], arg2: javawrappers.java.util.Random, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], arg3: javawrappers.java.util.Random, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class PlanMutateTimeAllocation:
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.util.Random, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class PersonCalcTimes:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	def notify(self, ) -> None: ...


class ParallelPersonAlgorithmUtils:
	class ExceptionHandler:
		def __init__(self, arg0: javawrappers.java.util.concurrent.atomic.AtomicBoolean, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	class PersonAlgoThread:
		def __init__(self, arg0: javawrappers.org.matsim.core.population.algorithms.PersonAlgorithm, arg1: javawrappers.org.matsim.core.utils.misc.Counter, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def handlePerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class PersonAlgorithmProvider:
		def getPersonAlgorithm(self, ) -> javawrappers.org.matsim.core.population.algorithms.PersonAlgorithm: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handlePerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	def getPersonAlgorithm(self, ) -> javawrappers.org.matsim.core.population.algorithms.PersonAlgorithm: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	@staticmethod
	def run(arg0: javawrappers.org.matsim.api.core.v01.population.Population, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.core.population.algorithms.PersonAlgorithm, ) -> None: ...
	@overload
	@staticmethod
	def run(arg0: javawrappers.org.matsim.api.core.v01.population.Population, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.core.population.algorithms.ParallelPersonAlgorithmUtils.PersonAlgorithmProvider, ) -> None: ...
	def notify(self, ) -> None: ...


