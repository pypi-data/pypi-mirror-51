################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.java.util
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.core.trafficmonitoring

from jpype.types import *
from typing import Union

from typing import overload

class TimeBinUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getTimeBinCount(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def getTimeBinIndex(arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FreeSpeedTravelTime:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...


class TravelTimeCalculator:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup, ): ...
	class Builder:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setMaxTime(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setCalculateLinkToLinkTravelTimes(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setTimeslice(self, arg0: Union[int, JInt], ) -> None: ...
		def setFilterModes(self, arg0: Union[int, JBoolean], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def setCalculateLinkTravelTimes(self, arg0: Union[int, JBoolean], ) -> None: ...
		def configure(self, arg0: javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup, ) -> None: ...
		def notify(self, ) -> None: ...
		def setAnalyzedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
		def build(self, ) -> javawrappers.org.matsim.core.trafficmonitoring.TravelTimeCalculator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def setMaxTime(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setTtDataFactory(self, arg0: javawrappers.org.matsim.core.trafficmonitoring.TravelTimeDataFactory, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setCalculateLinkToLinkTravelTimes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTimeslice(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkEnterEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.core.api.experimental.events.VehicleArrivesAtFacilityEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleAbortsEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleLeavesTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkLeaveEvent, ) -> None: ...
	def setFilterModes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setCalculateLinkTravelTimes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def configure(self, arg0: javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup, ) -> None: ...
	def notify(self, ) -> None: ...
	def setAnalyzedModes(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def build(self, ) -> javawrappers.org.matsim.core.trafficmonitoring.TravelTimeCalculator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkToLinkTravelTimes(self, ) -> javawrappers.org.matsim.core.router.util.LinkToLinkTravelTime: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup, ) -> javawrappers.org.matsim.core.trafficmonitoring.TravelTimeCalculator: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLinkTravelTimes(self, ) -> javawrappers.org.matsim.core.router.util.TravelTime: ...


class TravelTimeCalculatorModule:
	def __init__(self, ): ...
	class ObservedLinkToLinkTravelTimes:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.core.router.util.LinkToLinkTravelTime: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ObservedLinkTravelTimes:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.core.router.util.TravelTime: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SingleModeTravelTimeCalculatorProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.core.trafficmonitoring.TravelTimeCalculator: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.trafficmonitoring.TravelTimeCalculator: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.router.util.LinkToLinkTravelTime: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.router.util.TravelTime: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


