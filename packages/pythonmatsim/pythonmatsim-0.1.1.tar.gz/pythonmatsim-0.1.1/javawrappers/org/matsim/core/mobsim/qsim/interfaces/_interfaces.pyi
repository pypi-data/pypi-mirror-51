################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.mobsim.framework.listeners
import javawrappers.java.util
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.vis.snapshotwriters
import javawrappers.java.lang
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.core.mobsim.qsim
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TripInfoRequest:
	class Builder:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setToActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...
		def createRequest(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setFromActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...
		def setTimeInterpretation(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def setTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createRequest(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest: ...
	def getFromFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def setFromActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...
	def notifyAll(self, ) -> None: ...
	def setTimeInterpretation(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...
	def notify(self, ) -> None: ...
	def setToActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTimeInterpretation(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation: ...
	def getToFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getToActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def getFromActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def setTime(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest.Builder: ...


class MobsimEngine:
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def afterSim(self, ) -> None: ...


class AgentCounter:
	def decLiving(self, ) -> None: ...
	def isLiving(self, ) -> Union[int, JBoolean]: ...
	def getLost(self, ) -> Union[int, JInt]: ...
	def incLost(self, ) -> None: ...
	def getLiving(self, ) -> Union[int, JInt]: ...


class Netsim:
	def getAgentCounter(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter: ...
	def getNetsimNetwork(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimNetwork: ...
	def getSimTimer(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimTimer: ...
	def getEventsManager(self, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def getScenario(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def run(self, ) -> None: ...
	def addQueueSimulationListeners(self, arg0: javawrappers.org.matsim.core.mobsim.framework.listeners.MobsimListener, ) -> None: ...


class NetsimNode:
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...


class SignalizeableItem:
	def hasGreenForAllToLinks(self, ) -> Union[int, JBoolean]: ...
	def setSignalStateForTurningMove(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def setSignalStateAllTurningMoves(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, ) -> None: ...
	def hasGreenForToLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def setSignalized(self, arg0: Union[int, JBoolean], ) -> None: ...


class NetsimNetwork:
	def getNetsimNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimNode: ...
	def getNetsimLinks(self, ) -> javawrappers.java.util.Map: ...
	def getNetwork(self, ) -> javawrappers.org.matsim.api.core.v01.network.Network: ...
	def getNetsimNodes(self, ) -> javawrappers.java.util.Map: ...
	def getVisLinks(self, ) -> javawrappers.java.util.Map: ...
	def getNetsimLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimLink: ...


class SignalGroupState:
	REDYELLOW: SignalGroupState = ...
	GREEN: SignalGroupState = ...
	YELLOW: SignalGroupState = ...
	RED: SignalGroupState = ...
	OFF: SignalGroupState = ...
	START_PLAN: SignalGroupState = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.mobsim.qsim.interfaces.SignalGroupState, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ActivityHandler:
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> Union[int, JBoolean]: ...


class TripInfoWithRequiredBooking:
	def getLatestDecisionTime(self, ) -> Union[float, JDouble]: ...
	def getDropoffLocation(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getPickupLocation(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMonetaryPrice(self, ) -> Union[float, JDouble]: ...
	def getExpectedTravelTime(self, ) -> Union[float, JDouble]: ...
	def getOriginalRequest(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest: ...
	def getAdditionalAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getExpectedBoardingTime(self, ) -> Union[float, JDouble]: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...


class TimeVariantLink:
	def recalcTimeVariantAttributes(self, ) -> None: ...


class NetsimLink:
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getAllVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def getAllNonParkedVehicles(self, ) -> javawrappers.java.util.Collection: ...
	def getVisData(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...


class MobsimVehicle:
	def getPassengerCapacity(self, ) -> Union[int, JInt]: ...
	def getPassengers(self, ) -> javawrappers.java.util.Collection: ...
	def getCurrentLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDriver(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	def removePassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def addPassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def getSizeInEquivalents(self, ) -> Union[float, JDouble]: ...


class DepartureHandler:
	def handleDeparture(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...


class TripInfo:
	class Provider:
		def getTripInfos(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest, ) -> javawrappers.java.util.List: ...
		def bookTrip(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimPassengerAgent, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoWithRequiredBooking, ) -> None: ...
		def getMode(self, ) -> javawrappers.java.lang.String: ...


	class TimeInterpretation:
		departure: TripInfo.TimeInterpretation = ...
		arrival: TripInfo.TimeInterpretation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getLatestDecisionTime(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDropoffLocation(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation: ...
	def getMonetaryPrice(self, ) -> Union[float, JDouble]: ...
	def getExpectedTravelTime(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfo.TimeInterpretation, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getTripInfos(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest, ) -> javawrappers.java.util.List: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def bookTrip(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimPassengerAgent, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoWithRequiredBooking, ) -> None: ...
	def getPickupLocation(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getOriginalRequest(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.TripInfoRequest: ...
	def getAdditionalAttributes(self, ) -> javawrappers.java.util.Map: ...
	def getExpectedBoardingTime(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


