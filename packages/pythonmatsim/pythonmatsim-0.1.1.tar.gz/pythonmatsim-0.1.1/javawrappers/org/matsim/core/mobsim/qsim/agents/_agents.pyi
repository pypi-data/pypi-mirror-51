################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.mobsim.qsim.agents
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.core.mobsim.qsim.pt
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ActivityDurationUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def calculateDepartureTime(arg0: javawrappers.org.matsim.api.core.v01.population.Activity, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.core.config.groups.PlansConfigGroup.ActivityDurationInterpretation, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PopulationAgentSource:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def insertAgentsIntoMobsim(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PlanBasedDriverAgentImpl:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.agents.BasicPlanAgentImpl, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def notifyAll(self, ) -> None: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def resetCaches(self, ) -> None: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class TransitAgent:
	def getDesiredDestinationStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCurrentLinkIndex(self, ) -> Union[int, JInt]: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def getCurrentPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def getModifiablePlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createTransitAgent(arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.Netsim, ) -> javawrappers.org.matsim.core.mobsim.qsim.agents.TransitAgent: ...
	def getDesiredAccessStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentPlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getPreviousPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def getEnterTransitRoute(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitVehicle, ) -> Union[int, JBoolean]: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getPerson(self, ) -> javawrappers.org.matsim.api.core.v01.population.Person: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def resetCaches(self, ) -> None: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExitAtStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> Union[int, JBoolean]: ...
	def getNextPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DefaultAgentFactory:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.Netsim, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def createMobsimAgentFromPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	@overload
	def createMobsimAgentFromPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BasicPlanAgentImpl:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.Scenario, arg2: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg3: javawrappers.org.matsim.core.mobsim.framework.MobsimTimer, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCurrentLinkIndex(self, ) -> Union[int, JInt]: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def notifyAll(self, ) -> None: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def getCurrentPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getNextActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def getEvents(self, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def getModifiablePlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getScenario(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getPreviousActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def getCurrentPlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getPreviousPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getPerson(self, ) -> javawrappers.org.matsim.api.core.v01.population.Person: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def resetCaches(self, ) -> None: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNextPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PersonDriverAgentImpl:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.Netsim, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCurrentLinkIndex(self, ) -> Union[int, JInt]: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def notifyAll(self, ) -> None: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def getCurrentPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def getModifiablePlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentPlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getPreviousPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getPerson(self, ) -> javawrappers.org.matsim.api.core.v01.population.Person: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def resetCaches(self, ) -> None: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNextPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AgentFactory:
	def createMobsimAgentFromPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...


class TransitAgentImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.agents.BasicPlanAgentImpl, arg1: javawrappers.org.matsim.pt.config.TransitConfigGroup.BoardingAcceptance, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.agents.BasicPlanAgentImpl, ): ...
	def getDesiredDestinationStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def getEnterTransitRoute(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitVehicle, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDesiredAccessStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getExitAtStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class WithinDayAgentUtils:
	@staticmethod
	def indexOfPlanElement(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.api.core.v01.population.PlanElement, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def subList(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@staticmethod
	def getCurrentPlanElementIndex(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.java.lang.Integer: ...
	@staticmethod
	def rescheduleActivityEnd(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.org.matsim.core.mobsim.framework.Mobsim, ) -> None: ...
	@staticmethod
	def indexOfNextActivityWithType(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isOnReplannableCarLeg(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getModifiableCurrentLeg(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.org.matsim.api.core.v01.population.Leg: ...
	@staticmethod
	def getCurrentPlanElement(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	@staticmethod
	def getCurrentRouteLinkIdIndex(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.java.lang.Integer: ...
	@staticmethod
	def getModifiablePlan(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	@staticmethod
	def resetCaches(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	@staticmethod
	def replaceActivityBlindly(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, arg2: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def replaceLegBlindly(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.population.Leg, arg2: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def printPlan(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	@overload
	@staticmethod
	def printPlan(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def findNextActivityWithType(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...


class TransitAgentFactory:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.Netsim, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def createMobsimAgentFromPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.MobsimDriverPassengerAgent: ...
	@overload
	def createMobsimAgentFromPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HasModifiablePlan:
	def getModifiablePlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def resetCaches(self, ) -> None: ...
	def getCurrentLinkIndex(self, ) -> Union[int, JInt]: ...


