################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.stream

from jpype.types import *
from typing import Union

from typing import overload

class Gbl:
	def __init__(self, ): ...
	@staticmethod
	def aboutToWrite(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def printRoundTime() -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getThreadCpuTime(arg0: javawrappers.java.lang.Thread, ) -> Union[float, JDouble]: ...
	@staticmethod
	def assertIf(arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def printMemoryUsage() -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def startMeasurement() -> None: ...
	@staticmethod
	def enableThreadCpuTimeMeasurement() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def printCurrentThreadCpuTime() -> None: ...
	@staticmethod
	def fail() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getBuildInfoString() -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getBuildInfoString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def printElapsedTime() -> None: ...
	@staticmethod
	def assertNotNull(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def printThreadCpuTime(arg0: javawrappers.java.lang.Thread, ) -> None: ...
	@overload
	@staticmethod
	def aboutToRead(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URL, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def aboutToRead(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def printBuildInfo(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def printBuildInfo() -> None: ...
	@staticmethod
	def printSystemInfo() -> None: ...


class MatsimResource:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAsImage(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.awt.Image: ...
	@staticmethod
	def getAsURL(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def getAsInputStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...


class MatsimRandom:
	def __init__(self, ): ...
	class InstrumentedRandom:
		def nextFloat(self, ) -> Union[float, JFloat]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def nextInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def nextInt(self, ) -> Union[int, JInt]: ...
		def nextLong(self, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def nextGaussian(self, ) -> Union[float, JDouble]: ...
		def nextDouble(self, ) -> Union[float, JDouble]: ...
		def nextBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def longs(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
		@overload
		def longs(self, ) -> javawrappers.java.util.stream.LongStream: ...
		@overload
		def longs(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
		@overload
		def longs(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
		@overload
		def ints(self, ) -> javawrappers.java.util.stream.IntStream: ...
		@overload
		def ints(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
		@overload
		def ints(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
		@overload
		def ints(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.IntStream: ...
		@overload
		def doubles(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
		@overload
		def doubles(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
		@overload
		def doubles(self, arg0: Union[long, JLong], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
		@overload
		def doubles(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.DoubleStream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def nextBoolean(self, ) -> Union[int, JBoolean]: ...
		def setSeed(self, arg0: Union[long, JLong], ) -> None: ...


	def nextFloat(self, ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def nextInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def nextInt(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getLocalInstance() -> javawrappers.java.util.Random: ...
	def nextLong(self, ) -> Union[long, JLong]: ...
	def nextGaussian(self, ) -> Union[float, JDouble]: ...
	def nextDouble(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def nextBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	@staticmethod
	def printRNGState(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def longs(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def longs(self, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def longs(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def longs(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@staticmethod
	def getRandom() -> javawrappers.java.util.Random: ...
	@overload
	def ints(self, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def ints(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def ints(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def ints(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def doubles(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def doubles(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def doubles(self, arg0: Union[long, JLong], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def doubles(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.DoubleStream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def reset() -> None: ...
	@overload
	@staticmethod
	def reset(arg0: Union[long, JLong], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def nextBoolean(self, ) -> Union[int, JBoolean]: ...
	def setSeed(self, arg0: Union[long, JLong], ) -> None: ...


