################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.matsim.core.utils.misc
import javawrappers.java.nio
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class CRCChecksum:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getCRCFromFile(arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...


class Time:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def writeTime(arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, arg2: Union[string, JString], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeTime(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeTime(arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeTime(arg0: Union[float, JDouble], arg1: Union[string, JString], ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def setDefaultTimeFormat(arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def isUndefinedTime(arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getVeryLargeTime() -> Union[float, JDouble]: ...
	@staticmethod
	def getUndefinedTime() -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def convertHHMMInteger(arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def parseTime(arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def parseTime(arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> Union[float, JDouble]: ...


class Counter:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def printCounter(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCounter(self, ) -> Union[long, JLong]: ...
	def incCounter(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExeRunner:
	def __init__(self, ): ...
	class StreamHandler:
		@overload
		def __init__(self, arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.io.BufferedWriter, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.io.BufferedReader, arg1: javawrappers.java.io.PrintStream, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.io.BufferedReader, ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


	class BlackHoleStreamHandler:
		def __init__(self, arg0: javawrappers.java.io.BufferedReader, ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


	class ExternalExecutor:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		@overload
		def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getAllStackTraces() -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def onSpinWait() -> None: ...
		def getId(self, ) -> Union[long, JLong]: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		@staticmethod
		def sleep(arg0: Union[long, JLong], ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isDaemon(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def yield_() -> None: ...
		def interrupt(self, ) -> None: ...
		@staticmethod
		def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
		@overload
		def join(self, ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def join(self, arg0: Union[long, JLong], ) -> None: ...
		@staticmethod
		def activeCount() -> Union[int, JInt]: ...
		def resume(self, ) -> None: ...
		def suspend(self, ) -> None: ...
		@staticmethod
		def currentThread() -> javawrappers.java.lang.Thread: ...
		def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def isInterrupted(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def dumpStack() -> None: ...
		@staticmethod
		def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
		def start(self, ) -> None: ...
		def killProcess(self, ) -> None: ...
		@staticmethod
		def interrupted() -> Union[int, JBoolean]: ...
		def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def checkAccess(self, ) -> None: ...
		@staticmethod
		def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
		def isAlive(self, ) -> Union[int, JBoolean]: ...
		def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
		@staticmethod
		def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
		def stop(self, ) -> None: ...
		def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getPriority(self, ) -> Union[int, JInt]: ...
		def countStackFrames(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def getId(self, ) -> Union[long, JLong]: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	@staticmethod
	def run(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def run(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def run(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def run(arg0: JArray(javawrappers.java.lang.String, 1), arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def yield_() -> None: ...
	def interrupt(self, ) -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	@staticmethod
	def waitForFinish(arg0: javawrappers.org.matsim.core.utils.misc.ExeRunner.ExternalExecutor, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def start(self, ) -> None: ...
	def killProcess(self, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


class IntegerCache:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInteger(arg0: Union[int, JInt], ) -> javawrappers.java.lang.Integer: ...
	def notify(self, ) -> None: ...


class ClassUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getAllTypes(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...


class ByteBufferUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getObject(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def putString(arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getString(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def putObject(arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.io.Serializable, ) -> None: ...
	def notify(self, ) -> None: ...


class StringUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def explode(arg0: javawrappers.java.lang.String, arg1: Union[string, JString], arg2: Union[int, JInt], ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def explode(arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ArgumentParser:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


