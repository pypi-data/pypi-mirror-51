################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.feature.simple
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class GeometryUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def createGeotoolsPolygon(arg0: javawrappers.java.util.List, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getRandomPointInFeature(arg0: javawrappers.java.util.Random, arg1: javawrappers.org.opengis.feature.simple.SimpleFeature, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def findIntersectingLinks(arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def findIntersectingLinks(arg0: javawrappers.org.locationtech.jts.geom.LineString, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def createGeotoolsLineString(arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createGeotoolsPoint(arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.locationtech.jts.geom.Point: ...
	def notify(self, ) -> None: ...


class CoordUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def minus(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getCenter(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@staticmethod
	def scalarMult(arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def length(arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def plus(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@staticmethod
	def createGeotoolsCoordinate(arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@staticmethod
	def orthogonalProjectionOnLineSegment(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@staticmethod
	def rotateToRight(arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@staticmethod
	def getCenterWOffset(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@staticmethod
	def distancePointLinesegment(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, arg2: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def calcEuclideanDistance(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def calcProjectedEuclideanDistance(arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def createCoord(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@overload
	@staticmethod
	def createCoord(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	@overload
	@staticmethod
	def createCoord(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


class CoordinateTransformation:
	def transform(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


