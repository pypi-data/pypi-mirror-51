################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.router
import javawrappers.org.matsim.core.config.groups
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.utils.objectattributes.attributable
import javawrappers.java.io
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class DefaultRoutingModules:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def createPureNetworkRouter(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: javawrappers.org.matsim.core.router.util.LeastCostPathCalculator, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createTeleportationRouter(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.Scenario, arg2: javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createAccessEgressNetworkRouter(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.router.util.LeastCostPathCalculator, arg2: javawrappers.org.matsim.api.core.v01.Scenario, arg3: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createPseudoTransitRouter(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: javawrappers.org.matsim.core.router.util.LeastCostPathCalculator, arg4: javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup.ModeRoutingParams, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	def notify(self, ) -> None: ...


class FastDijkstraFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RoutingNetworkImaginaryNode:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def getDeadEndData(self, ) -> javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData: ...
	def notifyAll(self, ) -> None: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDeadEndData(self, arg0: javawrappers.org.matsim.core.router.util.PreProcessDijkstra.DeadEndData, ) -> None: ...
	def notify(self, ) -> None: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...
	def setOutLinksArray(self, arg0: JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getNode(self, ) -> javawrappers.org.matsim.api.core.v01.network.Node: ...
	def getOutLinksArray(self, ) -> JArray(javawrappers.org.matsim.core.router.util.RoutingNetworkLink, 1): ...


class FastAStarLandmarksFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MultiNodeDijkstraFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MultiNodePathCalculator:
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	def constructPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	def setSearchAllEndNodes(self, arg0: Union[int, JBoolean], ) -> None: ...


class TripRouter:
	class UnknownModeException:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class Builder:
		def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.org.matsim.core.router.TripRouter: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setRoutingModule(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.router.RoutingModule, ) -> javawrappers.org.matsim.core.router.TripRouter.Builder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setMainModeIdentifier(self, arg0: javawrappers.org.matsim.core.router.MainModeIdentifier, ) -> javawrappers.org.matsim.core.router.TripRouter.Builder: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def calcEndOfPlanElement(arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.PlanElement, arg2: javawrappers.org.matsim.core.config.Config, ) -> Union[float, JDouble]: ...
	def getMainModeIdentifier(self, ) -> javawrappers.org.matsim.core.router.MainModeIdentifier: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setRoutingModule(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.router.RoutingModule, ) -> javawrappers.org.matsim.core.router.TripRouter.Builder: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def setMainModeIdentifier(self, arg0: javawrappers.org.matsim.core.router.MainModeIdentifier, ) -> javawrappers.org.matsim.core.router.TripRouter.Builder: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.facilities.Facility, arg2: javawrappers.org.matsim.facilities.Facility, arg3: Union[float, JDouble], arg4: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	@staticmethod
	def insertTrip(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def insertTrip(arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.api.core.v01.population.Activity, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> javawrappers.java.util.List: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getRoutingModule(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def build(self, ) -> javawrappers.org.matsim.core.router.TripRouter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRegisteredModes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FacilityWrapperActivity:
	def __init__(self, arg0: javawrappers.org.matsim.facilities.Facility, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFacilityId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def setLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFacilityId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setType(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMaximumDuration(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getEndTime(self, ) -> Union[float, JDouble]: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setEndTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setMaximumDuration(self, arg0: Union[float, JDouble], ) -> None: ...
	def setStartTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def getStartTime(self, ) -> Union[float, JDouble]: ...


class FastMultiNodeDijkstraFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class NetworkRoutingInclAccessEgressModule:
	class AccessEgressStageActivityTypes:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isStageActivity(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def addBushwhackingLegFromFacilityToLinkIfNecessary(arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.api.core.v01.population.Person, arg2: javawrappers.org.matsim.api.core.v01.network.Link, arg3: Union[float, JDouble], arg4: javawrappers.java.util.List, arg5: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, arg6: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def addBushwhackingLegFromLinkToFacilityIfNecessary(arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.api.core.v01.population.Person, arg2: javawrappers.org.matsim.api.core.v01.network.Link, arg3: Union[float, JDouble], arg4: javawrappers.java.util.List, arg5: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, arg6: javawrappers.java.lang.String, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isStageActivity(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def notify(self, ) -> None: ...


class EmptyStageActivityTypes:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isStageActivity(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TeleportationRoutingModule:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.Scenario, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def notify(self, ) -> None: ...


class FastRouterType:
	ARRAY: FastRouterType = ...
	POINTER: FastRouterType = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.router.FastRouterType: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.router.FastRouterType, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Dijkstra:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StageActivityTypesImpl:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, *arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isStageActivity(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AStarEuclidean:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinTravelCostPerLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOverdoFactor(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class Transit:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FastRouterDelegateFactory:
	def createFastRouterDelegate(self, arg0: javawrappers.org.matsim.core.router.Dijkstra, arg1: javawrappers.org.matsim.core.router.util.NodeDataFactory, arg2: javawrappers.org.matsim.core.router.util.RoutingNetwork, ) -> javawrappers.org.matsim.core.router.FastRouterDelegate: ...


class MainModeIdentifier:
	def identifyMainMode(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...


class FastMultiNodeDijkstra:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def constructPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	def isSearchAllEndNodes(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createImaginaryNode(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.core.router.ImaginaryNode: ...
	@overload
	@staticmethod
	def createImaginaryNode(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.router.ImaginaryNode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSearchAllEndNodes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class RoutingModule:
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...


class LinkToLinkRouting:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AStarEuclideanFactory:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CompositeStageActivityTypes:
	@overload
	def __init__(self, *arg0: javawrappers.org.matsim.core.router.StageActivityTypes, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isStageActivity(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def addActivityTypes(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def removeActivityTypes(self, arg0: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> Union[int, JBoolean]: ...


class FreespeedFactorRoutingModule:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def notify(self, ) -> None: ...


class TransitRouterWrapper:
	def __init__(self, arg0: javawrappers.org.matsim.pt.router.TransitRouter, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: javawrappers.org.matsim.core.router.RoutingModule, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def notify(self, ) -> None: ...


class FastDijkstra:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FastAStarEuclideanFactory:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LinkWrapperFacility:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCustomAttributes(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...
	def notify(self, ) -> None: ...


class FastAStarEuclidean:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinTravelCostPerLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOverdoFactor(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class FastAStarLandmarks:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinTravelCostPerLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOverdoFactor(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class TripRouterModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class AStarLandmarksFactory:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.GlobalConfigGroup, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MainModeIdentifierImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def identifyMainMode(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SingleModeNetworksCache:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getSingleModeNetworksCache(self, ) -> javawrappers.java.util.Map: ...


class ImaginaryNode:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setCoord(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.org.matsim.utils.objectattributes.attributable.Attributes: ...
	def notifyAll(self, ) -> None: ...
	def removeOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def removeInLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getOutLinks(self, ) -> javawrappers.java.util.Map: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def getInLinks(self, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addInLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addOutLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoord(self, ) -> javawrappers.org.matsim.api.core.v01.Coord: ...


class StageActivityTypes:
	def isStageActivity(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class PlanRouter:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.TripRouter, arg1: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.router.TripRouter, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTripRouter(self, ) -> javawrappers.org.matsim.core.router.TripRouter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def calcEndOfActivity(arg0: javawrappers.org.matsim.api.core.v01.population.Activity, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.org.matsim.core.config.Config, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def notify(self, ) -> None: ...


class NetworkRoutingModule:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.api.core.v01.population.PopulationFactory, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: javawrappers.org.matsim.core.router.util.LeastCostPathCalculator, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def calcRoute(self, arg0: javawrappers.org.matsim.facilities.Facility, arg1: javawrappers.org.matsim.facilities.Facility, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStageActivityTypes(self, ) -> javawrappers.org.matsim.core.router.StageActivityTypes: ...
	def notify(self, ) -> None: ...


class InitialNode:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AStarLandmarks:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinTravelCostPerLength(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOverdoFactor(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class NetworkRoutingProvider:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.router.RoutingModule: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MultiNodeDijkstra:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def calcLeastCostPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.population.Person, arg4: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def constructPath(self, arg0: javawrappers.org.matsim.api.core.v01.network.Node, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: Union[float, JDouble], ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path: ...
	def isSearchAllEndNodes(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createImaginaryNode(arg0: javawrappers.java.util.Collection, arg1: javawrappers.org.matsim.api.core.v01.Coord, ) -> javawrappers.org.matsim.core.router.ImaginaryNode: ...
	@overload
	@staticmethod
	def createImaginaryNode(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.router.ImaginaryNode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setModeRestriction(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSearchAllEndNodes(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class DijkstraFactory:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createPathCalculator(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.core.router.util.TravelDisutility, arg2: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ArrayFastRouterDelegateFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def createFastRouterDelegate(self, arg0: javawrappers.org.matsim.core.router.Dijkstra, arg1: javawrappers.org.matsim.core.router.util.NodeDataFactory, arg2: javawrappers.org.matsim.core.router.util.RoutingNetwork, ) -> javawrappers.org.matsim.core.router.ArrayFastRouterDelegate: ...
	@overload
	def createFastRouterDelegate(self, arg0: javawrappers.org.matsim.core.router.Dijkstra, arg1: javawrappers.org.matsim.core.router.util.NodeDataFactory, arg2: javawrappers.org.matsim.core.router.util.RoutingNetwork, ) -> javawrappers.org.matsim.core.router.FastRouterDelegate: ...


class TripStructureUtils:
	class Subtour:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getChildren(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getParent(self, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Subtour: ...
		def isClosed(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTripsWithoutSubSubtours(self, ) -> javawrappers.java.util.List: ...
		def getTrips(self, ) -> javawrappers.java.util.List: ...
		def notify(self, ) -> None: ...


	class Trip:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDestinationActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getOriginActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getTripElements(self, ) -> javawrappers.java.util.List: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getLegsOnly(self, ) -> javawrappers.java.util.List: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getParent(self, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Subtour: ...
	def getOriginActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTripElements(self, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def findTripEndingAtActivity(arg0: javawrappers.org.matsim.api.core.v01.population.Activity, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...
	@staticmethod
	def getDepartureTime(arg0: javawrappers.org.matsim.core.router.TripStructureUtils.Trip, ) -> Union[float, JDouble]: ...
	def getLegsOnly(self, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getTrips(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getTrips(arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.java.util.List: ...
	@overload
	def getTrips(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def findCurrentTrip(arg0: javawrappers.org.matsim.api.core.v01.population.PlanElement, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...
	def getChildren(self, ) -> javawrappers.java.util.Collection: ...
	def getDestinationActivity(self, ) -> javawrappers.org.matsim.api.core.v01.population.Activity: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getActivities(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getActivities(arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLegs(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getLegs(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> javawrappers.java.util.List: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTripsWithoutSubSubtours(self, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getSubtours(arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.java.util.Collection: ...
	@overload
	@staticmethod
	def getSubtours(arg0: javawrappers.org.matsim.api.core.v01.population.Plan, arg1: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def findTripAtPlanElement(arg0: javawrappers.org.matsim.api.core.v01.population.PlanElement, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...
	@staticmethod
	def findTripStartingAtActivity(arg0: javawrappers.org.matsim.api.core.v01.population.Activity, arg1: javawrappers.org.matsim.api.core.v01.population.Plan, arg2: javawrappers.org.matsim.core.router.StageActivityTypes, ) -> javawrappers.org.matsim.core.router.TripStructureUtils.Trip: ...


class TripRouterFactoryBuilderWithDefaults:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setTransitRouterFactory(self, arg0: javawrappers.javax.inject.Provider, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTravelTime(self, arg0: javawrappers.org.matsim.core.router.util.TravelTime, ) -> None: ...
	@staticmethod
	def createDefaultTripRouterFactoryImpl(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.javax.inject.Provider: ...
	@staticmethod
	def createDefaultTransitRouter(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.javax.inject.Provider: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def createDefaultLeastCostPathCalculatorFactory(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculatorFactory: ...
	def notify(self, ) -> None: ...
	def setLeastCostPathCalculatorFactory(self, arg0: javawrappers.org.matsim.core.router.util.LeastCostPathCalculatorFactory, ) -> None: ...
	@staticmethod
	def createTripRouterProvider(arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.router.util.LeastCostPathCalculatorFactory, arg2: javawrappers.javax.inject.Provider, ) -> javawrappers.javax.inject.Provider: ...
	def build(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.javax.inject.Provider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTravelDisutility(self, arg0: javawrappers.org.matsim.core.router.util.TravelDisutility, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LeastCostPathCalculatorModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


