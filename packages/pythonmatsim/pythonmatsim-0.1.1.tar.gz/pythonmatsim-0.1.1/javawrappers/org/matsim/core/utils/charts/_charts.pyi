################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.chart

from jpype.types import *
from typing import Union

from typing import overload

class XYScatterChart:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def saveAsPng(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addMatsimLogo(self, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BarChart:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def saveAsPng(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addMatsimLogo(self, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ChartUtil:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def saveAsPng(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addMatsimLogo(self, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Demo:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createStackedBarChart(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createXYLineChart(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def createLineChart(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def createXYScatterChart(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def createBarChart(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createXYLogLogLineChart(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class LineChart:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def saveAsPng(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addMatsimLogo(self, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StackedBarChart:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSeries(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def saveAsPng(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addMatsimLogo(self, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class XYLineChart:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def addSeries(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def addSeries(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[float, JDouble], 1), arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def saveAsPng(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addMatsimLogo(self, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


