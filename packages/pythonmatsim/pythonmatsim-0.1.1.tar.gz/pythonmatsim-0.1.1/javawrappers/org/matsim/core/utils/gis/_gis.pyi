################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.geotools.data.simple
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.feature.simple
import javawrappers.java.net
import javawrappers.org.geotools.geometry.jts
import javawrappers.org.geotools.data
import javawrappers.org.matsim.core.utils.gis
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ShapeFileWriter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def writeGeometries(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class PointFeatureFactory:
	class Builder:
		def __init__(self, ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory.Builder: ...
		def setCrs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory.Builder: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory.Builder: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def create(self, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory.Builder: ...
	def setCrs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory.Builder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.matsim.api.core.v01.Coord, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Point, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.java.util.Map, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def notify(self, ) -> None: ...
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.org.matsim.core.utils.gis.PointFeatureFactory: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ShapeFileReader:
	def __init__(self, ): ...
	@staticmethod
	def readDataFile(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFeatureSet(self, ) -> javawrappers.java.util.Collection: ...
	def getCoordinateSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getFeatureSource(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureSource: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.org.geotools.geometry.jts.ReferencedEnvelope: ...
	def getSchema(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def getFeatureCollection(self, ) -> javawrappers.org.geotools.data.simple.SimpleFeatureCollection: ...
	def readFileAndInitialize(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getAllFeatures(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.util.Collection: ...
	@overload
	@staticmethod
	def getAllFeatures(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDataStore(self, ) -> javawrappers.org.geotools.data.DataStore: ...


class PolylineFeatureFactory:
	class Builder:
		def __init__(self, ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory.Builder: ...
		def setCrs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory.Builder: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory.Builder: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def create(self, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory.Builder: ...
	def setCrs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory.Builder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def createPolyline(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.java.util.Map, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolyline(self, arg0: javawrappers.org.locationtech.jts.geom.LineString, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolyline(self, arg0: javawrappers.org.locationtech.jts.geom.MultiLineString, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolyline(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolyline(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def notify(self, ) -> None: ...
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.org.matsim.core.utils.gis.PolylineFeatureFactory: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class PolygonFeatureFactory:
	class Builder:
		def __init__(self, ): ...
		def setName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory.Builder: ...
		def setCrs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory.Builder: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory.Builder: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def create(self, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory.Builder: ...
	def setCrs(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory.Builder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFeatureType(self, ) -> javawrappers.org.opengis.feature.simple.SimpleFeatureType: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def createPolygon(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.java.util.Map, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.MultiPolygon, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.MultiPolygon, arg1: javawrappers.java.util.Map, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.Polygon, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: JArray(javawrappers.org.matsim.api.core.v01.Coord, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	@overload
	def createPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.Polygon, arg1: javawrappers.java.util.Map, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.feature.simple.SimpleFeature: ...
	def notify(self, ) -> None: ...
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory.Builder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def create(self, ) -> javawrappers.org.matsim.core.utils.gis.PolygonFeatureFactory: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


