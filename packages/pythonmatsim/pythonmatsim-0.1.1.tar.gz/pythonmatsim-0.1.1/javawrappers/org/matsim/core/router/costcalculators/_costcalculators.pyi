################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.router.costcalculators
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01.network

from jpype.types import *
from typing import Union

from typing import overload

class OnlyTimeDependentTravelDisutilityFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createTravelDisutility(self, arg0: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def notify(self, ) -> None: ...


class RandomizingTimeDistanceTravelDisutilityFactory:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setSigma(self, arg0: Union[float, JDouble], ) -> javawrappers.org.matsim.core.router.costcalculators.RandomizingTimeDistanceTravelDisutilityFactory: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createTravelDisutility(self, arg0: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def notify(self, ) -> None: ...


class TravelDisutilityModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class TravelDisutilityFactory:
	def createTravelDisutility(self, arg0: javawrappers.org.matsim.core.router.util.TravelTime, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...


class OnlyTimeDependentTravelDisutility:
	def __init__(self, arg0: javawrappers.org.matsim.core.router.util.TravelTime, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLinkMinimumTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLinkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class FreespeedTravelTimeAndDisutility:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLinkToLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: javawrappers.org.matsim.api.core.v01.network.Link, arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getLinkMinimumTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLinkTravelDisutility(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getLinkTravelTime(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.api.core.v01.population.Person, arg3: javawrappers.org.matsim.vehicles.Vehicle, ) -> Union[float, JDouble]: ...


