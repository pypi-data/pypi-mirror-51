################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.core.mobsim.framework.listeners
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.core.network
import javawrappers.org.matsim.vis.snapshotwriters
import javawrappers.java.lang
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.core.mobsim.qsim.components
import javawrappers.org.matsim.core.mobsim.qsim
import javawrappers.java.util.function
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class QSim:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def getVisNetwork(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisNetwork: ...
	def run(self, ) -> None: ...
	def addActivityHandler(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.ActivityHandler, ) -> None: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getNetsimNetwork(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.NetsimNetwork: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	def interrupt(self, ) -> None: ...
	def getScenario(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def addParkedVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def getChildInjector(self, ) -> javawrappers.com.google.inject.Injector: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def getAgentCounter(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter: ...
	def getNonNetworkAgentSnapshots(self, ) -> javawrappers.org.matsim.vis.snapshotwriters.VisData: ...
	def getVehicles(self, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addNetworkChangeEvent(self, arg0: javawrappers.org.matsim.core.network.NetworkChangeEvent, ) -> None: ...
	@staticmethod
	def yield_() -> None: ...
	def insertAgentIntoMobsim(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	def addAgentSource(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AgentSource, ) -> None: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	def getSimTimer(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimTimer: ...
	@staticmethod
	def dumpStack() -> None: ...
	def start(self, ) -> None: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addDepartureHandler(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.DepartureHandler, ) -> None: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def getAgentTrackers(self, ) -> javawrappers.java.util.Collection: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	def getEventsManager(self, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addQueueSimulationListeners(self, arg0: javawrappers.org.matsim.core.mobsim.framework.listeners.MobsimListener, ) -> None: ...
	def getAgents(self, ) -> javawrappers.java.util.Map: ...
	def addMobsimEngine(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimEngine, ) -> None: ...


class InternalInterface:
	def getDepartureHandlers(self, ) -> javawrappers.java.util.List: ...
	def arrangeNextAgentState(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def unregisterAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent: ...
	def getMobsim(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSim: ...
	def registerAdditionalAgentOnLink(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...


class PreplanningEngine:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	@staticmethod
	def findLegsWithModeInFuture(arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def generateWakeups(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notifyChangedTripInformation(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: javawrappers.java.util.Optional, ) -> None: ...
	def afterSim(self, ) -> None: ...


class QSimBuilder:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	class StandaloneQSimModule:
		def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
		def install(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def configureQSimComponents(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.components.QSimComponentsConfigurator, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	@overload
	def configureQSimComponents(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.components.QSimComponentsConfigurator, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	def notifyAll(self, ) -> None: ...
	def removeModule(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	@overload
	def addQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	@overload
	def addQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	def notify(self, ) -> None: ...
	def configureModules(self, arg0: javawrappers.java.util.function.Consumer, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	@overload
	def addOverridingModule(self, arg0: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	@overload
	def addOverridingModule(self, arg0: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	def install(self, ) -> None: ...
	def build(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSim: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def useDefaultQSimModules(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	def useDefaultComponents(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	@overload
	def addOverridingQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	@overload
	def addOverridingQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...
	def useDefaults(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSimBuilder: ...


class PopulationModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class ActivityEndReschedulerProvider:
	def getActivityRescheduler(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.ActivityEndRescheduler: ...


class ActivityEngineDefaultImpl:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.AgentCounter, ): ...
	class AgentEntry:
		def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> Union[int, JBoolean]: ...
	def afterSim(self, ) -> None: ...


class DefaultTeleportationEngine:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, arg1: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def handleDeparture(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def onPrepareSim(self, ) -> None: ...
	def addAgentSnapshotInfo(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def afterSim(self, ) -> None: ...


class ActivityEndRescheduler:
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...


class ActivityEngine:
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> Union[int, JBoolean]: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def afterSim(self, ) -> None: ...


class AgentTracker:
	def getAgentsAtFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.util.List: ...


class QSimModule:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDefaultQSimModules() -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractQSimModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class ActivityEngineModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class ActivityEngineWithWakeup:
	class AgentWakeupEvent:
		def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.Id, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getPersonId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def getAttributes(self, ) -> javawrappers.java.util.Map: ...
		def getEventType(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getTime(self, ) -> Union[float, JDouble]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AgentEntry:
		def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], arg2: javawrappers.org.matsim.core.mobsim.qsim.ActivityEngineWithWakeup.AgentWakeup, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class AgentWakeup:
		def wakeUp(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPersonId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def rescheduleActivityEnd(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> None: ...
	def getTime(self, ) -> Union[float, JDouble]: ...
	def wakeUp(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg1: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEventType(self, ) -> javawrappers.java.lang.String: ...
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, ) -> Union[int, JBoolean]: ...
	def afterSim(self, ) -> None: ...


class PreplanningEngineQSimModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class HasAgentTracker:
	def getAgentTracker(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.AgentTracker: ...


class QSimProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.QSim: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TeleportationModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


