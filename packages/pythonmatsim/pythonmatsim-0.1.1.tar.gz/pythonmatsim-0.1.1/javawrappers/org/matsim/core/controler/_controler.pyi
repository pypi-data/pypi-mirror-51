################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.scoring
import javawrappers.org.matsim.core.replanning
import javawrappers.org.matsim.core.router.costcalculators
import javawrappers.org.matsim.core.api.experimental.events
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.mobsim.qsim.components
import javawrappers.org.matsim.core.mobsim.qsim
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.analysis
import javawrappers.org.apache.log4j
import javawrappers.org.matsim.core.controler.listener
import javawrappers.org.matsim.api.core.v01
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class PrepareForMobsimImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ControlerUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def initializeOutputLogging() -> None: ...
	@staticmethod
	def checkConfigConsistencyAndWriteToLog(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractModule:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class OutputDirectoryLogging:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def closeOutputDirLogging() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def initLogging(arg0: javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy, ) -> None: ...
	@staticmethod
	def catchLogEntries() -> None: ...
	@staticmethod
	def initLoggingWithOutputDirectory(arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class OutputDirectoryHierarchy:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting, arg3: Union[int, JBoolean], ): ...
	class OverwriteFileSetting:
		failIfDirectoryExists: OutputDirectoryHierarchy.OverwriteFileSetting = ...
		overwriteExistingFiles: OutputDirectoryHierarchy.OverwriteFileSetting = ...
		deleteDirectoryIfExists: OutputDirectoryHierarchy.OverwriteFileSetting = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getIterationPath(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIterationFilename(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy.OverwriteFileSetting, 1): ...
	def notifyAll(self, ) -> None: ...
	def getTempPath(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getOutputPath(self, ) -> javawrappers.java.lang.String: ...
	def getOutputFilename(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def createIterationDirectory(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class NewControlerModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class XY2LinksForFacilities:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def run(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.org.matsim.facilities.ActivityFacilities, ) -> None: ...
	def notify(self, ) -> None: ...


class ControlerListenerManagerImpl:
	def __init__(self, ): ...
	def addControlerListener(self, arg0: javawrappers.org.matsim.core.controler.listener.ControlerListener, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def removeControlerListener(self, arg0: javawrappers.org.matsim.core.controler.listener.ControlerListener, ) -> None: ...
	def fireControlerScoringEvent(self, arg0: Union[int, JInt], ) -> None: ...
	def fireControlerReplanningEvent(self, arg0: Union[int, JInt], ) -> None: ...
	def fireControlerStartupEvent(self, ) -> None: ...
	def fireControlerBeforeMobsimEvent(self, arg0: Union[int, JInt], ) -> None: ...
	def fireControlerIterationStartsEvent(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def fireControlerIterationEndsEvent(self, arg0: Union[int, JInt], ) -> None: ...
	def fireControlerAfterMobsimEvent(self, arg0: Union[int, JInt], ) -> None: ...
	def fireControlerShutdownEvent(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AllowsConfiguration:
	def addOverridingModule(self, arg0: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	def configureQSimComponents(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.components.QSimComponentsConfigurator, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	def addQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	def addOverridingQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...


class PrepareForSimImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	def notify(self, ) -> None: ...


class MatsimServices:
	def createTravelDisutilityCalculator(self, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def addControlerListener(self, arg0: javawrappers.org.matsim.core.controler.listener.ControlerListener, ) -> None: ...
	def getLeastCostPathCalculatorFactory(self, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculatorFactory: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.Injector: ...
	def getStrategyManager(self, ) -> javawrappers.org.matsim.core.replanning.StrategyManager: ...
	def getIterationNumber(self, ) -> javawrappers.java.lang.Integer: ...
	def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
	def getEvents(self, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def getStopwatch(self, ) -> javawrappers.org.matsim.analysis.IterationStopWatch: ...
	def getTravelDisutilityFactory(self, ) -> javawrappers.org.matsim.core.router.costcalculators.TravelDisutilityFactory: ...
	def getScenario(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def getControlerIO(self, ) -> javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy: ...
	def getScoreStats(self, ) -> javawrappers.org.matsim.analysis.ScoreStats: ...
	def getVolumes(self, ) -> javawrappers.org.matsim.analysis.VolumesAnalyzer: ...
	def getLinkStats(self, ) -> javawrappers.org.matsim.analysis.CalcLinkStats: ...
	def getLinkTravelTimes(self, ) -> javawrappers.org.matsim.core.router.util.TravelTime: ...
	def getScoringFunctionFactory(self, ) -> javawrappers.org.matsim.core.scoring.ScoringFunctionFactory: ...
	def getTripRouterProvider(self, ) -> javawrappers.com.google.inject.Provider: ...


class DefaultPrepareForSimModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class Controler:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Scenario, ): ...
	def addControlerListener(self, arg0: javawrappers.org.matsim.core.controler.listener.ControlerListener, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def configureQSimComponents(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.components.QSimComponentsConfigurator, ) -> javawrappers.org.matsim.core.controler.Controler: ...
	@overload
	def configureQSimComponents(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.components.QSimComponentsConfigurator, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setScoringFunctionFactory(self, arg0: javawrappers.org.matsim.core.scoring.ScoringFunctionFactory, ) -> None: ...
	def notify(self, ) -> None: ...
	def getEvents(self, ) -> javawrappers.org.matsim.core.api.experimental.events.EventsManager: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getScenario(self, ) -> javawrappers.org.matsim.api.core.v01.Scenario: ...
	def getControlerIO(self, ) -> javawrappers.org.matsim.core.controler.OutputDirectoryHierarchy: ...
	def setTerminationCriterion(self, arg0: javawrappers.org.matsim.core.controler.TerminationCriterion, ) -> None: ...
	def getScoreStats(self, ) -> javawrappers.org.matsim.analysis.ScoreStats: ...
	def getVolumes(self, ) -> javawrappers.org.matsim.analysis.VolumesAnalyzer: ...
	def getLinkTravelTimes(self, ) -> javawrappers.org.matsim.core.router.util.TravelTime: ...
	def getTripRouterProvider(self, ) -> javawrappers.com.google.inject.Provider: ...
	def createTravelDisutilityCalculator(self, ) -> javawrappers.org.matsim.core.router.util.TravelDisutility: ...
	def setModules(self, *arg0: javawrappers.org.matsim.core.controler.AbstractModule, ) -> None: ...
	def getLeastCostPathCalculatorFactory(self, ) -> javawrappers.org.matsim.core.router.util.LeastCostPathCalculatorFactory: ...
	def getInjector(self, ) -> javawrappers.com.google.inject.Injector: ...
	def getStrategyManager(self, ) -> javawrappers.org.matsim.core.replanning.StrategyManager: ...
	def getIterationNumber(self, ) -> javawrappers.java.lang.Integer: ...
	@overload
	def addQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.Controler: ...
	@overload
	def addQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	def setTripRouterFactory(self, arg0: javawrappers.javax.inject.Provider, ) -> None: ...
	def getConfig(self, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	def addOverridingModule(self, arg0: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.Controler: ...
	@overload
	def addOverridingModule(self, arg0: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStopwatch(self, ) -> javawrappers.org.matsim.analysis.IterationStopWatch: ...
	def getTravelDisutilityFactory(self, ) -> javawrappers.org.matsim.core.router.costcalculators.TravelDisutilityFactory: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLinkStats(self, ) -> javawrappers.org.matsim.analysis.CalcLinkStats: ...
	@overload
	def addOverridingQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.AllowsConfiguration: ...
	@overload
	def addOverridingQSimModule(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule, ) -> javawrappers.org.matsim.core.controler.Controler: ...
	def getScoringFunctionFactory(self, ) -> javawrappers.org.matsim.core.scoring.ScoringFunctionFactory: ...


class ReplayEvents:
	def __init__(self, ): ...
	class Module:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
		def install(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
		def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
		def notify(self, ) -> None: ...


	class Results:
		def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def run(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, *arg2: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.ReplayEvents.Results: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...
	def playEventsFile(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...


class ControlerDefaultsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class ControlerDefaults:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createDefaultTravelDisutilityFactory(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.org.matsim.core.router.costcalculators.TravelDisutilityFactory: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDefaultScoringFunctionFactory(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.org.matsim.core.scoring.ScoringFunctionFactory: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PrepareForSim:
	def run(self, ) -> None: ...


class Injector:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createInjector(arg0: javawrappers.org.matsim.core.config.Config, *arg1: javawrappers.com.google.inject.Module, ) -> javawrappers.com.google.inject.Injector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def printInjector(arg0: javawrappers.com.google.inject.Injector, arg1: javawrappers.org.apache.log4j.Logger, ) -> None: ...


class IterationCounter:
	def getIterationNumber(self, ) -> javawrappers.java.lang.Integer: ...


class ExplodedConfigModule:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class TerminationCriterion:
	def continueIterations(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class PrepareForMobsim:
	def run(self, ) -> None: ...


class PrepareForSimUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createDefaultPrepareForSim(arg0: javawrappers.org.matsim.api.core.v01.Scenario, ) -> javawrappers.org.matsim.core.controler.PrepareForSim: ...
	def notify(self, ) -> None: ...


class ControlerI:
	def run(self, ) -> None: ...


class ControlerListenerManager:
	def addControlerListener(self, arg0: javawrappers.org.matsim.core.controler.listener.ControlerListener, ) -> None: ...


