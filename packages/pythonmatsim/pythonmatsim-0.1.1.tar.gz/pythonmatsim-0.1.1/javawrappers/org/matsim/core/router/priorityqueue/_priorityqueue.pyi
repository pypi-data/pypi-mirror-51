################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.core.router.priorityqueue
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class HasIndex:
	def getArrayIndex(self, ) -> Union[int, JInt]: ...


class WrappedBinaryMinHeap:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
	class WrappedEntry:
		def __init__(self, arg0: javawrappers.org.matsim.core.router.priorityqueue.WrappedBinaryMinHeap, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getArrayIndex(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class ArrayIterator:
		def __init__(self, arg0: javawrappers.org.matsim.core.router.priorityqueue.WrappedBinaryMinHeap, arg1: javawrappers.java.util.Iterator, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> javawrappers.java.lang.Object: ...
	def add(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def decreaseKey(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def poll(self, ) -> javawrappers.java.lang.Object: ...
	def getArrayIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


class BinaryMinHeap:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JBoolean], ): ...
	class ArrayIterator:
		def __init__(self, arg0: javawrappers.org.matsim.core.router.priorityqueue.BinaryMinHeap, arg1: JArray(javawrappers.org.matsim.core.router.priorityqueue.HasIndex, 1), arg2: Union[int, JInt], ): ...
		@overload
		def next(self, ) -> javawrappers.org.matsim.core.router.priorityqueue.HasIndex: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.org.matsim.core.router.priorityqueue.HasIndex: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.org.matsim.core.router.priorityqueue.HasIndex, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def decreaseKey(self, arg0: javawrappers.org.matsim.core.router.priorityqueue.HasIndex, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def decreaseKey(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def poll(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def poll(self, ) -> javawrappers.org.matsim.core.router.priorityqueue.HasIndex: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.org.matsim.core.router.priorityqueue.HasIndex, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def peek(self, ) -> javawrappers.org.matsim.core.router.priorityqueue.HasIndex: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...


class MinHeap:
	def add(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def size(self, ) -> Union[int, JInt]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def decreaseKey(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def poll(self, ) -> javawrappers.java.lang.Object: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...


