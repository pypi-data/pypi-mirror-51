################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.pt.routes
import javawrappers.org.matsim.core.population.routes
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class AbstractRoute:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ): ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTravelTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def setStartLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getRouteType(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRouteDescription(self, ) -> javawrappers.java.lang.String: ...
	def setRouteDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getStartLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def setEndLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getEndLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.core.population.routes.AbstractRoute: ...
	def getTravelTime(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class GenericRouteFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCreatedRouteType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RouteUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getNodes(arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getLinksFromNodeIds(arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def createNetworkRoute(arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	@staticmethod
	def calcDistanceExcludingStartEndLink(arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ) -> Union[float, JDouble]: ...
	@staticmethod
	def getSubRoute(arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: javawrappers.org.matsim.api.core.v01.network.Node, arg2: javawrappers.org.matsim.api.core.v01.network.Node, arg3: javawrappers.org.matsim.api.core.v01.network.Network, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	@overload
	@staticmethod
	def calcDistance(arg0: javawrappers.org.matsim.pt.routes.ExperimentalTransitRoute, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, arg2: javawrappers.org.matsim.api.core.v01.network.Network, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calcDistance(arg0: javawrappers.org.matsim.core.router.util.LeastCostPathCalculator.Path, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calcDistance(arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: javawrappers.org.matsim.api.core.v01.network.Network, ) -> Union[float, JDouble]: ...
	@staticmethod
	def createGenericRouteImpl(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createLinkNetworkRouteImpl(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: JArray(javawrappers.org.matsim.api.core.v01.Id, 1), arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	@overload
	@staticmethod
	def createLinkNetworkRouteImpl(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	@overload
	@staticmethod
	def createLinkNetworkRouteImpl(arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.util.List, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getLinksFromNodes(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def calculateCoverage(arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg2: javawrappers.org.matsim.api.core.v01.network.Network, ) -> Union[float, JDouble]: ...


class ZZEverythingInPackageIsPackageFinalOrEmpty:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RouteFactory:
	def createRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def getCreatedRouteType(self, ) -> javawrappers.java.lang.String: ...


class NetworkRoute:
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def setTravelTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTravelCost(self, ) -> Union[float, JDouble]: ...
	def setStartLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getRouteType(self, ) -> javawrappers.java.lang.String: ...
	def getRouteDescription(self, ) -> javawrappers.java.lang.String: ...
	def setRouteDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setTravelCost(self, arg0: Union[float, JDouble], ) -> None: ...
	def getStartLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setLinkIds(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.util.List, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def setEndLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getSubRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	def getLinkIds(self, ) -> javawrappers.java.util.List: ...
	def getEndLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTravelTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def setVehicleId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class CompressedNetworkRouteFactory:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCreatedRouteType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GenericRouteImpl:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ): ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTravelTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def setStartLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getRouteType(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRouteDescription(self, ) -> javawrappers.java.lang.String: ...
	def setRouteDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getStartLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def setEndLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getEndLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTravelTime(self, ) -> Union[float, JDouble]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.core.population.routes.AbstractRoute: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.core.population.routes.GenericRouteImpl: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class RouteFactories:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createRoute(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.matsim.api.core.v01.Id, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRouteFactory(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.matsim.core.population.routes.RouteFactory, ) -> None: ...
	def notify(self, ) -> None: ...
	def getRouteClassForType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...


class LinkNetworkRouteFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCreatedRouteType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


