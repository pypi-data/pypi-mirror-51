################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.matsim.vehicles
import javawrappers.org.matsim.facilities
import javawrappers.org.matsim.core.population.routes
import javawrappers.org.matsim.api.core.v01.network
import javawrappers.org.matsim.pt
import javawrappers.java.lang
import javawrappers.org.matsim.core.mobsim.framework
import javawrappers.com.google.inject
import javawrappers.java.io
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.pt.transitSchedule.api
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.core.mobsim.qsim.interfaces
import javawrappers.org.matsim.core.mobsim.qsim.components
import javawrappers.org.matsim.core.mobsim.qsim.pt
import javawrappers.org.matsim.core.mobsim.qsim
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class TransitStopHandler:
	def handleTransitStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], arg2: javawrappers.java.util.List, arg3: javawrappers.java.util.List, arg4: javawrappers.org.matsim.core.mobsim.qsim.pt.PassengerAccessEgress, arg5: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> Union[float, JDouble]: ...


class SimpleTransitStopHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleTransitStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], arg2: javawrappers.java.util.List, arg3: javawrappers.java.util.List, arg4: javawrappers.org.matsim.core.mobsim.qsim.pt.PassengerAccessEgress, arg5: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class TransitVehicle:
	def getPassengerCapacity(self, ) -> Union[int, JInt]: ...
	def getPassengers(self, ) -> javawrappers.java.util.Collection: ...
	def getCurrentLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def removePassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def getDriver(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	def addPassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def getSizeInEquivalents(self, ) -> Union[float, JDouble]: ...
	def getStopHandler(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandler: ...


class TransitQSimEngine:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.QSim, arg1: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandlerFactory, ): ...
	class TransitAgentTriesToTeleportException:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def onPrepareSim(self, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def afterSim(self, ) -> None: ...
	@overload
	def getAgentTracker(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.AgentTracker: ...
	@overload
	def getAgentTracker(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopAgentTracker: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getPtDrivers(self, ) -> javawrappers.java.util.Collection: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def doSimStep(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAbstractTransitDriverFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitDriverAgentFactory, ) -> None: ...
	def insertAgentsIntoMobsim(self, ) -> None: ...
	def setInternalInterface(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getInternalInterface(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.InternalInterface: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def handleDeparture(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.framework.MobsimAgent, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...
	def setTransitStopHandlerFactory(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandlerFactory, ) -> None: ...


class TransitDriverAgentFactory:
	def createTransitDriver(self, arg0: javawrappers.org.matsim.pt.Umlauf, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.AbstractTransitDriverAgent: ...


class TransitStopAgentTracker:
	def __init__(self, arg0: javawrappers.org.matsim.core.api.experimental.events.EventsManager, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAgentsAtFacility(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addAgentToStop(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.core.mobsim.qsim.pt.PTPassengerAgent, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getAgentsAtStop(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removeAgentFromStop(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.pt.PTPassengerAgent, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def notify(self, ) -> None: ...


class TransitQVehicle:
	def __init__(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setDriver(self, arg0: javawrappers.org.matsim.core.mobsim.framework.DriverAgent, ) -> None: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.vehicles.Vehicle: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getFlowCapacityConsumptionInEquivalents(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def addPassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def setEarliestLinkExitTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEarliestLinkExitTime(self, ) -> Union[float, JDouble]: ...
	def setStopHandler(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandler, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setCurrentLink(self, arg0: javawrappers.org.matsim.api.core.v01.network.Link, ) -> None: ...
	def getMaximumVelocity(self, ) -> Union[float, JDouble]: ...
	def getDriver(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimDriverAgent: ...
	def getPassengerCapacity(self, ) -> Union[int, JInt]: ...
	def getPassengers(self, ) -> javawrappers.java.util.Collection: ...
	def getCurrentLink(self, ) -> javawrappers.org.matsim.api.core.v01.network.Link: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLinkEnterTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLinkEnterTime(self, ) -> Union[float, JDouble]: ...
	def removePassenger(self, arg0: javawrappers.org.matsim.core.mobsim.framework.PassengerAgent, ) -> Union[int, JBoolean]: ...
	def getSizeInEquivalents(self, ) -> Union[float, JDouble]: ...
	def getStopHandler(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandler: ...


class DefaultTransitDriverAgentFactory:
	def __init__(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, arg1: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopAgentTracker, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def createTransitDriver(self, arg0: javawrappers.org.matsim.pt.Umlauf, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.AbstractTransitDriverAgent: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ComplexTransitStopHandler:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def handleTransitStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], arg2: javawrappers.java.util.List, arg3: javawrappers.java.util.List, arg4: javawrappers.org.matsim.core.mobsim.qsim.pt.PassengerAccessEgress, arg5: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class MobsimDriverPassengerAgent:
	def getDesiredDestinationStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def getEnterTransitRoute(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitVehicle, ) -> Union[int, JBoolean]: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDesiredAccessStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getExitAtStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> Union[int, JBoolean]: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class SimpleTransitStopHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createTransitStopHandler(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TransitStopHandlerFactory:
	def createTransitStopHandler(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandler: ...


class TransitDriverAgentImpl:
	def __init__(self, arg0: javawrappers.org.matsim.pt.Umlauf, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopAgentTracker, arg3: javawrappers.org.matsim.core.mobsim.qsim.InternalInterface, ): ...
	class PlanBuilder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addTrip(self, arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDeparture(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.Departure: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@overload
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitVehicle: ...
	@overload
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def notifyAll(self, ) -> None: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getTransitLine(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitLine: ...
	def handleTransitStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getCurrentPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCarRoute(self, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	def getCurrentPlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTransitRoute(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...
	def getNextTransitStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...
	def addTrip(self, arg0: javawrappers.org.matsim.core.population.routes.NetworkRoute, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getPreviousPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def build(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNextPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TransitEngineModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def overrideMobsimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def setParent(self, arg0: javawrappers.org.matsim.core.mobsim.framework.AbstractMobsimModule, ) -> None: ...
	@staticmethod
	def overrideQSimModules(arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.List, ) -> javawrappers.org.matsim.core.mobsim.qsim.AbstractQSimModule: ...
	def notify(self, ) -> None: ...
	def setConfig(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...


class TransitDriverAgent:
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getNextTransitStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def handleTransitStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class PassengerAccessEgress:
	def handlePassengerLeaving(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.pt.PTPassengerAgent, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def handlePassengerEntering(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.pt.PTPassengerAgent, arg1: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, arg2: javawrappers.org.matsim.api.core.v01.Id, arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...


class PTPassengerAgent:
	def getDesiredDestinationStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getEnterTransitRoute(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitLine, arg1: javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute, arg2: javawrappers.java.util.List, arg3: javawrappers.org.matsim.core.mobsim.qsim.pt.TransitVehicle, ) -> Union[int, JBoolean]: ...
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDesiredAccessStopId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getExitAtStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, ) -> Union[int, JBoolean]: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...


class ComplexTransitStopHandlerFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createTransitStopHandler(self, arg0: javawrappers.org.matsim.vehicles.Vehicle, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitStopHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TransitQSimComponentsConfigurator:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def configure(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.components.QSimComponentsConfig, ) -> None: ...
	def notify(self, ) -> None: ...


class AbstractTransitDriverAgent:
	class NetworkRouteWrapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setTravelTime(self, arg0: Union[float, JDouble], ) -> None: ...
		def setStartLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
		def getRouteType(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getRouteDescription(self, ) -> javawrappers.java.lang.String: ...
		def setTravelCost(self, arg0: Union[float, JDouble], ) -> None: ...
		def getStartLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def notify(self, ) -> None: ...
		def setLinkIds(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.util.List, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def setVehicleId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
		def getTravelTime(self, ) -> Union[float, JDouble]: ...
		def getVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def getDistance(self, ) -> Union[float, JDouble]: ...
		def getTravelCost(self, ) -> Union[float, JDouble]: ...
		def setRouteDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def getSubRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
		def getLinkIds(self, ) -> javawrappers.java.util.List: ...
		def setEndLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
		def getEndLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
		def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def clone(self, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
		@overload
		def clone(self, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
		@overload
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def clone(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.AbstractTransitDriverAgent.NetworkRouteWrapper: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setTravelTime(self, arg0: Union[float, JDouble], ) -> None: ...
	def setStartLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getRouteType(self, ) -> javawrappers.java.lang.String: ...
	def chooseNextLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getPlannedVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getRouteDescription(self, ) -> javawrappers.java.lang.String: ...
	def setTravelCost(self, arg0: Union[float, JDouble], ) -> None: ...
	def getStartLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def handleTransitStop(self, arg0: javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def isWantingToArriveOnCurrentLink(self, ) -> Union[int, JBoolean]: ...
	def getCurrentFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getTravelTime(self, ) -> Union[float, JDouble]: ...
	def getVehicleId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getMode(self, ) -> javawrappers.java.lang.String: ...
	def getTravelCost(self, ) -> Union[float, JDouble]: ...
	def getCurrentPlan(self, ) -> javawrappers.org.matsim.api.core.v01.population.Plan: ...
	def getExpectedTravelTime(self, ) -> javawrappers.java.lang.Double: ...
	def setStateToAbort(self, arg0: Union[float, JDouble], ) -> None: ...
	def setRouteDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def endActivityAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def setEndLinkId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def setDistance(self, arg0: Union[float, JDouble], ) -> None: ...
	def getNextPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.TransitVehicle: ...
	@overload
	def getVehicle(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle: ...
	def notifyAll(self, ) -> None: ...
	def setVehicle(self, arg0: javawrappers.org.matsim.core.mobsim.qsim.interfaces.MobsimVehicle, ) -> None: ...
	def getId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getCurrentPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def notify(self, ) -> None: ...
	def setLinkIds(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.util.List, arg2: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getExpectedTravelDistance(self, ) -> javawrappers.java.lang.Double: ...
	def notifyArrivalOnLinkByNonNetworkMode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDestinationLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def setVehicleId(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def notifyMoveOverNode(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> None: ...
	def getCurrentLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def endLegAndComputeNextState(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTransitRoute(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitRoute: ...
	def getNextTransitStop(self, ) -> javawrappers.org.matsim.pt.transitSchedule.api.TransitStopFacility: ...
	def getPreviousPlanElement(self, ) -> javawrappers.org.matsim.api.core.v01.population.PlanElement: ...
	def getActivityEndTime(self, ) -> Union[float, JDouble]: ...
	def getSubRoute(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	def getLinkIds(self, ) -> javawrappers.java.util.List: ...
	def getDestinationFacility(self, ) -> javawrappers.org.matsim.facilities.Facility: ...
	def getEndLinkId(self, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	def getState(self, ) -> javawrappers.org.matsim.core.mobsim.framework.MobsimAgent.State: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.api.core.v01.population.Route: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.core.population.routes.NetworkRoute: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.org.matsim.core.mobsim.qsim.pt.AbstractTransitDriverAgent.NetworkRouteWrapper: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


