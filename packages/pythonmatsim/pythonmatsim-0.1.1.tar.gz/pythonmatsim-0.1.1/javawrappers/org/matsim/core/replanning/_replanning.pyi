################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.core.replanning.selectors
import javawrappers.org.matsim.api.core.v01.replanning
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.org.matsim.core.replanning.modules
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.replanning
import javawrappers.org.matsim.core.controler

from jpype.types import *
from typing import Union

from typing import overload

class PlanStrategy:
	def init(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, ) -> None: ...
	def finish(self, ) -> None: ...


class StrategyManager:
	def __init__(self, ): ...
	def getWeightsOfDefaultSubpopulation(self, ) -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getWeights(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def getMaxPlansPerAgent(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def changeWeightOfStrategy(self, arg0: javawrappers.org.matsim.core.replanning.GenericPlanStrategy, arg1: javawrappers.java.lang.String, arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def changeWeightOfStrategyForDefaultSubpopulation(self, arg0: javawrappers.org.matsim.core.replanning.GenericPlanStrategy, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def setPlanSelectorForRemoval(self, arg0: javawrappers.org.matsim.core.replanning.selectors.PlanSelector, ) -> None: ...
	def addStrategy(self, arg0: javawrappers.org.matsim.core.replanning.PlanStrategy, arg1: javawrappers.java.lang.String, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, arg1: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, arg1: Union[int, JInt], arg2: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeRequest(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.core.replanning.PlanStrategy, arg2: javawrappers.java.lang.String, arg3: Union[float, JDouble], ) -> None: ...
	def removeStrategy(self, arg0: javawrappers.org.matsim.core.replanning.PlanStrategy, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getStrategies(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def setMaxPlansPerAgent(self, arg0: Union[int, JInt], ) -> None: ...
	def addChangeRequestForDefaultSubpopulation(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.core.replanning.PlanStrategy, arg2: Union[float, JDouble], ) -> None: ...
	def getStrategiesOfDefaultSubpopulation(self, ) -> javawrappers.java.util.List: ...
	def removeStrategyForDefaultSubpopulation(self, arg0: javawrappers.org.matsim.core.replanning.PlanStrategy, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSubpopulationAttributeName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def chooseStrategy(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.GenericPlanStrategy: ...
	def addStrategyForDefaultSubpopulation(self, arg0: javawrappers.org.matsim.core.replanning.PlanStrategy, arg1: Union[float, JDouble], ) -> None: ...


class ReplanningContext:
	def getIteration(self, ) -> Union[int, JInt]: ...


class PlanStrategyImpl:
	def __init__(self, arg0: javawrappers.org.matsim.core.replanning.selectors.PlanSelector, ): ...
	class Builder:
		def __init__(self, arg0: javawrappers.org.matsim.core.replanning.selectors.PlanSelector, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.org.matsim.core.replanning.PlanStrategy: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def addStrategyModule(self, arg0: javawrappers.org.matsim.api.core.v01.replanning.PlanStrategyModule, ) -> javawrappers.org.matsim.core.replanning.PlanStrategyImpl.Builder: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumberOfStrategyModules(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, ) -> None: ...
	def notify(self, ) -> None: ...
	def build(self, ) -> javawrappers.org.matsim.core.replanning.PlanStrategy: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	@overload
	def addStrategyModule(self, arg0: javawrappers.org.matsim.core.replanning.modules.GenericPlanStrategyModule, ) -> None: ...
	@overload
	def addStrategyModule(self, arg0: javawrappers.org.matsim.api.core.v01.replanning.PlanStrategyModule, ) -> javawrappers.org.matsim.core.replanning.PlanStrategyImpl.Builder: ...
	def getPlanSelector(self, ) -> javawrappers.org.matsim.core.replanning.selectors.PlanSelector: ...


class GenericStrategyManager:
	def __init__(self, ): ...
	class MyStrategyChooser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def chooseStrategy(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.GenericPlanStrategy: ...
		def notify(self, ) -> None: ...


	class StrategyChooser:
		def chooseStrategy(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.GenericPlanStrategy: ...


	class StrategyWeights:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getWeights(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setPlanSelectorForRemoval(self, arg0: javawrappers.org.matsim.core.replanning.selectors.PlanSelector, ) -> None: ...
	def addStrategy(self, arg0: javawrappers.org.matsim.core.replanning.GenericPlanStrategy, arg1: javawrappers.java.lang.String, arg2: Union[float, JDouble], ) -> None: ...
	def run(self, arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.api.core.v01.population.Population, arg2: Union[int, JInt], arg3: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeRequest(self, arg0: Union[int, JInt], arg1: javawrappers.org.matsim.core.replanning.GenericPlanStrategy, arg2: javawrappers.java.lang.String, arg3: Union[float, JDouble], ) -> None: ...
	def getStrategies(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def setMaxPlansPerAgent(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSubpopulationAttributeName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def chooseStrategy(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.GenericPlanStrategy: ...
	@overload
	def chooseStrategy(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.replanning.GenericPlanStrategy: ...


class GenericPlanStrategy:
	def init(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, ) -> None: ...
	def finish(self, ) -> None: ...


class GenericPlanStrategyImpl:
	def __init__(self, arg0: javawrappers.org.matsim.core.replanning.selectors.PlanSelector, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.org.matsim.core.replanning.ReplanningContext, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNumberOfStrategyModules(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.HasPlansAndId, ) -> None: ...
	def finish(self, ) -> None: ...
	def addStrategyModule(self, arg0: javawrappers.org.matsim.core.replanning.modules.GenericPlanStrategyModule, ) -> None: ...
	def getPlanSelector(self, ) -> javawrappers.org.matsim.core.replanning.selectors.PlanSelector: ...
	def notify(self, ) -> None: ...


class StrategyManagerModule:
	def __init__(self, ): ...
	class ExternalModuleProvider:
		def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, ) -> javawrappers.org.matsim.core.replanning.PlanStrategy: ...
		@overload
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, ) -> javawrappers.org.matsim.core.replanning.PlanStrategy: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class ReplanningUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isOnlySelector(arg0: javawrappers.org.matsim.core.replanning.GenericPlanStrategy, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


