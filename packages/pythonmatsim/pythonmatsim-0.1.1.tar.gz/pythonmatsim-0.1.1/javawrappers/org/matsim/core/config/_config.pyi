################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.org.matsim.core.config.groups
import javawrappers.java.io
import javawrappers.org.matsim.core.config.consistency
import javawrappers.org.xml.sax
import javawrappers.org.matsim.core.config
import javawrappers.org.matsim.pt.config
import javawrappers.org.matsim.api.core.v01
import javawrappers.org.matsim.core.mobsim.jdeqsim

from jpype.types import *
from typing import Union

from typing import overload

class ConfigReader:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setNamespaceAware(self, arg0: Union[int, JBoolean], ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def readURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.xml.sax.Attributes, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endTag(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Stack, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getDoctype(self, ) -> javawrappers.java.lang.String: ...
	def setLocalDtdDirectory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def readFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class CommandLine:
	class ConfigurationException:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class Builder:
		def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def allowPositionalArguments(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.org.matsim.core.config.CommandLine: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def allowOptions(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		@overload
		def allowOptions(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		def allowAnyOption(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def requireOptions(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		@overload
		def requireOptions(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		def notify(self, ) -> None: ...
		@overload
		def allowPrefixes(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
		@overload
		def allowPrefixes(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPositionalArgumentStrict(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getPositionalArguments(self, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def allowOptions(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	@overload
	def allowOptions(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	def applyConfiguration(self, arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...
	def allowAnyOption(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	def getOption(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getNumberOfPositionalArguments(self, ) -> Union[int, JInt]: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hasOption(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPositionalArgument(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.Optional: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def requireOptions(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	@overload
	def requireOptions(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	@overload
	def allowPrefixes(self, *arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	@overload
	def allowPrefixes(self, arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	def allowPositionalArguments(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.matsim.core.config.CommandLine.Builder: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def build(self, ) -> javawrappers.org.matsim.core.config.CommandLine: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAvailableOptions(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOptionStrict(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ReflectiveConfigGroup:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class InconsistentModuleException:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class DoNotConvertNull:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class StringGetter:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...


	class StringSetter:
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def annotationType(self, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def value(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def testForLocked(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def value(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ConfigUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def modifyFilePaths(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.net.URL, arg2: JArray(javawrappers.java.lang.String, 1), *arg3: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.java.net.URL, arg1: JArray(javawrappers.java.lang.String, 1), *arg2: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.net.URL, *arg2: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.java.net.URL, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.java.net.URL, *arg1: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.java.lang.String, *arg1: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def loadConfig(arg0: JArray(javawrappers.java.lang.String, 1), *arg1: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def loadConfig(arg0: javawrappers.org.matsim.core.config.Config, arg1: JArray(javawrappers.java.lang.String, 1), *arg2: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def addOrGetModule(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	@overload
	@staticmethod
	def addOrGetModule(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.Class, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def createConfig() -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def createConfig(arg0: javawrappers.java.net.URL, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def createConfig(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.Config: ...
	@overload
	@staticmethod
	def createConfig(*arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> javawrappers.org.matsim.core.config.Config: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def applyCommandline(arg0: javawrappers.org.matsim.core.config.Config, arg1: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.org.matsim.core.config.Config: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createAvailableStrategyId(arg0: javawrappers.org.matsim.core.config.Config, ) -> javawrappers.org.matsim.api.core.v01.Id: ...
	@staticmethod
	def writeConfig(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def setVspDefaults(arg0: javawrappers.org.matsim.core.config.Config, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def writeMinimalConfig(arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, ) -> None: ...


class ConfigWriter:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.org.matsim.core.config.ConfigWriter.Verbosity, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, ): ...
	class Verbosity:
		all: ConfigWriter.Verbosity = ...
		minimal: ConfigWriter.Verbosity = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigWriter.Verbosity: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.core.config.ConfigWriter.Verbosity, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPrettyPrint(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigWriter.Verbosity: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.core.config.ConfigWriter.Verbosity, 1): ...
	def notifyAll(self, ) -> None: ...
	def setIndentationString(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def useCompression(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def writeStream(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStream(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def writeFileV1(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeFileV2(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Config:
	def __init__(self, ): ...
	def getModule(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def subtourModeChoice(self, ) -> javawrappers.org.matsim.core.config.groups.SubtourModeChoiceConfigGroup: ...
	def linkStats(self, ) -> javawrappers.org.matsim.core.config.groups.LinkStatsConfigGroup: ...
	def timeAllocationMutator(self, ) -> javawrappers.org.matsim.core.config.groups.TimeAllocationMutatorConfigGroup: ...
	def counts(self, ) -> javawrappers.org.matsim.core.config.groups.CountsConfigGroup: ...
	def addCoreModules(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def checkConsistency(self, ) -> None: ...
	def removeModule(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def createModule(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def setParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def vehicles(self, ) -> javawrappers.org.matsim.core.config.groups.VehiclesConfigGroup: ...
	def global_(self, ) -> javawrappers.org.matsim.core.config.groups.GlobalConfigGroup: ...
	def notify(self, ) -> None: ...
	def plansCalcRoute(self, ) -> javawrappers.org.matsim.core.config.groups.PlansCalcRouteConfigGroup: ...
	def network(self, ) -> javawrappers.org.matsim.core.config.groups.NetworkConfigGroup: ...
	def findParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def planCalcScore(self, ) -> javawrappers.org.matsim.core.config.groups.PlanCalcScoreConfigGroup: ...
	def removeConfigConsistencyChecker(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def travelTimeCalculator(self, ) -> javawrappers.org.matsim.core.config.groups.TravelTimeCalculatorConfigGroup: ...
	def scenario(self, ) -> javawrappers.org.matsim.core.config.groups.ScenarioConfigGroup: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ptCounts(self, ) -> javawrappers.org.matsim.core.config.groups.PtCountsConfigGroup: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def setContext(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def changeMode(self, ) -> javawrappers.org.matsim.core.config.groups.ChangeModeConfigGroup: ...
	def vspExperimental(self, ) -> javawrappers.org.matsim.core.config.groups.VspExperimentalConfigGroup: ...
	def transitRouter(self, ) -> javawrappers.org.matsim.pt.config.TransitRouterConfigGroup: ...
	def getParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def addConfigConsistencyChecker(self, arg0: javawrappers.org.matsim.core.config.consistency.ConfigConsistencyChecker, ) -> None: ...
	def getModules(self, ) -> javawrappers.java.util.TreeMap: ...
	def parallelEventHandling(self, ) -> javawrappers.org.matsim.core.config.groups.ParallelEventHandlingConfigGroup: ...
	def households(self, ) -> javawrappers.org.matsim.core.config.groups.HouseholdsConfigGroup: ...
	def jdeqSim(self, ) -> javawrappers.org.matsim.core.mobsim.jdeqsim.JDEQSimConfigGroup: ...
	def addModule(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def setLocked(self, arg0: Union[int, JBoolean], ) -> None: ...
	def qsim(self, ) -> javawrappers.org.matsim.core.config.groups.QSimConfigGroup: ...
	def plans(self, ) -> javawrappers.org.matsim.core.config.groups.PlansConfigGroup: ...
	def transit(self, ) -> javawrappers.org.matsim.pt.config.TransitConfigGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def controler(self, ) -> javawrappers.org.matsim.core.config.groups.ControlerConfigGroup: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def strategy(self, ) -> javawrappers.org.matsim.core.config.groups.StrategyConfigGroup: ...
	def facilities(self, ) -> javawrappers.org.matsim.core.config.groups.FacilitiesConfigGroup: ...
	def getContext(self, ) -> javawrappers.java.net.URL: ...


class ConfigGroup:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getParameterSets(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getParameterSets(self, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLocked(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def testForLocked(self, ) -> None: ...
	def addParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addParam(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isLocked(self, ) -> Union[int, JBoolean]: ...
	def getComments(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getInputFileURL(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createParameterSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.core.config.ConfigGroup: ...
	def removeParameterSet(self, arg0: javawrappers.org.matsim.core.config.ConfigGroup, ) -> Union[int, JBoolean]: ...
	def getParams(self, ) -> javawrappers.java.util.Map: ...


