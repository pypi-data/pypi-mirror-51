################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.org.matsim.api.core.v01.population

from jpype.types import *
from typing import Union

from typing import overload

class CharyparNagelMoneyScoring:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def addMoney(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class CharyparNagelLegScoring:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, arg1: javawrappers.org.matsim.api.core.v01.network.Network, arg2: javawrappers.org.matsim.pt.transitSchedule.api.TransitSchedule, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, arg1: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def startLeg(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Leg, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.Event, ) -> None: ...
	def endLeg(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...


class CharyparNagelAgentStuckScoring:
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...
	def agentStuck(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class CharyparNagelOpenTimesActivityScoring:
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, arg1: javawrappers.org.matsim.facilities.ActivityFacilities, ): ...
	def endActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def handleFirstActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def startActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def handleLastActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...


class CharyparNagelActivityScoring:
	def __init__(self, arg0: javawrappers.org.matsim.core.scoring.functions.ScoringParameters, ): ...
	def endActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def handleFirstActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def startActivity(self, arg0: Union[float, JDouble], arg1: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def handleActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def handleLastActivity(self, arg0: javawrappers.org.matsim.api.core.v01.population.Activity, ) -> None: ...
	def getScore(self, ) -> Union[float, JDouble]: ...


