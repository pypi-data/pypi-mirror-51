################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.matsim.counts.algorithms.graphs
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.counts.algorithms.graphs.helper
import javawrappers.org.matsim.counts
import javawrappers.org.matsim.counts.algorithms
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class CountSimComparisonKMLWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.api.core.v01.network.Network, arg2: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.matsim.counts.Counts, arg2: javawrappers.org.matsim.core.utils.geometry.CoordinateTransformation, arg3: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setIterationNumber(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class CountSimComparisonTimeFilter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCountsForHour(self, arg0: javawrappers.java.lang.Integer, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CountsComparisonAlgorithm:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Map, arg1: javawrappers.org.matsim.counts.Counts, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.counts.algorithms.CountsComparisonAlgorithm.VolumesForId, arg1: javawrappers.org.matsim.counts.Counts, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.analysis.VolumesAnalyzer, arg1: javawrappers.org.matsim.counts.Counts, arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: Union[float, JDouble], ): ...
	class DistanceFilter:
		def isInRange(self, arg0: javawrappers.org.matsim.counts.Count, ) -> Union[int, JBoolean]: ...


	class VolumesForId:
		def getVolumesForStop(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[float, JDouble], 1): ...


	@overload
	def setDistanceFilter(self, arg0: javawrappers.org.matsim.counts.algorithms.CountsComparisonAlgorithm.DistanceFilter, ) -> None: ...
	@overload
	def setDistanceFilter(self, arg0: javawrappers.java.lang.Double, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def isInRange(self, arg0: javawrappers.org.matsim.counts.Count, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setCountsScaleFactor(self, arg0: Union[float, JDouble], ) -> None: ...
	def getComparison(self, ) -> javawrappers.java.util.List: ...
	def setCountCoordUsingDistanceFilter(self, arg0: javawrappers.java.lang.Double, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getVolumesForStop(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CountsHtmlAndGraphsWriter:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addGraphsCreator(self, arg0: javawrappers.org.matsim.counts.algorithms.graphs.CountsGraphsCreator, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createHtmlAndGraphs(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getOutput(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.OutputDelegate: ...


class CountSimComparisonLinkFilter:
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCountsForLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> javawrappers.java.util.List: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLinkIds(self, ) -> javawrappers.java.util.Vector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAggregatedSimValue(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getAggregatedCountValue(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> Union[float, JDouble]: ...


class CountSimComparisonTableWriter:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.Locale, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setIterationNumber(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


