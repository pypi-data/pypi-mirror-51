################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.matsim.counts.algorithms.graphs.helper
import javawrappers.org.matsim.counts
import javawrappers.org.jfree.chart

from jpype.types import *
from typing import Union

from typing import overload

class BoxPlotNormalizedErrorGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class CountsSimReal24GraphCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class CountsGEHCurveGraphCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class CountsErrorGraphCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class CountsSimReal24Graph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class CountsLoadCurveGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLinkId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def add2LoadCurveDataSets(self, arg0: javawrappers.org.matsim.counts.CountSimComparison, ) -> None: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clearDatasets(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CountsGraphsCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class BoxPlotErrorGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class CountsLoadCurveGraphCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class CountsSimRealPerHourGraphCreator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSection(self, ) -> javawrappers.org.matsim.counts.algorithms.graphs.helper.Section: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createGraphs(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class CountsGEHCurveGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLinkId(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def add2LoadCurveDataSets(self, arg0: javawrappers.org.matsim.counts.CountSimComparison, ) -> None: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLinkId(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clearDatasets(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CountsSimRealPerHourGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getHour(self, ) -> Union[int, JInt]: ...


class CountsGraph:
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class BiasNormalizedErrorGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMeanBias(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getMeanNormRelError(self, ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class BiasErrorGraph:
	def __init__(self, arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getChartTitle(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMeanRelError(self, ) -> JArray(Union[float, JDouble], 1): ...
	def createChart(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notifyAll(self, ) -> None: ...
	def setChartTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getChart(self, ) -> javawrappers.org.jfree.chart.JFreeChart: ...
	def notify(self, ) -> None: ...
	def setFilename(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilename(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMeanBias(self, ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


