################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.matsim.api.core.v01.events
import javawrappers.java.util
import javawrappers.com.google.inject
import javawrappers.java.io
import javawrappers.org.matsim.api.core.v01.population
import javawrappers.org.matsim.core.router.util
import javawrappers.org.matsim.analysis
import javawrappers.org.matsim.core.controler
import javawrappers.org.matsim.core.controler.events
import javawrappers.org.matsim.api.core.v01

from jpype.types import *
from typing import Union

from typing import overload

class ModeStatsControlerListener:
	def notifyIterationEnds(self, arg0: javawrappers.org.matsim.core.controler.events.IterationEndsEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notifyShutdown(self, arg0: javawrappers.org.matsim.core.controler.events.ShutdownEvent, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def notifyStartup(self, arg0: javawrappers.org.matsim.core.controler.events.StartupEvent, ) -> None: ...


class LegHistogramChart:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeGraphic(arg0: javawrappers.org.matsim.analysis.LegHistogram, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def writeGraphic(arg0: javawrappers.org.matsim.analysis.LegHistogram, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class LegHistogram:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class DataFrame:
		def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonStuckEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonDepartureEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getDepartures(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getDepartures(self, arg0: javawrappers.java.lang.String, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getArrivals(self, arg0: javawrappers.java.lang.String, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getArrivals(self, ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...
	@overload
	def getStuck(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getStuck(self, arg0: javawrappers.java.lang.String, ) -> JArray(Union[int, JInt], 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLegModes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def write(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class TravelDistanceStatsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class LegHistogramModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class ScoreStatsControlerListener:
	class ScoreItem:
		worst: ScoreStatsControlerListener.ScoreItem = ...
		best: ScoreStatsControlerListener.ScoreItem = ...
		average: ScoreStatsControlerListener.ScoreItem = ...
		executed: ScoreStatsControlerListener.ScoreItem = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.analysis.ScoreStatsControlerListener.ScoreItem: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.matsim.analysis.ScoreStatsControlerListener.ScoreItem, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def notifyIterationEnds(self, arg0: javawrappers.org.matsim.core.controler.events.IterationEndsEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.matsim.analysis.ScoreStatsControlerListener.ScoreItem: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.matsim.analysis.ScoreStatsControlerListener.ScoreItem, 1): ...
	def notifyAll(self, ) -> None: ...
	def getScoreHistory(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def notifyShutdown(self, arg0: javawrappers.org.matsim.core.controler.events.ShutdownEvent, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notifyStartup(self, arg0: javawrappers.org.matsim.core.controler.events.StartupEvent, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class TransportPlanningMainModeIdentifier:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def identifyMainMode(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ModeStatsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class Bins:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getInterval(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def plotBinnedDistribution(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getMax(self, arg0: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...
	@overload
	def getMax(self, arg0: JArray(javawrappers.java.lang.Double, 1), ) -> Union[float, JDouble]: ...
	def setBins(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def median(self, arg0: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...
	def setInterval(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def addVal(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def mean(self, arg0: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def weightedMean(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...
	@overload
	def weightedMean(self, arg0: JArray(javawrappers.java.lang.Double, 1), arg1: JArray(javawrappers.java.lang.Double, 1), ) -> Union[float, JDouble]: ...
	def addValues(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getBins(self, ) -> JArray(Union[float, JDouble], 1): ...


class LegTimesModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class CalcAverageTripLength:
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAverageTripLength(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Person, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	@overload
	def run(self, arg0: javawrappers.org.matsim.api.core.v01.population.Population, ) -> None: ...
	def notify(self, ) -> None: ...


class LinkStatsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class VolumesAnalyzer:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.org.matsim.api.core.v01.network.Network, arg3: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.LinkLeaveEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.VehicleEntersTrafficEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getModes(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	@overload
	def getVolumesForLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.lang.String, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def getVolumesForLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[int, JInt], 1): ...
	def getLinkIds(self, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getVolumesPerHourForLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, arg1: javawrappers.java.lang.String, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getVolumesPerHourForLink(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[float, JDouble], 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getVolumesArraySize(self, ) -> Union[int, JInt]: ...


class IterationStopWatch:
	def __init__(self, ): ...
	def endIteration(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def beginOperation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def writeGraphFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def beginIteration(self, arg0: Union[int, JInt], ) -> None: ...
	def writeTextFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def endOperation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def timestamp(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class VolumesAnalyzerModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class BinEntry:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getWeight(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[float, JDouble], ) -> None: ...
	def setWeight(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ScoreStatsModule:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def emptyModule() -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def install(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def override(arg0: javawrappers.java.lang.Iterable, arg1: javawrappers.org.matsim.core.controler.AbstractModule, ) -> javawrappers.org.matsim.core.controler.AbstractModule: ...
	def configure(self, arg0: javawrappers.com.google.inject.Binder, ) -> None: ...
	def notify(self, ) -> None: ...


class ScoreStats:
	def getScoreHistory(self, ) -> javawrappers.java.util.Map: ...


class CalcLinkStats:
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.matsim.api.core.v01.network.Network, ): ...
	class LinkData:
		def __init__(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: JArray(JArray(Union[float, JDouble], 1), 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def readFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAvgLinkVolumes(self, arg0: javawrappers.org.matsim.api.core.v01.Id, ) -> JArray(Union[float, JDouble], 1): ...
	def reset(self, ) -> None: ...
	def addData(self, arg0: javawrappers.org.matsim.analysis.VolumesAnalyzer, arg1: javawrappers.org.matsim.core.router.util.TravelTime, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class CalcLegTimes:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getTimeslotIndex(arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityStartEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.ActivityEndEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonDepartureEvent, ) -> None: ...
	@overload
	def handleEvent(self, arg0: javawrappers.org.matsim.api.core.v01.events.PersonArrivalEvent, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAverageTripDuration(self, ) -> Union[float, JDouble]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def writeStats(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	@overload
	def writeStats(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def getLegStats(self, ) -> javawrappers.java.util.Map: ...


class TravelDistanceStats:
	def __init__(self, arg0: javawrappers.org.matsim.core.config.Config, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	class ExceptionHandler:
		def __init__(self, arg0: javawrappers.java.util.concurrent.atomic.AtomicBoolean, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
		def notify(self, ) -> None: ...


	class StatsCalculator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def addPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
		def notify(self, ) -> None: ...


	def addIteration(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Map, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def uncaughtException(self, arg0: javawrappers.java.lang.Thread, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def run(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addPerson(self, arg0: javawrappers.org.matsim.api.core.v01.population.Plan, ) -> None: ...
	def close(self, ) -> None: ...
	def notify(self, ) -> None: ...


