################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.apache.log4j
import javawrappers.org.apache.log4j.spi
import javawrappers.org.apache.log4j.varia

from jpype.types import *
from typing import Union

from typing import overload

class NullAppender:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def notify(self, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def close(self, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def getInstance(self, ) -> javawrappers.org.apache.log4j.varia.NullAppender: ...


class Roller:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class FallbackErrorHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def activateOptions(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setLogger(self, arg0: javawrappers.org.apache.log4j.Logger, ) -> None: ...
	def setBackupAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JInt], arg3: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def notify(self, ) -> None: ...


class LevelRangeFilter:
	def __init__(self, ): ...
	def getAcceptOnMatch(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAcceptOnMatch(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLevelMax(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def decide(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JInt]: ...
	def getNext(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def notify(self, ) -> None: ...
	def getLevelMin(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def activateOptions(self, ) -> None: ...
	def setLevelMin(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLevelMax(self, ) -> javawrappers.org.apache.log4j.Level: ...


class ReloadingPropertyConfigurator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doConfigure(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExternallyRolledFileAppender:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaxBackupIndex(self, ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBufferSize(self, ) -> Union[int, JInt]: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def setBufferedIO(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getImmediateFlush(self, ) -> Union[int, JBoolean]: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def rollOver(self, ) -> None: ...
	def setPort(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def getMaximumFileSize(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setMaximumFileSize(self, arg0: Union[long, JLong], ) -> None: ...
	def setMaxFileSize(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getBufferedIO(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def setBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setWriter(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getAppend(self, ) -> Union[int, JBoolean]: ...
	def setAppend(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setImmediateFlush(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def setMaxBackupIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class DenyAllFilter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def activateOptions(self, ) -> None: ...
	def setOption(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOptionStrings(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def decide(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JInt]: ...
	def getNext(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def notify(self, ) -> None: ...


class LevelMatchFilter:
	def __init__(self, ): ...
	def getAcceptOnMatch(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAcceptOnMatch(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLevelToMatch(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setLevelToMatch(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def decide(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JInt]: ...
	def getNext(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def notify(self, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class StringMatchFilter:
	def __init__(self, ): ...
	def getAcceptOnMatch(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setOption(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAcceptOnMatch(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def decide(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JInt]: ...
	def getNext(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def notify(self, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getStringToMatch(self, ) -> javawrappers.java.lang.String: ...
	def getOptionStrings(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNext(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setStringToMatch(self, arg0: javawrappers.java.lang.String, ) -> None: ...


