################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.text
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.apache.log4j.or
import javawrappers.org.apache.log4j
import javawrappers.org.apache.log4j.spi

from jpype.types import *
from typing import Union

from typing import overload

class AppenderSkeleton:
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def notifyAll(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def notify(self, ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def close(self, ) -> None: ...


class LogManager:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def resetConfiguration() -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def setRepositorySelector(arg0: javawrappers.org.apache.log4j.spi.RepositorySelector, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getLoggerRepository() -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def exists(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCurrentLoggers() -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def getRootLogger() -> javawrappers.org.apache.log4j.Logger: ...
	@staticmethod
	def shutdown() -> None: ...


class Level:
	def isGreaterOrEqual(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getAllPossiblePriorities() -> JArray(javawrappers.org.apache.log4j.Priority, 1): ...
	@overload
	@staticmethod
	def toLevel(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Level, ) -> javawrappers.org.apache.log4j.Level: ...
	@overload
	@staticmethod
	def toLevel(arg0: Union[int, JInt], arg1: javawrappers.org.apache.log4j.Level, ) -> javawrappers.org.apache.log4j.Level: ...
	@overload
	@staticmethod
	def toLevel(arg0: Union[int, JInt], ) -> javawrappers.org.apache.log4j.Level: ...
	@overload
	@staticmethod
	def toLevel(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Level: ...
	def getSyslogEquivalent(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def toPriority(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Priority: ...
	@overload
	@staticmethod
	def toPriority(arg0: Union[int, JInt], arg1: javawrappers.org.apache.log4j.Priority, ) -> javawrappers.org.apache.log4j.Priority: ...
	@overload
	@staticmethod
	def toPriority(arg0: Union[int, JInt], ) -> javawrappers.org.apache.log4j.Priority: ...
	@overload
	@staticmethod
	def toPriority(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, ) -> javawrappers.org.apache.log4j.Priority: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Category:
	def setResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def assertLog(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isEnabledFor(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def getChainedPriority(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	@staticmethod
	def getRoot() -> javawrappers.org.apache.log4j.Category: ...
	def getResourceBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	def setAdditivity(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def getParent(self, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def callAppenders(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	def getAdditivity(self, ) -> Union[int, JBoolean]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def getDefaultHierarchy() -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	@staticmethod
	def getCurrentCategories() -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def getEffectiveLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def exists(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Category: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	def setPriority(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	@staticmethod
	def shutdown() -> None: ...
	def getHierarchy(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class RollingFileAppender:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaxBackupIndex(self, ) -> Union[int, JInt]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBufferSize(self, ) -> Union[int, JInt]: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def setBufferedIO(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getImmediateFlush(self, ) -> Union[int, JBoolean]: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def rollOver(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def getMaximumFileSize(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setMaximumFileSize(self, arg0: Union[long, JLong], ) -> None: ...
	def setMaxFileSize(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getBufferedIO(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def setBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setWriter(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getAppend(self, ) -> Union[int, JBoolean]: ...
	def setAppend(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setImmediateFlush(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def setMaxBackupIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class PatternLayout:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFooter(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def format(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def getConversionPattern(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ignoresThrowable(self, ) -> Union[int, JBoolean]: ...
	def setConversionPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class Appender:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def close(self, ) -> None: ...


class MDC:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getContext() -> javawrappers.java.util.Hashtable: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def put(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def remove(arg0: javawrappers.java.lang.String, ) -> None: ...


class HTMLLayout:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFooter(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def format(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def setTitle(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLocationInfo(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getTitle(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLocationInfo(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ignoresThrowable(self, ) -> Union[int, JBoolean]: ...


class Priority:
	def isGreaterOrEqual(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toInt(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getAllPossiblePriorities() -> JArray(javawrappers.org.apache.log4j.Priority, 1): ...
	def getSyslogEquivalent(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def toPriority(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Priority: ...
	@overload
	@staticmethod
	def toPriority(arg0: Union[int, JInt], arg1: javawrappers.org.apache.log4j.Priority, ) -> javawrappers.org.apache.log4j.Priority: ...
	@overload
	@staticmethod
	def toPriority(arg0: Union[int, JInt], ) -> javawrappers.org.apache.log4j.Priority: ...
	@overload
	@staticmethod
	def toPriority(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, ) -> javawrappers.org.apache.log4j.Priority: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ConsoleAppender:
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, ): ...
	class SystemOutStream:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...


	class SystemErrStream:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def getImmediateFlush(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def getTarget(self, ) -> javawrappers.java.lang.String: ...
	def getFollow(self, ) -> Union[int, JBoolean]: ...
	@overload
	def flush(self, ) -> None: ...
	@overload
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setTarget(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def setFollow(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	def setWriter(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def setImmediateFlush(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class DailyRollingFileAppender:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBufferSize(self, ) -> Union[int, JInt]: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def setBufferedIO(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getImmediateFlush(self, ) -> Union[int, JBoolean]: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setDatePattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def getBufferedIO(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def setBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setWriter(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getDatePattern(self, ) -> javawrappers.java.lang.String: ...
	def getAppend(self, ) -> Union[int, JBoolean]: ...
	def setAppend(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setImmediateFlush(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class Logger:
	def setResourceBundle(self, arg0: javawrappers.java.util.ResourceBundle, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Priority, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def assertLog(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getLoggerRepository(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isEnabledFor(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	def getChainedPriority(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	@staticmethod
	def getRootLogger() -> javawrappers.org.apache.log4j.Logger: ...
	@staticmethod
	def getRoot() -> javawrappers.org.apache.log4j.Category: ...
	def getResourceBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	def setAdditivity(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def getParent(self, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def callAppenders(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def l7dlog(self, arg0: javawrappers.org.apache.log4j.Priority, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	def getAdditivity(self, ) -> Union[int, JBoolean]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def getDefaultHierarchy() -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...
	@staticmethod
	def getCurrentCategories() -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def getEffectiveLevel(self, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def exists(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Category: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.apache.log4j.Category: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	def setPriority(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	@staticmethod
	def shutdown() -> None: ...
	def getHierarchy(self, ) -> javawrappers.org.apache.log4j.spi.LoggerRepository: ...


class Hierarchy:
	def __init__(self, arg0: javawrappers.org.apache.log4j.Logger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resetConfiguration(self, ) -> None: ...
	def getRendererMap(self, ) -> javawrappers.org.apache.log4j.or.RendererMap: ...
	def addHierarchyEventListener(self, arg0: javawrappers.org.apache.log4j.spi.HierarchyEventListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def setThreshold(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Level, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setRenderer(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.apache.log4j.or.ObjectRenderer, ) -> None: ...
	def setDisableOverride(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCurrentLoggers(self, ) -> javawrappers.java.util.Enumeration: ...
	def isDisabled(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getRootLogger(self, ) -> javawrappers.org.apache.log4j.Logger: ...
	def emitNoAppenderWarning(self, arg0: javawrappers.org.apache.log4j.Category, ) -> None: ...
	def clear(self, ) -> None: ...
	@overload
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	@overload
	def getLogger(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerFactory, ) -> javawrappers.org.apache.log4j.Logger: ...
	def addRenderer(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.org.apache.log4j.or.ObjectRenderer, ) -> None: ...
	def overrideAsNeeded(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireAddAppenderEvent(self, arg0: javawrappers.org.apache.log4j.Category, arg1: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def getCurrentCategories(self, ) -> javawrappers.java.util.Enumeration: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def exists(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Level: ...
	def shutdown(self, ) -> None: ...


class TTCCLayout:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setThreadPrinting(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTimeZone(self, ) -> javawrappers.java.lang.String: ...
	def dateFormat(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getCategoryPrefixing(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTimeZone(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getContextPrinting(self, ) -> Union[int, JBoolean]: ...
	def setOption(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setDateFormat(self, arg0: javawrappers.java.text.DateFormat, arg1: javawrappers.java.util.TimeZone, ) -> None: ...
	@overload
	def setDateFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setDateFormat(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.TimeZone, ) -> None: ...
	def getFooter(self, ) -> javawrappers.java.lang.String: ...
	def format(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def setContextPrinting(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getOptionStrings(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setCategoryPrefixing(self, arg0: Union[int, JBoolean], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def getThreadPrinting(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDateFormat(self, ) -> javawrappers.java.lang.String: ...
	def ignoresThrowable(self, ) -> Union[int, JBoolean]: ...


class NDC:
	class DiagnosticContext:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getDepth() -> Union[int, JInt]: ...
	@staticmethod
	def setMaxDepth(arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def clear() -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def remove() -> None: ...
	@staticmethod
	def push(arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def peek() -> javawrappers.java.lang.String: ...
	@staticmethod
	def pop() -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get() -> javawrappers.java.lang.String: ...
	@staticmethod
	def inherit(arg0: javawrappers.java.util.Stack, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cloneStack() -> javawrappers.java.util.Stack: ...


class AsyncAppender:
	def __init__(self, ): ...
	class Dispatcher:
		def __init__(self, arg0: javawrappers.org.apache.log4j.AsyncAppender, arg1: javawrappers.java.util.List, arg2: javawrappers.java.util.Map, arg3: javawrappers.org.apache.log4j.helpers.AppenderAttachableImpl, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class DiscardSummary:
		def __init__(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ): ...
		def add(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def createEvent(self, ) -> javawrappers.org.apache.log4j.spi.LoggingEvent: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setBlocking(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getBufferSize(self, ) -> Union[int, JInt]: ...
	def run(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	def getLocationInfo(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getBlocking(self, ) -> Union[int, JBoolean]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def createEvent(self, ) -> javawrappers.org.apache.log4j.spi.LoggingEvent: ...
	def close(self, ) -> None: ...
	def add(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def setBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def setLocationInfo(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class FileAppender:
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getBufferSize(self, ) -> Union[int, JInt]: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def setBufferedIO(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getImmediateFlush(self, ) -> Union[int, JBoolean]: ...
	def getFile(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def getBufferedIO(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def setBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setWriter(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getAppend(self, ) -> Union[int, JBoolean]: ...
	def setAppend(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setImmediateFlush(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setFile(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class WriterAppender:
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.io.OutputStream, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.Layout, arg1: javawrappers.java.io.Writer, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setEncoding(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def getImmediateFlush(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def close(self, ) -> None: ...
	def setWriter(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def setImmediateFlush(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class BasicConfigurator:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def resetConfiguration() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def configure(arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	@staticmethod
	def configure() -> None: ...
	def notify(self, ) -> None: ...


class SimpleLayout:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def activateOptions(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFooter(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def format(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ignoresThrowable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...


class Layout:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def activateOptions(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getFooter(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def format(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ignoresThrowable(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...


class PropertyConfigurator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def configureAndWatch(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def configureAndWatch(arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def doConfigure(self, arg0: javawrappers.java.util.Properties, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...
	@overload
	def doConfigure(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...
	@overload
	def doConfigure(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def configure(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def configure(arg0: javawrappers.java.util.Properties, ) -> None: ...
	@overload
	@staticmethod
	def configure(arg0: javawrappers.java.net.URL, ) -> None: ...
	def notify(self, ) -> None: ...


