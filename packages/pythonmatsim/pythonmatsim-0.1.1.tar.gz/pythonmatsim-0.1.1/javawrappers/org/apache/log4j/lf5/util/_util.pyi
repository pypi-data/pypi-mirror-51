################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.text
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.apache.log4j.lf5.util
import javawrappers.org.apache.log4j.lf5.viewer
import javawrappers.org.apache.log4j.lf5

from jpype.types import *
from typing import Union

from typing import overload

class AdapterLogRecord:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.java.lang.String: ...
	def getSequenceNumber(self, ) -> Union[long, JLong]: ...
	def getThrown(self, ) -> javawrappers.java.lang.Throwable: ...
	def notifyAll(self, ) -> None: ...
	def isFatal(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setMillis(self, arg0: Union[long, JLong], ) -> None: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> None: ...
	def setThrownStackTrace(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getThreadDescription(self, ) -> javawrappers.java.lang.String: ...
	def hasThrown(self, ) -> Union[int, JBoolean]: ...
	def setLocation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCategory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getSevereLevel() -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	@staticmethod
	def resetSequenceNumber() -> None: ...
	def getThrownStackTrace(self, ) -> javawrappers.java.lang.String: ...
	def setThrown(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getCategory(self, ) -> javawrappers.java.lang.String: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def setNDC(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setMessage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isSevereLevel(self, ) -> Union[int, JBoolean]: ...
	def getMillis(self, ) -> Union[long, JLong]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	def setThreadDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setSequenceNumber(self, arg0: Union[long, JLong], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setSevereLevel(arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> None: ...
	def getNDC(self, ) -> javawrappers.java.lang.String: ...


class StreamUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def copyThenClose(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	@staticmethod
	def copy(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.OutputStream, arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getBytes(arg0: javawrappers.java.io.InputStream, ) -> JArray(JByte, 1): ...


class DateFormatManager:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def notifyAll(self, ) -> None: ...
	def getDateFormatInstance(self, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getOutputFormat(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def setPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setOutputFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPattern(self, ) -> javawrappers.java.lang.String: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def setDateFormatInstance(self, arg0: javawrappers.java.text.DateFormat, ) -> None: ...


class LogMonitorAdapter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setDefaultLevel(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.lf5.LogLevel, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.lf5.LogLevel, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.lf5.LogLevel, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.lf5.LogLevel, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getDefaultLevel(self, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	def setMaxNumberOfRecords(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.org.apache.log4j.lf5.LogLevel, 1), ) -> javawrappers.org.apache.log4j.lf5.util.LogMonitorAdapter: ...
	@overload
	@staticmethod
	def newInstance(arg0: Union[int, JInt], ) -> javawrappers.org.apache.log4j.lf5.util.LogMonitorAdapter: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.util.List, ) -> javawrappers.org.apache.log4j.lf5.util.LogMonitorAdapter: ...
	def notify(self, ) -> None: ...
	def addMessage(self, arg0: javawrappers.org.apache.log4j.lf5.LogRecord, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSevereLevel(self, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSevereLevel(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> None: ...


class LogFileParser:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def run(self, ) -> None: ...
	def parse(self, arg0: javawrappers.org.apache.log4j.lf5.viewer.LogBrokerMonitor, ) -> None: ...
	def notify(self, ) -> None: ...


class Resource:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def getInputStreamReader(self, ) -> javawrappers.java.io.InputStreamReader: ...


class ResourceUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getResourceAsURL(arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.apache.log4j.lf5.util.Resource, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getResourceAsStream(arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.apache.log4j.lf5.util.Resource, ) -> javawrappers.java.io.InputStream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


