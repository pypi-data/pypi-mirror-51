################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.apache.log4j.lf5.viewer
import javawrappers.org.apache.log4j
import javawrappers.org.apache.log4j.spi
import javawrappers.org.apache.log4j.lf5

from jpype.types import *
from typing import Union

from typing import overload

class LogRecordFilter:
	def passes(self, arg0: javawrappers.org.apache.log4j.lf5.LogRecord, ) -> Union[int, JBoolean]: ...


class StartLogFactor5:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class Log4JLogRecord:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.java.lang.String: ...
	def getSequenceNumber(self, ) -> Union[long, JLong]: ...
	def getThrown(self, ) -> javawrappers.java.lang.Throwable: ...
	def notifyAll(self, ) -> None: ...
	def isFatal(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setMillis(self, arg0: Union[long, JLong], ) -> None: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> None: ...
	def getThreadDescription(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setThrownStackTrace(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setThrownStackTrace(self, arg0: javawrappers.org.apache.log4j.spi.ThrowableInformation, ) -> None: ...
	def hasThrown(self, ) -> Union[int, JBoolean]: ...
	def setLocation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCategory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def resetSequenceNumber() -> None: ...
	def getThrownStackTrace(self, ) -> javawrappers.java.lang.String: ...
	def setThrown(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getCategory(self, ) -> javawrappers.java.lang.String: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def setNDC(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setMessage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isSevereLevel(self, ) -> Union[int, JBoolean]: ...
	def getMillis(self, ) -> Union[long, JLong]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	def setThreadDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setSequenceNumber(self, arg0: Union[long, JLong], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNDC(self, ) -> javawrappers.java.lang.String: ...


class LF5Appender:
	@overload
	def __init__(self, arg0: javawrappers.org.apache.log4j.lf5.viewer.LogBrokerMonitor, ): ...
	@overload
	def __init__(self, ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setMaxNumberOfRecords(self, arg0: Union[int, JInt], ) -> None: ...
	def setThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def clearFilters(self, ) -> None: ...
	def setLayout(self, arg0: javawrappers.org.apache.log4j.Layout, ) -> None: ...
	def notify(self, ) -> None: ...
	def activateOptions(self, ) -> None: ...
	def getErrorHandler(self, ) -> javawrappers.org.apache.log4j.spi.ErrorHandler: ...
	def getLayout(self, ) -> javawrappers.org.apache.log4j.Layout: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doAppend(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def close(self, ) -> None: ...
	def getFirstFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def getFilter(self, ) -> javawrappers.org.apache.log4j.spi.Filter: ...
	def setCallSystemExitOnClose(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.apache.log4j.lf5.LF5Appender, ) -> Union[int, JBoolean]: ...
	def isAsSevereAsThreshold(self, arg0: javawrappers.org.apache.log4j.Priority, ) -> Union[int, JBoolean]: ...
	def addFilter(self, arg0: javawrappers.org.apache.log4j.spi.Filter, ) -> None: ...
	def requiresLayout(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finalize(self, ) -> None: ...
	def getThreshold(self, ) -> javawrappers.org.apache.log4j.Priority: ...
	def getLogBrokerMonitor(self, ) -> javawrappers.org.apache.log4j.lf5.viewer.LogBrokerMonitor: ...
	def append(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...


class LogRecord:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.java.lang.String: ...
	def getSequenceNumber(self, ) -> Union[long, JLong]: ...
	def getThrown(self, ) -> javawrappers.java.lang.Throwable: ...
	def notifyAll(self, ) -> None: ...
	def isFatal(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setMillis(self, arg0: Union[long, JLong], ) -> None: ...
	def setLevel(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> None: ...
	def setThrownStackTrace(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getThreadDescription(self, ) -> javawrappers.java.lang.String: ...
	def hasThrown(self, ) -> Union[int, JBoolean]: ...
	def setLocation(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setCategory(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def resetSequenceNumber() -> None: ...
	def getThrownStackTrace(self, ) -> javawrappers.java.lang.String: ...
	def setThrown(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getCategory(self, ) -> javawrappers.java.lang.String: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def setNDC(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isSevereLevel(self, ) -> Union[int, JBoolean]: ...
	def setMessage(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMillis(self, ) -> Union[long, JLong]: ...
	def getLevel(self, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	def setThreadDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setSequenceNumber(self, arg0: Union[long, JLong], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNDC(self, ) -> javawrappers.java.lang.String: ...


class PassingLogRecordFilter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def passes(self, arg0: javawrappers.org.apache.log4j.lf5.LogRecord, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DefaultLF5Configurator:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def doConfigure(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def configure() -> None: ...
	def notify(self, ) -> None: ...


class LogLevel:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	def setLogLevelColorMap(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, arg1: javawrappers.java.awt.Color, ) -> None: ...
	@staticmethod
	def getAllDefaultLevels() -> javawrappers.java.util.List: ...
	@staticmethod
	def getLog4JLevels() -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def encompasses(self, arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> Union[int, JBoolean]: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getJdk14Levels() -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getLogLevelColorMap() -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def resetLogLevelColorMap() -> None: ...
	@overload
	@staticmethod
	def register(arg0: JArray(javawrappers.org.apache.log4j.lf5.LogLevel, 1), ) -> None: ...
	@overload
	@staticmethod
	def register(arg0: javawrappers.org.apache.log4j.lf5.LogLevel, ) -> javawrappers.org.apache.log4j.lf5.LogLevel: ...
	@overload
	@staticmethod
	def register(arg0: javawrappers.java.util.List, ) -> None: ...


class AppenderFinalizer:
	def __init__(self, arg0: javawrappers.org.apache.log4j.lf5.viewer.LogBrokerMonitor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LogLevelFormatException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


