################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.text
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.org.apache.log4j.helpers
import javawrappers.java.util.function
import javawrappers.org.apache.log4j
import javawrappers.org.apache.log4j.spi

from jpype.types import *
from typing import Union

from typing import overload

class FileWatchdog:
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getThreadGroup(self, ) -> javawrappers.java.lang.ThreadGroup: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAllStackTraces() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def onSpinWait() -> None: ...
	def getId(self, ) -> Union[long, JLong]: ...
	def run(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setContextClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def sleep(arg0: Union[long, JLong], ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isDaemon(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def yield_() -> None: ...
	def interrupt(self, ) -> None: ...
	@staticmethod
	def enumerate(arg0: JArray(javawrappers.java.lang.Thread, 1), ) -> Union[int, JInt]: ...
	@overload
	def join(self, ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def join(self, arg0: Union[long, JLong], ) -> None: ...
	def setDelay(self, arg0: Union[long, JLong], ) -> None: ...
	@staticmethod
	def activeCount() -> Union[int, JInt]: ...
	def resume(self, ) -> None: ...
	def suspend(self, ) -> None: ...
	@staticmethod
	def currentThread() -> javawrappers.java.lang.Thread: ...
	def setUncaughtExceptionHandler(self, arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def isInterrupted(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def dumpStack() -> None: ...
	@staticmethod
	def setDefaultUncaughtExceptionHandler(arg0: javawrappers.java.lang.Thread.UncaughtExceptionHandler, ) -> None: ...
	def start(self, ) -> None: ...
	@staticmethod
	def interrupted() -> Union[int, JBoolean]: ...
	def getUncaughtExceptionHandler(self, ) -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def checkAccess(self, ) -> None: ...
	@staticmethod
	def getDefaultUncaughtExceptionHandler() -> javawrappers.java.lang.Thread.UncaughtExceptionHandler: ...
	def isAlive(self, ) -> Union[int, JBoolean]: ...
	def setDaemon(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def holdsLock(arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getState(self, ) -> javawrappers.java.lang.Thread.State: ...
	def stop(self, ) -> None: ...
	def getContextClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def countStackFrames(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPriority(self, arg0: Union[int, JInt], ) -> None: ...


class AbsoluteTimeDateFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class PatternConverter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AppenderAttachableImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def removeAllAppenders(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAllAppenders(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	def appendLoopOnAppenders(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> Union[int, JInt]: ...
	@overload
	def removeAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	@overload
	def removeAppender(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def addAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isAttached(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> Union[int, JBoolean]: ...
	def getAppender(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.apache.log4j.Appender: ...


class DateLayout:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setOption(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setDateFormat(self, arg0: javawrappers.java.text.DateFormat, arg1: javawrappers.java.util.TimeZone, ) -> None: ...
	@overload
	def setDateFormat(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setDateFormat(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.TimeZone, ) -> None: ...
	def getFooter(self, ) -> javawrappers.java.lang.String: ...
	def getTimeZone(self, ) -> javawrappers.java.lang.String: ...
	def dateFormat(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def format(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeader(self, ) -> javawrappers.java.lang.String: ...
	def activateOptions(self, ) -> None: ...
	def getOptionStrings(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setTimeZone(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ignoresThrowable(self, ) -> Union[int, JBoolean]: ...
	def getDateFormat(self, ) -> javawrappers.java.lang.String: ...


class FormattingInfo:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class QuietWriter:
	def __init__(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.apache.log4j.spi.ErrorHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class Loader:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def getResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def getResource(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def loadClass(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def isJava1() -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DateTimeDateFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class Transform:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def escapeTags(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def appendEscapingCDATA(arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class CyclicBuffer:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def add(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaxSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.org.apache.log4j.spi.LoggingEvent: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.apache.log4j.spi.LoggingEvent: ...
	def length(self, ) -> Union[int, JInt]: ...
	def resize(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BoundedFIFO:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def wasEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def getMaxSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.org.apache.log4j.spi.LoggingEvent: ...
	def resize(self, arg0: Union[int, JInt], ) -> None: ...
	def wasFull(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFull(self, ) -> Union[int, JBoolean]: ...


class SyslogWriter:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class NullEnumeration:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.org.apache.log4j.helpers.NullEnumeration: ...
	def notify(self, ) -> None: ...
	def nextElement(self, ) -> javawrappers.java.lang.Object: ...


class OptionConverter:
	@staticmethod
	def getSystemProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toInt(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def concatanateArrays(arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def findAndSubst(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Properties, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def toFileSize(arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def selectAndConfigure(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.apache.log4j.spi.LoggerRepository, ) -> None: ...
	@staticmethod
	def toLevel(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.apache.log4j.Level, ) -> javawrappers.org.apache.log4j.Level: ...
	@staticmethod
	def toBoolean(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def convertSpecialChars(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def instantiateByClassName(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def instantiateByKey(arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def substVars(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Properties, ) -> javawrappers.java.lang.String: ...


class OnlyOnceErrorHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def activateOptions(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setLogger(self, arg0: javawrappers.org.apache.log4j.Logger, ) -> None: ...
	def setBackupAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setAppender(self, arg0: javawrappers.org.apache.log4j.Appender, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JInt], arg3: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def notify(self, ) -> None: ...


class RelativeTimeDateFormat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class ISO8601DateFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class SyslogQuietWriter:
	def __init__(self, arg0: javawrappers.java.io.Writer, arg1: Union[int, JInt], arg2: javawrappers.org.apache.log4j.spi.ErrorHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def setLevel(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSyslogFacility(self, arg0: Union[int, JInt], ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class CountingQuietWriter:
	def __init__(self, arg0: javawrappers.java.io.Writer, arg1: javawrappers.org.apache.log4j.spi.ErrorHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setErrorHandler(self, arg0: javawrappers.org.apache.log4j.spi.ErrorHandler, ) -> None: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCount(self, ) -> Union[long, JLong]: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	def setCount(self, arg0: Union[long, JLong], ) -> None: ...


class ThreadLocalMap:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def withInitial(arg0: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.lang.ThreadLocal: ...
	def childValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class PatternParser:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class CategoryPatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ClassNamePatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class NamedPatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LocationPatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class MDCPatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class DatePatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LiteralPatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BasicPatternConverter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spacePad(self, arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.StringBuffer, arg1: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	@overload
	def convert(self, arg0: javawrappers.org.apache.log4j.spi.LoggingEvent, ) -> javawrappers.java.lang.String: ...
	def parse(self, ) -> javawrappers.org.apache.log4j.helpers.PatternConverter: ...
	def notify(self, ) -> None: ...


class LogLog:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def warn(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	@staticmethod
	def warn(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def debug(arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def debug(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def setInternalDebugging(arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setQuietMode(arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def error(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	@staticmethod
	def error(arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


