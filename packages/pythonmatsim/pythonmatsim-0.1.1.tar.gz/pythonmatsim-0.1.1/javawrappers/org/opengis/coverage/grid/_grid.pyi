################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.awt.image
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.org.opengis.parameter
import javawrappers.org.opengis.referencing.crs
import javawrappers.java.awt.image.renderable
import javawrappers.org.opengis.coverage
import javawrappers.org.opengis.coverage.grid

from jpype.types import *
from typing import Union

from typing import overload

class GridGeometry:
	def getGridRange(self, ) -> javawrappers.org.opengis.coverage.grid.GridEnvelope: ...
	def getGridToCRS(self, ) -> javawrappers.org.opengis.referencing.operation.MathTransform: ...


class InvalidRangeException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GridNotEditableException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GridEnvelope:
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getLow(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getLow(self, ) -> javawrappers.org.opengis.coverage.grid.GridCoordinates: ...
	@overload
	def getHigh(self, ) -> javawrappers.org.opengis.coverage.grid.GridCoordinates: ...
	@overload
	def getHigh(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...


class GridCoverageReader:
	@overload
	def getMetadataNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getMetadataNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def read(self, arg0: JArray(javawrappers.org.opengis.parameter.GeneralParameterValue, 1), ) -> javawrappers.org.opengis.coverage.grid.GridCoverage: ...
	@overload
	def read(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.org.opengis.parameter.GeneralParameterValue, 1), ) -> javawrappers.org.opengis.coverage.grid.GridCoverage: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getGridCoverageCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getMetadataValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getMetadataValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getCurrentSubname(self, ) -> javawrappers.java.lang.String: ...
	def skip(self, ) -> None: ...
	def dispose(self, ) -> None: ...
	def getFormat(self, ) -> javawrappers.org.opengis.coverage.grid.Format: ...
	def listSubNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getGridCoverageNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hasMoreGridCoverages(self, ) -> Union[int, JBoolean]: ...


class GridCoordinates:
	def getCoordinateValue(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def setCoordinateValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getCoordinateValues(self, ) -> JArray(Union[int, JInt], 1): ...


class GridCoverage:
	def getNumSampleDimensions(self, ) -> Union[int, JInt]: ...
	def getRangeType(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getNumOverviews(self, ) -> Union[int, JInt]: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def isDataEditable(self, ) -> Union[int, JBoolean]: ...
	def getSampleDimension(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.coverage.SampleDimension: ...
	def getRenderedImage(self, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getSources(self, ) -> javawrappers.java.util.List: ...
	def getGridGeometry(self, ) -> javawrappers.org.opengis.coverage.grid.GridGeometry: ...
	def getOptimalDataBlockSizes(self, ) -> JArray(Union[int, JInt], 1): ...
	def getOverviewGridGeometry(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.coverage.grid.GridGeometry: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getOverview(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.coverage.grid.GridCoverage: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Set: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def getRenderableImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.renderable.RenderableImage: ...


class Format:
	def getVersion(self, ) -> javawrappers.java.lang.String: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getWriteParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getReadParameters(self, ) -> javawrappers.org.opengis.parameter.ParameterValueGroup: ...
	def getDocURL(self, ) -> javawrappers.java.lang.String: ...
	def getVendor(self, ) -> javawrappers.java.lang.String: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...


class GridCoverageWriter:
	def getMetadataNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setCurrentSubname(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getDestination(self, ) -> javawrappers.java.lang.Object: ...
	def dispose(self, ) -> None: ...
	def getFormat(self, ) -> javawrappers.org.opengis.coverage.grid.Format: ...
	def setMetadataValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def write(self, arg0: javawrappers.org.opengis.coverage.grid.GridCoverage, arg1: JArray(javawrappers.org.opengis.parameter.GeneralParameterValue, 1), ) -> None: ...


