################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.opengis.geometry
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.crs
import javawrappers.java.awt.image.renderable
import javawrappers.org.opengis.coverage

from jpype.types import *
from typing import Union

from typing import overload

class PaletteInterpretation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.coverage.PaletteInterpretation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.coverage.PaletteInterpretation, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.coverage.PaletteInterpretation, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SampleDimension:
	def getPaletteInterpretation(self, ) -> javawrappers.org.opengis.coverage.PaletteInterpretation: ...
	def getColorInterpretation(self, ) -> javawrappers.org.opengis.coverage.ColorInterpretation: ...
	def getNoDataValues(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getScale(self, ) -> Union[float, JDouble]: ...
	def getOffset(self, ) -> Union[float, JDouble]: ...
	def getSampleDimensionType(self, ) -> javawrappers.org.opengis.coverage.SampleDimensionType: ...
	def getUnits(self, ) -> javawrappers.javax.measure.Unit: ...
	def getMaximumValue(self, ) -> Union[float, JDouble]: ...
	def getPalette(self, ) -> JArray(JArray(Union[int, JInt], 1), 1): ...
	def getDescription(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getCategoryNames(self, ) -> JArray(javawrappers.org.opengis.util.InternationalString, 1): ...
	def getMinimumValue(self, ) -> Union[float, JDouble]: ...


class SampleDimensionType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.coverage.SampleDimensionType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.coverage.SampleDimensionType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.coverage.SampleDimensionType, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PointOutsideCoverageException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setCoverage(self, arg0: javawrappers.org.opengis.coverage.Coverage, ) -> None: ...
	def getOffendingLocation(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def setOffendingLocation(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoverage(self, ) -> javawrappers.org.opengis.coverage.Coverage: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class InterpolationMethod:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.coverage.InterpolationMethod: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.coverage.InterpolationMethod, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.coverage.InterpolationMethod, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Coverage:
	def getNumSampleDimensions(self, ) -> Union[int, JInt]: ...
	def getRangeType(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getSampleDimension(self, arg0: Union[int, JInt], ) -> javawrappers.org.opengis.coverage.SampleDimension: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getSources(self, ) -> javawrappers.java.util.List: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Set: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[int, JBoolean], 1), ) -> JArray(Union[int, JBoolean], 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def evaluate(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, arg1: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def getRenderableImage(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.renderable.RenderableImage: ...


class CannotEvaluateException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def setCoverage(self, arg0: javawrappers.org.opengis.coverage.Coverage, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoverage(self, ) -> javawrappers.org.opengis.coverage.Coverage: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ColorInterpretation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.coverage.ColorInterpretation: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.coverage.ColorInterpretation, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.coverage.ColorInterpretation, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


