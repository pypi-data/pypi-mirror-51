################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.util
import javawrappers.org.opengis.metadata.content
import javawrappers.org.opengis.metadata

from jpype.types import *
from typing import Union

from typing import overload

class ImagingCondition:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.content.ImagingCondition: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.metadata.content.ImagingCondition, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.metadata.content.ImagingCondition, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class CoverageDescription:
	def getDimensions(self, ) -> javawrappers.java.util.Collection: ...
	def getAttributeDescription(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getContentType(self, ) -> javawrappers.org.opengis.metadata.content.CoverageContentType: ...


class Band:
	def getDescriptor(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getMinValue(self, ) -> javawrappers.java.lang.Double: ...
	def getPeakResponse(self, ) -> javawrappers.java.lang.Double: ...
	def getMaxValue(self, ) -> javawrappers.java.lang.Double: ...
	def getOffset(self, ) -> javawrappers.java.lang.Double: ...
	def getScaleFactor(self, ) -> javawrappers.java.lang.Double: ...
	def getUnits(self, ) -> javawrappers.javax.measure.Unit: ...
	def getSequenceIdentifier(self, ) -> javawrappers.org.opengis.util.MemberName: ...
	def getBitsPerValue(self, ) -> javawrappers.java.lang.Integer: ...
	def getToneGradation(self, ) -> javawrappers.java.lang.Integer: ...


class CoverageContentType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.content.CoverageContentType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.metadata.content.CoverageContentType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.metadata.content.CoverageContentType, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class RangeDimension:
	def getDescriptor(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getSequenceIdentifier(self, ) -> javawrappers.org.opengis.util.MemberName: ...


class FeatureCatalogueDescription:
	def getFeatureTypes(self, ) -> javawrappers.java.util.Collection: ...
	def getLanguages(self, ) -> javawrappers.java.util.Collection: ...
	def getFeatureCatalogueCitations(self, ) -> javawrappers.java.util.Collection: ...
	def isCompliant(self, ) -> javawrappers.java.lang.Boolean: ...
	def isIncludedWithDataset(self, ) -> Union[int, JBoolean]: ...


class ImageDescription:
	def getTriangulationIndicator(self, ) -> javawrappers.java.lang.Boolean: ...
	def isFilmDistortionInformationAvailable(self, ) -> javawrappers.java.lang.Boolean: ...
	def isRadiometricCalibrationDataAvailable(self, ) -> javawrappers.java.lang.Boolean: ...
	def getAttributeDescription(self, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getIlluminationAzimuthAngle(self, ) -> javawrappers.java.lang.Double: ...
	def getDimensions(self, ) -> javawrappers.java.util.Collection: ...
	def getIlluminationElevationAngle(self, ) -> javawrappers.java.lang.Double: ...
	def isCameraCalibrationInformationAvailable(self, ) -> javawrappers.java.lang.Boolean: ...
	def getImageQualityCode(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def getCompressionGenerationQuantity(self, ) -> javawrappers.java.lang.Integer: ...
	def getProcessingLevelCode(self, ) -> javawrappers.org.opengis.metadata.Identifier: ...
	def getCloudCoverPercentage(self, ) -> javawrappers.java.lang.Double: ...
	def getContentType(self, ) -> javawrappers.org.opengis.metadata.content.CoverageContentType: ...
	def getImagingCondition(self, ) -> javawrappers.org.opengis.metadata.content.ImagingCondition: ...
	def isLensDistortionInformationAvailable(self, ) -> javawrappers.java.lang.Boolean: ...


class ContentInformation:


