################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.org.opengis.util
import javawrappers.org.opengis.metadata.distribution
import javawrappers.org.opengis.metadata.citation

from jpype.types import *
from typing import Union

from typing import overload

class StandardOrderProcess:
	def getOrderingInstructions(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getTurnaround(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getFees(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getPlannedAvailableDateTime(self, ) -> javawrappers.java.util.Date: ...


class MediumFormat:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.distribution.MediumFormat: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.metadata.distribution.MediumFormat, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.metadata.distribution.MediumFormat, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class MediumName:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.metadata.distribution.MediumName: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.metadata.distribution.MediumName, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.metadata.distribution.MediumName, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Medium:
	def getMediumFormats(self, ) -> javawrappers.java.util.Collection: ...
	def getName(self, ) -> javawrappers.org.opengis.metadata.distribution.MediumName: ...
	def getDensityUnits(self, ) -> javawrappers.javax.measure.Unit: ...
	def getDensities(self, ) -> javawrappers.java.util.Collection: ...
	def getMediumNote(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getVolumes(self, ) -> javawrappers.java.lang.Integer: ...


class Distributor:
	def getDistributorTransferOptions(self, ) -> javawrappers.java.util.Collection: ...
	def getDistributorContact(self, ) -> javawrappers.org.opengis.metadata.citation.ResponsibleParty: ...
	def getDistributorFormats(self, ) -> javawrappers.java.util.Collection: ...
	def getDistributionOrderProcesses(self, ) -> javawrappers.java.util.Collection: ...


class Format:
	def getVersion(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getName(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getSpecification(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getAmendmentNumber(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getFileDecompressionTechnique(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getFormatDistributors(self, ) -> javawrappers.java.util.Collection: ...


class DigitalTransferOptions:
	def getUnitsOfDistribution(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getOnLines(self, ) -> javawrappers.java.util.Collection: ...
	def getTransferSize(self, ) -> javawrappers.java.lang.Double: ...
	def getOffLine(self, ) -> javawrappers.org.opengis.metadata.distribution.Medium: ...


class Distribution:
	def getDistributionFormats(self, ) -> javawrappers.java.util.Collection: ...
	def getDistributors(self, ) -> javawrappers.java.util.Collection: ...
	def getTransferOptions(self, ) -> javawrappers.java.util.Collection: ...


