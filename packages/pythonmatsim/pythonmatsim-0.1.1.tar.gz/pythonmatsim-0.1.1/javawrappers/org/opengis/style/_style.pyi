################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.org.opengis.filter
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.opengis.util
import javawrappers.org.opengis.filter.expression
import javawrappers.org.opengis.style
import javawrappers.org.opengis.metadata.citation
import javawrappers.javax.swing

from jpype.types import *
from typing import Union

from typing import overload

class SemanticType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.style.SemanticType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.style.SemanticType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.style.SemanticType, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Font:
	def getSize(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getStyle(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getFamily(self, ) -> javawrappers.java.util.List: ...
	def getWeight(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class RasterSymbolizer:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getColorMap(self, ) -> javawrappers.org.opengis.style.ColorMap: ...
	def getContrastEnhancement(self, ) -> javawrappers.org.opengis.style.ContrastEnhancement: ...
	def getShadedRelief(self, ) -> javawrappers.org.opengis.style.ShadedRelief: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getOverlapBehavior(self, ) -> javawrappers.org.opengis.style.OverlapBehavior: ...
	def getImageOutline(self, ) -> javawrappers.org.opengis.style.Symbolizer: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getChannelSelection(self, ) -> javawrappers.org.opengis.style.ChannelSelection: ...


class GraphicLegend:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.style.AnchorPoint: ...
	def getSize(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def graphicalSymbols(self, ) -> javawrappers.java.util.List: ...
	def getRotation(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDisplacement(self, ) -> javawrappers.org.opengis.style.Displacement: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ExternalMark:
	def getInlineContent(self, ) -> javawrappers.javax.swing.Icon: ...
	def getOnlineResource(self, ) -> javawrappers.org.opengis.metadata.citation.OnLineResource: ...
	def getMarkIndex(self, ) -> Union[int, JInt]: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Stroke:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getLineCap(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDashOffset(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getGraphicStroke(self, ) -> javawrappers.org.opengis.style.GraphicStroke: ...
	def getColor(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDashArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	def getLineJoin(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getWidth(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getGraphicFill(self, ) -> javawrappers.org.opengis.style.GraphicFill: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PointSymbolizer:
	def getGraphic(self, ) -> javawrappers.org.opengis.style.Graphic: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ExternalGraphic:
	def getColorReplacements(self, ) -> javawrappers.java.util.Collection: ...
	def getInlineContent(self, ) -> javawrappers.javax.swing.Icon: ...
	def getOnlineResource(self, ) -> javawrappers.org.opengis.metadata.citation.OnLineResource: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class LabelPlacement:
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Style:
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getDefaultSpecification(self, ) -> javawrappers.org.opengis.style.Symbolizer: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def featureTypeStyles(self, ) -> javawrappers.java.util.List: ...


class GraphicFill:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.style.AnchorPoint: ...
	def getSize(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def graphicalSymbols(self, ) -> javawrappers.java.util.List: ...
	def getRotation(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDisplacement(self, ) -> javawrappers.org.opengis.style.Displacement: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ContrastEnhancement:
	def getGammaValue(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getMethod(self, ) -> javawrappers.org.opengis.style.ContrastMethod: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Rule:
	def getFilter(self, ) -> javawrappers.org.opengis.filter.Filter: ...
	def getLegend(self, ) -> javawrappers.org.opengis.style.GraphicLegend: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getMinScaleDenominator(self, ) -> Union[float, JDouble]: ...
	def symbolizers(self, ) -> javawrappers.java.util.List: ...
	def getOnlineResource(self, ) -> javawrappers.org.opengis.metadata.citation.OnLineResource: ...
	def isElseFilter(self, ) -> Union[int, JBoolean]: ...
	def getMaxScaleDenominator(self, ) -> Union[float, JDouble]: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class LinePlacement:
	def isGeneralizeLine(self, ) -> Union[int, JBoolean]: ...
	def getInitialGap(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getGap(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def IsAligned(self, ) -> Union[int, JBoolean]: ...
	def getPerpendicularOffset(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def isRepeated(self, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class LineSymbolizer:
	def getStroke(self, ) -> javawrappers.org.opengis.style.Stroke: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getPerpendicularOffset(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ColorReplacement:
	def getRecoding(self, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ContrastMethod:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.style.ContrastMethod: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.style.ContrastMethod, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.style.ContrastMethod, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class GraphicalSymbol:


class ColorMap:
	def getFunction(self, ) -> javawrappers.org.opengis.filter.expression.Function: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TextSymbolizer:
	def getLabelPlacement(self, ) -> javawrappers.org.opengis.style.LabelPlacement: ...
	def getHalo(self, ) -> javawrappers.org.opengis.style.Halo: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getLabel(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getFill(self, ) -> javawrappers.org.opengis.style.Fill: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getFont(self, ) -> javawrappers.org.opengis.style.Font: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Fill:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getColor(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getGraphicFill(self, ) -> javawrappers.org.opengis.style.GraphicFill: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Mark:
	def getWellKnownName(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getStroke(self, ) -> javawrappers.org.opengis.style.Stroke: ...
	def getFill(self, ) -> javawrappers.org.opengis.style.Fill: ...
	def getExternalMark(self, ) -> javawrappers.org.opengis.style.ExternalMark: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Displacement:
	def getDisplacementX(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDisplacementY(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class OverlapBehavior:
	LATEST_ON_TOP: OverlapBehavior = ...
	EARLIEST_ON_TOP: OverlapBehavior = ...
	AVERAGE: OverlapBehavior = ...
	RANDOM: OverlapBehavior = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.style.OverlapBehavior: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.style.OverlapBehavior, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Symbolizer:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class StyleFactory:
	def anchorPoint(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.AnchorPoint: ...
	def graphicStroke(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.style.AnchorPoint, arg5: javawrappers.org.opengis.style.Displacement, arg6: javawrappers.org.opengis.filter.expression.Expression, arg7: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.GraphicStroke: ...
	def description(self, arg0: javawrappers.org.opengis.util.InternationalString, arg1: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.style.Description: ...
	def rule(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.style.Description, arg2: javawrappers.org.opengis.style.GraphicLegend, arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.util.List, arg6: javawrappers.org.opengis.filter.Filter, ) -> javawrappers.org.opengis.style.Rule: ...
	def halo(self, arg0: javawrappers.org.opengis.style.Fill, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Halo: ...
	def textSymbolizer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.style.Description, arg3: javawrappers.javax.measure.Unit, arg4: javawrappers.org.opengis.filter.expression.Expression, arg5: javawrappers.org.opengis.style.Font, arg6: javawrappers.org.opengis.style.LabelPlacement, arg7: javawrappers.org.opengis.style.Halo, arg8: javawrappers.org.opengis.style.Fill, ) -> javawrappers.org.opengis.style.TextSymbolizer: ...
	def colorReplacement(self, arg0: javawrappers.org.opengis.filter.expression.Expression, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.ColorReplacement: ...
	@overload
	def channelSelection(self, arg0: javawrappers.org.opengis.style.SelectedChannelType, arg1: javawrappers.org.opengis.style.SelectedChannelType, arg2: javawrappers.org.opengis.style.SelectedChannelType, ) -> javawrappers.org.opengis.style.ChannelSelection: ...
	@overload
	def channelSelection(self, arg0: javawrappers.org.opengis.style.SelectedChannelType, ) -> javawrappers.org.opengis.style.ChannelSelection: ...
	def featureTypeStyle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.style.Description, arg2: javawrappers.org.opengis.filter.Id, arg3: javawrappers.java.util.Set, arg4: javawrappers.java.util.Set, arg5: javawrappers.java.util.List, ) -> javawrappers.org.opengis.style.FeatureTypeStyle: ...
	@overload
	def externalMark(self, arg0: javawrappers.org.opengis.metadata.citation.OnLineResource, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.org.opengis.style.ExternalMark: ...
	@overload
	def externalMark(self, arg0: javawrappers.javax.swing.Icon, ) -> javawrappers.org.opengis.style.ExternalMark: ...
	def displacement(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Displacement: ...
	def lineSymbolizer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.style.Description, arg3: javawrappers.javax.measure.Unit, arg4: javawrappers.org.opengis.style.Stroke, arg5: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.LineSymbolizer: ...
	def graphic(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.style.AnchorPoint, arg5: javawrappers.org.opengis.style.Displacement, ) -> javawrappers.org.opengis.style.Graphic: ...
	def extensionSymbolizer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.style.Description, arg3: javawrappers.javax.measure.Unit, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.util.Map, ) -> javawrappers.org.opengis.style.ExtensionSymbolizer: ...
	def polygonSymbolizer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.style.Description, arg3: javawrappers.javax.measure.Unit, arg4: javawrappers.org.opengis.style.Stroke, arg5: javawrappers.org.opengis.style.Fill, arg6: javawrappers.org.opengis.style.Displacement, arg7: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.PolygonSymbolizer: ...
	@overload
	def externalGraphic(self, arg0: javawrappers.javax.swing.Icon, arg1: javawrappers.java.util.Collection, ) -> javawrappers.org.opengis.style.ExternalGraphic: ...
	@overload
	def externalGraphic(self, arg0: javawrappers.org.opengis.metadata.citation.OnLineResource, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Collection, ) -> javawrappers.org.opengis.style.ExternalGraphic: ...
	def linePlacement(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], ) -> javawrappers.org.opengis.style.LinePlacement: ...
	def pointPlacement(self, arg0: javawrappers.org.opengis.style.AnchorPoint, arg1: javawrappers.org.opengis.style.Displacement, arg2: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.PointPlacement: ...
	def graphicLegend(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.style.AnchorPoint, arg5: javawrappers.org.opengis.style.Displacement, ) -> javawrappers.org.opengis.style.GraphicLegend: ...
	def fill(self, arg0: javawrappers.org.opengis.style.GraphicFill, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Fill: ...
	def rasterSymbolizer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.style.Description, arg3: javawrappers.javax.measure.Unit, arg4: javawrappers.org.opengis.filter.expression.Expression, arg5: javawrappers.org.opengis.style.ChannelSelection, arg6: javawrappers.org.opengis.style.OverlapBehavior, arg7: javawrappers.org.opengis.style.ColorMap, arg8: javawrappers.org.opengis.style.ContrastEnhancement, arg9: javawrappers.org.opengis.style.ShadedRelief, arg10: javawrappers.org.opengis.style.Symbolizer, ) -> javawrappers.org.opengis.style.RasterSymbolizer: ...
	@overload
	def stroke(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.filter.expression.Expression, arg5: JArray(Union[float, JFloat], 1), arg6: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Stroke: ...
	@overload
	def stroke(self, arg0: javawrappers.org.opengis.style.GraphicFill, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.filter.expression.Expression, arg5: javawrappers.org.opengis.filter.expression.Expression, arg6: JArray(Union[float, JFloat], 1), arg7: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Stroke: ...
	@overload
	def stroke(self, arg0: javawrappers.org.opengis.style.GraphicStroke, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.filter.expression.Expression, arg5: javawrappers.org.opengis.filter.expression.Expression, arg6: JArray(Union[float, JFloat], 1), arg7: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Stroke: ...
	@overload
	def contrastEnhancement(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.style.ContrastMethod, ) -> javawrappers.org.opengis.style.ContrastEnhancement: ...
	@overload
	def contrastEnhancement(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.style.ContrastEnhancement: ...
	def shadedRelief(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: Union[int, JBoolean], ) -> javawrappers.org.opengis.style.ShadedRelief: ...
	def pointSymbolizer(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.style.Description, arg3: javawrappers.javax.measure.Unit, arg4: javawrappers.org.opengis.style.Graphic, ) -> javawrappers.org.opengis.style.PointSymbolizer: ...
	def graphicFill(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, arg4: javawrappers.org.opengis.style.AnchorPoint, arg5: javawrappers.org.opengis.style.Displacement, ) -> javawrappers.org.opengis.style.GraphicFill: ...
	def style(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.style.Description, arg2: Union[int, JBoolean], arg3: javawrappers.java.util.List, arg4: javawrappers.org.opengis.style.Symbolizer, ) -> javawrappers.org.opengis.style.Style: ...
	@overload
	def selectedChannelType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.opengis.style.ContrastEnhancement, ) -> javawrappers.org.opengis.style.SelectedChannelType: ...
	@overload
	def selectedChannelType(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.style.ContrastEnhancement, ) -> javawrappers.org.opengis.style.SelectedChannelType: ...
	def colorMap(self, arg0: javawrappers.org.opengis.filter.expression.Expression, *arg1: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.ColorMap: ...
	@overload
	def mark(self, arg0: javawrappers.org.opengis.filter.expression.Expression, arg1: javawrappers.org.opengis.style.Fill, arg2: javawrappers.org.opengis.style.Stroke, ) -> javawrappers.org.opengis.style.Mark: ...
	@overload
	def mark(self, arg0: javawrappers.org.opengis.style.ExternalMark, arg1: javawrappers.org.opengis.style.Fill, arg2: javawrappers.org.opengis.style.Stroke, ) -> javawrappers.org.opengis.style.Mark: ...
	def font(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.opengis.filter.expression.Expression, arg2: javawrappers.org.opengis.filter.expression.Expression, arg3: javawrappers.org.opengis.filter.expression.Expression, ) -> javawrappers.org.opengis.style.Font: ...


class Halo:
	def getFill(self, ) -> javawrappers.org.opengis.style.Fill: ...
	def getRadius(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class StyleVisitor:
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.GraphicStroke, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.PointPlacement, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.AnchorPoint, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ContrastEnhancement, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.LinePlacement, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.TextSymbolizer, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Halo, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ColorMap, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.PolygonSymbolizer, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Font, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.GraphicLegend, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ColorReplacement, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.FeatureTypeStyle, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Mark, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ExternalMark, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Description, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ContrastMethod, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Stroke, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ExternalGraphic, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ChannelSelection, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.SelectedChannelType, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Fill, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.LineSymbolizer, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.PointSymbolizer, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Graphic, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ShadedRelief, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.RasterSymbolizer, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Rule, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.GraphicFill, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Displacement, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.ExtensionSymbolizer, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def visit(self, arg0: javawrappers.org.opengis.style.Style, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class SelectedChannelType:
	def getContrastEnhancement(self, ) -> javawrappers.org.opengis.style.ContrastEnhancement: ...
	def getChannelName(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class GraphicStroke:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.style.AnchorPoint: ...
	def getSize(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def graphicalSymbols(self, ) -> javawrappers.java.util.List: ...
	def getInitialGap(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getRotation(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getGap(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDisplacement(self, ) -> javawrappers.org.opengis.style.Displacement: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ExtensionSymbolizer:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getParameters(self, ) -> javawrappers.java.util.Map: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getExtensionName(self, ) -> javawrappers.java.lang.String: ...


class ChannelSelection:
	def getGrayChannel(self, ) -> javawrappers.org.opengis.style.SelectedChannelType: ...
	def getRGBChannels(self, ) -> JArray(javawrappers.org.opengis.style.SelectedChannelType, 1): ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ShadedRelief:
	def isBrightnessOnly(self, ) -> Union[int, JBoolean]: ...
	def getReliefFactor(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PointPlacement:
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.style.AnchorPoint: ...
	def getRotation(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDisplacement(self, ) -> javawrappers.org.opengis.style.Displacement: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Graphic:
	def getOpacity(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getAnchorPoint(self, ) -> javawrappers.org.opengis.style.AnchorPoint: ...
	def getSize(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def graphicalSymbols(self, ) -> javawrappers.java.util.List: ...
	def getRotation(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDisplacement(self, ) -> javawrappers.org.opengis.style.Displacement: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AnchorPoint:
	def getAnchorPointY(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getAnchorPointX(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class PolygonSymbolizer:
	def getStroke(self, ) -> javawrappers.org.opengis.style.Stroke: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getFill(self, ) -> javawrappers.org.opengis.style.Fill: ...
	def getGeometryPropertyName(self, ) -> javawrappers.java.lang.String: ...
	def getUnitOfMeasure(self, ) -> javawrappers.javax.measure.Unit: ...
	def getPerpendicularOffset(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def getDisplacement(self, ) -> javawrappers.org.opengis.style.Displacement: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class FeatureTypeStyle:
	def featureTypeNames(self, ) -> javawrappers.java.util.Set: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getTransformation(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def getOnlineResource(self, ) -> javawrappers.org.opengis.metadata.citation.OnLineResource: ...
	def rules(self, ) -> javawrappers.java.util.List: ...
	def getDescription(self, ) -> javawrappers.org.opengis.style.Description: ...
	def getFeatureInstanceIDs(self, ) -> javawrappers.org.opengis.filter.Id: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def semanticTypeIdentifiers(self, ) -> javawrappers.java.util.Set: ...


class Description:
	def getTitle(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def getAbstract(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def accept(self, arg0: javawrappers.org.opengis.style.StyleVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


