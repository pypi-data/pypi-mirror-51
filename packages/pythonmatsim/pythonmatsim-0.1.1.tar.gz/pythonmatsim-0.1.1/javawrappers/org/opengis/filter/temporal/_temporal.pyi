################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.opengis.filter
import javawrappers.java.lang
import javawrappers.org.opengis.filter.expression

from jpype.types import *
from typing import Union

from typing import overload

class AnyInteracts:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class OverlappedBy:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Begins:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TContains:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class After:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Meets:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TEquals:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class TOverlaps:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class MetBy:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Ends:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BinaryTemporalOperator:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class During:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Before:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BegunBy:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class EndedBy:
	def getMatchAction(self, ) -> javawrappers.org.opengis.filter.MultiValuedFilter.MatchAction: ...
	def getExpression2(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def evaluate(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getExpression1(self, ) -> javawrappers.org.opengis.filter.expression.Expression: ...
	def accept(self, arg0: javawrappers.org.opengis.filter.FilterVisitor, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


