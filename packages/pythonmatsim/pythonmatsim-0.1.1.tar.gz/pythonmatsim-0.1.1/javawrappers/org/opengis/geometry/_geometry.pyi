################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.org.opengis.geometry
import javawrappers.java.io
import javawrappers.org.opengis.geometry.coordinate
import javawrappers.org.opengis.referencing.operation
import javawrappers.org.opengis.util
import javawrappers.org.opengis.referencing.crs
import javawrappers.org.opengis.geometry.complex

from jpype.types import *
from typing import Union

from typing import overload

class Boundary:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getSubComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	def getSuperComplexes(self, ) -> JArray(javawrappers.org.opengis.geometry.complex.Complex, 1): ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def isMaximal(self, ) -> Union[int, JBoolean]: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class PrecisionType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.geometry.PrecisionType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.opengis.geometry.PrecisionType, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isFloating(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.geometry.PrecisionType, 1): ...
	@overload
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class BoundingBox3D:
	@overload
	def include(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	@overload
	def include(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def include(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	def getMaxZ(self, ) -> Union[float, JDouble]: ...
	def getUpperCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getHeight(self, ) -> Union[float, JDouble]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> Union[int, JBoolean]: ...
	def getMedian(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getLowerCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getMinZ(self, ) -> Union[float, JDouble]: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def toBounds(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


class Envelope:
	def getUpperCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getMedian(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getLowerCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class PrecisionFactory:
	def createFixedPrecision(self, arg0: javawrappers.org.opengis.geometry.PrecisionType, arg1: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Precision: ...


class Geometry:
	def getConvexHull(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def distance(self, arg0: javawrappers.org.opengis.geometry.Geometry, ) -> Union[float, JDouble]: ...
	def getBuffer(self, arg0: Union[float, JDouble], ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isCycle(self, ) -> Union[int, JBoolean]: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	@overload
	def transform(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, arg1: javawrappers.org.opengis.referencing.operation.MathTransform, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMbRegion(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getDimension(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JInt]: ...
	def isSimple(self, ) -> Union[int, JBoolean]: ...
	def getCoordinateDimension(self, ) -> Union[int, JInt]: ...
	def toImmutable(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def getMaximalComplex(self, ) -> javawrappers.java.util.Set: ...
	def getBoundary(self, ) -> javawrappers.org.opengis.geometry.Boundary: ...
	def getCentroid(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def isMutable(self, ) -> Union[int, JBoolean]: ...
	def getClosure(self, ) -> javawrappers.org.opengis.geometry.complex.Complex: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.org.opengis.geometry.Geometry: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def getEnvelope(self, ) -> javawrappers.org.opengis.geometry.Envelope: ...
	def getRepresentativePoint(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class DirectPosition:
	def getOrdinate(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getCoordinate(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def setOrdinate(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getDirectPosition(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...


class TransfiniteSet:
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> Union[int, JBoolean]: ...
	def intersection(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def difference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def union(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...
	def symmetricDifference(self, arg0: javawrappers.org.opengis.geometry.TransfiniteSet, ) -> javawrappers.org.opengis.geometry.TransfiniteSet: ...


class UnmodifiableGeometryException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PositionFactory:
	def createDirectPosition(self, arg0: JArray(Union[float, JDouble], 1), ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def createPointArray(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def createPointArray(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	@overload
	def createPointArray(self, ) -> javawrappers.org.opengis.geometry.coordinate.PointArray: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def createPosition(self, arg0: javawrappers.org.opengis.geometry.coordinate.Position, ) -> javawrappers.org.opengis.geometry.coordinate.Position: ...
	def getPrecision(self, ) -> javawrappers.org.opengis.geometry.Precision: ...


class MismatchedDimensionException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Precision:
	def round(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> None: ...
	def getScale(self, ) -> Union[float, JDouble]: ...
	def getType(self, ) -> javawrappers.org.opengis.geometry.PrecisionType: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.geometry.Precision, ) -> Union[int, JInt]: ...


class BoundingBox:
	@overload
	def include(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	@overload
	def include(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getCoordinateReferenceSystem(self, ) -> javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem: ...
	def getSpan(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def intersects(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def getMaxY(self, ) -> Union[float, JDouble]: ...
	def getWidth(self, ) -> Union[float, JDouble]: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setBounds(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> None: ...
	def getUpperCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.DirectPosition, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.org.opengis.geometry.BoundingBox, ) -> Union[int, JBoolean]: ...
	def getHeight(self, ) -> Union[float, JDouble]: ...
	def getMedian(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getDimension(self, ) -> Union[int, JInt]: ...
	def getLowerCorner(self, ) -> javawrappers.org.opengis.geometry.DirectPosition: ...
	def toBounds(self, arg0: javawrappers.org.opengis.referencing.crs.CoordinateReferenceSystem, ) -> javawrappers.org.opengis.geometry.BoundingBox: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...
	def getMinY(self, ) -> Union[float, JDouble]: ...


class MismatchedReferenceSystemException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


