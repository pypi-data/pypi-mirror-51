################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.opengis.util
import javawrappers.java.util.stream
import javawrappers.javax.swing

from jpype.types import *
from typing import Union

from typing import overload

class SimpleEnumerationType:
	class NullIcon:
		def getIconWidth(self, ) -> Union[int, JInt]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getIconHeight(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def paintIcon(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.awt.Graphics, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
		def notify(self, ) -> None: ...


	def getIconWidth(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getNullIcon() -> javawrappers.javax.swing.Icon: ...
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getIcon(self, ) -> javawrappers.javax.swing.Icon: ...
	def getIconHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def paintIcon(self, arg0: javawrappers.java.awt.Component, arg1: javawrappers.java.awt.Graphics, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class InternationalString:
	def length(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def subSequence(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	def chars(self, ) -> javawrappers.java.util.stream.IntStream: ...
	def charAt(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def codePoints(self, ) -> javawrappers.java.util.stream.IntStream: ...


class NameFactory:
	def createGenericName(self, arg0: javawrappers.org.opengis.util.NameSpace, arg1: JArray(javawrappers.java.lang.CharSequence, 1), ) -> javawrappers.org.opengis.util.GenericName: ...
	def createNameSpace(self, arg0: javawrappers.org.opengis.util.GenericName, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def createInternationalString(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def parseGenericName(self, arg0: javawrappers.org.opengis.util.NameSpace, arg1: javawrappers.java.lang.CharSequence, ) -> javawrappers.org.opengis.util.GenericName: ...
	def createScopedName(self, arg0: javawrappers.org.opengis.util.GenericName, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.util.ScopedName: ...
	@overload
	def createLocalName(self, arg0: javawrappers.org.opengis.util.GenericName, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.opengis.util.InternationalString, ) -> javawrappers.org.opengis.util.LocalName: ...
	@overload
	def createLocalName(self, arg0: javawrappers.org.opengis.util.NameSpace, arg1: javawrappers.java.lang.CharSequence, ) -> javawrappers.org.opengis.util.LocalName: ...


class CodeList:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def identifier(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.opengis.util.CodeList: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.CodeList, ) -> Union[int, JInt]: ...
	def matches(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def family(self, ) -> JArray(javawrappers.org.opengis.util.CodeList, 1): ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class RecordSchema:
	def getSchemaName(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def locate(self, arg0: javawrappers.org.opengis.util.TypeName, ) -> javawrappers.org.opengis.util.RecordType: ...
	def getElements(self, ) -> javawrappers.java.util.Collection: ...
	def getDescription(self, ) -> javawrappers.java.util.Map: ...


class MemberName:
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getAttributeType(self, ) -> javawrappers.org.opengis.util.TypeName: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...


class TypeName:
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...


class NoSuchEnumerationException:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LocalName:
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...


class Cloneable:
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class UnlimitedInteger:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def floatValue(self, ) -> Union[float, JFloat]: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def compareTo(self, arg0: javawrappers.org.opengis.util.UnlimitedInteger, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def longValue(self, ) -> Union[long, JLong]: ...
	def isInfinite(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def shortValue(self, ) -> Union[int, JShort]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def byteValue(self, ) -> JByte: ...


class ProgressListener:
	def setCanceled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isCanceled(self, ) -> Union[int, JBoolean]: ...
	def warningOccurred(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def setTask(self, arg0: javawrappers.org.opengis.util.InternationalString, ) -> None: ...
	def progress(self, arg0: Union[float, JFloat], ) -> None: ...
	def started(self, ) -> None: ...
	def dispose(self, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def complete(self, ) -> None: ...
	def exceptionOccurred(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getProgress(self, ) -> Union[float, JFloat]: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getTask(self, ) -> javawrappers.org.opengis.util.InternationalString: ...


class NameSpace:
	def name(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def isGlobal(self, ) -> Union[int, JBoolean]: ...
	def getNames(self, ) -> javawrappers.java.util.Set: ...


class Record:
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def set(self, arg0: javawrappers.org.opengis.util.MemberName, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def locate(self, arg0: javawrappers.org.opengis.util.MemberName, ) -> javawrappers.java.lang.Object: ...
	def getRecordType(self, ) -> javawrappers.org.opengis.util.RecordType: ...


class ScopedName:
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def path(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def tail(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...


class GenericName:
	def head(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toInternationalString(self, ) -> javawrappers.org.opengis.util.InternationalString: ...
	def toFullyQualifiedName(self, ) -> javawrappers.org.opengis.util.GenericName: ...
	def depth(self, ) -> Union[int, JInt]: ...
	def scope(self, ) -> javawrappers.org.opengis.util.NameSpace: ...
	def name(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def tip(self, ) -> javawrappers.org.opengis.util.LocalName: ...
	def getParsedNames(self, ) -> javawrappers.java.util.List: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def push(self, arg0: javawrappers.org.opengis.util.GenericName, ) -> javawrappers.org.opengis.util.ScopedName: ...


class RecordType:
	def isInstance(self, arg0: javawrappers.org.opengis.util.Record, ) -> Union[int, JBoolean]: ...
	def locate(self, arg0: javawrappers.org.opengis.util.MemberName, ) -> javawrappers.org.opengis.util.TypeName: ...
	def getContainer(self, ) -> javawrappers.org.opengis.util.RecordSchema: ...
	def getAttributeTypes(self, ) -> javawrappers.java.util.Map: ...
	def getTypeName(self, ) -> javawrappers.org.opengis.util.TypeName: ...
	def getMembers(self, ) -> javawrappers.java.util.Set: ...


