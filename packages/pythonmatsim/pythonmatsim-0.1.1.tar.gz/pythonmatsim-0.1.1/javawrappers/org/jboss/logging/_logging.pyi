################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jboss.logging

from jpype.types import *
from typing import Union

from typing import overload

class BasicLogger:
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Object, 1), arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	def isEnabled(self, arg0: javawrappers.org.jboss.logging.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...


class Param:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Class: ...


class Property:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Messages:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class LoggerProvider:
	def getMdcMap(self, ) -> javawrappers.java.util.Map: ...
	def popNdc(self, ) -> javawrappers.java.lang.String: ...
	def getNdcDepth(self, ) -> Union[int, JInt]: ...
	def clearMdc(self, ) -> None: ...
	def pushNdc(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def peekNdc(self, ) -> javawrappers.java.lang.String: ...
	def removeMdc(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def putMdc(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getLogger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Logger: ...
	def clearNdc(self, ) -> None: ...
	def setNdcMaxDepth(self, arg0: Union[int, JInt], ) -> None: ...
	def getMdc(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNdc(self, ) -> javawrappers.java.lang.String: ...


class Message:
	class Format:
		PRINTF: Message.Format = ...
		MESSAGE_FORMAT: Message.Format = ...
		NO_FORMAT: Message.Format = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Message.Format: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.jboss.logging.Message.Format, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Message.Format: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jboss.logging.Message.Format, 1): ...
	def format(self, ) -> javawrappers.org.jboss.logging.Message.Format: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def id(self, ) -> Union[int, JInt]: ...
	def value(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class MessageLogger:
	def projectCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Cause:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DelegatingBasicLogger:
	def __init__(self, arg0: javawrappers.org.jboss.logging.Logger, ): ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Object, 1), arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEnabled(self, arg0: javawrappers.org.jboss.logging.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...


class Logger:
	class Level:
		FATAL: Logger.Level = ...
		ERROR: Logger.Level = ...
		WARN: Logger.Level = ...
		INFO: Logger.Level = ...
		DEBUG: Logger.Level = ...
		TRACE: Logger.Level = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Logger.Level: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.org.jboss.logging.Logger.Level, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logv(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infof(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Object, 1), arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jboss.logging.Logger.Level, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def error(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def fatal(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jboss.logging.Logger.Level, arg2: javawrappers.java.lang.Throwable, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, arg6: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logf(self, arg0: javawrappers.org.jboss.logging.Logger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def debugf(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def trace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	@staticmethod
	def getMessageLogger(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getMessageLogger(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isInfoEnabled(self, ) -> Union[int, JBoolean]: ...
	def isTraceEnabled(self, ) -> Union[int, JBoolean]: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warnf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def info(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debugv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def debug(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Logger.Level: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracef(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.jboss.logging.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Logger: ...
	@overload
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.jboss.logging.Logger: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def warn(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def infov(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	def isEnabled(self, arg0: javawrappers.org.jboss.logging.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def tracev(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def fatalf(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def errorv(self, arg0: javawrappers.java.lang.Throwable, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	def isDebugEnabled(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Field:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MessageBundle:
	def projectCode(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LogMessage:
	def level(self, ) -> javawrappers.org.jboss.logging.Logger.Level: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def loggingClass(self, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class NDC:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getDepth() -> Union[int, JInt]: ...
	@staticmethod
	def setMaxDepth(arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def clear() -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def push(arg0: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def peek() -> javawrappers.java.lang.String: ...
	@staticmethod
	def pop() -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get() -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LoggingClass:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class FormatWith:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Class: ...


class MDC:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def clear() -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getMap() -> javawrappers.java.util.Map: ...
	@staticmethod
	def put(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def remove(arg0: javawrappers.java.lang.String, ) -> None: ...


class ParameterConverter:
	def convert(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


