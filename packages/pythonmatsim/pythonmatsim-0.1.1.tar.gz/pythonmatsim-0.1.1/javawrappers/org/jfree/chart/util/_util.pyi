################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.org.jfree.chart.ui
import javawrappers.java.lang
import javawrappers.org.jfree.chart.util
import javawrappers.java.util
import javawrappers.java.text
import javawrappers.java.awt.image
import javawrappers.java.net
import javawrappers.java.awt.geom
import javawrappers.java.io
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class DirectionalGradientPaintTransformer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transform(self, arg0: javawrappers.java.awt.GradientPaint, arg1: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.GradientPaint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PaintList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPaint(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Paint: ...
	def notify(self, ) -> None: ...
	def setPaint(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Paint, ) -> None: ...


class TableOrder:
	BY_ROW: TableOrder = ...
	BY_COLUMN: TableOrder = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.chart.util.TableOrder: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jfree.chart.util.TableOrder, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class XYCoordinateType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ArrayUtils:
	@staticmethod
	def equal(arg0: JArray(JArray(Union[float, JFloat], 1), 1), arg1: JArray(JArray(Union[float, JFloat], 1), 1), ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def equalReferencesInArrays(arg0: JArray(javawrappers.java.lang.Object, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def clone(arg0: JArray(JArray(Union[float, JFloat], 1), 1), ) -> JArray(JArray(Union[float, JFloat], 1), 1): ...
	@staticmethod
	def hasDuplicateItems(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def compareVersionArrays(arg0: JArray(javawrappers.java.lang.Comparable, 1), arg1: JArray(javawrappers.java.lang.Comparable, 1), ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class ResourceBundleWrapper:
	@staticmethod
	def removeCodeBase(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.URLClassLoader, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...


class SerialUtils:
	@staticmethod
	def readPoint2D(arg0: javawrappers.java.io.ObjectInputStream, ) -> javawrappers.java.awt.geom.Point2D: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def readStroke(arg0: javawrappers.java.io.ObjectInputStream, ) -> javawrappers.java.awt.Stroke: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def writeComposite(arg0: javawrappers.java.awt.Composite, arg1: javawrappers.java.io.ObjectOutputStream, ) -> None: ...
	@staticmethod
	def writeShape(arg0: javawrappers.java.awt.Shape, arg1: javawrappers.java.io.ObjectOutputStream, ) -> None: ...
	@staticmethod
	def writePaint(arg0: javawrappers.java.awt.Paint, arg1: javawrappers.java.io.ObjectOutputStream, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def writeAttributedString(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.io.ObjectOutputStream, ) -> None: ...
	@staticmethod
	def readPaint(arg0: javawrappers.java.io.ObjectInputStream, ) -> javawrappers.java.awt.Paint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSerializable(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def writePoint2D(arg0: javawrappers.java.awt.geom.Point2D, arg1: javawrappers.java.io.ObjectOutputStream, ) -> None: ...
	@staticmethod
	def readShape(arg0: javawrappers.java.io.ObjectInputStream, ) -> javawrappers.java.awt.Shape: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def readAttributedString(arg0: javawrappers.java.io.ObjectInputStream, ) -> javawrappers.java.text.AttributedString: ...
	@staticmethod
	def writeStroke(arg0: javawrappers.java.awt.Stroke, arg1: javawrappers.java.io.ObjectOutputStream, ) -> None: ...
	@staticmethod
	def readComposite(arg0: javawrappers.java.io.ObjectInputStream, ) -> javawrappers.java.awt.Composite: ...


class AbstractObjectList:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ShapeList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getShape(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Shape: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setShape(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Shape, ) -> None: ...


class DefaultShadowGenerator:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Color, arg2: Union[float, JFloat], arg3: Union[int, JInt], arg4: Union[float, JDouble], ): ...
	def getDistance(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def calculateOffsetY(self, ) -> Union[int, JInt]: ...
	def calculateOffsetX(self, ) -> Union[int, JInt]: ...
	def getShadowOpacity(self, ) -> Union[float, JFloat]: ...
	def createDropShadow(self, arg0: javawrappers.java.awt.image.BufferedImage, ) -> javawrappers.java.awt.image.BufferedImage: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getShadowColor(self, ) -> javawrappers.java.awt.Color: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getShadowSize(self, ) -> Union[int, JInt]: ...


class LineUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def clipLine(arg0: javawrappers.java.awt.geom.Line2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def extendLine(arg0: javawrappers.java.awt.geom.Line2D, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.geom.Line2D: ...
	def notify(self, ) -> None: ...


class ObjectUtils:
	@staticmethod
	def equal(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hashCode(arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def clone(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def deepClone(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExportUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isOrsonPDFAvailable() -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def writeAsPNG(arg0: javawrappers.org.jfree.chart.ui.Drawable, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.io.File, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def writeAsJPEG(arg0: javawrappers.org.jfree.chart.ui.Drawable, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.io.File, ) -> None: ...
	@staticmethod
	def isJFreeSVGAvailable() -> Union[int, JBoolean]: ...
	@staticmethod
	def writeAsSVG(arg0: javawrappers.org.jfree.chart.ui.Drawable, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.io.File, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def writeAsPDF(arg0: javawrappers.org.jfree.chart.ui.Drawable, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.io.File, ) -> None: ...


class BooleanList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBoolean(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Boolean: ...
	def notify(self, ) -> None: ...
	def setBoolean(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Boolean, ) -> None: ...


class StringUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def endsWithIgnoreCase(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getLineSeparator() -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def startsWithIgnoreCase(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class AttrStringUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getTextBounds(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.awt.Graphics2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], arg6: javawrappers.org.jfree.chart.ui.TextAnchor, ) -> None: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JDouble], arg5: Union[float, JFloat], arg6: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JDouble], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], arg6: Union[float, JFloat], arg7: Union[float, JFloat], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LogFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setExponentFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getExponentFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class ObjectList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class UnitType:
	ABSOLUTE: UnitType = ...
	RELATIVE: UnitType = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.chart.util.UnitType: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jfree.chart.util.UnitType, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class StrokeList:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStroke(self, arg0: Union[int, JInt], ) -> javawrappers.java.awt.Stroke: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setStroke(self, arg0: Union[int, JInt], arg1: javawrappers.java.awt.Stroke, ) -> None: ...
	def notify(self, ) -> None: ...


class CloneUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def cloneList(arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def cloneMapValues(arg0: javawrappers.java.util.Map, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...


class Args:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def requireNonNegative(arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def requireInRange(arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullNotPermitted(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PublicCloneable:
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class SortOrder:
	ASCENDING: SortOrder = ...
	DESCENDING: SortOrder = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.chart.util.SortOrder: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jfree.chart.util.SortOrder, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PaintUtils:
	@staticmethod
	def equal(arg0: javawrappers.java.awt.Paint, arg1: javawrappers.java.awt.Paint, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def colorToString(arg0: javawrappers.java.awt.Color, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def stringToColor(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.awt.Color: ...
	def notify(self, ) -> None: ...


class HMSNumberFormat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class Rotation:
	CLOCKWISE: Rotation = ...
	ANTICLOCKWISE: Rotation = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.chart.util.Rotation: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.org.jfree.chart.util.Rotation, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getFactor(self, ) -> Union[float, JDouble]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class RelativeDateFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setShowZeroHours(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def getBaseMillis(self, ) -> Union[long, JLong]: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	def setHourSuffix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getDaySuffix(self, ) -> javawrappers.java.lang.String: ...
	def setHourFormatter(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getSecondSuffix(self, ) -> javawrappers.java.lang.String: ...
	def getPositivePrefix(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def setPositivePrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getShowZeroHours(self, ) -> Union[int, JBoolean]: ...
	def getMinuteSuffix(self, ) -> javawrappers.java.lang.String: ...
	def setShowZeroDays(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinuteSuffix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getShowZeroDays(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	def setDaySuffix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setSecondFormatter(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	def setSecondSuffix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def setBaseMillis(self, arg0: Union[long, JLong], ) -> None: ...
	def setMinuteFormatter(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	def setDayFormatter(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getHourSuffix(self, ) -> javawrappers.java.lang.String: ...


class ShapeUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def createLineRegion(arg0: javawrappers.java.awt.geom.Line2D, arg1: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def intersects(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDiagonalCross(arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isPointInRect(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createTranslatedShape(arg0: javawrappers.java.awt.Shape, arg1: javawrappers.org.jfree.chart.ui.RectangleAnchor, arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> javawrappers.java.awt.Shape: ...
	@overload
	@staticmethod
	def createTranslatedShape(arg0: javawrappers.java.awt.Shape, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def getPointInRectangle(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Point2D: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createRegularCross(arg0: Union[float, JFloat], arg1: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def createUpTriangle(arg0: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.GeneralPath, arg1: javawrappers.java.awt.geom.GeneralPath, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.Polygon, arg1: javawrappers.java.awt.Polygon, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.Arc2D, arg1: javawrappers.java.awt.geom.Arc2D, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.Ellipse2D, arg1: javawrappers.java.awt.geom.Ellipse2D, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.Shape, arg1: javawrappers.java.awt.Shape, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def equal(arg0: javawrappers.java.awt.geom.Line2D, arg1: javawrappers.java.awt.geom.Line2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def contains(arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def createDownTriangle(arg0: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def rotateShape(arg0: javawrappers.java.awt.Shape, arg1: Union[float, JDouble], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@staticmethod
	def createDiamond(arg0: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def drawRotatedShape(arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.Shape, arg2: Union[float, JDouble], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ) -> None: ...
	@staticmethod
	def clone(arg0: javawrappers.java.awt.Shape, ) -> javawrappers.java.awt.Shape: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ShadowGenerator:
	def calculateOffsetX(self, ) -> Union[int, JInt]: ...
	def createDropShadow(self, arg0: javawrappers.java.awt.image.BufferedImage, ) -> javawrappers.java.awt.image.BufferedImage: ...
	def calculateOffsetY(self, ) -> Union[int, JInt]: ...


class PaintAlpha:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def darker(arg0: javawrappers.java.awt.Paint, ) -> javawrappers.java.awt.Paint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setLegacyAlpha(arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def cloneImage(arg0: javawrappers.java.awt.image.BufferedImage, ) -> javawrappers.java.awt.image.BufferedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HexNumberFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setNumberOfDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def getNumberOfDigits(self, ) -> Union[int, JInt]: ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


