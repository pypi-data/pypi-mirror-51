################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.chart.date

from jpype.types import *
from typing import Union

from typing import overload

class SpreadsheetDate:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def monthCodeToString(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def monthCodeToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def weekInMonthToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isOnOrBefore(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def relativeToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def isInRange(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	@overload
	def isInRange(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, arg1: javawrappers.org.jfree.chart.date.SerialDate, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def toSerial(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getMonths() -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def getMonths(arg0: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPreviousDayOfWeek(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def getPreviousDayOfWeek(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@staticmethod
	def addYears(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def getYYYY(self, ) -> Union[int, JInt]: ...
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def isOnOrAfter(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isValidMonthCode(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getEndOfCurrentMonth(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def isOn(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def addDays(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def stringToWeekdayCode(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def monthCodeToQuarter(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def createInstance(arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def createInstance(arg0: javawrappers.java.util.Date, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def createInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	def getNearestDayOfWeek(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def getNearestDayOfWeek(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def toDate(self, ) -> javawrappers.java.util.Date: ...
	@staticmethod
	def isLeapYear(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getFollowingDayOfWeek(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def getFollowingDayOfWeek(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@staticmethod
	def isValidWeekdayCode(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isValidWeekInMonthCode(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def lastDayOfMonth(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isBefore(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def stringToMonthCode(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def weekdayCodeToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def addMonths(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def leapYearCount(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def isAfter(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...


class MonthConstants:


class SerialDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def monthCodeToString(arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def monthCodeToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def isOnOrBefore(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def weekInMonthToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def relativeToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def isInRange(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, arg1: javawrappers.org.jfree.chart.date.SerialDate, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isInRange(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toSerial(self, ) -> Union[int, JInt]: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getMonths() -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def getMonths(arg0: Union[int, JBoolean], ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPreviousDayOfWeek(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def getPreviousDayOfWeek(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@staticmethod
	def addYears(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def getYYYY(self, ) -> Union[int, JInt]: ...
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def isOnOrAfter(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def isValidMonthCode(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isOn(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	def getEndOfCurrentMonth(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@staticmethod
	def addDays(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def stringToWeekdayCode(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def monthCodeToQuarter(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def createInstance(arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def createInstance(arg0: javawrappers.java.util.Date, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def createInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	def getNearestDayOfWeek(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def getNearestDayOfWeek(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def toDate(self, ) -> javawrappers.java.util.Date: ...
	@staticmethod
	def isLeapYear(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getFollowingDayOfWeek(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@overload
	@staticmethod
	def getFollowingDayOfWeek(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	@staticmethod
	def isValidWeekdayCode(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isValidWeekInMonthCode(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def lastDayOfMonth(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isBefore(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def stringToMonthCode(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def weekdayCodeToString(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def addMonths(arg0: Union[int, JInt], arg1: javawrappers.org.jfree.chart.date.SerialDate, ) -> javawrappers.org.jfree.chart.date.SerialDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def leapYearCount(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def isAfter(self, arg0: javawrappers.org.jfree.chart.date.SerialDate, ) -> Union[int, JBoolean]: ...


