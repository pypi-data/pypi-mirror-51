################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt.image
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.org.jfree.chart.encoders

from jpype.types import *
from typing import Union

from typing import overload

class ImageEncoder:
	@overload
	def encode(self, arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	def encode(self, arg0: javawrappers.java.awt.image.BufferedImage, ) -> JArray(JByte, 1): ...
	def setQuality(self, arg0: Union[float, JFloat], ) -> None: ...
	def getQuality(self, ) -> Union[float, JFloat]: ...
	def isEncodingAlpha(self, ) -> Union[int, JBoolean]: ...
	def setEncodingAlpha(self, arg0: Union[int, JBoolean], ) -> None: ...


class SunJPEGEncoderAdapter:
	def __init__(self, ): ...
	@overload
	def encode(self, arg0: javawrappers.java.awt.image.BufferedImage, ) -> JArray(JByte, 1): ...
	@overload
	def encode(self, arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setQuality(self, arg0: Union[float, JFloat], ) -> None: ...
	def getQuality(self, ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isEncodingAlpha(self, ) -> Union[int, JBoolean]: ...
	def setEncodingAlpha(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class SunPNGEncoderAdapter:
	def __init__(self, ): ...
	@overload
	def encode(self, arg0: javawrappers.java.awt.image.BufferedImage, ) -> JArray(JByte, 1): ...
	@overload
	def encode(self, arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.io.OutputStream, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setQuality(self, arg0: Union[float, JFloat], ) -> None: ...
	def getQuality(self, ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isEncodingAlpha(self, ) -> Union[int, JBoolean]: ...
	def setEncodingAlpha(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


class ImageEncoderFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setImageEncoder(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> javawrappers.org.jfree.chart.encoders.ImageEncoder: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.encoders.ImageEncoder: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.chart.encoders.ImageEncoder: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.chart.encoders.ImageEncoder: ...
	def notify(self, ) -> None: ...


class ImageFormat:


class EncoderUtil:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: Union[float, JFloat], arg3: Union[int, JBoolean], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> JArray(JByte, 1): ...
	@overload
	@staticmethod
	def encode(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: Union[float, JFloat], ) -> JArray(JByte, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def writeBufferedImage(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.OutputStream, ) -> None: ...
	@overload
	@staticmethod
	def writeBufferedImage(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.OutputStream, arg3: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def writeBufferedImage(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.OutputStream, arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def writeBufferedImage(arg0: javawrappers.java.awt.image.BufferedImage, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.OutputStream, arg3: Union[float, JFloat], arg4: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...


