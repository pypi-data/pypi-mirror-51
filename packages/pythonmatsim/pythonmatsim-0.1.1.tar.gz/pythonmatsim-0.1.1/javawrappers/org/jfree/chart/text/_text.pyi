################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.org.jfree.chart.ui
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.org.jfree.chart.text

from jpype.types import *
from typing import Union

from typing import overload

class G2TextMeasurer:
	def __init__(self, arg0: javawrappers.java.awt.Graphics2D, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStringWidth(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TextBlockAnchor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AttributedStringUtils:
	@staticmethod
	def equal(arg0: javawrappers.java.text.AttributedString, arg1: javawrappers.java.text.AttributedString, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TextBox:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.text.TextBlock, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getShadowXOffset(self, ) -> Union[float, JDouble]: ...
	def setShadowXOffset(self, arg0: Union[float, JDouble], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getShadowYOffset(self, ) -> Union[float, JDouble]: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: javawrappers.org.jfree.chart.ui.RectangleAnchor, ) -> None: ...
	def setOutlineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getShadowPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def notify(self, ) -> None: ...
	def getOutlinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setBackgroundPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setInteriorGap(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def getBackgroundPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getHeight(self, arg0: javawrappers.java.awt.Graphics2D, ) -> Union[float, JDouble]: ...
	def setTextBlock(self, arg0: javawrappers.org.jfree.chart.text.TextBlock, ) -> None: ...
	def getTextBlock(self, ) -> javawrappers.org.jfree.chart.text.TextBlock: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setShadowPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setOutlinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getOutlineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def setShadowYOffset(self, arg0: Union[float, JDouble], ) -> None: ...
	def getInteriorGap(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...


class TextLine:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def addFragment(self, arg0: javawrappers.org.jfree.chart.text.TextFragment, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFirstTextFragment(self, ) -> javawrappers.org.jfree.chart.text.TextFragment: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def calculateDimensions(self, arg0: javawrappers.java.awt.Graphics2D, ) -> javawrappers.org.jfree.chart.ui.Size2D: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JDouble], ) -> None: ...
	def removeFragment(self, arg0: javawrappers.org.jfree.chart.text.TextFragment, ) -> None: ...
	def notify(self, ) -> None: ...
	def getLastTextFragment(self, ) -> javawrappers.org.jfree.chart.text.TextFragment: ...


class TextFragment:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, arg3: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBaselineOffset(self, ) -> Union[float, JFloat]: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def calculateDimensions(self, arg0: javawrappers.java.awt.Graphics2D, ) -> javawrappers.org.jfree.chart.ui.Size2D: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFont(self, ) -> javawrappers.java.awt.Font: ...
	def calculateBaselineOffset(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.ui.TextAnchor, ) -> Union[float, JFloat]: ...
	def getPaint(self, ) -> javawrappers.java.awt.Paint: ...


class TextUtils:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isUseDrawRotatedStringWorkaround() -> Union[int, JBoolean]: ...
	@staticmethod
	def getTextBounds(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: javawrappers.java.awt.FontMetrics, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def setDrawStringsWithFontAttributes(arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getDrawStringsWithFontAttributes() -> Union[int, JBoolean]: ...
	@staticmethod
	def setUseDrawRotatedStringWorkaround(arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def calculateRotatedStringBounds(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JDouble], arg5: Union[float, JFloat], arg6: Union[float, JFloat], ) -> javawrappers.java.awt.Shape: ...
	@overload
	@staticmethod
	def calculateRotatedStringBounds(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], arg6: javawrappers.org.jfree.chart.ui.TextAnchor, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def drawAlignedString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	@staticmethod
	def createTextBlock(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, ) -> javawrappers.org.jfree.chart.text.TextBlock: ...
	@overload
	@staticmethod
	def createTextBlock(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.text.TextMeasurer, ) -> javawrappers.org.jfree.chart.text.TextBlock: ...
	@overload
	@staticmethod
	def createTextBlock(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, arg3: Union[float, JFloat], arg4: Union[int, JInt], arg5: javawrappers.org.jfree.chart.text.TextMeasurer, ) -> javawrappers.org.jfree.chart.text.TextBlock: ...
	@staticmethod
	def getUseFontMetricsGetStringBounds() -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: Union[float, JDouble], arg5: Union[float, JFloat], arg6: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JDouble], arg3: Union[float, JFloat], arg4: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], arg6: Union[float, JFloat], arg7: Union[float, JFloat], ) -> None: ...
	@overload
	@staticmethod
	def drawRotatedString(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], arg6: javawrappers.org.jfree.chart.ui.TextAnchor, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def calcAlignedStringBounds(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Graphics2D, arg2: Union[float, JFloat], arg3: Union[float, JFloat], arg4: javawrappers.org.jfree.chart.ui.TextAnchor, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@staticmethod
	def setUseFontMetricsGetStringBounds(arg0: Union[int, JBoolean], ) -> None: ...


class TextBlock:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setLineAlignment(self, arg0: javawrappers.org.jfree.chart.ui.HorizontalAlignment, ) -> None: ...
	def calculateBounds(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: javawrappers.org.jfree.chart.text.TextBlockAnchor, arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JDouble], ) -> javawrappers.java.awt.Shape: ...
	def notifyAll(self, ) -> None: ...
	def getLines(self, ) -> javawrappers.java.util.List: ...
	def getLineAlignment(self, ) -> javawrappers.org.jfree.chart.ui.HorizontalAlignment: ...
	def calculateDimensions(self, arg0: javawrappers.java.awt.Graphics2D, ) -> javawrappers.org.jfree.chart.ui.Size2D: ...
	@overload
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: javawrappers.org.jfree.chart.text.TextBlockAnchor, arg4: Union[float, JFloat], arg5: Union[float, JFloat], arg6: Union[float, JDouble], ) -> None: ...
	@overload
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: javawrappers.org.jfree.chart.text.TextBlockAnchor, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def addLine(self, arg0: javawrappers.org.jfree.chart.text.TextLine, ) -> None: ...
	@overload
	def addLine(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.java.awt.Paint, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLastLine(self, ) -> javawrappers.org.jfree.chart.text.TextLine: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TextMeasurer:
	def getStringWidth(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...


