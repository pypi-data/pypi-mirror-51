################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.chart.ui
import javawrappers.org.jfree.data
import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.org.jfree.chart.plot
import javawrappers.org.jfree.chart.text
import javawrappers.org.jfree.chart.event
import javawrappers.java.awt
import javawrappers.org.jfree.data.time
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.org.jfree.data.category
import javawrappers.java.math
import javawrappers.org.jfree.chart.axis

from jpype.types import *
from typing import Union

from typing import overload

class NumberTick:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.TickType, arg1: Union[float, JDouble], arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.jfree.chart.ui.TextAnchor, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTickType(self, ) -> javawrappers.org.jfree.chart.axis.TickType: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def notify(self, ) -> None: ...
	def getNumber(self, ) -> javawrappers.java.lang.Number: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ValueAxis:
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class CategoryLabelWidthType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CategoryAnchor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ModuloAxis:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.Range, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setAutoRangeStickyZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def getDisplayEnd(self, ) -> Union[float, JDouble]: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setRangeType(self, arg0: javawrappers.org.jfree.data.RangeType, ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setNumberFormatOverride(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMarkerBand(self, ) -> javawrappers.org.jfree.chart.axis.MarkerAxisBand: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, ) -> None: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMarkerBand(self, arg0: javawrappers.org.jfree.chart.axis.MarkerAxisBand, ) -> None: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRangeIncludesZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	@overload
	@staticmethod
	def createIntegerTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createIntegerTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.NumberTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def getAutoRangeIncludesZero(self, ) -> Union[int, JBoolean]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getDisplayStart(self, ) -> Union[float, JDouble]: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	def getRangeType(self, ) -> javawrappers.org.jfree.data.RangeType: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getNumberFormatOverride(self, ) -> javawrappers.java.text.NumberFormat: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setDisplayRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def createStandardTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createStandardTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAutoRangeStickyZero(self, ) -> Union[int, JBoolean]: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class MarkerAxisBand:
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.NumberAxis, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: javawrappers.java.awt.Font, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getHeight(self, arg0: javawrappers.java.awt.Graphics2D, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: Union[float, JDouble], arg4: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def addMarker(self, arg0: javawrappers.org.jfree.chart.plot.IntervalMarker, ) -> None: ...


class StandardTickUnitSource:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLargerTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: Union[float, JDouble], ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LogarithmicAxis:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setAutoRangeStickyZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setRangeType(self, arg0: javawrappers.org.jfree.data.RangeType, ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setNumberFormatOverride(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getAutoRangeNextLogFlag(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMarkerBand(self, ) -> javawrappers.org.jfree.chart.axis.MarkerAxisBand: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setExpTickLabelsFlag(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, ) -> None: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def autoAdjustRange(self, ) -> None: ...
	def setMarkerBand(self, arg0: javawrappers.org.jfree.chart.axis.MarkerAxisBand, ) -> None: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRangeIncludesZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLog10TickLabelsFlag(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def setAutoRangeNextLogFlag(self, arg0: Union[int, JBoolean], ) -> None: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	@overload
	@staticmethod
	def createIntegerTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createIntegerTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def adjustedLog10(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.NumberTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def adjustedPow10(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getStrictValuesFlag(self, ) -> Union[int, JBoolean]: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def getLog10TickLabelsFlag(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def getAutoRangeIncludesZero(self, ) -> Union[int, JBoolean]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getExpTickLabelsFlag(self, ) -> Union[int, JBoolean]: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAllowNegativesFlag(self, ) -> Union[int, JBoolean]: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	def getRangeType(self, ) -> javawrappers.org.jfree.data.RangeType: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def setAllowNegativesFlag(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getNumberFormatOverride(self, ) -> javawrappers.java.text.NumberFormat: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def createStandardTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createStandardTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setStrictValuesFlag(self, arg0: Union[int, JBoolean], ) -> None: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def switchedPow10(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAutoRangeStickyZero(self, ) -> Union[int, JBoolean]: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class AxisSpace:
	def __init__(self, ): ...
	def add(self, arg0: Union[float, JDouble], arg1: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBottom(self, ) -> Union[float, JDouble]: ...
	def setLeft(self, arg0: Union[float, JDouble], ) -> None: ...
	def shrink(self, arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def ensureAtLeast(self, arg0: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> None: ...
	@overload
	def ensureAtLeast(self, arg0: Union[float, JDouble], arg1: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> None: ...
	def setTop(self, arg0: Union[float, JDouble], ) -> None: ...
	def expand(self, arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.java.awt.geom.Rectangle2D, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def getRight(self, ) -> Union[float, JDouble]: ...
	def setBottom(self, arg0: Union[float, JDouble], ) -> None: ...
	def reserved(self, arg0: javawrappers.java.awt.geom.Rectangle2D, arg1: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTop(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setRight(self, arg0: Union[float, JDouble], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLeft(self, ) -> Union[float, JDouble]: ...


class Timeline:
	def toMillisecond(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def toTimelineValue(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def toTimelineValue(self, arg0: javawrappers.java.util.Date, ) -> Union[long, JLong]: ...
	@overload
	def containsDomainValue(self, arg0: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
	@overload
	def containsDomainValue(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def containsDomainRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def containsDomainRange(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...


class DateTickUnitType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCalendarField(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class DateTick:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.String, arg2: javawrappers.org.jfree.chart.ui.TextAnchor, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.TickType, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTickType(self, ) -> javawrappers.org.jfree.chart.axis.TickType: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDate(self, ) -> javawrappers.java.util.Date: ...


class Axis:
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class AxisLabelLocation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PeriodAxis:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.time.RegularTimePeriod, arg2: javawrappers.org.jfree.data.time.RegularTimePeriod, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.time.RegularTimePeriod, arg2: javawrappers.org.jfree.data.time.RegularTimePeriod, arg3: javawrappers.java.util.TimeZone, arg4: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLabelInfo(self, arg0: JArray(javawrappers.org.jfree.chart.axis.PeriodAxisLabelInfo, 1), ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getLabelInfo(self, ) -> JArray(javawrappers.org.jfree.chart.axis.PeriodAxisLabelInfo, 1): ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setMajorTickTimePeriodClass(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLast(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> None: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def getAutoRangeTimePeriodClass(self, ) -> javawrappers.java.lang.Class: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMinorTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAutoRangeTimePeriodClass(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def getMinorTickTimePeriodClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLast(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setFirst(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def getFirst(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setMinorTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickTimePeriodClass(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getMinorTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMinorTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getMajorTickTimePeriodClass(self, ) -> javawrappers.java.lang.Class: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class AxisLocation:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getOpposite(arg0: javawrappers.org.jfree.chart.axis.AxisLocation, ) -> javawrappers.org.jfree.chart.axis.AxisLocation: ...
	@overload
	def getOpposite(self, ) -> javawrappers.org.jfree.chart.axis.AxisLocation: ...
	def notify(self, ) -> None: ...


class CategoryTick:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.org.jfree.chart.text.TextBlock, arg2: javawrappers.org.jfree.chart.text.TextBlockAnchor, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.jfree.chart.text.TextBlock: ...
	def getLabelAnchor(self, ) -> javawrappers.org.jfree.chart.text.TextBlockAnchor: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getCategory(self, ) -> javawrappers.java.lang.Comparable: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def notify(self, ) -> None: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class NumberTickUnitSource:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.text.NumberFormat, ): ...
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLargerTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: Union[float, JDouble], ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DateTickUnit:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnitType, arg1: Union[int, JInt], arg2: javawrappers.java.text.DateFormat, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnitType, arg1: Union[int, JInt], arg2: javawrappers.org.jfree.chart.axis.DateTickUnitType, arg3: Union[int, JInt], arg4: javawrappers.java.text.DateFormat, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnitType, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRollMultiple(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getRollUnitType(self, ) -> javawrappers.org.jfree.chart.axis.DateTickUnitType: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addToDate(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.java.util.Date: ...
	def valueToString(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getSize(self, ) -> Union[float, JDouble]: ...
	def getMultiple(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCalendarField(self, ) -> Union[int, JInt]: ...
	@overload
	def rollDate(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.java.util.Date: ...
	@overload
	def rollDate(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.util.Date: ...
	def getUnitType(self, ) -> javawrappers.org.jfree.chart.axis.DateTickUnitType: ...
	def dateToString(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...


class Tick:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.chart.ui.TextAnchor, arg2: javawrappers.org.jfree.chart.ui.TextAnchor, arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def notify(self, ) -> None: ...


class SymbolAxis:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def isGridBandsVisible(self, ) -> Union[int, JBoolean]: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getGridBandPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setAutoRangeStickyZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setRangeType(self, arg0: javawrappers.org.jfree.data.RangeType, ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setNumberFormatOverride(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMarkerBand(self, ) -> javawrappers.org.jfree.chart.axis.MarkerAxisBand: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, ) -> None: ...
	def getSymbols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMarkerBand(self, arg0: javawrappers.org.jfree.chart.axis.MarkerAxisBand, ) -> None: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def valueToString(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRangeIncludesZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def getGridBandAlternatePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	@overload
	@staticmethod
	def createIntegerTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createIntegerTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.NumberTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def getAutoRangeIncludesZero(self, ) -> Union[int, JBoolean]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	def getRangeType(self, ) -> javawrappers.org.jfree.data.RangeType: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setGridBandAlternatePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def setGridBandsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNumberFormatOverride(self, ) -> javawrappers.java.text.NumberFormat: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def createStandardTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createStandardTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def setGridBandPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAutoRangeStickyZero(self, ) -> Union[int, JBoolean]: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DateAxis:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, ): ...
	class DefaultTimeline:
		def toMillisecond(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def toTimelineValue(self, arg0: javawrappers.java.util.Date, ) -> Union[long, JLong]: ...
		@overload
		def toTimelineValue(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def containsDomainValue(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		@overload
		def containsDomainValue(self, arg0: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def containsDomainRange(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
		@overload
		def containsDomainRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setTimeline(self, arg0: javawrappers.org.jfree.chart.axis.Timeline, ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def calculateLowestVisibleTickValue(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnit, ) -> javawrappers.java.util.Date: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def calculateHighestVisibleTickValue(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnit, ) -> javawrappers.java.util.Date: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def getMinimumDate(self, ) -> javawrappers.java.util.Date: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createStandardDateTickUnits(arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createStandardDateTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.DateTickUnit, ) -> None: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMinimumDate(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def containsDomainRange(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
	@overload
	def containsDomainRange(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.DateTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def isHiddenValue(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMaximumDate(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def getTickMarkPosition(self, ) -> javawrappers.org.jfree.chart.axis.DateTickMarkPosition: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def toMillisecond(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTickMarkPosition(self, arg0: javawrappers.org.jfree.chart.axis.DateTickMarkPosition, ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getTimeline(self, ) -> javawrappers.org.jfree.chart.axis.Timeline: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getDateFormatOverride(self, ) -> javawrappers.java.text.DateFormat: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	@overload
	def toTimelineValue(self, arg0: javawrappers.java.util.Date, ) -> Union[long, JLong]: ...
	@overload
	def toTimelineValue(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def dateToJava2D(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	@overload
	def containsDomainValue(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def containsDomainValue(self, arg0: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getMaximumDate(self, ) -> javawrappers.java.util.Date: ...
	def setDateFormatOverride(self, arg0: javawrappers.java.text.DateFormat, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class CategoryLabelPosition:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.ui.RectangleAnchor, arg1: javawrappers.org.jfree.chart.text.TextBlockAnchor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.ui.RectangleAnchor, arg1: javawrappers.org.jfree.chart.text.TextBlockAnchor, arg2: javawrappers.org.jfree.chart.axis.CategoryLabelWidthType, arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.ui.RectangleAnchor, arg1: javawrappers.org.jfree.chart.text.TextBlockAnchor, arg2: javawrappers.org.jfree.chart.ui.TextAnchor, arg3: Union[float, JDouble], arg4: javawrappers.org.jfree.chart.axis.CategoryLabelWidthType, arg5: Union[float, JFloat], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getWidthType(self, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelWidthType: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabelAnchor(self, ) -> javawrappers.org.jfree.chart.text.TextBlockAnchor: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def getWidthRatio(self, ) -> Union[float, JFloat]: ...
	def getCategoryAnchor(self, ) -> javawrappers.org.jfree.chart.ui.RectangleAnchor: ...
	def notify(self, ) -> None: ...


class AxisState:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def setMax(self, arg0: Union[float, JDouble], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCursor(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMax(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def cursorLeft(self, arg0: Union[float, JDouble], ) -> None: ...
	def cursorDown(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTicks(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def moveCursor(self, arg0: Union[float, JDouble], arg1: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> None: ...
	def notify(self, ) -> None: ...
	def cursorUp(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTicks(self, ) -> javawrappers.java.util.List: ...
	def cursorRight(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCursor(self, arg0: Union[float, JDouble], ) -> None: ...


class TickUnits:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLargerTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def getCeilingTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: Union[float, JDouble], ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CyclicNumberAxis:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	class CycleBoundTick:
		def __init__(self, arg0: Union[int, JBoolean], arg1: javawrappers.java.lang.Number, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getTickType(self, ) -> javawrappers.org.jfree.chart.axis.TickType: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getText(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
		def notify(self, ) -> None: ...
		def getNumber(self, ) -> javawrappers.java.lang.Number: ...
		def getValue(self, ) -> Union[float, JDouble]: ...
		def getAngle(self, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setAutoRangeStickyZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setAdvanceLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAdvanceLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setOffset(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAdvanceLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getAdvanceLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setRangeType(self, arg0: javawrappers.org.jfree.data.RangeType, ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getAdvanceLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def setNumberFormatOverride(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMarkerBand(self, ) -> javawrappers.org.jfree.chart.axis.MarkerAxisBand: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, ) -> None: ...
	def isBoundMappedToLastCycle(self, ) -> Union[int, JBoolean]: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMarkerBand(self, arg0: javawrappers.org.jfree.chart.axis.MarkerAxisBand, ) -> None: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getCycleBound(self, ) -> Union[float, JDouble]: ...
	def getPeriod(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getNumber(self, ) -> javawrappers.java.lang.Number: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRangeIncludesZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	@overload
	@staticmethod
	def createIntegerTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createIntegerTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.NumberTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def getAutoRangeIncludesZero(self, ) -> Union[int, JBoolean]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setBoundMappedToLastCycle(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTickType(self, ) -> javawrappers.org.jfree.chart.axis.TickType: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	def getRangeType(self, ) -> javawrappers.org.jfree.data.RangeType: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def getOffset(self, ) -> Union[float, JDouble]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isAdvanceLineVisible(self, ) -> Union[int, JBoolean]: ...
	def getNumberFormatOverride(self, ) -> javawrappers.java.text.NumberFormat: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def createStandardTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createStandardTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def configure(self, ) -> None: ...
	def setPeriod(self, arg0: Union[float, JDouble], ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAutoRangeStickyZero(self, ) -> Union[int, JBoolean]: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class LogTick:
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.TickType, arg1: Union[float, JDouble], arg2: javawrappers.java.text.AttributedString, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTickType(self, ) -> javawrappers.org.jfree.chart.axis.TickType: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DateTickMarkPosition:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CategoryAxis:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def clearCategoryLabelURLs(self, ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def getCategoryLabelPositionOffset(self, ) -> Union[int, JInt]: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def addCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def getCategoryLabelPositions(self, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setMaximumCategoryLabelLines(self, arg0: Union[int, JInt], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getCategoryStart(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def removeCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def drawTickMarks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisState, ) -> None: ...
	def clearCategoryLabelToolTips(self, ) -> None: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def addCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.String: ...
	def setCategoryLabelPositionOffset(self, arg0: Union[int, JInt], ) -> None: ...
	def getCategoryEnd(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.String: ...
	def setCategoryMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCategoryMargin(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def setCategoryLabelPositions(self, arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, ) -> None: ...
	def removeCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def getCategoryMiddle(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.util.List, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def getCategoryMiddle(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	@overload
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	@overload
	def setTickLabelFont(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Font, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumCategoryLabelWidthRatio(self, ) -> Union[float, JFloat]: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getCategorySeriesMiddle(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[float, JDouble], arg5: javawrappers.java.awt.geom.Rectangle2D, arg6: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def getCategorySeriesMiddle(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.org.jfree.data.category.CategoryDataset, arg3: Union[float, JDouble], arg4: javawrappers.java.awt.geom.Rectangle2D, arg5: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getCategoryJava2DCoordinate(self, arg0: javawrappers.org.jfree.chart.axis.CategoryAnchor, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def getMaximumCategoryLabelLines(self, ) -> Union[int, JInt]: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	@overload
	def getTickLabelFont(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setMaximumCategoryLabelWidthRatio(self, arg0: Union[float, JFloat], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	@overload
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def setTickLabelPaint(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def getTickLabelPaint(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Paint: ...
	@overload
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class QuarterDateFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: JArray(javawrappers.java.lang.String, 1), arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class ExtendedCategoryAxis:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def clearCategoryLabelURLs(self, ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setMaximumCategoryLabelLines(self, arg0: Union[int, JInt], ) -> None: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def drawTickMarks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisState, ) -> None: ...
	def clearCategoryLabelToolTips(self, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.String: ...
	def setCategoryLabelPositionOffset(self, arg0: Union[int, JInt], ) -> None: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def setCategoryLabelPositions(self, arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, ) -> None: ...
	def removeCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def getCategoryMiddle(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.util.List, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def getCategoryMiddle(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumCategoryLabelWidthRatio(self, ) -> Union[float, JFloat]: ...
	@overload
	def getCategorySeriesMiddle(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[float, JDouble], arg5: javawrappers.java.awt.geom.Rectangle2D, arg6: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def getCategorySeriesMiddle(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.org.jfree.data.category.CategoryDataset, arg3: Union[float, JDouble], arg4: javawrappers.java.awt.geom.Rectangle2D, arg5: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setSubLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	@overload
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	@overload
	def getTickLabelFont(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMaximumCategoryLabelWidthRatio(self, arg0: Union[float, JFloat], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def getCategoryLabelPositionOffset(self, ) -> Union[int, JInt]: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def addCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def getCategoryLabelPositions(self, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	def setSubLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getCategoryStart(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def removeCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def addSubLabel(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def addCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getCategoryEnd(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.String: ...
	def setCategoryMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCategoryMargin(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	@overload
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	@overload
	def setTickLabelFont(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getCategoryJava2DCoordinate(self, arg0: javawrappers.org.jfree.chart.axis.CategoryAnchor, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def getMaximumCategoryLabelLines(self, ) -> Union[int, JInt]: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getSubLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def configure(self, ) -> None: ...
	def getSubLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	@overload
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def setTickLabelPaint(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def getTickLabelPaint(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Paint: ...
	@overload
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class MonthDateFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, arg2: Union[int, JInt], arg3: JArray(Union[int, JBoolean], 1), arg4: javawrappers.java.text.DateFormat, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...


class SubCategoryAxis:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def clearCategoryLabelURLs(self, ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def setMaximumCategoryLabelLines(self, arg0: Union[int, JInt], ) -> None: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def drawTickMarks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisState, ) -> None: ...
	def clearCategoryLabelToolTips(self, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.String: ...
	def setCategoryLabelPositionOffset(self, arg0: Union[int, JInt], ) -> None: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def setCategoryLabelPositions(self, arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, ) -> None: ...
	def removeCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def getCategoryMiddle(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.util.List, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def getCategoryMiddle(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumCategoryLabelWidthRatio(self, ) -> Union[float, JFloat]: ...
	@overload
	def getCategorySeriesMiddle(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[float, JDouble], arg5: javawrappers.java.awt.geom.Rectangle2D, arg6: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def getCategorySeriesMiddle(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.org.jfree.data.category.CategoryDataset, arg3: Union[float, JDouble], arg4: javawrappers.java.awt.geom.Rectangle2D, arg5: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setSubLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	@overload
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	@overload
	def getTickLabelFont(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMaximumCategoryLabelWidthRatio(self, arg0: Union[float, JFloat], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def getCategoryLabelPositionOffset(self, ) -> Union[int, JInt]: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def addCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def getCategoryLabelPositions(self, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	def setSubLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def addSubCategory(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getCategoryStart(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def removeCategoryLabelURL(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def addCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getCategoryEnd(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getCategoryLabelToolTip(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.String: ...
	def setCategoryMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getCategoryMargin(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	@overload
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	@overload
	def setTickLabelFont(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getCategoryJava2DCoordinate(self, arg0: javawrappers.org.jfree.chart.axis.CategoryAnchor, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def getMaximumCategoryLabelLines(self, ) -> Union[int, JInt]: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getSubLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def configure(self, ) -> None: ...
	def getSubLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	@overload
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def setTickLabelPaint(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	@overload
	def getTickLabelPaint(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.awt.Paint: ...
	@overload
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class TickUnit:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSize(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def valueToString(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CompassFormat:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	def getDirectionCode(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class PeriodAxisLabelInfo:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.text.DateFormat, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.text.DateFormat, arg2: javawrappers.org.jfree.chart.ui.RectangleInsets, arg3: javawrappers.java.awt.Font, arg4: javawrappers.java.awt.Paint, arg5: Union[int, JBoolean], arg6: javawrappers.java.awt.Stroke, arg7: javawrappers.java.awt.Paint, ): ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createInstance(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.util.TimeZone, arg2: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def getDividerPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPadding(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def notifyAll(self, ) -> None: ...
	def getPeriodClass(self, ) -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDrawDividers(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDateFormat(self, ) -> javawrappers.java.text.DateFormat: ...
	def getDividerStroke(self, ) -> javawrappers.java.awt.Stroke: ...


class CategoryLabelPositions:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, arg1: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, arg2: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, arg3: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def replaceBottomPosition(arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, arg1: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	@staticmethod
	def createUpRotationLabelPositions(arg0: Union[float, JDouble], ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def replaceTopPosition(arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, arg1: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def replaceLeftPosition(arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, arg1: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	def notify(self, ) -> None: ...
	def getLabelPosition(self, arg0: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPosition: ...
	@staticmethod
	def createDownRotationLabelPositions(arg0: Union[float, JDouble], ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	@staticmethod
	def replaceRightPosition(arg0: javawrappers.org.jfree.chart.axis.CategoryLabelPositions, arg1: javawrappers.org.jfree.chart.axis.CategoryLabelPosition, ) -> javawrappers.org.jfree.chart.axis.CategoryLabelPositions: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LogAxis:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setSmallestValue(self, arg0: Union[float, JDouble], ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def calculateLog(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setBase(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setBaseSymbol(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setNumberFormatOverride(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getBase(self, ) -> Union[float, JDouble]: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, ) -> None: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def getSmallestValue(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def setBaseFormatter(self, arg0: javawrappers.java.text.Format, ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def getBaseSymbol(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.NumberTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def calculateValue(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def exponentLengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getBaseFormatter(self, ) -> javawrappers.java.text.Format: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getNumberFormatOverride(self, ) -> javawrappers.java.text.NumberFormat: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class TickType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TickUnitSource:
	def getLargerTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.TickUnit, ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...
	@overload
	def getCeilingTickUnit(self, arg0: Union[float, JDouble], ) -> javawrappers.org.jfree.chart.axis.TickUnit: ...


class NumberAxis:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def setTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultAutoRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def centerRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickMarkStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getUpperMargin(self, ) -> Union[float, JDouble]: ...
	def setAutoRangeStickyZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.AttributedString: ...
	def setUpperMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def getDefaultAutoRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def setLowerBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLeftArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getUpArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def setTickMarkPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def isInverted(self, ) -> Union[int, JBoolean]: ...
	def setTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setRangeType(self, arg0: javawrappers.org.jfree.data.RangeType, ) -> None: ...
	def setMinorTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setNumberFormatOverride(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def setTickMarkInsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def setTickLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setLabelAngle(self, arg0: Union[float, JDouble], ) -> None: ...
	def getFixedAutoRange(self, ) -> Union[float, JDouble]: ...
	def setPlot(self, arg0: javawrappers.org.jfree.chart.plot.Plot, ) -> None: ...
	def setFixedAutoRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def setTickMarkStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMarkerBand(self, ) -> javawrappers.org.jfree.chart.axis.MarkerAxisBand: ...
	def isAutoTickUnitSelection(self, ) -> Union[int, JBoolean]: ...
	def setUpArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...
	def getMinorTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAxisLineVisible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def resizeRange(self, arg0: Union[float, JDouble], ) -> None: ...
	def isAutoRange(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setTickUnit(self, arg0: javawrappers.org.jfree.chart.axis.NumberTickUnit, ) -> None: ...
	def setRightArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def isPositiveArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def setMarkerBand(self, arg0: javawrappers.org.jfree.chart.axis.MarkerAxisBand, ) -> None: ...
	def setMinorTickMarksVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPositiveArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setFixedDimension(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRangeIncludesZero(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFixedDimension(self, ) -> Union[float, JDouble]: ...
	def setVerticalTickLabels(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUpperBound(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def setTickLabelsVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	@overload
	def setRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRange(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	def resizeRange2(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def draw(self, arg0: javawrappers.java.awt.Graphics2D, arg1: Union[float, JDouble], arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.java.awt.geom.Rectangle2D, arg4: javawrappers.org.jfree.chart.ui.RectangleEdge, arg5: javawrappers.org.jfree.chart.plot.PlotRenderingInfo, ) -> javawrappers.org.jfree.chart.axis.AxisState: ...
	def lengthToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def getLabelAngle(self, ) -> Union[float, JDouble]: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.chart.event.AxisChangeListener, ) -> None: ...
	def reserveSpace(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.plot.Plot, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, arg4: javawrappers.org.jfree.chart.axis.AxisSpace, ) -> javawrappers.org.jfree.chart.axis.AxisSpace: ...
	@overload
	@staticmethod
	def createIntegerTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createIntegerTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isNegativeArrowVisible(self, ) -> Union[int, JBoolean]: ...
	def getTickUnit(self, ) -> javawrappers.org.jfree.chart.axis.NumberTickUnit: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setRangeWithMargins(self, arg0: javawrappers.org.jfree.data.Range, ) -> None: ...
	def setNegativeArrowVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickCount(self, arg0: Union[int, JInt], ) -> None: ...
	def getLabelFont(self, ) -> javawrappers.java.awt.Font: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLabel(self, ) -> javawrappers.java.lang.String: ...
	def setAxisLineStroke(self, arg0: javawrappers.java.awt.Stroke, ) -> None: ...
	def getMinorTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoRangeMinimumSize(self, arg0: Union[float, JDouble], ) -> None: ...
	def setAutoRange(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def setInverted(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setMinorTickMarkOutsideLength(self, arg0: Union[float, JFloat], ) -> None: ...
	def getTickMarkInsideLength(self, ) -> Union[float, JFloat]: ...
	def setAxisLineVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setAxisLinePaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAxisLineStroke(self, ) -> javawrappers.java.awt.Stroke: ...
	def getLabelLocation(self, ) -> javawrappers.org.jfree.chart.axis.AxisLabelLocation: ...
	def getRange(self, ) -> javawrappers.org.jfree.data.Range: ...
	def isTickLabelsVisible(self, ) -> Union[int, JBoolean]: ...
	def pan(self, arg0: Union[float, JDouble], ) -> None: ...
	def getTickLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def getDownArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def getLowerMargin(self, ) -> Union[float, JDouble]: ...
	def getAutoRangeIncludesZero(self, ) -> Union[int, JBoolean]: ...
	def setLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def setVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRightArrow(self, ) -> javawrappers.java.awt.Shape: ...
	def isVisible(self, ) -> Union[int, JBoolean]: ...
	def setStandardTickUnits(self, arg0: javawrappers.org.jfree.chart.axis.TickUnitSource, ) -> None: ...
	def valueToJava2D(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.text.AttributedString, ) -> None: ...
	@overload
	def setAttributedLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def isMinorTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def isVerticalTickLabels(self, ) -> Union[int, JBoolean]: ...
	def setRangeAboutValue(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def getStandardTickUnits(self, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getAutoRangeMinimumSize(self, ) -> Union[float, JDouble]: ...
	def getRangeType(self, ) -> javawrappers.org.jfree.data.RangeType: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabelInsets(self, arg0: javawrappers.org.jfree.chart.ui.RectangleInsets, ) -> None: ...
	def setTickLabelFont(self, arg0: javawrappers.java.awt.Font, ) -> None: ...
	def refreshTicks(self, arg0: javawrappers.java.awt.Graphics2D, arg1: javawrappers.org.jfree.chart.axis.AxisState, arg2: javawrappers.java.awt.geom.Rectangle2D, arg3: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def getTickMarkOutsideLength(self, ) -> Union[float, JFloat]: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def setAutoTickUnitSelection(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isTickMarksVisible(self, ) -> Union[int, JBoolean]: ...
	def getNumberFormatOverride(self, ) -> javawrappers.java.text.NumberFormat: ...
	def getLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def getPlot(self, ) -> javawrappers.org.jfree.chart.plot.Plot: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttributedLabel(self, ) -> javawrappers.java.text.AttributedString: ...
	def setLabelLocation(self, arg0: javawrappers.org.jfree.chart.axis.AxisLabelLocation, ) -> None: ...
	def setLowerMargin(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	@staticmethod
	def createStandardTickUnits() -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	@overload
	@staticmethod
	def createStandardTickUnits(arg0: javawrappers.java.util.Locale, ) -> javawrappers.org.jfree.chart.axis.TickUnitSource: ...
	def getTickMarkPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def setDownArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def configure(self, ) -> None: ...
	def getAxisLinePaint(self, ) -> javawrappers.java.awt.Paint: ...
	def zoomRange(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> None: ...
	def setLeftArrow(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def setTickLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getLabelInsets(self, ) -> javawrappers.org.jfree.chart.ui.RectangleInsets: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setLabel(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def java2DToValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.awt.geom.Rectangle2D, arg2: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> Union[float, JDouble]: ...
	def setLabelPaint(self, arg0: javawrappers.java.awt.Paint, ) -> None: ...
	def getAutoRangeStickyZero(self, ) -> Union[int, JBoolean]: ...
	def getTickLabelPaint(self, ) -> javawrappers.java.awt.Paint: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class AxisCollection:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.org.jfree.chart.axis.Axis, arg1: javawrappers.org.jfree.chart.ui.RectangleEdge, ) -> None: ...
	def getAxesAtRight(self, ) -> javawrappers.java.util.List: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAxesAtTop(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAxesAtBottom(self, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAxesAtLeft(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ValueTick:
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.chart.axis.TickType, arg1: Union[float, JDouble], arg2: javawrappers.java.lang.String, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: javawrappers.org.jfree.chart.ui.TextAnchor, arg5: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.String, arg2: javawrappers.org.jfree.chart.ui.TextAnchor, arg3: javawrappers.org.jfree.chart.ui.TextAnchor, arg4: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTickType(self, ) -> javawrappers.org.jfree.chart.axis.TickType: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getText(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRotationAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	def getAngle(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTextAnchor(self, ) -> javawrappers.org.jfree.chart.ui.TextAnchor: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class NumberTickUnit:
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.text.NumberFormat, arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.java.text.NumberFormat, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSize(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinorTickCount(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def valueToString(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


