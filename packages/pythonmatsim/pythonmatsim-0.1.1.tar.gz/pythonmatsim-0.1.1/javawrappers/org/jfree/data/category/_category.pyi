################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.chart.util
import javawrappers.org.jfree.data
import javawrappers.org.jfree.data.category
import javawrappers.org.jfree.data.general

from jpype.types import *
from typing import Union

from typing import overload

class CategoryDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class DefaultIntervalCategoryDataset:
	@overload
	def __init__(self, arg0: JArray(JArray(javawrappers.java.lang.Number, 1), 1), arg1: JArray(JArray(javawrappers.java.lang.Number, 1), 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(JArray(javawrappers.java.lang.Number, 1), 1), arg2: JArray(JArray(javawrappers.java.lang.Number, 1), 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Comparable, 1), arg1: JArray(javawrappers.java.lang.Comparable, 1), arg2: JArray(JArray(javawrappers.java.lang.Number, 1), 1), arg3: JArray(JArray(javawrappers.java.lang.Number, 1), 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: JArray(JArray(Union[float, JDouble], 1), 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setCategoryKeys(self, arg0: JArray(javawrappers.java.lang.Comparable, 1), ) -> None: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getSeriesIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def setSeriesKeys(self, arg0: JArray(javawrappers.java.lang.Comparable, 1), ) -> None: ...
	def getCategoryIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setStartValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setEndValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def getCategoryCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class IntervalCategoryDataset:
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...


class SlidingCategoryDataset:
	def __init__(self, arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setMaximumCategoryCount(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getMaximumCategoryCount(self, ) -> Union[int, JInt]: ...
	def setFirstCategoryIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFirstCategoryIndex(self, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def getUnderlyingDataset(self, ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class CategoryToPieDataset:
	def __init__(self, arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: javawrappers.org.jfree.chart.util.TableOrder, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def datasetChanged(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeEvent, ) -> None: ...
	def getExtractIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getExtractType(self, ) -> javawrappers.org.jfree.chart.util.TableOrder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnderlyingDataset(self, ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class CategoryRangeInfo:
	def getRangeBounds(self, arg0: javawrappers.java.util.List, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...


class DefaultCategoryDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def incrementValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def addValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def addValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def removeValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


