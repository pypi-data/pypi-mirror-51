################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.data.time
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.data
import javawrappers.java.beans
import javawrappers.org.jfree.data.gantt
import javawrappers.org.jfree.data.general

from jpype.types import *
from typing import Union

from typing import overload

class TaskSeries:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.org.jfree.data.gantt.Task, ) -> None: ...
	def removeAll(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jfree.data.gantt.Task: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.gantt.Task: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def add(self, arg0: javawrappers.org.jfree.data.gantt.Task, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def getTasks(self, ) -> javawrappers.java.util.List: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class TaskSeriesCollection:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.org.jfree.data.gantt.TaskSeries, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeAll(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def add(self, arg0: javawrappers.org.jfree.data.gantt.TaskSeries, ) -> None: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	@overload
	def getSubIntervalCount(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSubIntervalCount(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getSeries(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.gantt.TaskSeries: ...
	@overload
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.gantt.TaskSeries: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...
	@overload
	def getPercentComplete(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...


class SlidingGanttCategoryDataset:
	def __init__(self, arg0: javawrappers.org.jfree.data.gantt.GanttCategoryDataset, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setMaximumCategoryCount(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getMaximumCategoryCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setFirstCategoryIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getFirstCategoryIndex(self, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def getUnderlyingDataset(self, ) -> javawrappers.org.jfree.data.gantt.GanttCategoryDataset: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getSubIntervalCount(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	@overload
	def getSubIntervalCount(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...
	@overload
	def getPercentComplete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...


class GanttCategoryDataset:
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getEndValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getSubIntervalCount(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSubIntervalCount(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStartValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getPercentComplete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getPercentComplete(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...


class XYTaskDataset:
	def __init__(self, arg0: javawrappers.org.jfree.data.gantt.TaskSeriesCollection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def setTransposed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def isTransposed(self, ) -> Union[int, JBoolean]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSeriesWidth(self, arg0: Union[float, JDouble], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def datasetChanged(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeEvent, ) -> None: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getTasks(self, ) -> javawrappers.org.jfree.data.gantt.TaskSeriesCollection: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSeriesWidth(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class Task:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jfree.data.time.TimePeriod, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Date, arg2: javawrappers.java.util.Date, ): ...
	def setDuration(self, arg0: javawrappers.org.jfree.data.time.TimePeriod, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addSubtask(self, arg0: javawrappers.org.jfree.data.gantt.Task, ) -> None: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def removeSubtask(self, arg0: javawrappers.org.jfree.data.gantt.Task, ) -> None: ...
	@overload
	def setPercentComplete(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setPercentComplete(self, arg0: javawrappers.java.lang.Double, ) -> None: ...
	def getSubtask(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.gantt.Task: ...
	def getDuration(self, ) -> javawrappers.org.jfree.data.time.TimePeriod: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSubtaskCount(self, ) -> Union[int, JInt]: ...
	def getPercentComplete(self, ) -> javawrappers.java.lang.Double: ...


