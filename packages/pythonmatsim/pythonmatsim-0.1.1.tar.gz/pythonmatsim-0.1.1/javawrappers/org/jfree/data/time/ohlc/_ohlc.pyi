################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.data.time
import javawrappers.java.lang
import javawrappers.org.jfree.data
import javawrappers.java.util
import javawrappers.java.beans
import javawrappers.org.jfree.data.general
import javawrappers.org.jfree.data.time.ohlc

from jpype.types import *
from typing import Union

from typing import overload

class OHLC:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClose(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpen(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLow(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getHigh(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class OHLCSeriesCollection:
	def __init__(self, ): ...
	def getOpenValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getClose(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def addSeries(self, arg0: javawrappers.org.jfree.data.time.ohlc.OHLCSeries, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOpen(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeAllSeries(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getVolume(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getLowValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def removeSeries(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeSeries(self, arg0: javawrappers.org.jfree.data.time.ohlc.OHLCSeries, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getLow(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getCloseValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getHigh(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getHighValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getXPosition(self, ) -> javawrappers.org.jfree.data.time.TimePeriodAnchor: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getVolumeValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeries(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.ohlc.OHLCSeries: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def setXPosition(self, arg0: javawrappers.org.jfree.data.time.TimePeriodAnchor, ) -> None: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class OHLCItem:
	def __init__(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ): ...
	def getOpenValue(self, ) -> Union[float, JDouble]: ...
	def getHighValue(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getPeriod(self, ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notify(self, ) -> None: ...
	def getLowValue(self, ) -> Union[float, JDouble]: ...
	def getYValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCloseValue(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class OHLCSeries:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def getMaximumItemCount(self, ) -> Union[int, JInt]: ...
	def getPeriod(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.time.RegularTimePeriod: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getAllowDuplicateXValues(self, ) -> Union[int, JBoolean]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.ohlc.OHLCItem, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.time.RegularTimePeriod, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getDataItem(self, arg0: Union[int, JInt], ) -> javawrappers.org.jfree.data.ComparableObjectItem: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAutoSort(self, ) -> Union[int, JBoolean]: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


