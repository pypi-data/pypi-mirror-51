################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.data.xy
import javawrappers.org.jfree.chart.util
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.awt.image
import javawrappers.org.jfree.data
import javawrappers.java.io
import javawrappers.java.beans
import javawrappers.org.jfree.chart.renderer
import javawrappers.org.jfree.data.category
import javawrappers.org.jfree.data.general
import javawrappers.org.jfree.data.function

from jpype.types import *
from typing import Union

from typing import overload

class DefaultKeyedValuesDataset:
	def __init__(self, ): ...
	def sortByValues(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def sortByKeys(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def clear(self, ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultPieDataset:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.KeyedValues, ): ...
	def sortByValues(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def sortByKeys(self, arg0: javawrappers.org.jfree.chart.util.SortOrder, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def clear(self, ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: Union[float, JDouble], ) -> None: ...
	@overload
	def insertValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class Series:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def addVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def setDescription(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def fireSeriesChanged(self, ) -> None: ...
	def getDescription(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeVetoableChangeListener(self, arg0: javawrappers.java.beans.VetoableChangeListener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...


class HeatMapDataset:
	def getMinimumXValue(self, ) -> Union[float, JDouble]: ...
	def getXSampleCount(self, ) -> Union[int, JInt]: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getMinimumYValue(self, ) -> Union[float, JDouble]: ...
	def getMaximumXValue(self, ) -> Union[float, JDouble]: ...
	def getXValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getMaximumYValue(self, ) -> Union[float, JDouble]: ...
	def getYSampleCount(self, ) -> Union[int, JInt]: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...


class AbstractSeriesDataset:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DatasetGroup:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class KeyedValueDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class DefaultValueDataset:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Number, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DatasetChangeListener:
	def datasetChanged(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeEvent, ) -> None: ...


class HeatMapUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def extractRowFromHeatMapDataset(arg0: javawrappers.org.jfree.data.general.HeatMapDataset, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.xy.XYDataset: ...
	@staticmethod
	def extractColumnFromHeatMapDataset(arg0: javawrappers.org.jfree.data.general.HeatMapDataset, arg1: Union[int, JInt], arg2: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.xy.XYDataset: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def createHeatMapImage(arg0: javawrappers.org.jfree.data.general.HeatMapDataset, arg1: javawrappers.org.jfree.chart.renderer.PaintScale, ) -> javawrappers.java.awt.image.BufferedImage: ...


class SeriesDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class SeriesException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Dataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class SeriesChangeListener:
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...


class DefaultKeyedValues2DDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def incrementValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def addValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def addValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def removeValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def setValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DatasetUtils:
	@overload
	@staticmethod
	def createPieDatasetForColumn(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	@overload
	@staticmethod
	def createPieDatasetForColumn(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def createConsolidatedPieDataset(arg0: javawrappers.org.jfree.data.general.PieDataset, arg1: javawrappers.java.lang.Comparable, arg2: Union[float, JDouble], ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	@overload
	@staticmethod
	def createConsolidatedPieDataset(arg0: javawrappers.org.jfree.data.general.PieDataset, arg1: javawrappers.java.lang.Comparable, arg2: Union[float, JDouble], arg3: Union[int, JInt], ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	@overload
	@staticmethod
	def findMinimumRangeValue(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def findMinimumRangeValue(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.java.lang.Number: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def iterateToFindRangeBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: javawrappers.java.util.List, arg2: javawrappers.org.jfree.data.Range, arg3: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def iterateToFindRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: javawrappers.java.util.List, arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findDomainBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: javawrappers.java.util.List, arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findDomainBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findDomainBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findMaximumRangeValue(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def findMaximumRangeValue(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def iterateRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def iterateRangeBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def iterateRangeBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def iterateRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def createCategoryDataset(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(JArray(Union[float, JDouble], 1), 1), ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	@overload
	@staticmethod
	def createCategoryDataset(arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.org.jfree.data.KeyedValues, ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	@overload
	@staticmethod
	def createCategoryDataset(arg0: JArray(javawrappers.java.lang.Comparable, 1), arg1: JArray(javawrappers.java.lang.Comparable, 1), arg2: JArray(JArray(Union[float, JDouble], 1), 1), ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	@overload
	@staticmethod
	def createCategoryDataset(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: JArray(JArray(javawrappers.java.lang.Number, 1), 1), ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	@overload
	@staticmethod
	def isEmptyOrNull(arg0: javawrappers.org.jfree.data.general.PieDataset, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isEmptyOrNull(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isEmptyOrNull(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def findYValue(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@staticmethod
	def findMinimumDomainValue(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def sampleFunction2D(arg0: javawrappers.org.jfree.data.function.Function2D, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.xy.XYDataset: ...
	@overload
	@staticmethod
	def iterateZBounds(arg0: javawrappers.org.jfree.data.xy.XYZDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def iterateZBounds(arg0: javawrappers.org.jfree.data.xy.XYZDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def findItemIndicesForX(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> JArray(Union[int, JInt], 1): ...
	@overload
	@staticmethod
	def iterateDomainBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def iterateDomainBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def iterateToFindDomainBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: javawrappers.java.util.List, arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def iterateToFindZBounds(arg0: javawrappers.org.jfree.data.xy.XYZDataset, arg1: javawrappers.java.util.List, arg2: javawrappers.org.jfree.data.Range, arg3: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findZBounds(arg0: javawrappers.org.jfree.data.xy.XYZDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findZBounds(arg0: javawrappers.org.jfree.data.xy.XYZDataset, arg1: javawrappers.java.util.List, arg2: javawrappers.org.jfree.data.Range, arg3: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findZBounds(arg0: javawrappers.org.jfree.data.xy.XYZDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def calculateStackTotal(arg0: javawrappers.org.jfree.data.xy.TableXYDataset, arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def findRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: javawrappers.java.util.List, arg2: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findRangeBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findRangeBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: javawrappers.java.util.List, arg2: javawrappers.org.jfree.data.Range, arg3: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findRangeBounds(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def findMinimumStackedRangeValue(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def findStackedRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: javawrappers.org.jfree.data.KeyToGroupMap, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findStackedRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findStackedRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findStackedRangeBounds(arg0: javawrappers.org.jfree.data.xy.TableXYDataset, arg1: Union[float, JDouble], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	@staticmethod
	def findStackedRangeBounds(arg0: javawrappers.org.jfree.data.xy.TableXYDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def findMaximumStackedRangeValue(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def findMaximumDomainValue(arg0: javawrappers.org.jfree.data.xy.XYDataset, ) -> javawrappers.java.lang.Number: ...
	@staticmethod
	def findCumulativeRangeBounds(arg0: javawrappers.org.jfree.data.category.CategoryDataset, ) -> javawrappers.org.jfree.data.Range: ...
	@staticmethod
	def sampleFunction2DToSeries(arg0: javawrappers.org.jfree.data.function.Function2D, arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[int, JInt], arg4: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.xy.XYSeries: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def createPieDatasetForRow(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	@overload
	@staticmethod
	def createPieDatasetForRow(arg0: javawrappers.org.jfree.data.category.CategoryDataset, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	@staticmethod
	def calculatePieDatasetTotal(arg0: javawrappers.org.jfree.data.general.PieDataset, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DefaultHeatMapDataset:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMinimumXValue(self, ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def getXValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getXSampleCount(self, ) -> Union[int, JInt]: ...
	def getYValue(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getMaximumXValue(self, ) -> Union[float, JDouble]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getMaximumYValue(self, ) -> Union[float, JDouble]: ...
	def getYSampleCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getZ(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMinimumYValue(self, ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def setZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def getZValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DatasetChangeEvent:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.jfree.data.general.Dataset, ): ...
	def getDataset(self, ) -> javawrappers.org.jfree.data.general.Dataset: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractDataset:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class WaferMapDataset:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.Number, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMaxValue(self, ) -> javawrappers.java.lang.Number: ...
	def notifyAll(self, ) -> None: ...
	def getUniqueValues(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getChipSpace(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getUniqueValueCount(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def getChipValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getChipValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setChipSpace(self, arg0: Union[float, JDouble], ) -> None: ...
	def setMaxChipY(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def addValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def addValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def setMaxChipX(self, arg0: Union[int, JInt], ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getMaxChipY(self, ) -> Union[int, JInt]: ...
	def getMaxChipX(self, ) -> Union[int, JInt]: ...
	def isMinValue(self, arg0: javawrappers.java.lang.Number, ) -> Union[int, JBoolean]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getMinValue(self, ) -> javawrappers.java.lang.Number: ...
	def isMaxValue(self, arg0: javawrappers.java.lang.Number, ) -> Union[int, JBoolean]: ...
	def validateObject(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultKeyedValueDataset:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jfree.data.KeyedValue, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def updateValue(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def validateObject(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def setValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class KeyedValuesDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class KeyedValues2DDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class PieDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getKeys(self, ) -> javawrappers.java.util.List: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class ValueDataset:
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...


class SeriesChangeEvent:
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


