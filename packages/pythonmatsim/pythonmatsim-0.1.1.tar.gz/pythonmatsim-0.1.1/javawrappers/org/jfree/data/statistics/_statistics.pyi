################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.jfree.data.xy
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.jfree.data
import javawrappers.org.jfree.data.general
import javawrappers.org.jfree.data.statistics

from jpype.types import *
from typing import Union

from typing import overload

class MeanAndStandardDeviation:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getStandardDeviation(self, ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMeanValue(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStandardDeviationValue(self, ) -> Union[float, JDouble]: ...
	def getMean(self, ) -> javawrappers.java.lang.Number: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MultiValueCategoryDataset:
	def getRowCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getValues(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@overload
	def getValues(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.util.List: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...


class BoxAndWhiskerCategoryDataset:
	def getRowCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getMaxOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMaxOutlier(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMinRegularValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMinRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getQ3Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getQ3Value(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMaxRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMaxRegularValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	@overload
	def getQ1Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getQ1Value(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMedianValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMedianValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getMeanValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMeanValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	@overload
	def getOutliers(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@overload
	def getOutliers(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.util.List: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getMinOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMinOutlier(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...


class Statistics:
	def __init__(self, ): ...
	@staticmethod
	def getCorrelation(arg0: JArray(javawrappers.java.lang.Number, 1), arg1: JArray(javawrappers.java.lang.Number, 1), ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getMovingAverage(arg0: JArray(javawrappers.java.lang.Number, 1), arg1: JArray(javawrappers.java.lang.Number, 1), arg2: Union[int, JInt], ) -> JArray(JArray(Union[float, JDouble], 1), 1): ...
	@staticmethod
	def getLinearFit(arg0: JArray(javawrappers.java.lang.Number, 1), arg1: JArray(javawrappers.java.lang.Number, 1), ) -> JArray(Union[float, JDouble], 1): ...
	@staticmethod
	def getStdDev(arg0: JArray(javawrappers.java.lang.Number, 1), ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def calculateMean(arg0: javawrappers.java.util.Collection, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateMean(arg0: javawrappers.java.util.Collection, arg1: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateMean(arg0: JArray(javawrappers.java.lang.Number, 1), arg1: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateMean(arg0: JArray(javawrappers.java.lang.Number, 1), ) -> Union[float, JDouble]: ...
	@staticmethod
	def getSlope(arg0: JArray(javawrappers.java.lang.Number, 1), arg1: JArray(javawrappers.java.lang.Number, 1), ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def calculateMedian(arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateMedian(arg0: javawrappers.java.util.List, arg1: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateMedian(arg0: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def calculateMedian(arg0: javawrappers.java.util.List, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class StatisticalCategoryDataset:
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getMeanValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMeanValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getStdDevValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStdDevValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...


class DefaultBoxAndWhiskerXYDataset:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMinRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getFaroutCoefficient(self, ) -> Union[float, JDouble]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getItem(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.statistics.BoxAndWhiskerItem: ...
	def getXDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.Date: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def setOutlierCoefficient(self, arg0: Union[float, JDouble], ) -> None: ...
	def getQ1Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getMinOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def add(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.org.jfree.data.statistics.BoxAndWhiskerItem, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getMaxOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getQ3Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getMaxRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setFaroutCoefficient(self, arg0: Union[float, JDouble], ) -> None: ...
	def getMedianValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getMeanValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getOutlierCoefficient(self, ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutliers(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class SimpleHistogramBin:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def accepts(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getUpperBound(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def overlapsWith(self, arg0: javawrappers.org.jfree.data.statistics.SimpleHistogramBin, ) -> Union[int, JBoolean]: ...
	def setItemCount(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLowerBound(self, ) -> Union[float, JDouble]: ...


class DefaultBoxAndWhiskerCategoryDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getMinRegularValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMinRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def notifyAll(self, ) -> None: ...
	def getItem(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.org.jfree.data.statistics.BoxAndWhiskerItem: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	def getQ1Value(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getQ1Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def getMinOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMinOutlier(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	def add(self, arg0: javawrappers.org.jfree.data.statistics.BoxAndWhiskerItem, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getMaxOutlier(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMaxOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getQ3Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getQ3Value(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMaxRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMaxRegularValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getMedianValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMedianValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getMeanValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMeanValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getOutliers(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.util.List: ...
	@overload
	def getOutliers(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class HistogramDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def addSeries(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], ) -> None: ...
	@overload
	def addSeries(self, arg0: javawrappers.java.lang.Comparable, arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[float, JDouble], arg4: Union[float, JDouble], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setType(self, arg0: javawrappers.org.jfree.data.statistics.HistogramType, ) -> None: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getType(self, ) -> javawrappers.org.jfree.data.statistics.HistogramType: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class Regression:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getPowerRegression(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def getPowerRegression(arg0: JArray(JArray(Union[float, JDouble], 1), 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getOLSRegression(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	@staticmethod
	def getOLSRegression(arg0: JArray(JArray(Union[float, JDouble], 1), 1), ) -> JArray(Union[float, JDouble], 1): ...
	@staticmethod
	def getPolynomialRegression(arg0: javawrappers.org.jfree.data.xy.XYDataset, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	def notify(self, ) -> None: ...


class SimpleHistogramDataset:
	def __init__(self, arg0: javawrappers.java.lang.Comparable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getStartX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getStartY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getStartXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def addBin(self, arg0: javawrappers.org.jfree.data.statistics.SimpleHistogramBin, ) -> None: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addObservations(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def addObservation(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def addObservation(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> None: ...
	def getEndYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def seriesChanged(self, arg0: javawrappers.org.jfree.data.general.SeriesChangeEvent, ) -> None: ...
	def setAdjustForBinSize(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEndY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getStartYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getEndX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getEndXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def removeAllBins(self, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getAdjustForBinSize(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def clearObservations(self, ) -> None: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class DefaultStatisticalCategoryDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> None: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	@overload
	def getStdDevValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getStdDevValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def removeRow(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeRow(self, arg0: Union[int, JInt], ) -> None: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	def add(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: javawrappers.java.lang.Comparable, arg3: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, arg2: javawrappers.java.lang.Comparable, arg3: javawrappers.java.lang.Comparable, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	def clear(self, ) -> None: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def removeColumn(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	@overload
	def removeColumn(self, arg0: Union[int, JInt], ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	@overload
	def getMeanValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	@overload
	def getMeanValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


class BoxAndWhiskerXYDataset:
	def getMaxOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getMinRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getItemCount(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getQ3Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getMaxRegularValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getFaroutCoefficient(self, ) -> Union[float, JDouble]: ...
	def getXValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getSeriesKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getQ1Value(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getMedianValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getX(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getY(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getMeanValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getYValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getOutlierCoefficient(self, ) -> Union[float, JDouble]: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def getSeriesCount(self, ) -> Union[int, JInt]: ...
	def getOutliers(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	def indexOf(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getMinOutlier(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	def getDomainOrder(self, ) -> javawrappers.org.jfree.data.DomainOrder: ...


class HistogramBin:
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def incrementCount(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getStartBoundary(self, ) -> Union[float, JDouble]: ...
	def getBinWidth(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getEndBoundary(self, ) -> Union[float, JDouble]: ...


class HistogramType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BoxAndWhiskerItem:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, arg2: javawrappers.java.lang.Number, arg3: javawrappers.java.lang.Number, arg4: javawrappers.java.lang.Number, arg5: javawrappers.java.lang.Number, arg6: javawrappers.java.lang.Number, arg7: javawrappers.java.lang.Number, arg8: javawrappers.java.util.List, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: Union[float, JDouble], arg7: Union[float, JDouble], arg8: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getQ3(self, ) -> javawrappers.java.lang.Number: ...
	def getMaxOutlier(self, ) -> javawrappers.java.lang.Number: ...
	def getMinRegularValue(self, ) -> javawrappers.java.lang.Number: ...
	def notifyAll(self, ) -> None: ...
	def getMaxRegularValue(self, ) -> javawrappers.java.lang.Number: ...
	def getQ1(self, ) -> javawrappers.java.lang.Number: ...
	def notify(self, ) -> None: ...
	def getMedian(self, ) -> javawrappers.java.lang.Number: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMean(self, ) -> javawrappers.java.lang.Number: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutliers(self, ) -> javawrappers.java.util.List: ...
	def getMinOutlier(self, ) -> javawrappers.java.lang.Number: ...


class BoxAndWhiskerCalculator:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def calculateQ3(arg0: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def calculateBoxAndWhiskerStatistics(arg0: javawrappers.java.util.List, arg1: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.statistics.BoxAndWhiskerItem: ...
	@overload
	@staticmethod
	def calculateBoxAndWhiskerStatistics(arg0: javawrappers.java.util.List, ) -> javawrappers.org.jfree.data.statistics.BoxAndWhiskerItem: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def calculateQ1(arg0: javawrappers.java.util.List, ) -> Union[float, JDouble]: ...


class DefaultMultiValueCategoryDataset:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def addChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRangeUpperBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRangeBounds(self, arg0: Union[int, JBoolean], ) -> javawrappers.org.jfree.data.Range: ...
	def getRowKeys(self, ) -> javawrappers.java.util.List: ...
	def setNotify(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getColumnKeys(self, ) -> javawrappers.java.util.List: ...
	def getRangeLowerBound(self, arg0: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def add(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Comparable, ) -> None: ...
	def getNotify(self, ) -> Union[int, JBoolean]: ...
	def getRowCount(self, ) -> Union[int, JInt]: ...
	@overload
	def getValues(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@overload
	def getValues(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.util.List: ...
	def getRowKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def getColumnCount(self, ) -> Union[int, JInt]: ...
	def setGroup(self, arg0: javawrappers.org.jfree.data.general.DatasetGroup, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.Number: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, ) -> javawrappers.java.lang.Number: ...
	def removeChangeListener(self, arg0: javawrappers.org.jfree.data.general.DatasetChangeListener, ) -> None: ...
	def getRowIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def getColumnKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Comparable: ...
	def validateObject(self, ) -> None: ...
	def getGroup(self, ) -> javawrappers.org.jfree.data.general.DatasetGroup: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getColumnIndex(self, arg0: javawrappers.java.lang.Comparable, ) -> Union[int, JInt]: ...
	def hasListener(self, arg0: javawrappers.java.util.EventListener, ) -> Union[int, JBoolean]: ...


