################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.xml.sax.helpers
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.xml.sax
import javawrappers.org.jfree.data.category
import javawrappers.org.jfree.data.general

from jpype.types import *
from typing import Union

from typing import overload

class ValueHandler:
	def __init__(self, arg0: javawrappers.org.jfree.data.xml.RootHandler, arg1: javawrappers.org.jfree.data.xml.ItemHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class DatasetReader:
	def __init__(self, ): ...
	@overload
	@staticmethod
	def readCategoryDatasetFromXML(arg0: javawrappers.java.io.File, ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	@overload
	@staticmethod
	def readCategoryDatasetFromXML(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def readPieDatasetFromXML(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	@overload
	@staticmethod
	def readPieDatasetFromXML(arg0: javawrappers.java.io.File, ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DatasetTags:


class RootHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def pushSubHandler(self, arg0: javawrappers.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCurrentHandler(self, ) -> javawrappers.org.xml.sax.helpers.DefaultHandler: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def getSubHandlers(self, ) -> javawrappers.java.util.Stack: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def popSubHandler(self, ) -> javawrappers.org.xml.sax.helpers.DefaultHandler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class KeyHandler:
	def __init__(self, arg0: javawrappers.org.jfree.data.xml.RootHandler, arg1: javawrappers.org.jfree.data.xml.ItemHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class PieDatasetHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def pushSubHandler(self, arg0: javawrappers.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getDataset(self, ) -> javawrappers.org.jfree.data.general.PieDataset: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addItem(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCurrentHandler(self, ) -> javawrappers.org.xml.sax.helpers.DefaultHandler: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def getSubHandlers(self, ) -> javawrappers.java.util.Stack: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def popSubHandler(self, ) -> javawrappers.org.xml.sax.helpers.DefaultHandler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class ItemHandler:
	def __init__(self, arg0: javawrappers.org.jfree.data.xml.RootHandler, arg1: javawrappers.org.xml.sax.helpers.DefaultHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def setKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def getKey(self, ) -> javawrappers.java.lang.Comparable: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setValue(self, arg0: javawrappers.java.lang.Number, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class CategoryDatasetHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def pushSubHandler(self, arg0: javawrappers.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getDataset(self, ) -> javawrappers.org.jfree.data.category.CategoryDataset: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addItem(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Comparable, arg2: javawrappers.java.lang.Number, ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCurrentHandler(self, ) -> javawrappers.org.xml.sax.helpers.DefaultHandler: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def getSubHandlers(self, ) -> javawrappers.java.util.Stack: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def popSubHandler(self, ) -> javawrappers.org.xml.sax.helpers.DefaultHandler: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class CategorySeriesHandler:
	def __init__(self, arg0: javawrappers.org.jfree.data.xml.RootHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def addItem(self, arg0: javawrappers.java.lang.Comparable, arg1: javawrappers.java.lang.Number, ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.org.xml.sax.InputSource: ...
	def setSeriesKey(self, arg0: javawrappers.java.lang.Comparable, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


