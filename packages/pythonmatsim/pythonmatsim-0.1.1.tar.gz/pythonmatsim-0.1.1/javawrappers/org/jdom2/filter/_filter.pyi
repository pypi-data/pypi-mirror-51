################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.org.jdom2
import javawrappers.org.jdom2.filter

from jpype.types import *
from typing import Union

from typing import overload

class AttributeFilter:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.Namespace, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.Namespace, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def filter(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.jdom2.Attribute: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def and(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def negate(self, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def refine(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class Filters:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def processinginstruction() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def fclass(arg0: javawrappers.java.lang.Class, ) -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fdouble() -> javawrappers.org.jdom2.filter.Filter: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def fstring() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def document() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def entityref() -> javawrappers.org.jdom2.filter.Filter: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def content() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def cdata() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def doctype() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def fboolean() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def textOnly() -> javawrappers.org.jdom2.filter.Filter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def comment() -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def fpassthrough() -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def attribute() -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def attribute(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def attribute(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.Namespace, ) -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def attribute(arg0: javawrappers.org.jdom2.Namespace, ) -> javawrappers.org.jdom2.filter.Filter: ...
	@staticmethod
	def text() -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def element() -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def element(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def element(arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.Namespace, ) -> javawrappers.org.jdom2.filter.Filter: ...
	@overload
	@staticmethod
	def element(arg0: javawrappers.org.jdom2.Namespace, ) -> javawrappers.org.jdom2.filter.Filter: ...


class AbstractFilter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def notifyAll(self, ) -> None: ...
	def refine(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def filter(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def and(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def negate(self, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ElementFilter:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.jdom2.Namespace, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.jdom2.Namespace, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def filter(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.jdom2.Element: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def and(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def negate(self, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def refine(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class Filter:
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def filter(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	def or_(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def and(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def negate(self, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def refine(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class ContentFilter:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setEntityRefVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def or_(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def setDocTypeVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPIVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setDefaultMask(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setFilterMask(self, arg0: Union[int, JInt], ) -> None: ...
	def refine(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def setCommentVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def filter(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.util.List: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def filter(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.org.jdom2.Content: ...
	def getFilterMask(self, ) -> Union[int, JInt]: ...
	def setDocumentContent(self, ) -> None: ...
	def and(self, arg0: javawrappers.org.jdom2.filter.Filter, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def negate(self, ) -> javawrappers.org.jdom2.filter.Filter: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setCDATAVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setElementVisible(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setElementContent(self, ) -> None: ...
	def setTextVisible(self, arg0: Union[int, JBoolean], ) -> None: ...


