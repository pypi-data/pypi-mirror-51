################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class GeometrySnapper:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def computeSizeBasedSnapTolerance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def computeOverlaySnapTolerance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def computeOverlaySnapTolerance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def snapToSelf(self, arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def snapToSelf(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], arg2: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def snapTo(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def snap(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: Union[float, JDouble], ) -> JArray(javawrappers.org.locationtech.jts.geom.Geometry, 1): ...


class SnapOverlayOp:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResultGeometry(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def overlayOp(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def intersection(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def difference(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def union(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def symDifference(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class SnapIfNeededOverlayOp:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResultGeometry(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def overlayOp(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def intersection(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def difference(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def union(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def symDifference(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class LineStringSnapper:
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.LineString, arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setAllowSnappingToSourceVertices(self, arg0: Union[int, JBoolean], ) -> None: ...
	def snapTo(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...


