################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.triangulate.quadedge
import javawrappers.java.io
import javawrappers.org.locationtech.jts.triangulate
import javawrappers.org.locationtech.jts.index.kdtree
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class VoronoiDiagramBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setClipEnvelope(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, ) -> None: ...
	def getSubdivision(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setSites(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def setSites(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getDiagram(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...
	def setTolerance(self, arg0: Union[float, JDouble], ) -> None: ...


class VertexTaggedGeometryDataMapper:
	def __init__(self, ): ...
	def transferData(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def loadSourceGeometries(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def loadSourceGeometries(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoordinates(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...


class ConstraintVertex:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def classify(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isOnConstraint(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def interpolateZ(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def interpolateZ(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	def isInCircle(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg2: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	def setZ(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...
	def circleCenter(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def setConstraint(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def rightOf(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	def setOnConstraint(self, arg0: Union[int, JBoolean], ) -> None: ...
	def midPoint(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex: ...
	def isCCW(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	def circumRadiusRatio(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[float, JDouble]: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def leftOf(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge, ) -> Union[int, JBoolean]: ...
	def getZ(self, ) -> Union[float, JDouble]: ...
	def getConstraint(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def interpolateZValue(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg1: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, arg2: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> Union[float, JDouble]: ...


class MidpointSplitPointFinder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def findSplitPoint(self, arg0: javawrappers.org.locationtech.jts.triangulate.Segment, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


class SplitSegment:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def splitAt(self, arg0: Union[float, JDouble], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def splitAt(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def getSplitPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setMinimumLength(self, arg0: Union[float, JDouble], ) -> None: ...
	def notify(self, ) -> None: ...


class IncrementalDelaunayTriangulator:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def insertSite(self, arg0: javawrappers.org.locationtech.jts.triangulate.quadedge.Vertex, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdge: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def insertSites(self, arg0: javawrappers.java.util.Collection, ) -> None: ...


class ConstraintEnforcementException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Segment:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], arg6: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], arg4: Union[float, JDouble], arg5: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getStart(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def setData(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getLineSegment(self, ) -> javawrappers.org.locationtech.jts.geom.LineSegment: ...
	def equalsTopo(self, arg0: javawrappers.org.locationtech.jts.triangulate.Segment, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getStartX(self, ) -> Union[float, JDouble]: ...
	def getStartY(self, ) -> Union[float, JDouble]: ...
	def getEndY(self, ) -> Union[float, JDouble]: ...
	def getStartZ(self, ) -> Union[float, JDouble]: ...
	def getEndZ(self, ) -> Union[float, JDouble]: ...
	def getEndX(self, ) -> Union[float, JDouble]: ...
	def getEnd(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def intersection(self, arg0: javawrappers.org.locationtech.jts.triangulate.Segment, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getData(self, ) -> javawrappers.java.lang.Object: ...


class ConformingDelaunayTriangulationBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setConstraints(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getSubdivision(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def setSites(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getTriangles(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...
	def setTolerance(self, arg0: Union[float, JDouble], ) -> None: ...


class ConstraintVertexFactory:
	def createVertex(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.triangulate.Segment, ) -> javawrappers.org.locationtech.jts.triangulate.ConstraintVertex: ...


class ConformingDelaunayTriangulator:
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getConvexHull(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def enforceConstraints(self, ) -> None: ...
	def setConstraints(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, ) -> None: ...
	def setVertexFactory(self, arg0: javawrappers.org.locationtech.jts.triangulate.ConstraintVertexFactory, ) -> None: ...
	def getSubdivision(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision: ...
	def notifyAll(self, ) -> None: ...
	def getInitialVertices(self, ) -> javawrappers.java.util.List: ...
	def getConstraintSegments(self, ) -> javawrappers.java.util.Collection: ...
	def getKDT(self, ) -> javawrappers.org.locationtech.jts.index.kdtree.KdTree: ...
	def notify(self, ) -> None: ...
	def setSplitPointFinder(self, arg0: javawrappers.org.locationtech.jts.triangulate.ConstraintSplitPointFinder, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def insertSite(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTolerance(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getVertexFactory(self, ) -> javawrappers.org.locationtech.jts.triangulate.ConstraintVertexFactory: ...
	def formInitialDelaunay(self, ) -> None: ...


class ConstraintSplitPointFinder:
	def findSplitPoint(self, arg0: javawrappers.org.locationtech.jts.triangulate.Segment, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


class DelaunayTriangulationBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSubdivision(self, ) -> javawrappers.org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def envelope(arg0: javawrappers.java.util.Collection, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def unique(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.org.locationtech.jts.geom.CoordinateList: ...
	@staticmethod
	def extractUniqueCoordinates(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.CoordinateList: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def setSites(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	@overload
	def setSites(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getTriangles(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def toVertices(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.List: ...
	def setTolerance(self, arg0: Union[float, JDouble], ) -> None: ...


class NonEncroachingSplitPointFinder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def projectedSplitPoint(arg0: javawrappers.org.locationtech.jts.triangulate.Segment, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def findSplitPoint(self, arg0: javawrappers.org.locationtech.jts.triangulate.Segment, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...


