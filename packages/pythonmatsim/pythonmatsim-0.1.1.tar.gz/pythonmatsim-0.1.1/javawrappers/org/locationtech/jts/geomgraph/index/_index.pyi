################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.geomgraph.index
import javawrappers.org.locationtech.jts.geomgraph
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class SegmentIntersector:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getProperIntersectionPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def setBoundaryNodes(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.util.Collection, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isAdjacentSegments(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def addIntersections(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.geomgraph.Edge, arg3: Union[int, JInt], ) -> None: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hasProperIntersection(self, ) -> Union[int, JBoolean]: ...
	def hasIntersection(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setIsDoneIfProperInt(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hasProperInteriorIntersection(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class SimpleSweepLineIntersector:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SweepLineSegment:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def computeIntersections(self, arg0: javawrappers.org.locationtech.jts.geomgraph.index.SweepLineSegment, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMaxX(self, ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getMinX(self, ) -> Union[float, JDouble]: ...


class SweepLineEvent:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: javawrappers.org.locationtech.jts.geomgraph.index.SweepLineEvent, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], arg2: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def setDeleteEventIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def isDelete(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getInsertEvent(self, ) -> javawrappers.org.locationtech.jts.geomgraph.index.SweepLineEvent: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def isSameLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.index.SweepLineEvent, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDeleteEventIndex(self, ) -> Union[int, JInt]: ...
	def isInsert(self, ) -> Union[int, JBoolean]: ...


class SimpleMCSweepLineIntersector:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MonotoneChainIndexer:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toIntArray(arg0: javawrappers.java.util.List, ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getChainStartIndices(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...


class SimpleEdgeSetIntersector:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MonotoneChainEdge:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStartIndexes(self, ) -> JArray(Union[int, JInt], 1): ...
	def computeIntersects(self, arg0: javawrappers.org.locationtech.jts.geomgraph.index.MonotoneChainEdge, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	def getMaxX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...
	def getMinX(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def computeIntersectsForChain(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geomgraph.index.MonotoneChainEdge, arg2: Union[int, JInt], arg3: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...


class EdgeSetIntersector:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def computeIntersections(self, arg0: javawrappers.java.util.List, arg1: javawrappers.java.util.List, arg2: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MonotoneChain:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.index.MonotoneChainEdge, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def computeIntersections(self, arg0: javawrappers.org.locationtech.jts.geomgraph.index.MonotoneChain, arg1: javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


