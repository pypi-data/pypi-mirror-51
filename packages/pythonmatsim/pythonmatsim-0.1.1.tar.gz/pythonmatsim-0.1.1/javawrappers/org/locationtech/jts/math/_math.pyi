################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.math

from jpype.types import *
from typing import Union

from typing import overload

class Plane3D:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.math.Vector3D, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def orientedDistance(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def closestAxisPlane(self, ) -> Union[int, JInt]: ...


class MathUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def average(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def min(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def max(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def max(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def log10(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def clamp(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def clamp(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...


class Vector3D:
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def dot(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	@overload
	def dot(self, arg0: javawrappers.org.locationtech.jts.math.Vector3D, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def dot(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def length(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[float, JDouble]: ...
	@overload
	def length(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def getZ(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def normalize(self, ) -> javawrappers.org.locationtech.jts.math.Vector3D: ...
	@overload
	@staticmethod
	def normalize(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.math.Vector3D: ...
	@overload
	@staticmethod
	def create(arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.Vector3D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class DD:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.math.DD, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toStandardNotation(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def rint(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def lt(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> Union[int, JBoolean]: ...
	def isPositive(self, ) -> Union[int, JBoolean]: ...
	def reciprocal(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfMultiply(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfMultiply(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def isNaN(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def selfSqr(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfAdd(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfAdd(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def min(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	@staticmethod
	def sqrt(arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def sqrt(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	@staticmethod
	def sqr(arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def sqr(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfSubtract(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfSubtract(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def isZero(self, ) -> Union[int, JBoolean]: ...
	@overload
	def divide(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@staticmethod
	def copy(arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def dump(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def multiply(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def floor(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def ge(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> Union[int, JBoolean]: ...
	def signum(self, ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	def max(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfDivide(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def selfDivide(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	@staticmethod
	def valueOf(arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def intValue(self, ) -> Union[int, JInt]: ...
	@overload
	def subtract(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def subtract(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def ceil(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def doubleValue(self, ) -> Union[float, JDouble]: ...
	def gt(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> Union[int, JBoolean]: ...
	def toSciNotation(self, ) -> javawrappers.java.lang.String: ...
	def abs(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def trunc(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	def negate(self, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def setValue(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def setValue(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> javawrappers.org.locationtech.jts.math.DD: ...
	@overload
	def equals(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def le(self, arg0: javawrappers.org.locationtech.jts.math.DD, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Matrix:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def solve(arg0: JArray(JArray(Union[float, JDouble], 1), 1), arg1: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Vector2D:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def rotate(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def average(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def distance(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> Union[float, JDouble]: ...
	def toCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notifyAll(self, ) -> None: ...
	def dot(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> Union[float, JDouble]: ...
	def rotateByQuarterCircle(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def notify(self, ) -> None: ...
	def translate(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def normalize(self, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def isParallel(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	@overload
	@staticmethod
	def create(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	@overload
	def angle(self, ) -> Union[float, JDouble]: ...
	@overload
	def angle(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> Union[float, JDouble]: ...
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def weightedSum(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def add(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def angleTo(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> Union[float, JDouble]: ...
	def lengthSquared(self, ) -> Union[float, JDouble]: ...
	def subtract(self, arg0: javawrappers.org.locationtech.jts.math.Vector2D, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def length(self, ) -> Union[float, JDouble]: ...
	def getX(self, ) -> Union[float, JDouble]: ...
	def getY(self, ) -> Union[float, JDouble]: ...
	def negate(self, ) -> javawrappers.org.locationtech.jts.math.Vector2D: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getComponent(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...


